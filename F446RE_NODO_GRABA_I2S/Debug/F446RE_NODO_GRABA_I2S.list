
F446RE_NODO_GRABA_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800bc38  0800bc38  0001bc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd94  0800bd94  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd9c  0800bd9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd9c  0800bd9c  0001bd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800bda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d58  20000074  0800be18  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800be18  00020dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181e4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000364f  00000000  00000000  00038288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0003b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003ccc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d4a  00000000  00000000  0003df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3e5  00000000  00000000  00063c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5004  00000000  00000000  0007f067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015406b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005698  00000000  00000000  001540bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc20 	.word	0x0800bc20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800bc20 	.word	0x0800bc20

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AIC3254_Init>:

/*
 * INIZIALIZE
 */

uint8_t AIC3254_Init(AIC3254_t *dev, I2C_HandleTypeDef *i2cHandle) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]

	/* Init Struct */
	dev->i2cHandle = i2cHandle;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	601a      	str	r2, [r3, #0]
	 * Set Stereo ADC with 48ksps Sample Rate and High Performance
	 */

	/* Initialize to Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f91e 	bl	800082a <AIC3254_SendCommand>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <AIC3254_Init+0x2a>
 80005f8:	2001      	movs	r0, #1
 80005fa:	f00a fe53 	bl	800b2a4 <exit>

	/* S/W Reset to initialize all registers */

	status = AIC3254_SendCommand(dev, SW_RESET, 0x01);
 80005fe:	2201      	movs	r2, #1
 8000600:	2101      	movs	r1, #1
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f911 	bl	800082a <AIC3254_SendCommand>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <AIC3254_Init+0x44>
 8000612:	2001      	movs	r0, #1
 8000614:	f00a fe46 	bl	800b2a4 <exit>

	/* Power up NADC divider with value 1 */

	status = AIC3254_SendCommand(dev, CSR_8, 0x81);
 8000618:	2281      	movs	r2, #129	; 0x81
 800061a:	2112      	movs	r1, #18
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f904 	bl	800082a <AIC3254_SendCommand>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <AIC3254_Init+0x5e>
 800062c:	2001      	movs	r0, #1
 800062e:	f00a fe39 	bl	800b2a4 <exit>

	/* Power up MADC divider with value 2 */

	status = AIC3254_SendCommand(dev, CSR_9, 0x82);
 8000632:	2282      	movs	r2, #130	; 0x82
 8000634:	2113      	movs	r1, #19
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f8f7 	bl	800082a <AIC3254_SendCommand>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <AIC3254_Init+0x78>
 8000646:	2001      	movs	r0, #1
 8000648:	f00a fe2c 	bl	800b2a4 <exit>

	/* Program OSR for ADC to 128 */

	status = AIC3254_SendCommand(dev, AOSR, 0x80);
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	2114      	movs	r1, #20
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f8ea 	bl	800082a <AIC3254_SendCommand>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <AIC3254_Init+0x92>
 8000660:	2001      	movs	r0, #1
 8000662:	f00a fe1f 	bl	800b2a4 <exit>

	/* Select ADC PRB_R1 */

	status = AIC3254_SendCommand(dev, PBCR, 0x01);
 8000666:	2201      	movs	r2, #1
 8000668:	213d      	movs	r1, #61	; 0x3d
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f000 f8dd 	bl	800082a <AIC3254_SendCommand>
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <AIC3254_Init+0xac>
 800067a:	2001      	movs	r0, #1
 800067c:	f00a fe12 	bl	800b2a4 <exit>

	/* Select Page 1 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_1);
 8000680:	2201      	movs	r2, #1
 8000682:	2100      	movs	r1, #0
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f8d0 	bl	800082a <AIC3254_SendCommand>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <AIC3254_Init+0xc6>
 8000694:	2001      	movs	r0, #1
 8000696:	f00a fe05 	bl	800b2a4 <exit>

	/* Disable Internal Crude AVdd in presence of external AVdd supply or before
	 * powering up internal AVdd LDO
	 */

	status = AIC3254_SendCommand(dev, POW_CONF, 0x08);
 800069a:	2208      	movs	r2, #8
 800069c:	2101      	movs	r1, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f8c3 	bl	800082a <AIC3254_SendCommand>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <AIC3254_Init+0xe0>
 80006ae:	2001      	movs	r0, #1
 80006b0:	f00a fdf8 	bl	800b2a4 <exit>

	/* Enable Master Analog Power Control */

	status = AIC3254_SendCommand(dev, LDO_CR, 0x00);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2102      	movs	r1, #2
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f8b6 	bl	800082a <AIC3254_SendCommand>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <AIC3254_Init+0xfa>
 80006c8:	2001      	movs	r0, #1
 80006ca:	f00a fdeb 	bl	800b2a4 <exit>

	/* Set the input common mode to 0.9V */

	status = AIC3254_SendCommand(dev, CMM_CR, 0x00);
 80006ce:	2200      	movs	r2, #0
 80006d0:	210a      	movs	r1, #10
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f8a9 	bl	800082a <AIC3254_SendCommand>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <AIC3254_Init+0x114>
 80006e2:	2001      	movs	r0, #1
 80006e4:	f00a fdde 	bl	800b2a4 <exit>

	/* Select ADC PTM_R4 */

	status = AIC3254_SendCommand(dev, POW_TUN, 0x00);
 80006e8:	2200      	movs	r2, #0
 80006ea:	213d      	movs	r1, #61	; 0x3d
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f89c 	bl	800082a <AIC3254_SendCommand>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <AIC3254_Init+0x12e>
 80006fc:	2001      	movs	r0, #1
 80006fe:	f00a fdd1 	bl	800b2a4 <exit>

	/* Set MicPGA startup delay to 3.1ms */

	status = AIC3254_SendCommand(dev, AIQC_CR, 0x32);
 8000702:	2232      	movs	r2, #50	; 0x32
 8000704:	2147      	movs	r1, #71	; 0x47
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f88f 	bl	800082a <AIC3254_SendCommand>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <AIC3254_Init+0x148>
 8000716:	2001      	movs	r0, #1
 8000718:	f00a fdc4 	bl	800b2a4 <exit>

	/* Set the REF charging time to 40ms */

	status = AIC3254_SendCommand(dev, REF_POW_CR, 0x01);
 800071c:	2201      	movs	r2, #1
 800071e:	217b      	movs	r1, #123	; 0x7b
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f882 	bl	800082a <AIC3254_SendCommand>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <AIC3254_Init+0x162>
 8000730:	2001      	movs	r0, #1
 8000732:	f00a fdb7 	bl	800b2a4 <exit>

	/* Route IN1L to LEFT_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, LROUTE_PCR, 0x80);
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	2134      	movs	r1, #52	; 0x34
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f875 	bl	800082a <AIC3254_SendCommand>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <AIC3254_Init+0x17c>
 800074a:	2001      	movs	r0, #1
 800074c:	f00a fdaa 	bl	800b2a4 <exit>

	/* Route Common Mode to LEFT_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, LROUTE_NCR, 0x80);
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	2136      	movs	r1, #54	; 0x36
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f868 	bl	800082a <AIC3254_SendCommand>
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <AIC3254_Init+0x196>
 8000764:	2001      	movs	r0, #1
 8000766:	f00a fd9d 	bl	800b2a4 <exit>

	/* Route IN1R to Right_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, RROUTE_PCR, 0x80);
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	2137      	movs	r1, #55	; 0x37
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f85b 	bl	800082a <AIC3254_SendCommand>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <AIC3254_Init+0x1b0>
 800077e:	2001      	movs	r0, #1
 8000780:	f00a fd90 	bl	800b2a4 <exit>

	/* Route Common Mode to Right_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, RROUTE_NCR, 0x80);
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	2139      	movs	r1, #57	; 0x39
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f84e 	bl	800082a <AIC3254_SendCommand>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <AIC3254_Init+0x1ca>
 8000798:	2001      	movs	r0, #1
 800079a:	f00a fd83 	bl	800b2a4 <exit>

	/* Unmute Left MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, LVOLUME_CR, 0x0c);
 800079e:	220c      	movs	r2, #12
 80007a0:	213b      	movs	r1, #59	; 0x3b
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f841 	bl	800082a <AIC3254_SendCommand>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <AIC3254_Init+0x1e4>
 80007b2:	2001      	movs	r0, #1
 80007b4:	f00a fd76 	bl	800b2a4 <exit>

	/* Unmute Right MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, RVOLUME_CR, 0x0c);
 80007b8:	220c      	movs	r2, #12
 80007ba:	213c      	movs	r1, #60	; 0x3c
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f834 	bl	800082a <AIC3254_SendCommand>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <AIC3254_Init+0x1fe>
 80007cc:	2001      	movs	r0, #1
 80007ce:	f00a fd69 	bl	800b2a4 <exit>

	/* Select Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f827 	bl	800082a <AIC3254_SendCommand>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <AIC3254_Init+0x218>
 80007e6:	2001      	movs	r0, #1
 80007e8:	f00a fd5c 	bl	800b2a4 <exit>

	/* Power up Left and Right ADC Channels */

	status = AIC3254_SendCommand(dev, CH_SETUP, 0xc0);
 80007ec:	22c0      	movs	r2, #192	; 0xc0
 80007ee:	2151      	movs	r1, #81	; 0x51
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f81a 	bl	800082a <AIC3254_SendCommand>
 80007f6:	4603      	mov	r3, r0
 80007f8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <AIC3254_Init+0x232>
 8000800:	2001      	movs	r0, #1
 8000802:	f00a fd4f 	bl	800b2a4 <exit>

	/* Unmute Left and Right ADC Digital Volume Control */

	status = AIC3254_SendCommand(dev, CH_GAIN, 0x00);
 8000806:	2200      	movs	r2, #0
 8000808:	2152      	movs	r1, #82	; 0x52
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f80d 	bl	800082a <AIC3254_SendCommand>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <AIC3254_Init+0x24c>
 800081a:	2001      	movs	r0, #1
 800081c:	f00a fd42 	bl	800b2a4 <exit>

	return status;
 8000820:	7bfb      	ldrb	r3, [r7, #15]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <AIC3254_SendCommand>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef AIC3254_SendCommand(AIC3254_t *dev, uint8_t Register, uint8_t Data) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af04      	add	r7, sp, #16
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	460b      	mov	r3, r1
 8000834:	70fb      	strb	r3, [r7, #3]
 8000836:	4613      	mov	r3, r2
 8000838:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, AIC3254_I2C_ADDR , Register, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	78fb      	ldrb	r3, [r7, #3]
 8000840:	b29a      	uxth	r2, r3
 8000842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	2301      	movs	r3, #1
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	1cbb      	adds	r3, r7, #2
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2301      	movs	r3, #1
 8000852:	2130      	movs	r1, #48	; 0x30
 8000854:	f002 f95e 	bl	8002b14 <HAL_I2C_Mem_Write>
 8000858:	4603      	mov	r3, r0

}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0c2      	sub	sp, #264	; 0x108
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f001 f869 	bl	8001940 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086e:	f000 f8b9 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 fa25 	bl	8000cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000876:	f000 f9e5 	bl	8000c44 <MX_DMA_Init>
  MX_I2C1_Init();
 800087a:	f000 f93b 	bl	8000af4 <MX_I2C1_Init>
  MX_I2S2_Init();
 800087e:	f000 f967 	bl	8000b50 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8000882:	f000 f993 	bl	8000bac <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000886:	f007 fd0d 	bl	80082a4 <MX_FATFS_Init>
  MX_CRC_Init();
 800088a:	f000 f91f 	bl	8000acc <MX_CRC_Init>
  MX_USART2_UART_Init();
 800088e:	f000 f9af 	bl	8000bf0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize CODEC */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000898:	4847      	ldr	r0, [pc, #284]	; (80009b8 <main+0x154>)
 800089a:	f001 ffc3 	bl	8002824 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f001 f8c0 	bl	8001a24 <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008aa:	4843      	ldr	r0, [pc, #268]	; (80009b8 <main+0x154>)
 80008ac:	f001 ffba 	bl	8002824 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f001 f8b7 	bl	8001a24 <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008bc:	483e      	ldr	r0, [pc, #248]	; (80009b8 <main+0x154>)
 80008be:	f001 ffb1 	bl	8002824 <HAL_GPIO_WritePin>
  AIC3254_Init(&codec, &hi2c1);
 80008c2:	493e      	ldr	r1, [pc, #248]	; (80009bc <main+0x158>)
 80008c4:	483e      	ldr	r0, [pc, #248]	; (80009c0 <main+0x15c>)
 80008c6:	f7ff fe85 	bl	80005d4 <AIC3254_Init>
  /* USER CODE BEGIN WHILE */
  char filename[256];

  do
  {
	  res = f_mount(&SDFatFS, SDPath, 1);
 80008ca:	2201      	movs	r2, #1
 80008cc:	493d      	ldr	r1, [pc, #244]	; (80009c4 <main+0x160>)
 80008ce:	483e      	ldr	r0, [pc, #248]	; (80009c8 <main+0x164>)
 80008d0:	f009 fcda 	bl	800a288 <f_mount>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <main+0x168>)
 80008da:	701a      	strb	r2, [r3, #0]
  }
  while( res != FR_OK);
 80008dc:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <main+0x168>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1f2      	bne.n	80008ca <main+0x66>

  do
  {
	  res = Format_SD();
 80008e4:	f000 fbe0 	bl	80010a8 <Format_SD>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <main+0x168>)
 80008ee:	701a      	strb	r2, [r3, #0]
  }
  while (res != FR_OK);
 80008f0:	4b36      	ldr	r3, [pc, #216]	; (80009cc <main+0x168>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f5      	bne.n	80008e4 <main+0x80>

  HAL_UART_Receive_IT(&huart2, (uint8_t *) RX_data, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	4935      	ldr	r1, [pc, #212]	; (80009d0 <main+0x16c>)
 80008fc:	4835      	ldr	r0, [pc, #212]	; (80009d4 <main+0x170>)
 80008fe:	f006 f833 	bl	8006968 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000908:	4833      	ldr	r0, [pc, #204]	; (80009d8 <main+0x174>)
 800090a:	f001 ff8b 	bl	8002824 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000914:	4830      	ldr	r0, [pc, #192]	; (80009d8 <main+0x174>)
 8000916:	f001 ff85 	bl	8002824 <HAL_GPIO_WritePin>
  do
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800091a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091e:	482e      	ldr	r0, [pc, #184]	; (80009d8 <main+0x174>)
 8000920:	f001 ff99 	bl	8002856 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	482b      	ldr	r0, [pc, #172]	; (80009d8 <main+0x174>)
 800092a:	f001 ff94 	bl	8002856 <HAL_GPIO_TogglePin>
	  HAL_Delay(150);
 800092e:	2096      	movs	r0, #150	; 0x96
 8000930:	f001 f878 	bl	8001a24 <HAL_Delay>
  }
  while(audio_state == CONNECTING);
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <main+0x178>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b04      	cmp	r3, #4
 800093a:	d0ee      	beq.n	800091a <main+0xb6>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000942:	4825      	ldr	r0, [pc, #148]	; (80009d8 <main+0x174>)
 8000944:	f001 ff6e 	bl	8002824 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094e:	4822      	ldr	r0, [pc, #136]	; (80009d8 <main+0x174>)
 8000950:	f001 ff68 	bl	8002824 <HAL_GPIO_WritePin>

  for (int i = 0; i < 4; i++)
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800095a:	e012      	b.n	8000982 <main+0x11e>
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800095c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000960:	481d      	ldr	r0, [pc, #116]	; (80009d8 <main+0x174>)
 8000962:	f001 ff78 	bl	8002856 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096a:	481b      	ldr	r0, [pc, #108]	; (80009d8 <main+0x174>)
 800096c:	f001 ff73 	bl	8002856 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000970:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000974:	f001 f856 	bl	8001a24 <HAL_Delay>
  for (int i = 0; i < 4; i++)
 8000978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800097c:	3301      	adds	r3, #1
 800097e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000986:	2b03      	cmp	r3, #3
 8000988:	dde8      	ble.n	800095c <main+0xf8>


  uint16_t count;
  while (1)
  {
	  if(audio_state == STATE_START_RECORDING)
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <main+0x178>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d1fb      	bne.n	800098a <main+0x126>
	  {
		  HAL_Delay(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f001 f846 	bl	8001a24 <HAL_Delay>
		  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 8000998:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	f8a7 2102 	strh.w	r2, [r7, #258]	; 0x102
 80009a2:	4638      	mov	r0, r7
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <main+0x160>)
 80009a6:	490e      	ldr	r1, [pc, #56]	; (80009e0 <main+0x17c>)
 80009a8:	f00a fdbc 	bl	800b524 <siprintf>
		  startRecord(filename);
 80009ac:	463b      	mov	r3, r7
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 faa2 	bl	8000ef8 <startRecord>
	  if(audio_state == STATE_START_RECORDING)
 80009b4:	e7e9      	b.n	800098a <main+0x126>
 80009b6:	bf00      	nop
 80009b8:	40020400 	.word	0x40020400
 80009bc:	20000098 	.word	0x20000098
 80009c0:	2000031c 	.word	0x2000031c
 80009c4:	20000b54 	.word	0x20000b54
 80009c8:	20000b58 	.word	0x20000b58
 80009cc:	20000b28 	.word	0x20000b28
 80009d0:	20000b2c 	.word	0x20000b2c
 80009d4:	200002d8 	.word	0x200002d8
 80009d8:	40020000 	.word	0x40020000
 80009dc:	20000002 	.word	0x20000002
 80009e0:	0800bc38 	.word	0x0800bc38

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	2234      	movs	r2, #52	; 0x34
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f00a fc9e 	bl	800b334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <SystemClock_Config+0xe0>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a2c      	ldr	r2, [pc, #176]	; (8000ac4 <SystemClock_Config+0xe0>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <SystemClock_Config+0xe0>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <SystemClock_Config+0xe4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a30:	4a25      	ldr	r2, [pc, #148]	; (8000ac8 <SystemClock_Config+0xe4>)
 8000a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <SystemClock_Config+0xe4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a50:	2302      	movs	r3, #2
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a54:	2300      	movs	r3, #0
 8000a56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a5c:	23a8      	movs	r3, #168	; 0xa8
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a64:	2307      	movs	r3, #7
 8000a66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4618      	mov	r0, r3
 8000a72:	f004 f86f 	bl	8004b54 <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a7c:	f000 fbae 	bl	80011dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a80:	f002 ff64 	bl	800394c <HAL_PWREx_EnableOverDrive>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a8a:	f000 fba7 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8e:	230f      	movs	r3, #15
 8000a90:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a92:	2302      	movs	r3, #2
 8000a94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2105      	movs	r1, #5
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 ff9d 	bl	80039ec <HAL_RCC_ClockConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ab8:	f000 fb90 	bl	80011dc <Error_Handler>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3750      	adds	r7, #80	; 0x50
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40007000 	.word	0x40007000

08000acc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_CRC_Init+0x20>)
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <MX_CRC_Init+0x24>)
 8000ad4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_CRC_Init+0x20>)
 8000ad8:	f001 f8d9 	bl	8001c8e <HAL_CRC_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ae2:	f000 fb7b 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000090 	.word	0x20000090
 8000af0:	40023000 	.word	0x40023000

08000af4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <MX_I2C1_Init+0x54>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_I2C1_Init+0x58>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b32:	f001 feab 	bl	800288c <HAL_I2C_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f000 fb4e 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000098 	.word	0x20000098
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	000186a0 	.word	0x000186a0

08000b50 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_I2S2_Init+0x54>)
 8000b56:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <MX_I2S2_Init+0x58>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_I2S2_Init+0x54>)
 8000b5c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b60:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_I2S2_Init+0x54>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_I2S2_Init+0x54>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_I2S2_Init+0x54>)
 8000b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b74:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_I2S2_Init+0x54>)
 8000b78:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000b7c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_I2S2_Init+0x54>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_I2S2_Init+0x54>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_I2S2_Init+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_I2S2_Init+0x54>)
 8000b92:	f002 fad7 	bl	8003144 <HAL_I2S_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000b9c:	f000 fb1e 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000ec 	.word	0x200000ec
 8000ba8:	40003800 	.word	0x40003800

08000bac <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_SDIO_SD_Init+0x3c>)
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <MX_SDIO_SD_Init+0x40>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_SDIO_SD_Init+0x3c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_SDIO_SD_Init+0x3c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_SDIO_SD_Init+0x3c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_SDIO_SD_Init+0x3c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_SDIO_SD_Init+0x3c>)
 8000bd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bd4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <MX_SDIO_SD_Init+0x3c>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000194 	.word	0x20000194
 8000bec:	40012c00 	.word	0x40012c00

08000bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_USART2_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c28:	f005 fe51 	bl	80068ce <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f000 fad3 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200002d8 	.word	0x200002d8
 8000c40:	40004400 	.word	0x40004400

08000c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_DMA_Init+0x78>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a1a      	ldr	r2, [pc, #104]	; (8000cbc <MX_DMA_Init+0x78>)
 8000c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_DMA_Init+0x78>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_DMA_Init+0x78>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <MX_DMA_Init+0x78>)
 8000c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_DMA_Init+0x78>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	200e      	movs	r0, #14
 8000c88:	f000 ffcb 	bl	8001c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c8c:	200e      	movs	r0, #14
 8000c8e:	f000 ffe4 	bl	8001c5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	203b      	movs	r0, #59	; 0x3b
 8000c98:	f000 ffc3 	bl	8001c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c9c:	203b      	movs	r0, #59	; 0x3b
 8000c9e:	f000 ffdc 	bl	8001c5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2045      	movs	r0, #69	; 0x45
 8000ca8:	f000 ffbb 	bl	8001c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cac:	2045      	movs	r0, #69	; 0x45
 8000cae:	f000 ffd4 	bl	8001c5a <HAL_NVIC_EnableIRQ>

}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a3e      	ldr	r2, [pc, #248]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a37      	ldr	r2, [pc, #220]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a30      	ldr	r2, [pc, #192]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_GPIO_Init+0x118>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d68:	481c      	ldr	r0, [pc, #112]	; (8000ddc <MX_GPIO_Init+0x11c>)
 8000d6a:	f001 fd5b 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000d74:	481a      	ldr	r0, [pc, #104]	; (8000de0 <MX_GPIO_Init+0x120>)
 8000d76:	f001 fd55 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <MX_GPIO_Init+0x11c>)
 8000d94:	f001 fb9a 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_SDIO_API_Pin */
  GPIO_InitStruct.Pin = BSP_SDIO_API_Pin;
 8000d98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_SDIO_API_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <MX_GPIO_Init+0x11c>)
 8000dae:	f001 fb8d 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000db2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_GPIO_Init+0x120>)
 8000dcc:	f001 fb7e 	bl	80024cc <HAL_GPIO_Init>

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020000 	.word	0x40020000

08000de4 <HAL_I2S_RxCpltCallback>:
	f_close(&fout);
	f_close(&fin);
}


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	uint8_t rcvCplt = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]
	uint16_t* rpt, *wpt, *temppt;

	rCount++;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_I2S_RxCpltCallback+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_I2S_RxCpltCallback+0x40>)
 8000df8:	6013      	str	r3, [r2, #0]
	rpt = (rcvBuf)+(rCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_I2S_RxCpltCallback+0x40>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <HAL_I2S_RxCpltCallback+0x44>)
 8000e04:	8812      	ldrh	r2, [r2, #0]
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_I2S_RxCpltCallback+0x48>)
 8000e0e:	4413      	add	r3, r2
 8000e10:	60bb      	str	r3, [r7, #8]
	HAL_I2S_Receive_DMA(hi2s, rpt, DMA_READ_SIZE);
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f002 fa8c 	bl	8003334 <HAL_I2S_Receive_DMA>
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000b20 	.word	0x20000b20
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000320 	.word	0x20000320

08000e30 <fwrite_wav_header>:

FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4603      	mov	r3, r0
 8000e40:	807b      	strh	r3, [r7, #2]
 8000e42:	460b      	mov	r3, r1
 8000e44:	707b      	strb	r3, [r7, #1]
 8000e46:	4613      	mov	r3, r2
 8000e48:	703b      	strb	r3, [r7, #0]
	UINT bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000e4a:	2352      	movs	r3, #82	; 0x52
 8000e4c:	723b      	strb	r3, [r7, #8]
 8000e4e:	2349      	movs	r3, #73	; 0x49
 8000e50:	727b      	strb	r3, [r7, #9]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000e52:	2346      	movs	r3, #70	; 0x46
 8000e54:	72bb      	strb	r3, [r7, #10]
 8000e56:	2346      	movs	r3, #70	; 0x46
 8000e58:	72fb      	strb	r3, [r7, #11]
	wave_header.size = (uint32_t)0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000e5e:	2357      	movs	r3, #87	; 0x57
 8000e60:	743b      	strb	r3, [r7, #16]
 8000e62:	2341      	movs	r3, #65	; 0x41
 8000e64:	747b      	strb	r3, [r7, #17]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000e66:	2356      	movs	r3, #86	; 0x56
 8000e68:	74bb      	strb	r3, [r7, #18]
 8000e6a:	2345      	movs	r3, #69	; 0x45
 8000e6c:	74fb      	strb	r3, [r7, #19]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000e6e:	2366      	movs	r3, #102	; 0x66
 8000e70:	753b      	strb	r3, [r7, #20]
 8000e72:	236d      	movs	r3, #109	; 0x6d
 8000e74:	757b      	strb	r3, [r7, #21]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000e76:	2374      	movs	r3, #116	; 0x74
 8000e78:	75bb      	strb	r3, [r7, #22]
 8000e7a:	2320      	movs	r3, #32
 8000e7c:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt_size = 16;
 8000e7e:	2310      	movs	r3, #16
 8000e80:	61bb      	str	r3, [r7, #24]
	wave_header.format = 1; // PCM
 8000e82:	2301      	movs	r3, #1
 8000e84:	83bb      	strh	r3, [r7, #28]
	wave_header.channels = channels; // channels
 8000e86:	783b      	ldrb	r3, [r7, #0]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	83fb      	strh	r3, [r7, #30]
	wave_header.sampleRate=sampleRate;  // sample rate
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	623b      	str	r3, [r7, #32]
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	787a      	ldrb	r2, [r7, #1]
 8000e94:	fb02 f303 	mul.w	r3, r2, r3
 8000e98:	783a      	ldrb	r2, [r7, #0]
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	da00      	bge.n	8000ea4 <fwrite_wav_header+0x74>
 8000ea2:	3307      	adds	r3, #7
 8000ea4:	10db      	asrs	r3, r3, #3
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.bc =  bitsPerSample*channels/8;
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	783a      	ldrb	r2, [r7, #0]
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	da00      	bge.n	8000eb6 <fwrite_wav_header+0x86>
 8000eb4:	3307      	adds	r3, #7
 8000eb6:	10db      	asrs	r3, r3, #3
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	853b      	strh	r3, [r7, #40]	; 0x28
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000ebc:	787b      	ldrb	r3, [r7, #1]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	857b      	strh	r3, [r7, #42]	; 0x2a
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000ec2:	2364      	movs	r3, #100	; 0x64
 8000ec4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000ec8:	2361      	movs	r3, #97	; 0x61
 8000eca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000ece:	2374      	movs	r3, #116	; 0x74
 8000ed0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000ed4:	2361      	movs	r3, #97	; 0x61
 8000ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	wave_header.data_size = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), &bw);
 8000ede:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee2:	f107 0108 	add.w	r1, r7, #8
 8000ee6:	222c      	movs	r2, #44	; 0x2c
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f009 fbd1 	bl	800a690 <f_write>
 8000eee:	4603      	mov	r3, r0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3738      	adds	r7, #56	; 0x38
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <startRecord>:

void startRecord(char *filename) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000f04:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000f08:	6018      	str	r0, [r3, #0]
	uint16_t* rpt, *wpt, *temppt;
	UINT bw;
	UINT writeBytes;
	UINT skipCount=125;// skip 0.5 second
 8000f0a:	237d      	movs	r3, #125	; 0x7d
 8000f0c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	FIL fp;
	FRESULT res;

	writeBytes = DMA_TxRx_SIZE*2;
 8000f10:	4b5e      	ldr	r3, [pc, #376]	; (800108c <startRecord+0x194>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	do
	{
		res = f_open(&fp, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000f1a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000f1e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000f22:	f107 0010 	add.w	r0, r7, #16
 8000f26:	220a      	movs	r2, #10
 8000f28:	6819      	ldr	r1, [r3, #0]
 8000f2a:	f009 f9f3 	bl	800a314 <f_open>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
	}
	while(res != FR_OK);
 8000f34:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1ee      	bne.n	8000f1a <startRecord+0x22>
	res = fwrite_wav_header(&fp, 48000, 32, 2);
 8000f3c:	f107 0010 	add.w	r0, r7, #16
 8000f40:	2302      	movs	r3, #2
 8000f42:	2220      	movs	r2, #32
 8000f44:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000f48:	f7ff ff72 	bl	8000e30 <fwrite_wav_header>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f58:	484d      	ldr	r0, [pc, #308]	; (8001090 <startRecord+0x198>)
 8000f5a:	f001 fc63 	bl	8002824 <HAL_GPIO_WritePin>
	audio_state = STATE_RECORDING;
 8000f5e:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <startRecord+0x19c>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	701a      	strb	r2, [r3, #0]
	rpt = rcvBuf;
 8000f64:	4b4c      	ldr	r3, [pc, #304]	; (8001098 <startRecord+0x1a0>)
 8000f66:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	wpt = rpt;
 8000f6a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000f6e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	rCount=0; wCount=0;
 8000f72:	4b4a      	ldr	r3, [pc, #296]	; (800109c <startRecord+0x1a4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	4b49      	ldr	r3, [pc, #292]	; (80010a0 <startRecord+0x1a8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
	HAL_I2S_Receive_DMA(&hi2s2, rpt, DMA_READ_SIZE);
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8000f84:	4847      	ldr	r0, [pc, #284]	; (80010a4 <startRecord+0x1ac>)
 8000f86:	f002 f9d5 	bl	8003334 <HAL_I2S_Receive_DMA>

	while (1)
	{
		if (wCount < rCount ) {
 8000f8a:	4b45      	ldr	r3, [pc, #276]	; (80010a0 <startRecord+0x1a8>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <startRecord+0x1a4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d224      	bcs.n	8000fe0 <startRecord+0xe8>
			if (rCount > skipCount)
 8000f96:	4b41      	ldr	r3, [pc, #260]	; (800109c <startRecord+0x1a4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d20c      	bcs.n	8000fbc <startRecord+0xc4>
			{
				res = f_write(&fp, wpt, writeBytes, &bw);
 8000fa2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000fa6:	f107 0010 	add.w	r0, r7, #16
 8000faa:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000fae:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8000fb2:	f009 fb6d 	bl	800a690 <f_write>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
			}
			 wCount++;
 8000fbc:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <startRecord+0x1a8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a37      	ldr	r2, [pc, #220]	; (80010a0 <startRecord+0x1a8>)
 8000fc4:	6013      	str	r3, [r2, #0]
			 wpt = (rcvBuf)+(wCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000fc6:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <startRecord+0x1a8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	4a2f      	ldr	r2, [pc, #188]	; (800108c <startRecord+0x194>)
 8000fd0:	8812      	ldrh	r2, [r2, #0]
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4a2f      	ldr	r2, [pc, #188]	; (8001098 <startRecord+0x1a0>)
 8000fda:	4413      	add	r3, r2
 8000fdc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		  }

		  if (audio_state == STATE_STOP || rCount > MAX_DMA_ACCESS_COUNT)
 8000fe0:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <startRecord+0x19c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d004      	beq.n	8000ff2 <startRecord+0xfa>
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <startRecord+0x1a4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000ff0:	d9cb      	bls.n	8000f8a <startRecord+0x92>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 8000ff2:	482c      	ldr	r0, [pc, #176]	; (80010a4 <startRecord+0x1ac>)
 8000ff4:	f002 fa5a 	bl	80034ac <HAL_I2S_DMAStop>
			  break;
 8000ff8:	bf00      	nop
		  }
	}
	uint32_t data_len = (wCount-1) * writeBytes;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <startRecord+0x1a8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8001004:	fb03 f202 	mul.w	r2, r3, r2
 8001008:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800100c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001010:	601a      	str	r2, [r3, #0]
	uint32_t total_len = data_len+36;
 8001012:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001020:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001024:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001028:	601a      	str	r2, [r3, #0]
	f_lseek(&fp, 4);
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	2104      	movs	r1, #4
 8001030:	4618      	mov	r0, r3
 8001032:	f009 fd4a 	bl	800aaca <f_lseek>
	f_write(&fp, (uint8_t*)&total_len, 4, &bw);
 8001036:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800103a:	f107 0108 	add.w	r1, r7, #8
 800103e:	f107 0010 	add.w	r0, r7, #16
 8001042:	2204      	movs	r2, #4
 8001044:	f009 fb24 	bl	800a690 <f_write>
	f_lseek(&fp, 40);
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	2128      	movs	r1, #40	; 0x28
 800104e:	4618      	mov	r0, r3
 8001050:	f009 fd3b 	bl	800aaca <f_lseek>
	f_write(&fp, (uint8_t*)&data_len, 4, &bw);
 8001054:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001058:	f107 010c 	add.w	r1, r7, #12
 800105c:	f107 0010 	add.w	r0, r7, #16
 8001060:	2204      	movs	r2, #4
 8001062:	f009 fb15 	bl	800a690 <f_write>
	f_close(&fp);
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4618      	mov	r0, r3
 800106c:	f009 fd03 	bl	800aa76 <f_close>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <startRecord+0x198>)
 8001078:	f001 fbd4 	bl	8002824 <HAL_GPIO_WritePin>
	audio_state = STATE_STOP;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <startRecord+0x19c>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
}
 8001082:	bf00      	nop
 8001084:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	40020000 	.word	0x40020000
 8001094:	20000002 	.word	0x20000002
 8001098:	20000320 	.word	0x20000320
 800109c:	20000b20 	.word	0x20000b20
 80010a0:	20000b24 	.word	0x20000b24
 80010a4:	200000ec 	.word	0x200000ec

080010a8 <Format_SD>:

FRESULT Format_SD (void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	; 0x38
 80010ac:	af00      	add	r7, sp, #0
    DIR dir;
    static FILINFO fno;
    static FRESULT fresult;

    char *path = malloc(20*sizeof (char));
 80010ae:	2014      	movs	r0, #20
 80010b0:	f00a f930 	bl	800b314 <malloc>
 80010b4:	4603      	mov	r3, r0
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80010b8:	4a28      	ldr	r2, [pc, #160]	; (800115c <Format_SD+0xb4>)
 80010ba:	4929      	ldr	r1, [pc, #164]	; (8001160 <Format_SD+0xb8>)
 80010bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010be:	f00a fa31 	bl	800b524 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010c6:	4618      	mov	r0, r3
 80010c8:	f009 ff08 	bl	800aedc <f_opendir>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <Format_SD+0xbc>)
 80010d2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <Format_SD+0xbc>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d136      	bne.n	800114a <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4922      	ldr	r1, [pc, #136]	; (8001168 <Format_SD+0xc0>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f009 ff94 	bl	800b00e <f_readdir>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <Format_SD+0xbc>)
 80010ec:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <Format_SD+0xbc>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d125      	bne.n	8001142 <Format_SD+0x9a>
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <Format_SD+0xc0>)
 80010f8:	7a5b      	ldrb	r3, [r3, #9]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d021      	beq.n	8001142 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <Format_SD+0xc0>)
 8001100:	7a1b      	ldrb	r3, [r3, #8]
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b00      	cmp	r3, #0
 8001108:	d011      	beq.n	800112e <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800110a:	4918      	ldr	r1, [pc, #96]	; (800116c <Format_SD+0xc4>)
 800110c:	4818      	ldr	r0, [pc, #96]	; (8001170 <Format_SD+0xc8>)
 800110e:	f7ff f87f 	bl	8000210 <strcmp>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d012      	beq.n	800113e <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <Format_SD+0xc4>)
 800111a:	f009 ffb5 	bl	800b088 <f_unlink>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <Format_SD+0xbc>)
 8001124:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <Format_SD+0xbc>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b07      	cmp	r3, #7
 800112c:	e7d6      	b.n	80010dc <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 800112e:	480f      	ldr	r0, [pc, #60]	; (800116c <Format_SD+0xc4>)
 8001130:	f009 ffaa 	bl	800b088 <f_unlink>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <Format_SD+0xbc>)
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e7ce      	b.n	80010dc <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800113e:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001140:	e7cc      	b.n	80010dc <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4618      	mov	r0, r3
 8001146:	f009 ff3c 	bl	800afc2 <f_closedir>
    }
    free(path);
 800114a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800114c:	f00a f8ea 	bl	800b324 <free>
    return fresult;
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <Format_SD+0xbc>)
 8001152:	781b      	ldrb	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3738      	adds	r7, #56	; 0x38
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	0800bc50 	.word	0x0800bc50
 8001160:	0800bc54 	.word	0x0800bc54
 8001164:	20000b2d 	.word	0x20000b2d
 8001168:	20000b30 	.word	0x20000b30
 800116c:	20000b39 	.word	0x20000b39
 8001170:	0800bc58 	.word	0x0800bc58

08001174 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

	switch (RX_data[0])
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_UART_RxCpltCallback+0x5c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b50      	cmp	r3, #80	; 0x50
 8001182:	d00e      	beq.n	80011a2 <HAL_UART_RxCpltCallback+0x2e>
 8001184:	2b50      	cmp	r3, #80	; 0x50
 8001186:	dc18      	bgt.n	80011ba <HAL_UART_RxCpltCallback+0x46>
 8001188:	2b47      	cmp	r3, #71	; 0x47
 800118a:	d006      	beq.n	800119a <HAL_UART_RxCpltCallback+0x26>
 800118c:	2b47      	cmp	r3, #71	; 0x47
 800118e:	dc14      	bgt.n	80011ba <HAL_UART_RxCpltCallback+0x46>
 8001190:	2b2b      	cmp	r3, #43	; 0x2b
 8001192:	d00e      	beq.n	80011b2 <HAL_UART_RxCpltCallback+0x3e>
 8001194:	2b2e      	cmp	r3, #46	; 0x2e
 8001196:	d008      	beq.n	80011aa <HAL_UART_RxCpltCallback+0x36>
		break;
	case '+':
		audio_state = STATE_STOP;
		break;
	default:
		break;
 8001198:	e00f      	b.n	80011ba <HAL_UART_RxCpltCallback+0x46>
		audio_state = STATE_START_RECORDING;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_UART_RxCpltCallback+0x60>)
 800119c:	2203      	movs	r2, #3
 800119e:	701a      	strb	r2, [r3, #0]
		break;
 80011a0:	e00c      	b.n	80011bc <HAL_UART_RxCpltCallback+0x48>
		audio_state = STATE_STOP;
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_UART_RxCpltCallback+0x60>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
		break;
 80011a8:	e008      	b.n	80011bc <HAL_UART_RxCpltCallback+0x48>
		audio_state = CONNECTING;
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_UART_RxCpltCallback+0x60>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	701a      	strb	r2, [r3, #0]
		break;
 80011b0:	e004      	b.n	80011bc <HAL_UART_RxCpltCallback+0x48>
		audio_state = STATE_STOP;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_UART_RxCpltCallback+0x60>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
		break;
 80011b8:	e000      	b.n	80011bc <HAL_UART_RxCpltCallback+0x48>
		break;
 80011ba:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *) RX_data, 1);
 80011bc:	2201      	movs	r2, #1
 80011be:	4904      	ldr	r1, [pc, #16]	; (80011d0 <HAL_UART_RxCpltCallback+0x5c>)
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_UART_RxCpltCallback+0x64>)
 80011c2:	f005 fbd1 	bl	8006968 <HAL_UART_Receive_IT>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000b2c 	.word	0x20000b2c
 80011d4:	20000002 	.word	0x20000002
 80011d8:	200002d8 	.word	0x200002d8

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <Error_Handler+0x8>
	...

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <HAL_MspInit+0x4c>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x4c>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_CRC_MspInit+0x3c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d10d      	bne.n	8001266 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_CRC_MspInit+0x40>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_CRC_MspInit+0x40>)
 8001254:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_CRC_MspInit+0x40>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023000 	.word	0x40023000
 8001278:	40023800 	.word	0x40023800

0800127c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_I2C_MspInit+0x84>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d12b      	bne.n	80012f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ba:	23c0      	movs	r3, #192	; 0xc0
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ca:	2304      	movs	r3, #4
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <HAL_I2C_MspInit+0x8c>)
 80012d6:	f001 f8f9 	bl	80024cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40005400 	.word	0x40005400
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400

0800130c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0a2      	sub	sp, #136	; 0x88
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	225c      	movs	r2, #92	; 0x5c
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f00a f801 	bl	800b334 <memset>
  if(hi2s->Instance==SPI2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a50      	ldr	r2, [pc, #320]	; (8001478 <HAL_I2S_MspInit+0x16c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	f040 8098 	bne.w	800146e <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 800133e:	2301      	movs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001342:	2332      	movs	r3, #50	; 0x32
 8001344:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001346:	2302      	movs	r3, #2
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 800134a:	2308      	movs	r3, #8
 800134c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800134e:	2302      	movs	r3, #2
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800135a:	2300      	movs	r3, #0
 800135c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fc5c 	bl	8003c20 <HAL_RCCEx_PeriphCLKConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 800136e:	f7ff ff35 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_I2S_MspInit+0x170>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a40      	ldr	r2, [pc, #256]	; (800147c <HAL_I2S_MspInit+0x170>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <HAL_I2S_MspInit+0x170>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <HAL_I2S_MspInit+0x170>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a39      	ldr	r2, [pc, #228]	; (800147c <HAL_I2S_MspInit+0x170>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <HAL_I2S_MspInit+0x170>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b33      	ldr	r3, [pc, #204]	; (800147c <HAL_I2S_MspInit+0x170>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a32      	ldr	r2, [pc, #200]	; (800147c <HAL_I2S_MspInit+0x170>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <HAL_I2S_MspInit+0x170>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80013c6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80013ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013da:	2305      	movs	r3, #5
 80013dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013e4:	4619      	mov	r1, r3
 80013e6:	4826      	ldr	r0, [pc, #152]	; (8001480 <HAL_I2S_MspInit+0x174>)
 80013e8:	f001 f870 	bl	80024cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013fe:	2305      	movs	r3, #5
 8001400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001408:	4619      	mov	r1, r3
 800140a:	481e      	ldr	r0, [pc, #120]	; (8001484 <HAL_I2S_MspInit+0x178>)
 800140c:	f001 f85e 	bl	80024cc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <HAL_I2S_MspInit+0x180>)
 8001414:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 800142a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 8001432:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001436:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 800143a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 8001454:	f000 fc38 	bl	8001cc8 <HAL_DMA_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 800145e:	f7ff febd 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 8001466:	63da      	str	r2, [r3, #60]	; 0x3c
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_I2S_MspInit+0x17c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3788      	adds	r7, #136	; 0x88
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40003800 	.word	0x40003800
 800147c:	40023800 	.word	0x40023800
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	20000134 	.word	0x20000134
 800148c:	40026058 	.word	0x40026058

08001490 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0a2      	sub	sp, #136	; 0x88
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	225c      	movs	r2, #92	; 0x5c
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f009 ff3f 	bl	800b334 <memset>
  if(hsd->Instance==SDIO)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7d      	ldr	r2, [pc, #500]	; (80016b0 <HAL_SD_MspInit+0x220>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	f040 80f3 	bne.w	80016a8 <HAL_SD_MspInit+0x218>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80014c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80014c8:	2300      	movs	r3, #0
 80014ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80014cc:	2300      	movs	r3, #0
 80014ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	4618      	mov	r0, r3
 80014d6:	f002 fba3 	bl	8003c20 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80014e0:	f7ff fe7c 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	4b72      	ldr	r3, [pc, #456]	; (80016b4 <HAL_SD_MspInit+0x224>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	4a71      	ldr	r2, [pc, #452]	; (80016b4 <HAL_SD_MspInit+0x224>)
 80014ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f2:	6453      	str	r3, [r2, #68]	; 0x44
 80014f4:	4b6f      	ldr	r3, [pc, #444]	; (80016b4 <HAL_SD_MspInit+0x224>)
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	4b6b      	ldr	r3, [pc, #428]	; (80016b4 <HAL_SD_MspInit+0x224>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a6a      	ldr	r2, [pc, #424]	; (80016b4 <HAL_SD_MspInit+0x224>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b68      	ldr	r3, [pc, #416]	; (80016b4 <HAL_SD_MspInit+0x224>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b64      	ldr	r3, [pc, #400]	; (80016b4 <HAL_SD_MspInit+0x224>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	4a63      	ldr	r2, [pc, #396]	; (80016b4 <HAL_SD_MspInit+0x224>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6313      	str	r3, [r2, #48]	; 0x30
 800152c:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <HAL_SD_MspInit+0x224>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001538:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800153c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001542:	2301      	movs	r3, #1
 8001544:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800154c:	230c      	movs	r3, #12
 800154e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001556:	4619      	mov	r1, r3
 8001558:	4857      	ldr	r0, [pc, #348]	; (80016b8 <HAL_SD_MspInit+0x228>)
 800155a:	f000 ffb7 	bl	80024cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001572:	230c      	movs	r3, #12
 8001574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001578:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800157c:	4619      	mov	r1, r3
 800157e:	484e      	ldr	r0, [pc, #312]	; (80016b8 <HAL_SD_MspInit+0x228>)
 8001580:	f000 ffa4 	bl	80024cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001584:	2304      	movs	r3, #4
 8001586:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158c:	2301      	movs	r3, #1
 800158e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001596:	230c      	movs	r3, #12
 8001598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a0:	4619      	mov	r1, r3
 80015a2:	4846      	ldr	r0, [pc, #280]	; (80016bc <HAL_SD_MspInit+0x22c>)
 80015a4:	f000 ff92 	bl	80024cc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80015a8:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015aa:	4a46      	ldr	r2, [pc, #280]	; (80016c4 <HAL_SD_MspInit+0x234>)
 80015ac:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b6:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ca:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015d0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015dc:	2220      	movs	r2, #32
 80015de:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015e0:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015e6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015ea:	2204      	movs	r2, #4
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015f0:	2203      	movs	r2, #3
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_SD_MspInit+0x230>)
 80015fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001602:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001604:	482e      	ldr	r0, [pc, #184]	; (80016c0 <HAL_SD_MspInit+0x230>)
 8001606:	f000 fb5f 	bl	8001cc8 <HAL_DMA_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_SD_MspInit+0x184>
    {
      Error_Handler();
 8001610:	f7ff fde4 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a2a      	ldr	r2, [pc, #168]	; (80016c0 <HAL_SD_MspInit+0x230>)
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
 800161a:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <HAL_SD_MspInit+0x230>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <HAL_SD_MspInit+0x23c>)
 8001624:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001628:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001630:	2240      	movs	r2, #64	; 0x40
 8001632:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <HAL_SD_MspInit+0x238>)
 800163c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001640:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001648:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_SD_MspInit+0x238>)
 800164c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001650:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001654:	2220      	movs	r2, #32
 8001656:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_SD_MspInit+0x238>)
 800165a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800165e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001662:	2204      	movs	r2, #4
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001668:	2203      	movs	r2, #3
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_SD_MspInit+0x238>)
 800166e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001676:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800167c:	4812      	ldr	r0, [pc, #72]	; (80016c8 <HAL_SD_MspInit+0x238>)
 800167e:	f000 fb23 	bl	8001cc8 <HAL_DMA_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_SD_MspInit+0x1fc>
    {
      Error_Handler();
 8001688:	f7ff fda8 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001690:	63da      	str	r2, [r3, #60]	; 0x3c
 8001692:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_SD_MspInit+0x238>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2031      	movs	r0, #49	; 0x31
 800169e:	f000 fac0 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80016a2:	2031      	movs	r0, #49	; 0x31
 80016a4:	f000 fad9 	bl	8001c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3788      	adds	r7, #136	; 0x88
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	20000218 	.word	0x20000218
 80016c4:	40026458 	.word	0x40026458
 80016c8:	20000278 	.word	0x20000278
 80016cc:	400264a0 	.word	0x400264a0

080016d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_UART_MspInit+0x94>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d133      	bne.n	800175a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_UART_MspInit+0x98>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <HAL_UART_MspInit+0x98>)
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_UART_MspInit+0x98>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_UART_MspInit+0x98>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a14      	ldr	r2, [pc, #80]	; (8001768 <HAL_UART_MspInit+0x98>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_UART_MspInit+0x98>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800172a:	230c      	movs	r3, #12
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173a:	2307      	movs	r3, #7
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4809      	ldr	r0, [pc, #36]	; (800176c <HAL_UART_MspInit+0x9c>)
 8001746:	f000 fec1 	bl	80024cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2026      	movs	r0, #38	; 0x26
 8001750:	f000 fa67 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001754:	2026      	movs	r0, #38	; 0x26
 8001756:	f000 fa80 	bl	8001c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40004400 	.word	0x40004400
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017bc:	f000 f912 	bl	80019e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <DMA1_Stream3_IRQHandler+0x10>)
 80017ca:	f000 fc15 	bl	8001ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000134 	.word	0x20000134

080017d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <USART2_IRQHandler+0x10>)
 80017de:	f005 f8f3 	bl	80069c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200002d8 	.word	0x200002d8

080017ec <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <SDIO_IRQHandler+0x10>)
 80017f2:	f004 f861 	bl	80058b8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000194 	.word	0x20000194

08001800 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <DMA2_Stream3_IRQHandler+0x10>)
 8001806:	f000 fbf7 	bl	8001ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000218 	.word	0x20000218

08001814 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA2_Stream6_IRQHandler+0x10>)
 800181a:	f000 fbed 	bl	8001ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000278 	.word	0x20000278

08001828 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001832:	f009 fd31 	bl	800b298 <__errno>
 8001836:	4603      	mov	r3, r0
 8001838:	2216      	movs	r2, #22
 800183a:	601a      	str	r2, [r3, #0]
	return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <_exit>:

void _exit (int status)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001850:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffe7 	bl	8001828 <_kill>
	while (1) {}		/* Make sure we hang here */
 800185a:	e7fe      	b.n	800185a <_exit+0x12>

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f009 fd04 	bl	800b298 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20020000 	.word	0x20020000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	20000b48 	.word	0x20000b48
 80018c4:	20000dd0 	.word	0x20000dd0

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f0:	480d      	ldr	r0, [pc, #52]	; (8001928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018f2:	490e      	ldr	r1, [pc, #56]	; (800192c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001908:	4c0b      	ldr	r4, [pc, #44]	; (8001938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001916:	f7ff ffd7 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191a:	f009 fcd7 	bl	800b2cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191e:	f7fe ffa1 	bl	8000864 <main>
  bx  lr    
 8001922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001930:	0800bda4 	.word	0x0800bda4
  ldr r2, =_sbss
 8001934:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001938:	20000dcc 	.word	0x20000dcc

0800193c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC_IRQHandler>
	...

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <HAL_Init+0x40>)
 800194a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_Init+0x40>)
 8001956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a07      	ldr	r2, [pc, #28]	; (8001980 <HAL_Init+0x40>)
 8001962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f000 f94f 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196e:	200f      	movs	r0, #15
 8001970:	f000 f808 	bl	8001984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001974:	f7ff fc38 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023c00 	.word	0x40023c00

08001984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x54>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_InitTick+0x58>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199a:	fbb3 f3f1 	udiv	r3, r3, r1
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f967 	bl	8001c76 <HAL_SYSTICK_Config>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00e      	b.n	80019d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b0f      	cmp	r3, #15
 80019b6:	d80a      	bhi.n	80019ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b8:	2200      	movs	r2, #0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c0:	f000 f92f 	bl	8001c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c4:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <HAL_InitTick+0x5c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e000      	b.n	80019d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000004 	.word	0x20000004
 80019dc:	2000000c 	.word	0x2000000c
 80019e0:	20000008 	.word	0x20000008

080019e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x20>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x24>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_IncTick+0x24>)
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	2000000c 	.word	0x2000000c
 8001a08:	20000b4c 	.word	0x20000b4c

08001a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_GetTick+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000b4c 	.word	0x20000b4c

08001a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff ffee 	bl	8001a0c <HAL_GetTick>
 8001a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a3c:	d005      	beq.n	8001a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_Delay+0x44>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a4a:	bf00      	nop
 8001a4c:	f7ff ffde 	bl	8001a0c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d8f7      	bhi.n	8001a4c <HAL_Delay+0x28>
  {
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000000c 	.word	0x2000000c

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4907      	ldr	r1, [pc, #28]	; (8001b08 <__NVIC_EnableIRQ+0x38>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	; (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	; (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd8:	d301      	bcc.n	8001bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <SysTick_Config+0x40>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be6:	210f      	movs	r1, #15
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bec:	f7ff ff8e 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <SysTick_Config+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SysTick_Config+0x40>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff29 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff3e 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff8e 	bl	8001b60 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff5d 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff31 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ffa2 	bl	8001bc8 <SysTick_Config>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e00e      	b.n	8001cbe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	795b      	ldrb	r3, [r3, #5]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fac1 	bl	8001238 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff fe9a 	bl	8001a0c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e099      	b.n	8001e18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d04:	e00f      	b.n	8001d26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d06:	f7ff fe81 	bl	8001a0c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d908      	bls.n	8001d26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e078      	b.n	8001e18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e8      	bne.n	8001d06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_DMA_Init+0x158>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d107      	bne.n	8001d90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f023 0307 	bic.w	r3, r3, #7
 8001da6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d117      	bne.n	8001dea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00e      	beq.n	8001dea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fb01 	bl	80023d4 <DMA_CheckFifoParam>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001de6:	2301      	movs	r3, #1
 8001de8:	e016      	b.n	8001e18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fab8 	bl	8002368 <DMA_CalcBaseAndBitshift>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	223f      	movs	r2, #63	; 0x3f
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	f010803f 	.word	0xf010803f

08001e24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_DMA_Start_IT+0x26>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e040      	b.n	8001ecc <HAL_DMA_Start_IT+0xa8>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d12f      	bne.n	8001ebe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2202      	movs	r2, #2
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fa4a 	bl	800230c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	223f      	movs	r2, #63	; 0x3f
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0216 	orr.w	r2, r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0208 	orr.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e005      	b.n	8001eca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ee2:	f7ff fd93 	bl	8001a0c <HAL_GetTick>
 8001ee6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d008      	beq.n	8001f06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e052      	b.n	8001fac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0216 	bic.w	r2, r2, #22
 8001f14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d103      	bne.n	8001f36 <HAL_DMA_Abort+0x62>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0208 	bic.w	r2, r2, #8
 8001f44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f56:	e013      	b.n	8001f80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f58:	f7ff fd58 	bl	8001a0c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d90c      	bls.n	8001f80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e015      	b.n	8001fac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1e4      	bne.n	8001f58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	223f      	movs	r2, #63	; 0x3f
 8001f94:	409a      	lsls	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d004      	beq.n	8001fd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2280      	movs	r2, #128	; 0x80
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00c      	b.n	8001fec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2205      	movs	r2, #5
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002004:	4b8e      	ldr	r3, [pc, #568]	; (8002240 <HAL_DMA_IRQHandler+0x248>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a8e      	ldr	r2, [pc, #568]	; (8002244 <HAL_DMA_IRQHandler+0x24c>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0a9b      	lsrs	r3, r3, #10
 8002010:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	2208      	movs	r2, #8
 8002024:	409a      	lsls	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d01a      	beq.n	8002064 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0204 	bic.w	r2, r2, #4
 800204a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2208      	movs	r2, #8
 8002052:	409a      	lsls	r2, r3
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2201      	movs	r2, #1
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d012      	beq.n	800209a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	2201      	movs	r2, #1
 8002088:	409a      	lsls	r2, r3
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f043 0202 	orr.w	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	2204      	movs	r2, #4
 80020a0:	409a      	lsls	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d012      	beq.n	80020d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2204      	movs	r2, #4
 80020be:	409a      	lsls	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	f043 0204 	orr.w	r2, r3, #4
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	2210      	movs	r2, #16
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d043      	beq.n	8002168 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03c      	beq.n	8002168 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2210      	movs	r2, #16
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d018      	beq.n	800213a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d024      	beq.n	8002168 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
 8002126:	e01f      	b.n	8002168 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
 8002138:	e016      	b.n	8002168 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d107      	bne.n	8002158 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0208 	bic.w	r2, r2, #8
 8002156:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	2220      	movs	r2, #32
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 808f 	beq.w	8002298 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 8087 	beq.w	8002298 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	2220      	movs	r2, #32
 8002190:	409a      	lsls	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b05      	cmp	r3, #5
 80021a0:	d136      	bne.n	8002210 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0216 	bic.w	r2, r2, #22
 80021b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_DMA_IRQHandler+0x1da>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0208 	bic.w	r2, r2, #8
 80021e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	223f      	movs	r2, #63	; 0x3f
 80021e8:	409a      	lsls	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002202:	2b00      	cmp	r3, #0
 8002204:	d07e      	beq.n	8002304 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
        }
        return;
 800220e:	e079      	b.n	8002304 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d01d      	beq.n	800225a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10d      	bne.n	8002248 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	2b00      	cmp	r3, #0
 8002232:	d031      	beq.n	8002298 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
 800223c:	e02c      	b.n	8002298 <HAL_DMA_IRQHandler+0x2a0>
 800223e:	bf00      	nop
 8002240:	20000004 	.word	0x20000004
 8002244:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	2b00      	cmp	r3, #0
 800224e:	d023      	beq.n	8002298 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
 8002258:	e01e      	b.n	8002298 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10f      	bne.n	8002288 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0210 	bic.w	r2, r2, #16
 8002276:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	2b00      	cmp	r3, #0
 800229e:	d032      	beq.n	8002306 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d022      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2205      	movs	r2, #5
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	3301      	adds	r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d307      	bcc.n	80022e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f2      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x2cc>
 80022de:	e000      	b.n	80022e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
 8002302:	e000      	b.n	8002306 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002304:	bf00      	nop
    }
  }
}
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002328:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b40      	cmp	r3, #64	; 0x40
 8002338:	d108      	bne.n	800234c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800234a:	e007      	b.n	800235c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	60da      	str	r2, [r3, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	3b10      	subs	r3, #16
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <DMA_CalcBaseAndBitshift+0x64>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002382:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d909      	bls.n	80023aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	1d1a      	adds	r2, r3, #4
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	659a      	str	r2, [r3, #88]	; 0x58
 80023a8:	e007      	b.n	80023ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023b2:	f023 0303 	bic.w	r3, r3, #3
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	aaaaaaab 	.word	0xaaaaaaab
 80023d0:	0800bcc0 	.word	0x0800bcc0

080023d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d11f      	bne.n	800242e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d856      	bhi.n	80024a2 <DMA_CheckFifoParam+0xce>
 80023f4:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <DMA_CheckFifoParam+0x28>)
 80023f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fa:	bf00      	nop
 80023fc:	0800240d 	.word	0x0800240d
 8002400:	0800241f 	.word	0x0800241f
 8002404:	0800240d 	.word	0x0800240d
 8002408:	080024a3 	.word	0x080024a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d046      	beq.n	80024a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241c:	e043      	b.n	80024a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002426:	d140      	bne.n	80024aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242c:	e03d      	b.n	80024aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002436:	d121      	bne.n	800247c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d837      	bhi.n	80024ae <DMA_CheckFifoParam+0xda>
 800243e:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <DMA_CheckFifoParam+0x70>)
 8002440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002444:	08002455 	.word	0x08002455
 8002448:	0800245b 	.word	0x0800245b
 800244c:	08002455 	.word	0x08002455
 8002450:	0800246d 	.word	0x0800246d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      break;
 8002458:	e030      	b.n	80024bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d025      	beq.n	80024b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246a:	e022      	b.n	80024b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002474:	d11f      	bne.n	80024b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800247a:	e01c      	b.n	80024b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d903      	bls.n	800248a <DMA_CheckFifoParam+0xb6>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d003      	beq.n	8002490 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002488:	e018      	b.n	80024bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
      break;
 800248e:	e015      	b.n	80024bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00e      	beq.n	80024ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      break;
 80024a0:	e00b      	b.n	80024ba <DMA_CheckFifoParam+0xe6>
      break;
 80024a2:	bf00      	nop
 80024a4:	e00a      	b.n	80024bc <DMA_CheckFifoParam+0xe8>
      break;
 80024a6:	bf00      	nop
 80024a8:	e008      	b.n	80024bc <DMA_CheckFifoParam+0xe8>
      break;
 80024aa:	bf00      	nop
 80024ac:	e006      	b.n	80024bc <DMA_CheckFifoParam+0xe8>
      break;
 80024ae:	bf00      	nop
 80024b0:	e004      	b.n	80024bc <DMA_CheckFifoParam+0xe8>
      break;
 80024b2:	bf00      	nop
 80024b4:	e002      	b.n	80024bc <DMA_CheckFifoParam+0xe8>
      break;   
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <DMA_CheckFifoParam+0xe8>
      break;
 80024ba:	bf00      	nop
    }
  } 
  
  return status; 
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e165      	b.n	80027b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	f040 8154 	bne.w	80027ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d005      	beq.n	800251e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251a:	2b02      	cmp	r3, #2
 800251c:	d130      	bne.n	8002580 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 0201 	and.w	r2, r3, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b03      	cmp	r3, #3
 800258a:	d017      	beq.n	80025bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d123      	bne.n	8002610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	220f      	movs	r2, #15
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	69b9      	ldr	r1, [r7, #24]
 800260c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0203 	and.w	r2, r3, #3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80ae 	beq.w	80027ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b5d      	ldr	r3, [pc, #372]	; (80027cc <HAL_GPIO_Init+0x300>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a5c      	ldr	r2, [pc, #368]	; (80027cc <HAL_GPIO_Init+0x300>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_GPIO_Init+0x300>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800266e:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <HAL_GPIO_Init+0x304>)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	220f      	movs	r2, #15
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_GPIO_Init+0x308>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d025      	beq.n	80026e6 <HAL_GPIO_Init+0x21a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4e      	ldr	r2, [pc, #312]	; (80027d8 <HAL_GPIO_Init+0x30c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <HAL_GPIO_Init+0x216>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4d      	ldr	r2, [pc, #308]	; (80027dc <HAL_GPIO_Init+0x310>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_Init+0x212>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4c      	ldr	r2, [pc, #304]	; (80027e0 <HAL_GPIO_Init+0x314>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0x20e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4b      	ldr	r2, [pc, #300]	; (80027e4 <HAL_GPIO_Init+0x318>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_Init+0x20a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4a      	ldr	r2, [pc, #296]	; (80027e8 <HAL_GPIO_Init+0x31c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_Init+0x206>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a49      	ldr	r2, [pc, #292]	; (80027ec <HAL_GPIO_Init+0x320>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_Init+0x202>
 80026ca:	2306      	movs	r3, #6
 80026cc:	e00c      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026ce:	2307      	movs	r3, #7
 80026d0:	e00a      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026d2:	2305      	movs	r3, #5
 80026d4:	e008      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026d6:	2304      	movs	r3, #4
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026da:	2303      	movs	r3, #3
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026e6:	2300      	movs	r3, #0
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f002 0203 	and.w	r2, r2, #3
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f8:	4935      	ldr	r1, [pc, #212]	; (80027d0 <HAL_GPIO_Init+0x304>)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002706:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <HAL_GPIO_Init+0x324>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800272a:	4a31      	ldr	r2, [pc, #196]	; (80027f0 <HAL_GPIO_Init+0x324>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002730:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <HAL_GPIO_Init+0x324>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <HAL_GPIO_Init+0x324>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800275a:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_GPIO_Init+0x324>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277e:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <HAL_GPIO_Init+0x324>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_GPIO_Init+0x324>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a8:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <HAL_GPIO_Init+0x324>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3301      	adds	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	f67f ae96 	bls.w	80024e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40013800 	.word	0x40013800
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020c00 	.word	0x40020c00
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40021400 	.word	0x40021400
 80027ec:	40021800 	.word	0x40021800
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e001      	b.n	8002816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002834:	787b      	ldrb	r3, [r7, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002840:	e003      	b.n	800284a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	041a      	lsls	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002856:	b480      	push	{r7}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002868:	887a      	ldrh	r2, [r7, #2]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4013      	ands	r3, r2
 800286e:	041a      	lsls	r2, r3, #16
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	43d9      	mvns	r1, r3
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	400b      	ands	r3, r1
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e12b      	b.n	8002af6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe fce2 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028f0:	f001 f96e 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 80028f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a81      	ldr	r2, [pc, #516]	; (8002b00 <HAL_I2C_Init+0x274>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d807      	bhi.n	8002910 <HAL_I2C_Init+0x84>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a80      	ldr	r2, [pc, #512]	; (8002b04 <HAL_I2C_Init+0x278>)
 8002904:	4293      	cmp	r3, r2
 8002906:	bf94      	ite	ls
 8002908:	2301      	movls	r3, #1
 800290a:	2300      	movhi	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e006      	b.n	800291e <HAL_I2C_Init+0x92>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a7d      	ldr	r2, [pc, #500]	; (8002b08 <HAL_I2C_Init+0x27c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	bf94      	ite	ls
 8002918:	2301      	movls	r3, #1
 800291a:	2300      	movhi	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0e7      	b.n	8002af6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a78      	ldr	r2, [pc, #480]	; (8002b0c <HAL_I2C_Init+0x280>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0c9b      	lsrs	r3, r3, #18
 8002930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_I2C_Init+0x274>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d802      	bhi.n	8002960 <HAL_I2C_Init+0xd4>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3301      	adds	r3, #1
 800295e:	e009      	b.n	8002974 <HAL_I2C_Init+0xe8>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_I2C_Init+0x284>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	099b      	lsrs	r3, r3, #6
 8002972:	3301      	adds	r3, #1
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002986:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	495c      	ldr	r1, [pc, #368]	; (8002b00 <HAL_I2C_Init+0x274>)
 8002990:	428b      	cmp	r3, r1
 8002992:	d819      	bhi.n	80029c8 <HAL_I2C_Init+0x13c>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e59      	subs	r1, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a2:	1c59      	adds	r1, r3, #1
 80029a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029a8:	400b      	ands	r3, r1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_I2C_Init+0x138>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e59      	subs	r1, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	e051      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 80029c4:	2304      	movs	r3, #4
 80029c6:	e04f      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d111      	bne.n	80029f4 <HAL_I2C_Init+0x168>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e012      	b.n	8002a1a <HAL_I2C_Init+0x18e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	0099      	lsls	r1, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Init+0x196>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e022      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10e      	bne.n	8002a48 <HAL_I2C_Init+0x1bc>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e58      	subs	r0, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	440b      	add	r3, r1
 8002a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a46:	e00f      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	0099      	lsls	r1, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6809      	ldr	r1, [r1, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6911      	ldr	r1, [r2, #16]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68d2      	ldr	r2, [r2, #12]
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	000186a0 	.word	0x000186a0
 8002b04:	001e847f 	.word	0x001e847f
 8002b08:	003d08ff 	.word	0x003d08ff
 8002b0c:	431bde83 	.word	0x431bde83
 8002b10:	10624dd3 	.word	0x10624dd3

08002b14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	4611      	mov	r1, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	817b      	strh	r3, [r7, #10]
 8002b26:	460b      	mov	r3, r1
 8002b28:	813b      	strh	r3, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b2e:	f7fe ff6d 	bl	8001a0c <HAL_GetTick>
 8002b32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	f040 80d9 	bne.w	8002cf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2319      	movs	r3, #25
 8002b48:	2201      	movs	r2, #1
 8002b4a:	496d      	ldr	r1, [pc, #436]	; (8002d00 <HAL_I2C_Mem_Write+0x1ec>)
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f971 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e0cc      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_I2C_Mem_Write+0x56>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0c5      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d007      	beq.n	8002b90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2221      	movs	r2, #33	; 0x21
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2240      	movs	r2, #64	; 0x40
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a3a      	ldr	r2, [r7, #32]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4a4d      	ldr	r2, [pc, #308]	; (8002d04 <HAL_I2C_Mem_Write+0x1f0>)
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bd2:	88f8      	ldrh	r0, [r7, #6]
 8002bd4:	893a      	ldrh	r2, [r7, #8]
 8002bd6:	8979      	ldrh	r1, [r7, #10]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	4603      	mov	r3, r0
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f890 	bl	8002d08 <I2C_RequestMemoryWrite>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d052      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e081      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f9f2 	bl	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d107      	bne.n	8002c1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06b      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d11b      	bne.n	8002c94 <HAL_I2C_Mem_Write+0x180>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d017      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1aa      	bne.n	8002bf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f9de 	bl	8003062 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d107      	bne.n	8002cc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e016      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	00100002 	.word	0x00100002
 8002d04:	ffff0000 	.word	0xffff0000

08002d08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	813b      	strh	r3, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f878 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d58:	d103      	bne.n	8002d62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e05f      	b.n	8002e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	492d      	ldr	r1, [pc, #180]	; (8002e30 <I2C_RequestMemoryWrite+0x128>)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f8b0 	bl	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e04c      	b.n	8002e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f91a 	bl	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d107      	bne.n	8002dca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e02b      	b.n	8002e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd4:	893b      	ldrh	r3, [r7, #8]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	611a      	str	r2, [r3, #16]
 8002dde:	e021      	b.n	8002e24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	6a39      	ldr	r1, [r7, #32]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f8f4 	bl	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00d      	beq.n	8002e1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d107      	bne.n	8002e16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e005      	b.n	8002e26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1a:	893b      	ldrh	r3, [r7, #8]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	00010002 	.word	0x00010002

08002e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e44:	e025      	b.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e4c:	d021      	beq.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7fe fddd 	bl	8001a0c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d116      	bne.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e023      	b.n	8002eda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10d      	bne.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	e00c      	b.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf0c      	ite	eq
 8002eca:	2301      	moveq	r3, #1
 8002ecc:	2300      	movne	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d0b6      	beq.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef0:	e051      	b.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f00:	d123      	bne.n	8002f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e046      	b.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f50:	d021      	beq.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7fe fd5b 	bl	8001a0c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d116      	bne.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f043 0220 	orr.w	r2, r3, #32
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e020      	b.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	0c1b      	lsrs	r3, r3, #16
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10c      	bne.n	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e00b      	b.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d18d      	bne.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fec:	e02d      	b.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f878 	bl	80030e4 <I2C_IsAcknowledgeFailed>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e02d      	b.n	800305a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003004:	d021      	beq.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7fe fd01 	bl	8001a0c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e007      	b.n	800305a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003054:	2b80      	cmp	r3, #128	; 0x80
 8003056:	d1ca      	bne.n	8002fee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800306e:	e02d      	b.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f837 	bl	80030e4 <I2C_IsAcknowledgeFailed>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e02d      	b.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003086:	d021      	beq.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003088:	f7fe fcc0 	bl	8001a0c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	429a      	cmp	r2, r3
 8003096:	d302      	bcc.n	800309e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d116      	bne.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e007      	b.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d1ca      	bne.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fa:	d11b      	bne.n	8003134 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003104:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0e1      	b.n	800331a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a6d      	ldr	r2, [pc, #436]	; (8003324 <HAL_I2S_Init+0x1e0>)
 800316e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7fe f8cb 	bl	800130c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800318c:	f023 030f 	bic.w	r3, r3, #15
 8003190:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2202      	movs	r2, #2
 8003198:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d06f      	beq.n	8003282 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031aa:	2310      	movs	r3, #16
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e001      	b.n	80031b4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031b0:	2320      	movs	r3, #32
 80031b2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d802      	bhi.n	80031c2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a58      	ldr	r2, [pc, #352]	; (8003328 <HAL_I2S_Init+0x1e4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_I2S_Init+0x92>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a56      	ldr	r2, [pc, #344]	; (800332c <HAL_I2S_Init+0x1e8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d104      	bne.n	80031e0 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80031d6:	2001      	movs	r0, #1
 80031d8:	f001 f84c 	bl	8004274 <HAL_RCCEx_GetPeriphCLKFreq>
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	e003      	b.n	80031e8 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80031e0:	2002      	movs	r0, #2
 80031e2:	f001 f847 	bl	8004274 <HAL_RCCEx_GetPeriphCLKFreq>
 80031e6:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f0:	d125      	bne.n	800323e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d010      	beq.n	800321c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	fbb2 f2f3 	udiv	r2, r2, r3
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	461a      	mov	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	fbb2 f3f3 	udiv	r3, r2, r3
 8003216:	3305      	adds	r3, #5
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e01f      	b.n	800325c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	fbb2 f2f3 	udiv	r2, r2, r3
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	3305      	adds	r3, #5
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e00e      	b.n	800325c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fbb2 f2f3 	udiv	r2, r2, r3
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	461a      	mov	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	3305      	adds	r3, #5
 800325a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4a34      	ldr	r2, [pc, #208]	; (8003330 <HAL_I2S_Init+0x1ec>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e003      	b.n	800328a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003282:	2302      	movs	r3, #2
 8003284:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d902      	bls.n	8003296 <HAL_I2S_Init+0x152>
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2bff      	cmp	r3, #255	; 0xff
 8003294:	d907      	bls.n	80032a6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e039      	b.n	800331a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	ea42 0103 	orr.w	r1, r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032c4:	f023 030f 	bic.w	r3, r3, #15
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6851      	ldr	r1, [r2, #4]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6892      	ldr	r2, [r2, #8]
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	4311      	orrs	r1, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6992      	ldr	r2, [r2, #24]
 80032dc:	430a      	orrs	r2, r1
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e8:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b30      	cmp	r3, #48	; 0x30
 80032f0:	d003      	beq.n	80032fa <HAL_I2S_Init+0x1b6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2bb0      	cmp	r3, #176	; 0xb0
 80032f8:	d107      	bne.n	800330a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003308:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	080037c5 	.word	0x080037c5
 8003328:	40003800 	.word	0x40003800
 800332c:	40003c00 	.word	0x40003c00
 8003330:	cccccccd 	.word	0xcccccccd

08003334 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_I2S_Receive_DMA+0x1a>
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0a1      	b.n	8003496 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_I2S_Receive_DMA+0x2e>
 800335e:	2302      	movs	r3, #2
 8003360:	e099      	b.n	8003496 <HAL_I2S_Receive_DMA+0x162>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d005      	beq.n	8003382 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	e089      	b.n	8003496 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2204      	movs	r2, #4
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d002      	beq.n	80033ae <HAL_I2S_Receive_DMA+0x7a>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d10a      	bne.n	80033c4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	865a      	strh	r2, [r3, #50]	; 0x32
 80033c2:	e005      	b.n	80033d0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d4:	4a32      	ldr	r2, [pc, #200]	; (80034a0 <HAL_I2S_Receive_DMA+0x16c>)
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033dc:	4a31      	ldr	r2, [pc, #196]	; (80034a4 <HAL_I2S_Receive_DMA+0x170>)
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	4a30      	ldr	r2, [pc, #192]	; (80034a8 <HAL_I2S_Receive_DMA+0x174>)
 80033e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f6:	d10a      	bne.n	800340e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	4619      	mov	r1, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003424:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003426:	f7fe fcfd 	bl	8001e24 <HAL_DMA_Start_IT>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00f      	beq.n	8003450 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	f043 0208 	orr.w	r2, r3, #8
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e022      	b.n	8003496 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	2b00      	cmp	r3, #0
 800345c:	d107      	bne.n	800346e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800346c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	080036a3 	.word	0x080036a3
 80034a4:	08003661 	.word	0x08003661
 80034a8:	080036bf 	.word	0x080036bf

080034ac <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c0:	d003      	beq.n	80034ca <HAL_I2S_DMAStop+0x1e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d155      	bne.n	8003576 <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00f      	beq.n	80034f2 <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fcfc 	bl	8001ed4 <HAL_DMA_Abort>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f043 0208 	orr.w	r2, r3, #8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80034f2:	2364      	movs	r3, #100	; 0x64
 80034f4:	2201      	movs	r2, #1
 80034f6:	2102      	movs	r1, #2
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f9ed 	bl	80038d8 <I2S_WaitFlagStateUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f043 0201 	orr.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800351c:	2364      	movs	r3, #100	; 0x64
 800351e:	2200      	movs	r2, #0
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9d8 	bl	80038d8 <I2S_WaitFlagStateUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f043 0201 	orr.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003554:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0202 	bic.w	r2, r2, #2
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	e04d      	b.n	8003612 <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800357e:	d004      	beq.n	800358a <HAL_I2S_DMAStop+0xde>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003588:	d143      	bne.n	8003612 <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00f      	beq.n	80035b2 <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fc9c 	bl	8001ed4 <HAL_DMA_Abort>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f043 0208 	orr.w	r2, r3, #8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f0:	d10c      	bne.n	800360c <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
 800360a:	e002      	b.n	8003612 <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10e      	bne.n	8003694 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7fd fba5 	bl	8000de4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff ffc1 	bl	8003638 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0203 	bic.w	r2, r2, #3
 80036da:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f043 0208 	orr.w	r2, r3, #8
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff ffa5 	bl	800364c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	1c9a      	adds	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10e      	bne.n	800375e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800374e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff63 	bl	8003624 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	b292      	uxth	r2, r2
 800377a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	1c9a      	adds	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10e      	bne.n	80037bc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fb14 	bl	8000de4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d13a      	bne.n	8003856 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d109      	bne.n	80037fe <I2S_IRQHandler+0x3a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d102      	bne.n	80037fe <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ffb4 	bl	8003766 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d126      	bne.n	8003856 <I2S_IRQHandler+0x92>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b20      	cmp	r3, #32
 8003814:	d11f      	bne.n	8003856 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003824:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	f043 0202 	orr.w	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fefb 	bl	800364c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b03      	cmp	r3, #3
 8003860:	d136      	bne.n	80038d0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b02      	cmp	r3, #2
 800386a:	d109      	bne.n	8003880 <I2S_IRQHandler+0xbc>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b80      	cmp	r3, #128	; 0x80
 8003878:	d102      	bne.n	8003880 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ff45 	bl	800370a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b08      	cmp	r3, #8
 8003888:	d122      	bne.n	80038d0 <I2S_IRQHandler+0x10c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d11b      	bne.n	80038d0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038a6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff febe 	bl	800364c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038d0:	bf00      	nop
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80038e8:	f7fe f890 	bl	8001a0c <HAL_GetTick>
 80038ec:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80038ee:	e018      	b.n	8003922 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f6:	d014      	beq.n	8003922 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80038f8:	f7fe f888 	bl	8001a0c <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d902      	bls.n	800390e <I2S_WaitFlagStateUntilTimeout+0x36>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e00f      	b.n	8003942 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	429a      	cmp	r2, r3
 800393e:	d1d7      	bne.n	80038f0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4b20      	ldr	r3, [pc, #128]	; (80039dc <HAL_PWREx_EnableOverDrive+0x90>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003978:	f7fe f848 	bl	8001a0c <HAL_GetTick>
 800397c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800397e:	e009      	b.n	8003994 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003980:	f7fe f844 	bl	8001a0c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398e:	d901      	bls.n	8003994 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e01f      	b.n	80039d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003994:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d1ee      	bne.n	8003980 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a8:	f7fe f830 	bl	8001a0c <HAL_GetTick>
 80039ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039ae:	e009      	b.n	80039c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039b0:	f7fe f82c 	bl	8001a0c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039be:	d901      	bls.n	80039c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e007      	b.n	80039d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039d0:	d1ee      	bne.n	80039b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40023800 	.word	0x40023800
 80039e0:	420e0040 	.word	0x420e0040
 80039e4:	40007000 	.word	0x40007000
 80039e8:	420e0044 	.word	0x420e0044

080039ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0cc      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b68      	ldr	r3, [pc, #416]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d90c      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b63      	ldr	r3, [pc, #396]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0b8      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a40:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a58      	ldr	r2, [pc, #352]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	494d      	ldr	r1, [pc, #308]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d044      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d119      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e06f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e067      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 0203 	bic.w	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4934      	ldr	r1, [pc, #208]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003adc:	f7fd ff96 	bl	8001a0c <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f7fd ff92 	bl	8001a0c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e04f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 020c 	and.w	r2, r3, #12
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1eb      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d20c      	bcs.n	8003b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e032      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4916      	ldr	r1, [pc, #88]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	490e      	ldr	r1, [pc, #56]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b72:	f000 fdc1 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8003b76:	4602      	mov	r2, r0
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	490a      	ldr	r1, [pc, #40]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	5ccb      	ldrb	r3, [r1, r3]
 8003b86:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd fef6 	bl	8001984 <HAL_InitTick>

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023c00 	.word	0x40023c00
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	0800bca8 	.word	0x0800bca8
 8003bb0:	20000004 	.word	0x20000004
 8003bb4:	20000008 	.word	0x20000008

08003bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000004 	.word	0x20000004

08003bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bd4:	f7ff fff0 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	0a9b      	lsrs	r3, r3, #10
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4903      	ldr	r1, [pc, #12]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be6:	5ccb      	ldrb	r3, [r1, r3]
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	0800bcb8 	.word	0x0800bcb8

08003bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bfc:	f7ff ffdc 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0b5b      	lsrs	r3, r3, #13
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4903      	ldr	r1, [pc, #12]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	0800bcb8 	.word	0x0800bcb8

08003c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08c      	sub	sp, #48	; 0x30
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d010      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003c58:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	496c      	ldr	r1, [pc, #432]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003c76:	2301      	movs	r3, #1
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003c86:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	4960      	ldr	r1, [pc, #384]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d017      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb4:	4b58      	ldr	r3, [pc, #352]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	4955      	ldr	r1, [pc, #340]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d017      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cf0:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	4946      	ldr	r1, [pc, #280]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003d10:	2301      	movs	r3, #1
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 808a 	beq.w	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3e:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d4a:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a33      	ldr	r2, [pc, #204]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d56:	f7fd fe59 	bl	8001a0c <HAL_GetTick>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d5e:	f7fd fe55 	bl	8001a0c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e278      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d70:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d7c:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d84:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02f      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d94:	6a3a      	ldr	r2, [r7, #32]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d028      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d9a:	4b1f      	ldr	r3, [pc, #124]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003daa:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003db0:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003db6:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d114      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dc2:	f7fd fe23 	bl	8001a0c <HAL_GetTick>
 8003dc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f7fd fe1f 	bl	8001a0c <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e240      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de0:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ee      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df8:	d114      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0e:	4902      	ldr	r1, [pc, #8]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]
 8003e14:	e00c      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40007000 	.word	0x40007000
 8003e20:	42470e40 	.word	0x42470e40
 8003e24:	4b4a      	ldr	r3, [pc, #296]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a49      	ldr	r2, [pc, #292]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e2e:	6093      	str	r3, [r2, #8]
 8003e30:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3c:	4944      	ldr	r1, [pc, #272]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003e54:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e56:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003e64:	4b3a      	ldr	r3, [pc, #232]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	4937      	ldr	r1, [pc, #220]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e86:	4b32      	ldr	r3, [pc, #200]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	492e      	ldr	r1, [pc, #184]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d011      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ea8:	4b29      	ldr	r3, [pc, #164]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	4926      	ldr	r1, [pc, #152]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ede:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	491a      	ldr	r1, [pc, #104]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d011      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f00:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f08:	4911      	ldr	r1, [pc, #68]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f18:	d101      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d005      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2c:	f040 80ff 	bne.w	800412e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f36:	f7fd fd69 	bl	8001a0c <HAL_GetTick>
 8003f3a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f3c:	e00e      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f3e:	f7fd fd65 	bl	8001a0c <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d907      	bls.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e188      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f50:	40023800 	.word	0x40023800
 8003f54:	424711e0 	.word	0x424711e0
 8003f58:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f5c:	4b7e      	ldr	r3, [pc, #504]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ea      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d028      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d124      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f90:	4b71      	ldr	r3, [pc, #452]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f96:	0c1b      	lsrs	r3, r3, #16
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fa2:	4b6d      	ldr	r3, [pc, #436]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa8:	0e1b      	lsrs	r3, r3, #24
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	019b      	lsls	r3, r3, #6
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	4961      	ldr	r1, [pc, #388]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d004      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d035      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004004:	d130      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004006:	4b54      	ldr	r3, [pc, #336]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	3301      	adds	r3, #1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004018:	4b4f      	ldr	r3, [pc, #316]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800401a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401e:	0f1b      	lsrs	r3, r3, #28
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	019b      	lsls	r3, r3, #6
 8004030:	431a      	orrs	r2, r3
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	3b01      	subs	r3, #1
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	431a      	orrs	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	071b      	lsls	r3, r3, #28
 8004048:	4943      	ldr	r1, [pc, #268]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004050:	4b41      	ldr	r3, [pc, #260]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004056:	f023 021f 	bic.w	r2, r3, #31
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	493d      	ldr	r1, [pc, #244]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004070:	2b00      	cmp	r3, #0
 8004072:	d029      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800407c:	d124      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800407e:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	3301      	adds	r3, #1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004090:	4b31      	ldr	r3, [pc, #196]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004096:	0f1b      	lsrs	r3, r3, #28
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	019b      	lsls	r3, r3, #6
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	3b01      	subs	r3, #1
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	431a      	orrs	r2, r3
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	431a      	orrs	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	071b      	lsls	r3, r3, #28
 80040c0:	4925      	ldr	r1, [pc, #148]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d016      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	3b01      	subs	r3, #1
 80040e8:	041b      	lsls	r3, r3, #16
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	071b      	lsls	r3, r3, #28
 80040fa:	4917      	ldr	r1, [pc, #92]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004104:	2201      	movs	r2, #1
 8004106:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004108:	f7fd fc80 	bl	8001a0c <HAL_GetTick>
 800410c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004110:	f7fd fc7c 	bl	8001a0c <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e09f      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004122:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	2b01      	cmp	r3, #1
 8004132:	f040 8095 	bne.w	8004260 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800413c:	f7fd fc66 	bl	8001a0c <HAL_GetTick>
 8004140:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004142:	e00f      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004144:	f7fd fc62 	bl	8001a0c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d908      	bls.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e085      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800
 800415c:	42470068 	.word	0x42470068
 8004160:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004164:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800416c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004170:	d0e8      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02b      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	2b00      	cmp	r3, #0
 8004198:	d127      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800419a:	4b34      	ldr	r3, [pc, #208]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	3301      	adds	r3, #1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	019b      	lsls	r3, r3, #6
 80041b6:	431a      	orrs	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	3b01      	subs	r3, #1
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	061b      	lsls	r3, r3, #24
 80041c8:	4928      	ldr	r1, [pc, #160]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041d0:	4b26      	ldr	r3, [pc, #152]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	3b01      	subs	r3, #1
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	4922      	ldr	r1, [pc, #136]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01d      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041fe:	d118      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004200:	4b1a      	ldr	r3, [pc, #104]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	0e1b      	lsrs	r3, r3, #24
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	019b      	lsls	r3, r3, #6
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	3b01      	subs	r3, #1
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	4910      	ldr	r1, [pc, #64]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004232:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004238:	f7fd fbe8 	bl	8001a0c <HAL_GetTick>
 800423c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004240:	f7fd fbe4 	bl	8001a0c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e007      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800425a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800425e:	d1ef      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3730      	adds	r7, #48	; 0x30
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800
 8004270:	42470070 	.word	0x42470070

08004274 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	2b07      	cmp	r3, #7
 800429a:	f200 8220 	bhi.w	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080044a7 	.word	0x080044a7
 80042a8:	080045c9 	.word	0x080045c9
 80042ac:	080046df 	.word	0x080046df
 80042b0:	080042c5 	.word	0x080042c5
 80042b4:	080046df 	.word	0x080046df
 80042b8:	080046df 	.word	0x080046df
 80042bc:	080046df 	.word	0x080046df
 80042c0:	080042c5 	.word	0x080042c5
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80042c4:	4ba7      	ldr	r3, [pc, #668]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ca:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042da:	f000 80d6 	beq.w	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042e4:	f200 80dd 	bhi.w	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ee:	f000 809f 	beq.w	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f8:	f200 80d3 	bhi.w	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004302:	d05b      	beq.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800430a:	f200 80ca 	bhi.w	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004314:	f000 80b6 	beq.w	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800431e:	f200 80c0 	bhi.w	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004328:	f000 8082 	beq.w	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004332:	f200 80b6 	bhi.w	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004342:	d03b      	beq.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8004344:	e0ad      	b.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004346:	4b87      	ldr	r3, [pc, #540]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004352:	4b84      	ldr	r3, [pc, #528]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800435c:	4a82      	ldr	r2, [pc, #520]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e008      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8004366:	4b7f      	ldr	r3, [pc, #508]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004370:	4a7d      	ldr	r2, [pc, #500]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004372:	fbb2 f3f3 	udiv	r3, r2, r3
 8004376:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004378:	4b7a      	ldr	r3, [pc, #488]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	0e1b      	lsrs	r3, r3, #24
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8004386:	4b77      	ldr	r3, [pc, #476]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	099b      	lsrs	r3, r3, #6
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	fb03 f202 	mul.w	r2, r3, r2
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80043a0:	4b70      	ldr	r3, [pc, #448]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	3301      	adds	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	61fb      	str	r3, [r7, #28]
          break;
 80043ba:	e073      	b.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043bc:	4b69      	ldr	r3, [pc, #420]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d109      	bne.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80043c8:	4b66      	ldr	r3, [pc, #408]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d2:	4a65      	ldr	r2, [pc, #404]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e008      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80043dc:	4b61      	ldr	r3, [pc, #388]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e6:	4a60      	ldr	r2, [pc, #384]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80043ee:	4b5d      	ldr	r3, [pc, #372]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f4:	0e1b      	lsrs	r3, r3, #24
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80043fc:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	fb03 f202 	mul.w	r2, r3, r2
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8004416:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	3301      	adds	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	61fb      	str	r3, [r7, #28]
          break;
 800442e:	e039      	b.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004430:	4b4c      	ldr	r3, [pc, #304]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d108      	bne.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800443c:	4b49      	ldr	r3, [pc, #292]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004444:	4a48      	ldr	r2, [pc, #288]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	e007      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800444e:	4b45      	ldr	r3, [pc, #276]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004456:	4a44      	ldr	r2, [pc, #272]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800445e:	4b41      	ldr	r3, [pc, #260]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	0f1b      	lsrs	r3, r3, #28
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800446a:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	fb03 f202 	mul.w	r2, r3, r2
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	61fb      	str	r3, [r7, #28]
          break;
 8004482:	e00f      	b.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004484:	4b39      	ldr	r3, [pc, #228]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004486:	61fb      	str	r3, [r7, #28]
          break;
 8004488:	e00c      	b.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8004496:	4b34      	ldr	r3, [pc, #208]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004498:	61fb      	str	r3, [r7, #28]
          break;
 800449a:	e003      	b.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800449c:	4b32      	ldr	r3, [pc, #200]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800449e:	61fb      	str	r3, [r7, #28]
          break;
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80044a2:	bf00      	nop
        }
      }
      break;
 80044a4:	e11b      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80044a6:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ac:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80044b8:	d075      	beq.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80044c0:	d87e      	bhi.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044c8:	d03c      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d0:	d876      	bhi.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044de:	d16f      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044e0:	4b22      	ldr	r3, [pc, #136]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044e2:	61fb      	str	r3, [r7, #28]
          break;
 80044e4:	e06f      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f2:	d109      	bne.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80044f4:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044fe:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e008      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004508:	4b16      	ldr	r3, [pc, #88]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800450a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004512:	4a15      	ldr	r2, [pc, #84]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800451c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004534:	0f1b      	lsrs	r3, r3, #28
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	61fb      	str	r3, [r7, #28]
          break;
 8004542:	e040      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004550:	d10e      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004552:	4b04      	ldr	r3, [pc, #16]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800455a:	4a03      	ldr	r2, [pc, #12]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	e00d      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004564:	40023800 	.word	0x40023800
 8004568:	00f42400 	.word	0x00f42400
 800456c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004570:	4b5e      	ldr	r3, [pc, #376]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004578:	4a5d      	ldr	r2, [pc, #372]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004580:	4b5a      	ldr	r3, [pc, #360]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	099b      	lsrs	r3, r3, #6
 8004586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	fb02 f303 	mul.w	r3, r2, r3
 8004590:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004592:	4b56      	ldr	r3, [pc, #344]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	0f1b      	lsrs	r3, r3, #28
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a2:	61fb      	str	r3, [r7, #28]
          break;
 80045a4:	e00f      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045a6:	4b51      	ldr	r3, [pc, #324]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b2:	d102      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          {
            frequency = HSE_VALUE;
 80045b4:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045b6:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80045b8:	e005      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
            frequency = HSI_VALUE;
 80045ba:	4b4d      	ldr	r3, [pc, #308]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045bc:	61fb      	str	r3, [r7, #28]
          break;
 80045be:	e002      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
          break;
 80045c4:	bf00      	nop
        }
      }
      break;
 80045c6:	e08a      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80045c8:	4b48      	ldr	r3, [pc, #288]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ce:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80045da:	d06f      	beq.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80045e2:	d878      	bhi.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ea:	d03c      	beq.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f2:	d870      	bhi.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d006      	beq.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004600:	d169      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004602:	4b3c      	ldr	r3, [pc, #240]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004604:	61fb      	str	r3, [r7, #28]
          break;
 8004606:	e069      	b.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004608:	4b38      	ldr	r3, [pc, #224]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004614:	d109      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004616:	4b35      	ldr	r3, [pc, #212]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004620:	4a33      	ldr	r2, [pc, #204]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004622:	fbb2 f3f3 	udiv	r3, r2, r3
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	e008      	b.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800462a:	4b30      	ldr	r3, [pc, #192]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800462c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004634:	4a2e      	ldr	r2, [pc, #184]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800463c:	4b2b      	ldr	r3, [pc, #172]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800463e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004642:	099b      	lsrs	r3, r3, #6
 8004644:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004650:	4b26      	ldr	r3, [pc, #152]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004656:	0f1b      	lsrs	r3, r3, #28
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	61fb      	str	r3, [r7, #28]
          break;
 8004664:	e03a      	b.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004666:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004672:	d108      	bne.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800467c:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e007      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004686:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	099b      	lsrs	r3, r3, #6
 800469c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80046a8:	4b10      	ldr	r3, [pc, #64]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	0f1b      	lsrs	r3, r3, #28
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	61fb      	str	r3, [r7, #28]
          break;
 80046ba:	e00f      	b.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c8:	d102      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          {
            frequency = HSE_VALUE;
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80046cc:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80046ce:	e005      	b.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = HSI_VALUE;
 80046d0:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80046d2:	61fb      	str	r3, [r7, #28]
          break;
 80046d4:	e002      	b.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
          break;
 80046da:	bf00      	nop
        }
      }
      break;
 80046dc:	bf00      	nop
    }
  }
  return frequency;
 80046de:	69fb      	ldr	r3, [r7, #28]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3724      	adds	r7, #36	; 0x24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	40023800 	.word	0x40023800
 80046f0:	00f42400 	.word	0x00f42400
 80046f4:	00bb8000 	.word	0x00bb8000

080046f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b0ae      	sub	sp, #184	; 0xb8
 80046fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800471e:	4bcb      	ldr	r3, [pc, #812]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b0c      	cmp	r3, #12
 8004728:	f200 8204 	bhi.w	8004b34 <HAL_RCC_GetSysClockFreq+0x43c>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <HAL_RCC_GetSysClockFreq+0x3c>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004769 	.word	0x08004769
 8004738:	08004b35 	.word	0x08004b35
 800473c:	08004b35 	.word	0x08004b35
 8004740:	08004b35 	.word	0x08004b35
 8004744:	08004771 	.word	0x08004771
 8004748:	08004b35 	.word	0x08004b35
 800474c:	08004b35 	.word	0x08004b35
 8004750:	08004b35 	.word	0x08004b35
 8004754:	08004779 	.word	0x08004779
 8004758:	08004b35 	.word	0x08004b35
 800475c:	08004b35 	.word	0x08004b35
 8004760:	08004b35 	.word	0x08004b35
 8004764:	08004969 	.word	0x08004969
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004768:	4bb9      	ldr	r3, [pc, #740]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x358>)
 800476a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800476e:	e1e5      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004770:	4bb7      	ldr	r3, [pc, #732]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x358>)
 8004772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004776:	e1e1      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004778:	4bb4      	ldr	r3, [pc, #720]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x354>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004784:	4bb1      	ldr	r3, [pc, #708]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d071      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004790:	4bae      	ldr	r3, [pc, #696]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	099b      	lsrs	r3, r3, #6
 8004796:	2200      	movs	r2, #0
 8004798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800479c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80047a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047ac:	2300      	movs	r3, #0
 80047ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047b6:	4622      	mov	r2, r4
 80047b8:	462b      	mov	r3, r5
 80047ba:	f04f 0000 	mov.w	r0, #0
 80047be:	f04f 0100 	mov.w	r1, #0
 80047c2:	0159      	lsls	r1, r3, #5
 80047c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c8:	0150      	lsls	r0, r2, #5
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4621      	mov	r1, r4
 80047d0:	1a51      	subs	r1, r2, r1
 80047d2:	6439      	str	r1, [r7, #64]	; 0x40
 80047d4:	4629      	mov	r1, r5
 80047d6:	eb63 0301 	sbc.w	r3, r3, r1
 80047da:	647b      	str	r3, [r7, #68]	; 0x44
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80047e8:	4649      	mov	r1, r9
 80047ea:	018b      	lsls	r3, r1, #6
 80047ec:	4641      	mov	r1, r8
 80047ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047f2:	4641      	mov	r1, r8
 80047f4:	018a      	lsls	r2, r1, #6
 80047f6:	4641      	mov	r1, r8
 80047f8:	1a51      	subs	r1, r2, r1
 80047fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80047fc:	4649      	mov	r1, r9
 80047fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004810:	4649      	mov	r1, r9
 8004812:	00cb      	lsls	r3, r1, #3
 8004814:	4641      	mov	r1, r8
 8004816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800481a:	4641      	mov	r1, r8
 800481c:	00ca      	lsls	r2, r1, #3
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	4603      	mov	r3, r0
 8004824:	4622      	mov	r2, r4
 8004826:	189b      	adds	r3, r3, r2
 8004828:	633b      	str	r3, [r7, #48]	; 0x30
 800482a:	462b      	mov	r3, r5
 800482c:	460a      	mov	r2, r1
 800482e:	eb42 0303 	adc.w	r3, r2, r3
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004840:	4629      	mov	r1, r5
 8004842:	028b      	lsls	r3, r1, #10
 8004844:	4621      	mov	r1, r4
 8004846:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800484a:	4621      	mov	r1, r4
 800484c:	028a      	lsls	r2, r1, #10
 800484e:	4610      	mov	r0, r2
 8004850:	4619      	mov	r1, r3
 8004852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800485c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004860:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004864:	f7fb fd34 	bl	80002d0 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4613      	mov	r3, r2
 800486e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004872:	e067      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004874:	4b75      	ldr	r3, [pc, #468]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	099b      	lsrs	r3, r3, #6
 800487a:	2200      	movs	r2, #0
 800487c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004880:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488c:	67bb      	str	r3, [r7, #120]	; 0x78
 800488e:	2300      	movs	r3, #0
 8004890:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004892:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004896:	4622      	mov	r2, r4
 8004898:	462b      	mov	r3, r5
 800489a:	f04f 0000 	mov.w	r0, #0
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	0159      	lsls	r1, r3, #5
 80048a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a8:	0150      	lsls	r0, r2, #5
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4621      	mov	r1, r4
 80048b0:	1a51      	subs	r1, r2, r1
 80048b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80048b4:	4629      	mov	r1, r5
 80048b6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80048c8:	4649      	mov	r1, r9
 80048ca:	018b      	lsls	r3, r1, #6
 80048cc:	4641      	mov	r1, r8
 80048ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048d2:	4641      	mov	r1, r8
 80048d4:	018a      	lsls	r2, r1, #6
 80048d6:	4641      	mov	r1, r8
 80048d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80048dc:	4649      	mov	r1, r9
 80048de:	eb63 0b01 	sbc.w	fp, r3, r1
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048f6:	4692      	mov	sl, r2
 80048f8:	469b      	mov	fp, r3
 80048fa:	4623      	mov	r3, r4
 80048fc:	eb1a 0303 	adds.w	r3, sl, r3
 8004900:	623b      	str	r3, [r7, #32]
 8004902:	462b      	mov	r3, r5
 8004904:	eb4b 0303 	adc.w	r3, fp, r3
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004916:	4629      	mov	r1, r5
 8004918:	028b      	lsls	r3, r1, #10
 800491a:	4621      	mov	r1, r4
 800491c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004920:	4621      	mov	r1, r4
 8004922:	028a      	lsls	r2, r1, #10
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800492c:	2200      	movs	r2, #0
 800492e:	673b      	str	r3, [r7, #112]	; 0x70
 8004930:	677a      	str	r2, [r7, #116]	; 0x74
 8004932:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004936:	f7fb fccb 	bl	80002d0 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4613      	mov	r3, r2
 8004940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004944:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	0c1b      	lsrs	r3, r3, #16
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	3301      	adds	r3, #1
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800495a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004966:	e0e9      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004968:	4b38      	ldr	r3, [pc, #224]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x354>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004974:	4b35      	ldr	r3, [pc, #212]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d069      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004980:	4b32      	ldr	r3, [pc, #200]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	2200      	movs	r2, #0
 8004988:	66bb      	str	r3, [r7, #104]	; 0x68
 800498a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800498c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800498e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004992:	663b      	str	r3, [r7, #96]	; 0x60
 8004994:	2300      	movs	r3, #0
 8004996:	667b      	str	r3, [r7, #100]	; 0x64
 8004998:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800499c:	4622      	mov	r2, r4
 800499e:	462b      	mov	r3, r5
 80049a0:	f04f 0000 	mov.w	r0, #0
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	0159      	lsls	r1, r3, #5
 80049aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ae:	0150      	lsls	r0, r2, #5
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4621      	mov	r1, r4
 80049b6:	1a51      	subs	r1, r2, r1
 80049b8:	61b9      	str	r1, [r7, #24]
 80049ba:	4629      	mov	r1, r5
 80049bc:	eb63 0301 	sbc.w	r3, r3, r1
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80049ce:	4659      	mov	r1, fp
 80049d0:	018b      	lsls	r3, r1, #6
 80049d2:	4651      	mov	r1, sl
 80049d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049d8:	4651      	mov	r1, sl
 80049da:	018a      	lsls	r2, r1, #6
 80049dc:	4651      	mov	r1, sl
 80049de:	ebb2 0801 	subs.w	r8, r2, r1
 80049e2:	4659      	mov	r1, fp
 80049e4:	eb63 0901 	sbc.w	r9, r3, r1
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049fc:	4690      	mov	r8, r2
 80049fe:	4699      	mov	r9, r3
 8004a00:	4623      	mov	r3, r4
 8004a02:	eb18 0303 	adds.w	r3, r8, r3
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	462b      	mov	r3, r5
 8004a0a:	eb49 0303 	adc.w	r3, r9, r3
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	028b      	lsls	r3, r1, #10
 8004a20:	4621      	mov	r1, r4
 8004a22:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a26:	4621      	mov	r1, r4
 8004a28:	028a      	lsls	r2, r1, #10
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a32:	2200      	movs	r2, #0
 8004a34:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a3c:	f7fb fc48 	bl	80002d0 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4613      	mov	r3, r2
 8004a46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a4a:	e063      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x41c>
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a54:	4b3d      	ldr	r3, [pc, #244]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x454>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	099b      	lsrs	r3, r3, #6
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	4611      	mov	r1, r2
 8004a60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a64:	653b      	str	r3, [r7, #80]	; 0x50
 8004a66:	2300      	movs	r3, #0
 8004a68:	657b      	str	r3, [r7, #84]	; 0x54
 8004a6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004a6e:	4642      	mov	r2, r8
 8004a70:	464b      	mov	r3, r9
 8004a72:	f04f 0000 	mov.w	r0, #0
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	0159      	lsls	r1, r3, #5
 8004a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a80:	0150      	lsls	r0, r2, #5
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4641      	mov	r1, r8
 8004a88:	1a51      	subs	r1, r2, r1
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	018b      	lsls	r3, r1, #6
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aaa:	4651      	mov	r1, sl
 8004aac:	018a      	lsls	r2, r1, #6
 8004aae:	4651      	mov	r1, sl
 8004ab0:	1a54      	subs	r4, r2, r1
 8004ab2:	4659      	mov	r1, fp
 8004ab4:	eb63 0501 	sbc.w	r5, r3, r1
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	00eb      	lsls	r3, r5, #3
 8004ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac6:	00e2      	lsls	r2, r4, #3
 8004ac8:	4614      	mov	r4, r2
 8004aca:	461d      	mov	r5, r3
 8004acc:	4643      	mov	r3, r8
 8004ace:	18e3      	adds	r3, r4, r3
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	eb45 0303 	adc.w	r3, r5, r3
 8004ad8:	607b      	str	r3, [r7, #4]
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	028b      	lsls	r3, r1, #10
 8004aea:	4621      	mov	r1, r4
 8004aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004af0:	4621      	mov	r1, r4
 8004af2:	028a      	lsls	r2, r1, #10
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004afc:	2200      	movs	r2, #0
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b06:	f7fb fbe3 	bl	80002d0 <__aeabi_uldivmod>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4613      	mov	r3, r2
 8004b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b14:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x454>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	0f1b      	lsrs	r3, r3, #28
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b32:	e003      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	37b8      	adds	r7, #184	; 0xb8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	00f42400 	.word	0x00f42400

08004b54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e28d      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 8083 	beq.w	8004c7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b74:	4b94      	ldr	r3, [pc, #592]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d019      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b80:	4b91      	ldr	r3, [pc, #580]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b8c:	4b8e      	ldr	r3, [pc, #568]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b98:	d00c      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9a:	4b8b      	ldr	r3, [pc, #556]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	d112      	bne.n	8004bcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ba6:	4b88      	ldr	r3, [pc, #544]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb2:	d10b      	bne.n	8004bcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb4:	4b84      	ldr	r3, [pc, #528]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d05b      	beq.n	8004c78 <HAL_RCC_OscConfig+0x124>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d157      	bne.n	8004c78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e25a      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd4:	d106      	bne.n	8004be4 <HAL_RCC_OscConfig+0x90>
 8004bd6:	4b7c      	ldr	r3, [pc, #496]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7b      	ldr	r2, [pc, #492]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e01d      	b.n	8004c20 <HAL_RCC_OscConfig+0xcc>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0xb4>
 8004bee:	4b76      	ldr	r3, [pc, #472]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a75      	ldr	r2, [pc, #468]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b73      	ldr	r3, [pc, #460]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a72      	ldr	r2, [pc, #456]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0xcc>
 8004c08:	4b6f      	ldr	r3, [pc, #444]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a6e      	ldr	r2, [pc, #440]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b6c      	ldr	r3, [pc, #432]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fc fef0 	bl	8001a0c <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fc feec 	bl	8001a0c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e21f      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	4b61      	ldr	r3, [pc, #388]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0xdc>
 8004c4e:	e014      	b.n	8004c7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fc fedc 	bl	8001a0c <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c58:	f7fc fed8 	bl	8001a0c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e20b      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	4b57      	ldr	r3, [pc, #348]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x104>
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d06f      	beq.n	8004d66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c86:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d017      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c92:	4b4d      	ldr	r3, [pc, #308]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d105      	bne.n	8004caa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d11c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb6:	4b44      	ldr	r3, [pc, #272]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc2:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_RCC_OscConfig+0x186>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e1d3      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cda:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4937      	ldr	r1, [pc, #220]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cee:	e03a      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf8:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <HAL_RCC_OscConfig+0x278>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fc fe85 	bl	8001a0c <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d06:	f7fc fe81 	bl	8001a0c <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e1b4      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	4b28      	ldr	r3, [pc, #160]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4925      	ldr	r1, [pc, #148]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]
 8004d38:	e015      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_RCC_OscConfig+0x278>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fc fe64 	bl	8001a0c <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d48:	f7fc fe60 	bl	8001a0c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e193      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d036      	beq.n	8004de0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fc fe44 	bl	8001a0c <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d88:	f7fc fe40 	bl	8001a0c <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e173      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCC_OscConfig+0x234>
 8004da6:	e01b      	b.n	8004de0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dae:	f7fc fe2d 	bl	8001a0c <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	e00e      	b.n	8004dd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db6:	f7fc fe29 	bl	8001a0c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d907      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e15c      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	42470000 	.word	0x42470000
 8004dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd4:	4b8a      	ldr	r3, [pc, #552]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ea      	bne.n	8004db6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8097 	beq.w	8004f1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df2:	4b83      	ldr	r3, [pc, #524]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	4b7f      	ldr	r3, [pc, #508]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	4a7e      	ldr	r2, [pc, #504]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b79      	ldr	r3, [pc, #484]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d118      	bne.n	8004e5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2a:	4b76      	ldr	r3, [pc, #472]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a75      	ldr	r2, [pc, #468]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e36:	f7fc fde9 	bl	8001a0c <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fc fde5 	bl	8001a0c <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e118      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	4b6c      	ldr	r3, [pc, #432]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <HAL_RCC_OscConfig+0x31e>
 8004e64:	4b66      	ldr	r3, [pc, #408]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	4a65      	ldr	r2, [pc, #404]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e70:	e01c      	b.n	8004eac <HAL_RCC_OscConfig+0x358>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x340>
 8004e7a:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	4a60      	ldr	r2, [pc, #384]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6713      	str	r3, [r2, #112]	; 0x70
 8004e86:	4b5e      	ldr	r3, [pc, #376]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a5d      	ldr	r2, [pc, #372]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6713      	str	r3, [r2, #112]	; 0x70
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0x358>
 8004e94:	4b5a      	ldr	r3, [pc, #360]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a59      	ldr	r2, [pc, #356]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea0:	4b57      	ldr	r3, [pc, #348]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a56      	ldr	r2, [pc, #344]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fc fdaa 	bl	8001a0c <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fc fda6 	bl	8001a0c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0d7      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	4b4b      	ldr	r3, [pc, #300]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ee      	beq.n	8004ebc <HAL_RCC_OscConfig+0x368>
 8004ede:	e014      	b.n	8004f0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fc fd94 	bl	8001a0c <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fc fd90 	bl	8001a0c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e0c1      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efe:	4b40      	ldr	r3, [pc, #256]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ee      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f10:	4b3b      	ldr	r3, [pc, #236]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80ad 	beq.w	8005080 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f26:	4b36      	ldr	r3, [pc, #216]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d060      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d145      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3a:	4b33      	ldr	r3, [pc, #204]	; (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fc fd64 	bl	8001a0c <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fc fd60 	bl	8001a0c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e093      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	4b29      	ldr	r3, [pc, #164]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	491b      	ldr	r1, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9e:	f7fc fd35 	bl	8001a0c <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fc fd31 	bl	8001a0c <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e064      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x452>
 8004fc4:	e05c      	b.n	8005080 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fc fd1e 	bl	8001a0c <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fc fd1a 	bl	8001a0c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e04d      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x480>
 8004ff2:	e045      	b.n	8005080 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e040      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
 8005000:	40023800 	.word	0x40023800
 8005004:	40007000 	.word	0x40007000
 8005008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800500c:	4b1f      	ldr	r3, [pc, #124]	; (800508c <HAL_RCC_OscConfig+0x538>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d030      	beq.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d129      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d122      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005044:	4293      	cmp	r3, r2
 8005046:	d119      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d10f      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d107      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800

08005090 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e022      	b.n	80050e8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d105      	bne.n	80050ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7fc f9eb 	bl	8001490 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2203      	movs	r2, #3
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f814 	bl	80050f0 <HAL_SD_InitCard>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e00a      	b.n	80050e8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80050f0:	b5b0      	push	{r4, r5, r7, lr}
 80050f2:	b08e      	sub	sp, #56	; 0x38
 80050f4:	af04      	add	r7, sp, #16
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005100:	2300      	movs	r3, #0
 8005102:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005108:	2300      	movs	r3, #0
 800510a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800510c:	2376      	movs	r3, #118	; 0x76
 800510e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681d      	ldr	r5, [r3, #0]
 8005114:	466c      	mov	r4, sp
 8005116:	f107 0314 	add.w	r3, r7, #20
 800511a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800511e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005122:	f107 0308 	add.w	r3, r7, #8
 8005126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005128:	4628      	mov	r0, r5
 800512a:	f002 fb47 	bl	80077bc <SDIO_Init>
 800512e:	4603      	mov	r3, r0
 8005130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e04f      	b.n	80051e0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005140:	4b29      	ldr	r3, [pc, #164]	; (80051e8 <HAL_SD_InitCard+0xf8>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f002 fb7f 	bl	800784e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005150:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <HAL_SD_InitCard+0xf8>)
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005156:	2002      	movs	r0, #2
 8005158:	f7fc fc64 	bl	8001a24 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f001 f8f1 	bl	8006344 <SD_PowerON>
 8005162:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e02e      	b.n	80051e0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f001 f810 	bl	80061a8 <SD_InitCard>
 8005188:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e01b      	b.n	80051e0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051b0:	4618      	mov	r0, r3
 80051b2:	f002 fbde 	bl	8007972 <SDMMC_CmdBlockLength>
 80051b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00f      	beq.n	80051de <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <HAL_SD_InitCard+0xfc>)
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3728      	adds	r7, #40	; 0x28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bdb0      	pop	{r4, r5, r7, pc}
 80051e8:	422580a0 	.word	0x422580a0
 80051ec:	004005ff 	.word	0x004005ff

080051f0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b092      	sub	sp, #72	; 0x48
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80051fe:	f7fc fc05 	bl	8001a0c <HAL_GetTick>
 8005202:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d107      	bne.n	8005222 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e1bd      	b.n	800559e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b01      	cmp	r3, #1
 800522c:	f040 81b0 	bne.w	8005590 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	441a      	add	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005240:	429a      	cmp	r2, r3
 8005242:	d907      	bls.n	8005254 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e1a4      	b.n	800559e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2203      	movs	r2, #3
 8005258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2200      	movs	r2, #0
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	2b01      	cmp	r3, #1
 800526a:	d002      	beq.n	8005272 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	025b      	lsls	r3, r3, #9
 8005270:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005276:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	025b      	lsls	r3, r3, #9
 800527c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800527e:	2390      	movs	r3, #144	; 0x90
 8005280:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005282:	2302      	movs	r3, #2
 8005284:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005286:	2300      	movs	r3, #0
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800528a:	2301      	movs	r3, #1
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f107 0214 	add.w	r2, r7, #20
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f002 fb3e 	bl	800791a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d90a      	bls.n	80052ba <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2202      	movs	r2, #2
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052b0:	4618      	mov	r0, r3
 80052b2:	f002 fba2 	bl	80079fa <SDMMC_CmdReadMultiBlock>
 80052b6:	6478      	str	r0, [r7, #68]	; 0x44
 80052b8:	e009      	b.n	80052ce <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052c6:	4618      	mov	r0, r3
 80052c8:	f002 fb75 	bl	80079b6 <SDMMC_CmdReadSingleBlock>
 80052cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80052ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d012      	beq.n	80052fa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a7a      	ldr	r2, [pc, #488]	; (80054c4 <HAL_SD_ReadBlocks+0x2d4>)
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e2:	431a      	orrs	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e151      	b.n	800559e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80052fe:	e061      	b.n	80053c4 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d03c      	beq.n	8005388 <HAL_SD_ReadBlocks+0x198>
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d039      	beq.n	8005388 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005314:	2300      	movs	r3, #0
 8005316:	643b      	str	r3, [r7, #64]	; 0x40
 8005318:	e033      	b.n	8005382 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f002 fa77 	bl	8007812 <SDIO_ReadFIFO>
 8005324:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	b2da      	uxtb	r2, r3
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800532e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005330:	3301      	adds	r3, #1
 8005332:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005336:	3b01      	subs	r3, #1
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	0a1b      	lsrs	r3, r3, #8
 800533e:	b2da      	uxtb	r2, r3
 8005340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005342:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	3301      	adds	r3, #1
 8005348:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	3b01      	subs	r3, #1
 800534e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	b2da      	uxtb	r2, r3
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800535a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535c:	3301      	adds	r3, #1
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005362:	3b01      	subs	r3, #1
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	0e1b      	lsrs	r3, r3, #24
 800536a:	b2da      	uxtb	r2, r3
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	3301      	adds	r3, #1
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005378:	3b01      	subs	r3, #1
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800537c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537e:	3301      	adds	r3, #1
 8005380:	643b      	str	r3, [r7, #64]	; 0x40
 8005382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005384:	2b07      	cmp	r3, #7
 8005386:	d9c8      	bls.n	800531a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005388:	f7fc fb40 	bl	8001a0c <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005394:	429a      	cmp	r2, r3
 8005396:	d902      	bls.n	800539e <HAL_SD_ReadBlocks+0x1ae>
 8005398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539a:	2b00      	cmp	r3, #0
 800539c:	d112      	bne.n	80053c4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a48      	ldr	r2, [pc, #288]	; (80054c4 <HAL_SD_ReadBlocks+0x2d4>)
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e0ec      	b.n	800559e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d096      	beq.n	8005300 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d022      	beq.n	8005426 <HAL_SD_ReadBlocks+0x236>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d91f      	bls.n	8005426 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d01b      	beq.n	8005426 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f002 fb68 	bl	8007ac8 <SDMMC_CmdStopTransfer>
 80053f8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80053fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d012      	beq.n	8005426 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2f      	ldr	r2, [pc, #188]	; (80054c4 <HAL_SD_ReadBlocks+0x2d4>)
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540e:	431a      	orrs	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e0bb      	b.n	800559e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d012      	beq.n	800545a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <HAL_SD_ReadBlocks+0x2d4>)
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	f043 0208 	orr.w	r2, r3, #8
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e0a1      	b.n	800559e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d012      	beq.n	800548e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <HAL_SD_ReadBlocks+0x2d4>)
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	f043 0202 	orr.w	r2, r3, #2
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e087      	b.n	800559e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d064      	beq.n	8005566 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <HAL_SD_ReadBlocks+0x2d4>)
 80054a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e06d      	b.n	800559e <HAL_SD_ReadBlocks+0x3ae>
 80054c2:	bf00      	nop
 80054c4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f002 f9a0 	bl	8007812 <SDIO_ReadFIFO>
 80054d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	3301      	adds	r3, #1
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80054e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e4:	3b01      	subs	r3, #1
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	3301      	adds	r3, #1
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	3b01      	subs	r3, #1
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550a:	3301      	adds	r3, #1
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800550e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005510:	3b01      	subs	r3, #1
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	0e1b      	lsrs	r3, r3, #24
 8005518:	b2da      	uxtb	r2, r3
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	3301      	adds	r3, #1
 8005522:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005526:	3b01      	subs	r3, #1
 8005528:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800552a:	f7fc fa6f 	bl	8001a0c <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005536:	429a      	cmp	r2, r3
 8005538:	d902      	bls.n	8005540 <HAL_SD_ReadBlocks+0x350>
 800553a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553c:	2b00      	cmp	r3, #0
 800553e:	d112      	bne.n	8005566 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_SD_ReadBlocks+0x3b8>)
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e01b      	b.n	800559e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_SD_ReadBlocks+0x38a>
 8005574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1a6      	bne.n	80054c8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005582:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	e006      	b.n	800559e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3748      	adds	r7, #72	; 0x48
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	004005ff 	.word	0x004005ff

080055ac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b092      	sub	sp, #72	; 0x48
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80055ba:	f7fc fa27 	bl	8001a0c <HAL_GetTick>
 80055be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e165      	b.n	80058aa <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	f040 8158 	bne.w	800589c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80055f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	441a      	add	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d907      	bls.n	8005610 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e14c      	b.n	80058aa <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2203      	movs	r2, #3
 8005614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2200      	movs	r2, #0
 800561e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	2b01      	cmp	r3, #1
 8005626:	d002      	beq.n	800562e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	025b      	lsls	r3, r3, #9
 800562c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800562e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005632:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	025b      	lsls	r3, r3, #9
 8005638:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800563a:	2390      	movs	r3, #144	; 0x90
 800563c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800563e:	2300      	movs	r3, #0
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005642:	2300      	movs	r3, #0
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005646:	2301      	movs	r3, #1
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f107 0218 	add.w	r2, r7, #24
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f002 f960 	bl	800791a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d90a      	bls.n	8005676 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800566c:	4618      	mov	r0, r3
 800566e:	f002 fa08 	bl	8007a82 <SDMMC_CmdWriteMultiBlock>
 8005672:	6478      	str	r0, [r7, #68]	; 0x44
 8005674:	e009      	b.n	800568a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2210      	movs	r2, #16
 800567a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005682:	4618      	mov	r0, r3
 8005684:	f002 f9db 	bl	8007a3e <SDMMC_CmdWriteSingleBlock>
 8005688:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800568a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800568c:	2b00      	cmp	r3, #0
 800568e:	d012      	beq.n	80056b6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a87      	ldr	r2, [pc, #540]	; (80058b4 <HAL_SD_WriteBlocks+0x308>)
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800569c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569e:	431a      	orrs	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0f9      	b.n	80058aa <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80056ba:	e065      	b.n	8005788 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d040      	beq.n	800574c <HAL_SD_WriteBlocks+0x1a0>
 80056ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d03d      	beq.n	800574c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80056d0:	2300      	movs	r3, #0
 80056d2:	643b      	str	r3, [r7, #64]	; 0x40
 80056d4:	e037      	b.n	8005746 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	3301      	adds	r3, #1
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	3b01      	subs	r3, #1
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80056e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	021a      	lsls	r2, r3, #8
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	3301      	adds	r3, #1
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fc:	3b01      	subs	r3, #1
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	041a      	lsls	r2, r3, #16
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	3301      	adds	r3, #1
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005714:	3b01      	subs	r3, #1
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	061a      	lsls	r2, r3, #24
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	3301      	adds	r3, #1
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572c:	3b01      	subs	r3, #1
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f107 0214 	add.w	r2, r7, #20
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f002 f876 	bl	800782c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005742:	3301      	adds	r3, #1
 8005744:	643b      	str	r3, [r7, #64]	; 0x40
 8005746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005748:	2b07      	cmp	r3, #7
 800574a:	d9c4      	bls.n	80056d6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800574c:	f7fc f95e 	bl	8001a0c <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005758:	429a      	cmp	r2, r3
 800575a:	d902      	bls.n	8005762 <HAL_SD_WriteBlocks+0x1b6>
 800575c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575e:	2b00      	cmp	r3, #0
 8005760:	d112      	bne.n	8005788 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a53      	ldr	r2, [pc, #332]	; (80058b4 <HAL_SD_WriteBlocks+0x308>)
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e090      	b.n	80058aa <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005792:	2b00      	cmp	r3, #0
 8005794:	d092      	beq.n	80056bc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d022      	beq.n	80057ea <HAL_SD_WriteBlocks+0x23e>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d91f      	bls.n	80057ea <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d01b      	beq.n	80057ea <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f002 f986 	bl	8007ac8 <SDMMC_CmdStopTransfer>
 80057bc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80057be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d012      	beq.n	80057ea <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a3a      	ldr	r2, [pc, #232]	; (80058b4 <HAL_SD_WriteBlocks+0x308>)
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d2:	431a      	orrs	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e05f      	b.n	80058aa <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a2d      	ldr	r2, [pc, #180]	; (80058b4 <HAL_SD_WriteBlocks+0x308>)
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	f043 0208 	orr.w	r2, r3, #8
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e045      	b.n	80058aa <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d012      	beq.n	8005852 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a20      	ldr	r2, [pc, #128]	; (80058b4 <HAL_SD_WriteBlocks+0x308>)
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	f043 0202 	orr.w	r2, r3, #2
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e02b      	b.n	80058aa <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	d012      	beq.n	8005886 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a13      	ldr	r2, [pc, #76]	; (80058b4 <HAL_SD_WriteBlocks+0x308>)
 8005866:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	f043 0210 	orr.w	r2, r3, #16
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e011      	b.n	80058aa <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f240 523a 	movw	r2, #1338	; 0x53a
 800588e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	e006      	b.n	80058aa <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3748      	adds	r7, #72	; 0x48
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	004005ff 	.word	0x004005ff

080058b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_SD_IRQHandler+0x2e>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 ff4f 	bl	8006782 <SD_Read_IT>
 80058e4:	e155      	b.n	8005b92 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 808f 	beq.w	8005a14 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800590e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005912:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d039      	beq.n	80059a2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d104      	bne.n	8005942 <HAL_SD_IRQHandler+0x8a>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d011      	beq.n	8005966 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f002 f8be 	bl	8007ac8 <SDMMC_CmdStopTransfer>
 800594c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f91f 	bl	8005ba4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f240 523a 	movw	r2, #1338	; 0x53a
 800596e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <HAL_SD_IRQHandler+0xda>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f002 fd34 	bl	8008400 <HAL_SD_RxCpltCallback>
 8005998:	e0fb      	b.n	8005b92 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f002 fd26 	bl	80083ec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80059a0:	e0f7      	b.n	8005b92 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80f2 	beq.w	8005b92 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d011      	beq.n	80059dc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f002 f883 	bl	8007ac8 <SDMMC_CmdStopTransfer>
 80059c2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d008      	beq.n	80059dc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8e4 	bl	8005ba4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 80d5 	bne.w	8005b92 <HAL_SD_IRQHandler+0x2da>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 80cf 	bne.w	8005b92 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0208 	bic.w	r2, r2, #8
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f002 fced 	bl	80083ec <HAL_SD_TxCpltCallback>
}
 8005a12:	e0be      	b.n	8005b92 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <HAL_SD_IRQHandler+0x17c>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fef9 	bl	8006824 <SD_Write_IT>
 8005a32:	e0ae      	b.n	8005b92 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80a7 	beq.w	8005b92 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	f043 0202 	orr.w	r2, r3, #2
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a70:	f043 0208 	orr.w	r2, r3, #8
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	f043 0220 	orr.w	r2, r3, #32
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	f043 0210 	orr.w	r2, r3, #16
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ab4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fffc 	bl	8007ac8 <SDMMC_CmdStopTransfer>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f855 	bl	8005ba4 <HAL_SD_ErrorCallback>
}
 8005afa:	e04a      	b.n	8005b92 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d045      	beq.n	8005b92 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_SD_IRQHandler+0x262>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <HAL_SD_IRQHandler+0x2e4>)
 8005b20:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fc fa44 	bl	8001fb4 <HAL_DMA_Abort_IT>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d02f      	beq.n	8005b92 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fac8 	bl	80060cc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b3c:	e029      	b.n	8005b92 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <HAL_SD_IRQHandler+0x29a>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d011      	beq.n	8005b76 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	4a12      	ldr	r2, [pc, #72]	; (8005ba0 <HAL_SD_IRQHandler+0x2e8>)
 8005b58:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fc fa28 	bl	8001fb4 <HAL_DMA_Abort_IT>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d013      	beq.n	8005b92 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fae3 	bl	800613a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b74:	e00d      	b.n	8005b92 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f002 fc24 	bl	80083d8 <HAL_SD_AbortCallback>
}
 8005b90:	e7ff      	b.n	8005b92 <HAL_SD_IRQHandler+0x2da>
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	080060cd 	.word	0x080060cd
 8005ba0:	0800613b 	.word	0x0800613b

08005ba4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc6:	0f9b      	lsrs	r3, r3, #30
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd2:	0e9b      	lsrs	r3, r3, #26
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be4:	0e1b      	lsrs	r3, r3, #24
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf6:	0c1b      	lsrs	r3, r3, #16
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c18:	0d1b      	lsrs	r3, r3, #20
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c36:	0bdb      	lsrs	r3, r3, #15
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c48:	0b9b      	lsrs	r3, r3, #14
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c5a:	0b5b      	lsrs	r3, r3, #13
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c6c:	0b1b      	lsrs	r3, r3, #12
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d163      	bne.n	8005d50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c8c:	009a      	lsls	r2, r3, #2
 8005c8e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c92:	4013      	ands	r3, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005c98:	0f92      	lsrs	r2, r2, #30
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca4:	0edb      	lsrs	r3, r3, #27
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb6:	0e1b      	lsrs	r3, r3, #24
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc8:	0d5b      	lsrs	r3, r3, #21
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cda:	0c9b      	lsrs	r3, r3, #18
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cec:	0bdb      	lsrs	r3, r3, #15
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	7e1b      	ldrb	r3, [r3, #24]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	3302      	adds	r3, #2
 8005d10:	2201      	movs	r2, #1
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d1a:	fb03 f202 	mul.w	r2, r3, r2
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	7a1b      	ldrb	r3, [r3, #8]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	409a      	lsls	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d3c:	0a52      	lsrs	r2, r2, #9
 8005d3e:	fb03 f202 	mul.w	r2, r3, r2
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4c:	661a      	str	r2, [r3, #96]	; 0x60
 8005d4e:	e031      	b.n	8005db4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d11d      	bne.n	8005d94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d66:	0c1b      	lsrs	r3, r3, #16
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	3301      	adds	r3, #1
 8005d74:	029a      	lsls	r2, r3, #10
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d88:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	661a      	str	r2, [r3, #96]	; 0x60
 8005d92:	e00f      	b.n	8005db4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a58      	ldr	r2, [pc, #352]	; (8005efc <HAL_SD_GetCardCSD+0x344>)
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e09d      	b.n	8005ef0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db8:	0b9b      	lsrs	r3, r3, #14
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dca:	09db      	lsrs	r3, r3, #7
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dec:	0fdb      	lsrs	r3, r3, #31
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df8:	0f5b      	lsrs	r3, r3, #29
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	0e9b      	lsrs	r3, r3, #26
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	0d9b      	lsrs	r3, r3, #22
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	0d5b      	lsrs	r3, r3, #21
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	0c1b      	lsrs	r3, r3, #16
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5e:	0bdb      	lsrs	r3, r3, #15
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	0b9b      	lsrs	r3, r3, #14
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	0b5b      	lsrs	r3, r3, #13
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	0b1b      	lsrs	r3, r3, #12
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	0a9b      	lsrs	r3, r3, #10
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	004005ff 	.word	0x004005ff

08005f00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005f58:	b5b0      	push	{r4, r5, r7, lr}
 8005f5a:	b08e      	sub	sp, #56	; 0x38
 8005f5c:	af04      	add	r7, sp, #16
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d02e      	beq.n	8005fd6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7e:	d106      	bne.n	8005f8e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8005f8c:	e029      	b.n	8005fe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f94:	d10a      	bne.n	8005fac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fa8a 	bl	80064b0 <SD_WideBus_Enable>
 8005f9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38
 8005faa:	e01a      	b.n	8005fe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fac7 	bl	8006546 <SD_WideBus_Disable>
 8005fb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
 8005fc6:	e00c      	b.n	8005fe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	639a      	str	r2, [r3, #56]	; 0x38
 8005fd4:	e005      	b.n	8005fe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a26      	ldr	r2, [pc, #152]	; (8006088 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006000:	e01f      	b.n	8006042 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681d      	ldr	r5, [r3, #0]
 8006028:	466c      	mov	r4, sp
 800602a:	f107 0314 	add.w	r3, r7, #20
 800602e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006032:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006036:	f107 0308 	add.w	r3, r7, #8
 800603a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800603c:	4628      	mov	r0, r5
 800603e:	f001 fbbd 	bl	80077bc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fc91 	bl	8007972 <SDMMC_CmdBlockLength>
 8006050:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00c      	beq.n	8006072 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a0a      	ldr	r2, [pc, #40]	; (8006088 <HAL_SD_ConfigWideBusOperation+0x130>)
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800607a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800607e:	4618      	mov	r0, r3
 8006080:	3728      	adds	r7, #40	; 0x28
 8006082:	46bd      	mov	sp, r7
 8006084:	bdb0      	pop	{r4, r5, r7, pc}
 8006086:	bf00      	nop
 8006088:	004005ff 	.word	0x004005ff

0800608c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006098:	f107 030c 	add.w	r3, r7, #12
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f9de 	bl	8006460 <SD_SendStatus>
 80060a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	0a5b      	lsrs	r3, r3, #9
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80060c2:	693b      	ldr	r3, [r7, #16]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f240 523a 	movw	r2, #1338	; 0x53a
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff ffd1 	bl	800608c <HAL_SD_GetCardState>
 80060ea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b06      	cmp	r3, #6
 80060fe:	d002      	beq.n	8006106 <SD_DMATxAbort+0x3a>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b05      	cmp	r3, #5
 8006104:	d10a      	bne.n	800611c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f001 fcdc 	bl	8007ac8 <SDMMC_CmdStopTransfer>
 8006110:	4602      	mov	r2, r0
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	431a      	orrs	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f002 f957 	bl	80083d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800612a:	e002      	b.n	8006132 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff fd39 	bl	8005ba4 <HAL_SD_ErrorCallback>
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006150:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff ff9a 	bl	800608c <HAL_SD_GetCardState>
 8006158:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b06      	cmp	r3, #6
 800616c:	d002      	beq.n	8006174 <SD_DMARxAbort+0x3a>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b05      	cmp	r3, #5
 8006172:	d10a      	bne.n	800618a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4618      	mov	r0, r3
 800617a:	f001 fca5 	bl	8007ac8 <SDMMC_CmdStopTransfer>
 800617e:	4602      	mov	r2, r0
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	431a      	orrs	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f002 f920 	bl	80083d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006198:	e002      	b.n	80061a0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fd02 	bl	8005ba4 <HAL_SD_ErrorCallback>
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b094      	sub	sp, #80	; 0x50
 80061ac:	af04      	add	r7, sp, #16
 80061ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80061b0:	2301      	movs	r3, #1
 80061b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 fb56 	bl	800786a <SDIO_GetPowerState>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061c8:	e0b8      	b.n	800633c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d02f      	beq.n	8006232 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fd80 	bl	8007cdc <SDMMC_CmdSendCID>
 80061dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	e0a9      	b.n	800633c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 fb80 	bl	80078f4 <SDIO_GetResponse>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2104      	movs	r1, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f001 fb77 	bl	80078f4 <SDIO_GetResponse>
 8006206:	4602      	mov	r2, r0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2108      	movs	r1, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f001 fb6e 	bl	80078f4 <SDIO_GetResponse>
 8006218:	4602      	mov	r2, r0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	210c      	movs	r1, #12
 8006224:	4618      	mov	r0, r3
 8006226:	f001 fb65 	bl	80078f4 <SDIO_GetResponse>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006236:	2b03      	cmp	r3, #3
 8006238:	d00d      	beq.n	8006256 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f107 020e 	add.w	r2, r7, #14
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f001 fd86 	bl	8007d56 <SDMMC_CmdSetRelAdd>
 800624a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <SD_InitCard+0xae>
    {
      return errorstate;
 8006252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006254:	e072      	b.n	800633c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	2b03      	cmp	r3, #3
 800625c:	d036      	beq.n	80062cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800625e:	89fb      	ldrh	r3, [r7, #14]
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f001 fd50 	bl	8007d18 <SDMMC_CmdSendCSD>
 8006278:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800627a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006282:	e05b      	b.n	800633c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fb32 	bl	80078f4 <SDIO_GetResponse>
 8006290:	4602      	mov	r2, r0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2104      	movs	r1, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f001 fb29 	bl	80078f4 <SDIO_GetResponse>
 80062a2:	4602      	mov	r2, r0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2108      	movs	r1, #8
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 fb20 	bl	80078f4 <SDIO_GetResponse>
 80062b4:	4602      	mov	r2, r0
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	210c      	movs	r1, #12
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 fb17 	bl	80078f4 <SDIO_GetResponse>
 80062c6:	4602      	mov	r2, r0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2104      	movs	r1, #4
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 fb0e 	bl	80078f4 <SDIO_GetResponse>
 80062d8:	4603      	mov	r3, r0
 80062da:	0d1a      	lsrs	r2, r3, #20
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80062e0:	f107 0310 	add.w	r3, r7, #16
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff fc66 	bl	8005bb8 <HAL_SD_GetCardCSD>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062f6:	e021      	b.n	800633c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6819      	ldr	r1, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	2200      	movs	r2, #0
 8006304:	461c      	mov	r4, r3
 8006306:	4615      	mov	r5, r2
 8006308:	4622      	mov	r2, r4
 800630a:	462b      	mov	r3, r5
 800630c:	4608      	mov	r0, r1
 800630e:	f001 fbfd 	bl	8007b0c <SDMMC_CmdSelDesel>
 8006312:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <SD_InitCard+0x176>
  {
    return errorstate;
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	e00e      	b.n	800633c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681d      	ldr	r5, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	466c      	mov	r4, sp
 8006326:	f103 0210 	add.w	r2, r3, #16
 800632a:	ca07      	ldmia	r2, {r0, r1, r2}
 800632c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006330:	3304      	adds	r3, #4
 8006332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006334:	4628      	mov	r0, r5
 8006336:	f001 fa41 	bl	80077bc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3740      	adds	r7, #64	; 0x40
 8006340:	46bd      	mov	sp, r7
 8006342:	bdb0      	pop	{r4, r5, r7, pc}

08006344 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f001 fbf8 	bl	8007b52 <SDMMC_CmdGoIdleState>
 8006362:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <SD_PowerON+0x2a>
  {
    return errorstate;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	e072      	b.n	8006454 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f001 fc0b 	bl	8007b8e <SDMMC_CmdOperCond>
 8006378:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00d      	beq.n	800639c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f001 fbe1 	bl	8007b52 <SDMMC_CmdGoIdleState>
 8006390:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e05b      	b.n	8006454 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d137      	bne.n	800641a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 fc0b 	bl	8007bcc <SDMMC_CmdAppCommand>
 80063b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d02d      	beq.n	800641a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063c2:	e047      	b.n	8006454 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 fbfe 	bl	8007bcc <SDMMC_CmdAppCommand>
 80063d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <SD_PowerON+0x98>
    {
      return errorstate;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	e03b      	b.n	8006454 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	491e      	ldr	r1, [pc, #120]	; (800645c <SD_PowerON+0x118>)
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fc14 	bl	8007c10 <SDMMC_CmdAppOperCommand>
 80063e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063f4:	e02e      	b.n	8006454 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 fa79 	bl	80078f4 <SDIO_GetResponse>
 8006402:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	0fdb      	lsrs	r3, r3, #31
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <SD_PowerON+0xcc>
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <SD_PowerON+0xce>
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]

    count++;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	3301      	adds	r3, #1
 8006418:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006420:	4293      	cmp	r3, r2
 8006422:	d802      	bhi.n	800642a <SD_PowerON+0xe6>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0cc      	beq.n	80063c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006430:	4293      	cmp	r3, r2
 8006432:	d902      	bls.n	800643a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006438:	e00c      	b.n	8006454 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	645a      	str	r2, [r3, #68]	; 0x44
 800644a:	e002      	b.n	8006452 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	c1100000 	.word	0xc1100000

08006460 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006470:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006474:	e018      	b.n	80064a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f001 fc88 	bl	8007d98 <SDMMC_CmdSendStatus>
 8006488:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	e009      	b.n	80064a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f001 fa2a 	bl	80078f4 <SDIO_GetResponse>
 80064a0:	4602      	mov	r2, r0
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 fa14 	bl	80078f4 <SDIO_GetResponse>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064d6:	d102      	bne.n	80064de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064dc:	e02f      	b.n	800653e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064de:	f107 030c 	add.w	r3, r7, #12
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f879 	bl	80065dc <SD_FindSCR>
 80064ea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	e023      	b.n	800653e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01c      	beq.n	800653a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006508:	041b      	lsls	r3, r3, #16
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f001 fb5d 	bl	8007bcc <SDMMC_CmdAppCommand>
 8006512:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	e00f      	b.n	800653e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2102      	movs	r1, #2
 8006524:	4618      	mov	r0, r3
 8006526:	f001 fb96 	bl	8007c56 <SDMMC_CmdBusWidth>
 800652a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	e003      	b.n	800653e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006536:	2300      	movs	r3, #0
 8006538:	e001      	b.n	800653e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800653a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f001 f9c9 	bl	80078f4 <SDIO_GetResponse>
 8006562:	4603      	mov	r3, r0
 8006564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800656c:	d102      	bne.n	8006574 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800656e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006572:	e02f      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006574:	f107 030c 	add.w	r3, r7, #12
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f82e 	bl	80065dc <SD_FindSCR>
 8006580:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	e023      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01c      	beq.n	80065d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659e:	041b      	lsls	r3, r3, #16
 80065a0:	4619      	mov	r1, r3
 80065a2:	4610      	mov	r0, r2
 80065a4:	f001 fb12 	bl	8007bcc <SDMMC_CmdAppCommand>
 80065a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	e00f      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2100      	movs	r1, #0
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 fb4b 	bl	8007c56 <SDMMC_CmdBusWidth>
 80065c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	e003      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e001      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80065d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b08f      	sub	sp, #60	; 0x3c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80065e6:	f7fb fa11 	bl	8001a0c <HAL_GetTick>
 80065ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80065f0:	2300      	movs	r3, #0
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2108      	movs	r1, #8
 8006602:	4618      	mov	r0, r3
 8006604:	f001 f9b5 	bl	8007972 <SDMMC_CmdBlockLength>
 8006608:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	e0b2      	b.n	800677a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f001 fad3 	bl	8007bcc <SDMMC_CmdAppCommand>
 8006626:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <SD_FindSCR+0x56>
  {
    return errorstate;
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	e0a3      	b.n	800677a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006636:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006638:	2308      	movs	r3, #8
 800663a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800663c:	2330      	movs	r3, #48	; 0x30
 800663e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006640:	2302      	movs	r3, #2
 8006642:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006644:	2300      	movs	r3, #0
 8006646:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006648:	2301      	movs	r3, #1
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f107 0210 	add.w	r2, r7, #16
 8006654:	4611      	mov	r1, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f001 f95f 	bl	800791a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f001 fb1a 	bl	8007c9a <SDMMC_CmdSendSCR>
 8006666:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02a      	beq.n	80066c4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	e083      	b.n	800677a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00f      	beq.n	80066a0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	f107 0208 	add.w	r2, r7, #8
 800668c:	18d4      	adds	r4, r2, r3
 800668e:	4608      	mov	r0, r1
 8006690:	f001 f8bf 	bl	8007812 <SDIO_ReadFIFO>
 8006694:	4603      	mov	r3, r0
 8006696:	6023      	str	r3, [r4, #0]
      index++;
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	3301      	adds	r3, #1
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
 800669e:	e006      	b.n	80066ae <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d012      	beq.n	80066d4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80066ae:	f7fb f9ad 	bl	8001a0c <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066bc:	d102      	bne.n	80066c4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80066be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066c2:	e05a      	b.n	800677a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0cf      	beq.n	8006672 <SD_FindSCR+0x96>
 80066d2:	e000      	b.n	80066d6 <SD_FindSCR+0xfa>
      break;
 80066d4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2208      	movs	r2, #8
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80066ec:	2308      	movs	r3, #8
 80066ee:	e044      	b.n	800677a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2202      	movs	r2, #2
 8006704:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006706:	2302      	movs	r3, #2
 8006708:	e037      	b.n	800677a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2220      	movs	r2, #32
 800671e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006720:	2320      	movs	r3, #32
 8006722:	e02a      	b.n	800677a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f240 523a 	movw	r2, #1338	; 0x53a
 800672c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	061a      	lsls	r2, r3, #24
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800673a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006744:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	0e1b      	lsrs	r3, r3, #24
 800674a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	601a      	str	r2, [r3, #0]
    scr++;
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	3304      	adds	r3, #4
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	061a      	lsls	r2, r3, #24
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006762:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800676c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	0e1b      	lsrs	r3, r3, #24
 8006772:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	373c      	adds	r7, #60	; 0x3c
 800677e:	46bd      	mov	sp, r7
 8006780:	bd90      	pop	{r4, r7, pc}

08006782 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b086      	sub	sp, #24
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d03f      	beq.n	800681c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e033      	b.n	800680a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 f833 	bl	8007812 <SDIO_ReadFIFO>
 80067ac:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3301      	adds	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	3b01      	subs	r3, #1
 80067c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	0c1b      	lsrs	r3, r3, #16
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3301      	adds	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	0e1b      	lsrs	r3, r3, #24
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3b01      	subs	r3, #1
 8006802:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3301      	adds	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b07      	cmp	r3, #7
 800680e:	d9c8      	bls.n	80067a2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800681c:	bf00      	nop
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d043      	beq.n	80068c6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e037      	b.n	80068b4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	60bb      	str	r3, [r7, #8]
      tmp++;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	3b01      	subs	r3, #1
 8006854:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	021a      	lsls	r2, r3, #8
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4313      	orrs	r3, r2
 8006860:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	3b01      	subs	r3, #1
 800686c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	041a      	lsls	r2, r3, #16
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4313      	orrs	r3, r2
 8006878:	60bb      	str	r3, [r7, #8]
      tmp++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3b01      	subs	r3, #1
 8006884:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	061a      	lsls	r2, r3, #24
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4313      	orrs	r3, r2
 8006890:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3301      	adds	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3b01      	subs	r3, #1
 800689c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f107 0208 	add.w	r2, r7, #8
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 ffbf 	bl	800782c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	3301      	adds	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2b07      	cmp	r3, #7
 80068b8:	d9c4      	bls.n	8006844 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80068c6:	bf00      	nop
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e03f      	b.n	8006960 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7fa feeb 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2224      	movs	r2, #36	; 0x24
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006910:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fcde 	bl	80072d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006926:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695a      	ldr	r2, [r3, #20]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006936:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006946:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b20      	cmp	r3, #32
 8006980:	d11d      	bne.n	80069be <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_UART_Receive_IT+0x26>
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e016      	b.n	80069c0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_UART_Receive_IT+0x38>
 800699c:	2302      	movs	r3, #2
 800699e:	e00f      	b.n	80069c0 <HAL_UART_Receive_IT+0x58>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	461a      	mov	r2, r3
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fab5 	bl	8006f24 <UART_Start_Receive_IT>
 80069ba:	4603      	mov	r3, r0
 80069bc:	e000      	b.n	80069c0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b0ba      	sub	sp, #232	; 0xe8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10f      	bne.n	8006a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <HAL_UART_IRQHandler+0x66>
 8006a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fb99 	bl	800715e <UART_Receive_IT>
      return;
 8006a2c:	e256      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 80de 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x22c>
 8006a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 80d1 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00b      	beq.n	8006a76 <HAL_UART_IRQHandler+0xae>
 8006a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <HAL_UART_IRQHandler+0xd2>
 8006a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f043 0202 	orr.w	r2, r3, #2
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <HAL_UART_IRQHandler+0xf6>
 8006aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	f043 0204 	orr.w	r2, r3, #4
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d011      	beq.n	8006aee <HAL_UART_IRQHandler+0x126>
 8006aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	f043 0208 	orr.w	r2, r3, #8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 81ed 	beq.w	8006ed2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_UART_IRQHandler+0x14e>
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fb24 	bl	800715e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	bf0c      	ite	eq
 8006b24:	2301      	moveq	r3, #1
 8006b26:	2300      	movne	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <HAL_UART_IRQHandler+0x17a>
 8006b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d04f      	beq.n	8006be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa2c 	bl	8006fa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d141      	bne.n	8006bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3314      	adds	r3, #20
 8006b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1d9      	bne.n	8006b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d013      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	4a7d      	ldr	r2, [pc, #500]	; (8006da4 <HAL_UART_IRQHandler+0x3dc>)
 8006bb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fb f9fc 	bl	8001fb4 <HAL_DMA_Abort_IT>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d016      	beq.n	8006bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	e00e      	b.n	8006bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f990 	bl	8006ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	e00a      	b.n	8006bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f98c 	bl	8006ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	e006      	b.n	8006bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f988 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bee:	e170      	b.n	8006ed2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	bf00      	nop
    return;
 8006bf2:	e16e      	b.n	8006ed2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	f040 814a 	bne.w	8006e92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 8143 	beq.w	8006e92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 813c 	beq.w	8006e92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60bb      	str	r3, [r7, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	f040 80b4 	bne.w	8006da8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8140 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	f080 8139 	bcs.w	8006ed6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c76:	f000 8088 	beq.w	8006d8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1d9      	bne.n	8006c7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3314      	adds	r3, #20
 8006ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cd8:	f023 0301 	bic.w	r3, r3, #1
 8006cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e1      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3314      	adds	r3, #20
 8006d08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e3      	bne.n	8006d02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d5a:	f023 0310 	bic.w	r3, r3, #16
 8006d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e3      	bne.n	8006d48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fb f8a5 	bl	8001ed4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f8b6 	bl	8006f0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006da0:	e099      	b.n	8006ed6 <HAL_UART_IRQHandler+0x50e>
 8006da2:	bf00      	nop
 8006da4:	08007067 	.word	0x08007067
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 808b 	beq.w	8006eda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8086 	beq.w	8006eda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	330c      	adds	r3, #12
 8006dee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006df2:	647a      	str	r2, [r7, #68]	; 0x44
 8006df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e3      	bne.n	8006dce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3314      	adds	r3, #20
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	623b      	str	r3, [r7, #32]
   return(result);
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	f023 0301 	bic.w	r3, r3, #1
 8006e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3314      	adds	r3, #20
 8006e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e3      	bne.n	8006e06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0310 	bic.w	r3, r3, #16
 8006e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e70:	61fa      	str	r2, [r7, #28]
 8006e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	69b9      	ldr	r1, [r7, #24]
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e3      	bne.n	8006e4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f83e 	bl	8006f0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e90:	e023      	b.n	8006eda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x4ea>
 8006e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f8ef 	bl	800708e <UART_Transmit_IT>
    return;
 8006eb0:	e014      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00e      	beq.n	8006edc <HAL_UART_IRQHandler+0x514>
 8006ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d008      	beq.n	8006edc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f92f 	bl	800712e <UART_EndTransmit_IT>
    return;
 8006ed0:	e004      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
    return;
 8006ed2:	bf00      	nop
 8006ed4:	e002      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
      return;
 8006ed6:	bf00      	nop
 8006ed8:	e000      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
      return;
 8006eda:	bf00      	nop
  }
}
 8006edc:	37e8      	adds	r7, #232	; 0xe8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop

08006ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	88fa      	ldrh	r2, [r7, #6]
 8006f42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2222      	movs	r2, #34	; 0x22
 8006f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	695a      	ldr	r2, [r3, #20]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f042 0201 	orr.w	r2, r2, #1
 8006f80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0220 	orr.w	r2, r2, #32
 8006f90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b095      	sub	sp, #84	; 0x54
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	330c      	adds	r3, #12
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fc8:	643a      	str	r2, [r7, #64]	; 0x40
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e5      	bne.n	8006fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f023 0301 	bic.w	r3, r3, #1
 8006ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3314      	adds	r3, #20
 8006ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ffc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e5      	bne.n	8006fdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007014:	2b01      	cmp	r3, #1
 8007016:	d119      	bne.n	800704c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330c      	adds	r3, #12
 800701e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	60bb      	str	r3, [r7, #8]
   return(result);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f023 0310 	bic.w	r3, r3, #16
 800702e:	647b      	str	r3, [r7, #68]	; 0x44
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007038:	61ba      	str	r2, [r7, #24]
 800703a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6979      	ldr	r1, [r7, #20]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	613b      	str	r3, [r7, #16]
   return(result);
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e5      	bne.n	8007018 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
}
 800705a:	bf00      	nop
 800705c:	3754      	adds	r7, #84	; 0x54
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff ff39 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800708e:	b480      	push	{r7}
 8007090:	b085      	sub	sp, #20
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b21      	cmp	r3, #33	; 0x21
 80070a0:	d13e      	bne.n	8007120 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070aa:	d114      	bne.n	80070d6 <UART_Transmit_IT+0x48>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d110      	bne.n	80070d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	1c9a      	adds	r2, r3, #2
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	621a      	str	r2, [r3, #32]
 80070d4:	e008      	b.n	80070e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	1c59      	adds	r1, r3, #1
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6211      	str	r1, [r2, #32]
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4619      	mov	r1, r3
 80070f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10f      	bne.n	800711c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68da      	ldr	r2, [r3, #12]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800710a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800711a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	e000      	b.n	8007122 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007120:	2302      	movs	r3, #2
  }
}
 8007122:	4618      	mov	r0, r3
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007144:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fec8 	bl	8006ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b08c      	sub	sp, #48	; 0x30
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b22      	cmp	r3, #34	; 0x22
 8007170:	f040 80ab 	bne.w	80072ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717c:	d117      	bne.n	80071ae <UART_Receive_IT+0x50>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d113      	bne.n	80071ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007186:	2300      	movs	r3, #0
 8007188:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	b29b      	uxth	r3, r3
 8007198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719c:	b29a      	uxth	r2, r3
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	1c9a      	adds	r2, r3, #2
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	629a      	str	r2, [r3, #40]	; 0x28
 80071ac:	e026      	b.n	80071fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c0:	d007      	beq.n	80071d2 <UART_Receive_IT+0x74>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <UART_Receive_IT+0x82>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d106      	bne.n	80071e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e008      	b.n	80071f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29b      	uxth	r3, r3
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	4619      	mov	r1, r3
 800720a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800720c:	2b00      	cmp	r3, #0
 800720e:	d15a      	bne.n	80072c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0220 	bic.w	r2, r2, #32
 800721e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800722e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695a      	ldr	r2, [r3, #20]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0201 	bic.w	r2, r2, #1
 800723e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	2b01      	cmp	r3, #1
 800724e:	d135      	bne.n	80072bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	330c      	adds	r3, #12
 800725c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	613b      	str	r3, [r7, #16]
   return(result);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f023 0310 	bic.w	r3, r3, #16
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007276:	623a      	str	r2, [r7, #32]
 8007278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	69f9      	ldr	r1, [r7, #28]
 800727c:	6a3a      	ldr	r2, [r7, #32]
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	61bb      	str	r3, [r7, #24]
   return(result);
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e5      	bne.n	8007256 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b10      	cmp	r3, #16
 8007296:	d10a      	bne.n	80072ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff fe29 	bl	8006f0c <HAL_UARTEx_RxEventCallback>
 80072ba:	e002      	b.n	80072c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7f9 ff59 	bl	8001174 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	e002      	b.n	80072cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e000      	b.n	80072cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80072ca:	2302      	movs	r3, #2
  }
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3730      	adds	r7, #48	; 0x30
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d8:	b0c0      	sub	sp, #256	; 0x100
 80072da:	af00      	add	r7, sp, #0
 80072dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f0:	68d9      	ldr	r1, [r3, #12]
 80072f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	ea40 0301 	orr.w	r3, r0, r1
 80072fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	431a      	orrs	r2, r3
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	431a      	orrs	r2, r3
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800732c:	f021 010c 	bic.w	r1, r1, #12
 8007330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800733a:	430b      	orrs	r3, r1
 800733c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800733e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800734a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734e:	6999      	ldr	r1, [r3, #24]
 8007350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	ea40 0301 	orr.w	r3, r0, r1
 800735a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b8f      	ldr	r3, [pc, #572]	; (80075a0 <UART_SetConfig+0x2cc>)
 8007364:	429a      	cmp	r2, r3
 8007366:	d005      	beq.n	8007374 <UART_SetConfig+0xa0>
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4b8d      	ldr	r3, [pc, #564]	; (80075a4 <UART_SetConfig+0x2d0>)
 8007370:	429a      	cmp	r2, r3
 8007372:	d104      	bne.n	800737e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007374:	f7fc fc40 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8007378:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800737c:	e003      	b.n	8007386 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800737e:	f7fc fc27 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8007382:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007390:	f040 810c 	bne.w	80075ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007398:	2200      	movs	r2, #0
 800739a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800739e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80073a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073a6:	4622      	mov	r2, r4
 80073a8:	462b      	mov	r3, r5
 80073aa:	1891      	adds	r1, r2, r2
 80073ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80073ae:	415b      	adcs	r3, r3
 80073b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073b6:	4621      	mov	r1, r4
 80073b8:	eb12 0801 	adds.w	r8, r2, r1
 80073bc:	4629      	mov	r1, r5
 80073be:	eb43 0901 	adc.w	r9, r3, r1
 80073c2:	f04f 0200 	mov.w	r2, #0
 80073c6:	f04f 0300 	mov.w	r3, #0
 80073ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073d6:	4690      	mov	r8, r2
 80073d8:	4699      	mov	r9, r3
 80073da:	4623      	mov	r3, r4
 80073dc:	eb18 0303 	adds.w	r3, r8, r3
 80073e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073e4:	462b      	mov	r3, r5
 80073e6:	eb49 0303 	adc.w	r3, r9, r3
 80073ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007402:	460b      	mov	r3, r1
 8007404:	18db      	adds	r3, r3, r3
 8007406:	653b      	str	r3, [r7, #80]	; 0x50
 8007408:	4613      	mov	r3, r2
 800740a:	eb42 0303 	adc.w	r3, r2, r3
 800740e:	657b      	str	r3, [r7, #84]	; 0x54
 8007410:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007414:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007418:	f7f8 ff5a 	bl	80002d0 <__aeabi_uldivmod>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4b61      	ldr	r3, [pc, #388]	; (80075a8 <UART_SetConfig+0x2d4>)
 8007422:	fba3 2302 	umull	r2, r3, r3, r2
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	011c      	lsls	r4, r3, #4
 800742a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800742e:	2200      	movs	r2, #0
 8007430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007434:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007438:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800743c:	4642      	mov	r2, r8
 800743e:	464b      	mov	r3, r9
 8007440:	1891      	adds	r1, r2, r2
 8007442:	64b9      	str	r1, [r7, #72]	; 0x48
 8007444:	415b      	adcs	r3, r3
 8007446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007448:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800744c:	4641      	mov	r1, r8
 800744e:	eb12 0a01 	adds.w	sl, r2, r1
 8007452:	4649      	mov	r1, r9
 8007454:	eb43 0b01 	adc.w	fp, r3, r1
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007464:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800746c:	4692      	mov	sl, r2
 800746e:	469b      	mov	fp, r3
 8007470:	4643      	mov	r3, r8
 8007472:	eb1a 0303 	adds.w	r3, sl, r3
 8007476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800747a:	464b      	mov	r3, r9
 800747c:	eb4b 0303 	adc.w	r3, fp, r3
 8007480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007490:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007494:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007498:	460b      	mov	r3, r1
 800749a:	18db      	adds	r3, r3, r3
 800749c:	643b      	str	r3, [r7, #64]	; 0x40
 800749e:	4613      	mov	r3, r2
 80074a0:	eb42 0303 	adc.w	r3, r2, r3
 80074a4:	647b      	str	r3, [r7, #68]	; 0x44
 80074a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074ae:	f7f8 ff0f 	bl	80002d0 <__aeabi_uldivmod>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4611      	mov	r1, r2
 80074b8:	4b3b      	ldr	r3, [pc, #236]	; (80075a8 <UART_SetConfig+0x2d4>)
 80074ba:	fba3 2301 	umull	r2, r3, r3, r1
 80074be:	095b      	lsrs	r3, r3, #5
 80074c0:	2264      	movs	r2, #100	; 0x64
 80074c2:	fb02 f303 	mul.w	r3, r2, r3
 80074c6:	1acb      	subs	r3, r1, r3
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074ce:	4b36      	ldr	r3, [pc, #216]	; (80075a8 <UART_SetConfig+0x2d4>)
 80074d0:	fba3 2302 	umull	r2, r3, r3, r2
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074dc:	441c      	add	r4, r3
 80074de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074f0:	4642      	mov	r2, r8
 80074f2:	464b      	mov	r3, r9
 80074f4:	1891      	adds	r1, r2, r2
 80074f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80074f8:	415b      	adcs	r3, r3
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007500:	4641      	mov	r1, r8
 8007502:	1851      	adds	r1, r2, r1
 8007504:	6339      	str	r1, [r7, #48]	; 0x30
 8007506:	4649      	mov	r1, r9
 8007508:	414b      	adcs	r3, r1
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007518:	4659      	mov	r1, fp
 800751a:	00cb      	lsls	r3, r1, #3
 800751c:	4651      	mov	r1, sl
 800751e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007522:	4651      	mov	r1, sl
 8007524:	00ca      	lsls	r2, r1, #3
 8007526:	4610      	mov	r0, r2
 8007528:	4619      	mov	r1, r3
 800752a:	4603      	mov	r3, r0
 800752c:	4642      	mov	r2, r8
 800752e:	189b      	adds	r3, r3, r2
 8007530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007534:	464b      	mov	r3, r9
 8007536:	460a      	mov	r2, r1
 8007538:	eb42 0303 	adc.w	r3, r2, r3
 800753c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800754c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007554:	460b      	mov	r3, r1
 8007556:	18db      	adds	r3, r3, r3
 8007558:	62bb      	str	r3, [r7, #40]	; 0x28
 800755a:	4613      	mov	r3, r2
 800755c:	eb42 0303 	adc.w	r3, r2, r3
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007562:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007566:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800756a:	f7f8 feb1 	bl	80002d0 <__aeabi_uldivmod>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <UART_SetConfig+0x2d4>)
 8007574:	fba3 1302 	umull	r1, r3, r3, r2
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	2164      	movs	r1, #100	; 0x64
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	3332      	adds	r3, #50	; 0x32
 8007586:	4a08      	ldr	r2, [pc, #32]	; (80075a8 <UART_SetConfig+0x2d4>)
 8007588:	fba2 2303 	umull	r2, r3, r2, r3
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	f003 0207 	and.w	r2, r3, #7
 8007592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4422      	add	r2, r4
 800759a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800759c:	e105      	b.n	80077aa <UART_SetConfig+0x4d6>
 800759e:	bf00      	nop
 80075a0:	40011000 	.word	0x40011000
 80075a4:	40011400 	.word	0x40011400
 80075a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80075ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075be:	4642      	mov	r2, r8
 80075c0:	464b      	mov	r3, r9
 80075c2:	1891      	adds	r1, r2, r2
 80075c4:	6239      	str	r1, [r7, #32]
 80075c6:	415b      	adcs	r3, r3
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
 80075ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075ce:	4641      	mov	r1, r8
 80075d0:	1854      	adds	r4, r2, r1
 80075d2:	4649      	mov	r1, r9
 80075d4:	eb43 0501 	adc.w	r5, r3, r1
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	00eb      	lsls	r3, r5, #3
 80075e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075e6:	00e2      	lsls	r2, r4, #3
 80075e8:	4614      	mov	r4, r2
 80075ea:	461d      	mov	r5, r3
 80075ec:	4643      	mov	r3, r8
 80075ee:	18e3      	adds	r3, r4, r3
 80075f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075f4:	464b      	mov	r3, r9
 80075f6:	eb45 0303 	adc.w	r3, r5, r3
 80075fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800760a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800760e:	f04f 0200 	mov.w	r2, #0
 8007612:	f04f 0300 	mov.w	r3, #0
 8007616:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800761a:	4629      	mov	r1, r5
 800761c:	008b      	lsls	r3, r1, #2
 800761e:	4621      	mov	r1, r4
 8007620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007624:	4621      	mov	r1, r4
 8007626:	008a      	lsls	r2, r1, #2
 8007628:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800762c:	f7f8 fe50 	bl	80002d0 <__aeabi_uldivmod>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4b60      	ldr	r3, [pc, #384]	; (80077b8 <UART_SetConfig+0x4e4>)
 8007636:	fba3 2302 	umull	r2, r3, r3, r2
 800763a:	095b      	lsrs	r3, r3, #5
 800763c:	011c      	lsls	r4, r3, #4
 800763e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007642:	2200      	movs	r2, #0
 8007644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007648:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800764c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007650:	4642      	mov	r2, r8
 8007652:	464b      	mov	r3, r9
 8007654:	1891      	adds	r1, r2, r2
 8007656:	61b9      	str	r1, [r7, #24]
 8007658:	415b      	adcs	r3, r3
 800765a:	61fb      	str	r3, [r7, #28]
 800765c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007660:	4641      	mov	r1, r8
 8007662:	1851      	adds	r1, r2, r1
 8007664:	6139      	str	r1, [r7, #16]
 8007666:	4649      	mov	r1, r9
 8007668:	414b      	adcs	r3, r1
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007678:	4659      	mov	r1, fp
 800767a:	00cb      	lsls	r3, r1, #3
 800767c:	4651      	mov	r1, sl
 800767e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007682:	4651      	mov	r1, sl
 8007684:	00ca      	lsls	r2, r1, #3
 8007686:	4610      	mov	r0, r2
 8007688:	4619      	mov	r1, r3
 800768a:	4603      	mov	r3, r0
 800768c:	4642      	mov	r2, r8
 800768e:	189b      	adds	r3, r3, r2
 8007690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007694:	464b      	mov	r3, r9
 8007696:	460a      	mov	r2, r1
 8007698:	eb42 0303 	adc.w	r3, r2, r3
 800769c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80076aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80076b8:	4649      	mov	r1, r9
 80076ba:	008b      	lsls	r3, r1, #2
 80076bc:	4641      	mov	r1, r8
 80076be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076c2:	4641      	mov	r1, r8
 80076c4:	008a      	lsls	r2, r1, #2
 80076c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076ca:	f7f8 fe01 	bl	80002d0 <__aeabi_uldivmod>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	4b39      	ldr	r3, [pc, #228]	; (80077b8 <UART_SetConfig+0x4e4>)
 80076d4:	fba3 1302 	umull	r1, r3, r3, r2
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	2164      	movs	r1, #100	; 0x64
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	3332      	adds	r3, #50	; 0x32
 80076e6:	4a34      	ldr	r2, [pc, #208]	; (80077b8 <UART_SetConfig+0x4e4>)
 80076e8:	fba2 2303 	umull	r2, r3, r2, r3
 80076ec:	095b      	lsrs	r3, r3, #5
 80076ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076f2:	441c      	add	r4, r3
 80076f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076f8:	2200      	movs	r2, #0
 80076fa:	673b      	str	r3, [r7, #112]	; 0x70
 80076fc:	677a      	str	r2, [r7, #116]	; 0x74
 80076fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007702:	4642      	mov	r2, r8
 8007704:	464b      	mov	r3, r9
 8007706:	1891      	adds	r1, r2, r2
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	415b      	adcs	r3, r3
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007712:	4641      	mov	r1, r8
 8007714:	1851      	adds	r1, r2, r1
 8007716:	6039      	str	r1, [r7, #0]
 8007718:	4649      	mov	r1, r9
 800771a:	414b      	adcs	r3, r1
 800771c:	607b      	str	r3, [r7, #4]
 800771e:	f04f 0200 	mov.w	r2, #0
 8007722:	f04f 0300 	mov.w	r3, #0
 8007726:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800772a:	4659      	mov	r1, fp
 800772c:	00cb      	lsls	r3, r1, #3
 800772e:	4651      	mov	r1, sl
 8007730:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007734:	4651      	mov	r1, sl
 8007736:	00ca      	lsls	r2, r1, #3
 8007738:	4610      	mov	r0, r2
 800773a:	4619      	mov	r1, r3
 800773c:	4603      	mov	r3, r0
 800773e:	4642      	mov	r2, r8
 8007740:	189b      	adds	r3, r3, r2
 8007742:	66bb      	str	r3, [r7, #104]	; 0x68
 8007744:	464b      	mov	r3, r9
 8007746:	460a      	mov	r2, r1
 8007748:	eb42 0303 	adc.w	r3, r2, r3
 800774c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800774e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	663b      	str	r3, [r7, #96]	; 0x60
 8007758:	667a      	str	r2, [r7, #100]	; 0x64
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007766:	4649      	mov	r1, r9
 8007768:	008b      	lsls	r3, r1, #2
 800776a:	4641      	mov	r1, r8
 800776c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007770:	4641      	mov	r1, r8
 8007772:	008a      	lsls	r2, r1, #2
 8007774:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007778:	f7f8 fdaa 	bl	80002d0 <__aeabi_uldivmod>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <UART_SetConfig+0x4e4>)
 8007782:	fba3 1302 	umull	r1, r3, r3, r2
 8007786:	095b      	lsrs	r3, r3, #5
 8007788:	2164      	movs	r1, #100	; 0x64
 800778a:	fb01 f303 	mul.w	r3, r1, r3
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	3332      	adds	r3, #50	; 0x32
 8007794:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <UART_SetConfig+0x4e4>)
 8007796:	fba2 2303 	umull	r2, r3, r2, r3
 800779a:	095b      	lsrs	r3, r3, #5
 800779c:	f003 020f 	and.w	r2, r3, #15
 80077a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4422      	add	r2, r4
 80077a8:	609a      	str	r2, [r3, #8]
}
 80077aa:	bf00      	nop
 80077ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077b0:	46bd      	mov	sp, r7
 80077b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077b6:	bf00      	nop
 80077b8:	51eb851f 	.word	0x51eb851f

080077bc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80077bc:	b084      	sub	sp, #16
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	f107 001c 	add.w	r0, r7, #28
 80077ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80077d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80077d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80077d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80077da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80077de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80077e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80077e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80077f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	b004      	add	sp, #16
 8007810:	4770      	bx	lr

08007812 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2203      	movs	r2, #3
 800785a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0303 	and.w	r3, r3, #3
}
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078a4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80078aa:	431a      	orrs	r2, r3
                       Command->CPSM);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80078b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80078c0:	f023 030f 	bic.w	r3, r3, #15
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	431a      	orrs	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	b2db      	uxtb	r3, r3
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3314      	adds	r3, #20
 8007902:	461a      	mov	r2, r3
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	4413      	add	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
}  
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800791a:	b480      	push	{r7}
 800791c:	b085      	sub	sp, #20
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007940:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007946:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800794c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007964:	2300      	movs	r3, #0

}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b088      	sub	sp, #32
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007980:	2310      	movs	r3, #16
 8007982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007984:	2340      	movs	r3, #64	; 0x40
 8007986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007988:	2300      	movs	r3, #0
 800798a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800798c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007990:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007992:	f107 0308 	add.w	r3, r7, #8
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff ff74 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800799e:	f241 3288 	movw	r2, #5000	; 0x1388
 80079a2:	2110      	movs	r1, #16
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fa19 	bl	8007ddc <SDMMC_GetCmdResp1>
 80079aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079ac:	69fb      	ldr	r3, [r7, #28]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b088      	sub	sp, #32
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80079c4:	2311      	movs	r3, #17
 80079c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079c8:	2340      	movs	r3, #64	; 0x40
 80079ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079cc:	2300      	movs	r3, #0
 80079ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079d6:	f107 0308 	add.w	r3, r7, #8
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff ff52 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80079e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e6:	2111      	movs	r1, #17
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f9f7 	bl	8007ddc <SDMMC_GetCmdResp1>
 80079ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079f0:	69fb      	ldr	r3, [r7, #28]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3720      	adds	r7, #32
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b088      	sub	sp, #32
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007a08:	2312      	movs	r3, #18
 8007a0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a0c:	2340      	movs	r3, #64	; 0x40
 8007a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a1a:	f107 0308 	add.w	r3, r7, #8
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff ff30 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a2a:	2112      	movs	r1, #18
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f9d5 	bl	8007ddc <SDMMC_GetCmdResp1>
 8007a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a34:	69fb      	ldr	r3, [r7, #28]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b088      	sub	sp, #32
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007a4c:	2318      	movs	r3, #24
 8007a4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a50:	2340      	movs	r3, #64	; 0x40
 8007a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a5e:	f107 0308 	add.w	r3, r7, #8
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ff0e 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6e:	2118      	movs	r1, #24
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f9b3 	bl	8007ddc <SDMMC_GetCmdResp1>
 8007a76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a78:	69fb      	ldr	r3, [r7, #28]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b088      	sub	sp, #32
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007a90:	2319      	movs	r3, #25
 8007a92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a94:	2340      	movs	r3, #64	; 0x40
 8007a96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007aa2:	f107 0308 	add.w	r3, r7, #8
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff feec 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab2:	2119      	movs	r1, #25
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f991 	bl	8007ddc <SDMMC_GetCmdResp1>
 8007aba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007abc:	69fb      	ldr	r3, [r7, #28]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007ad4:	230c      	movs	r3, #12
 8007ad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ad8:	2340      	movs	r3, #64	; 0x40
 8007ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ae4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ae6:	f107 0308 	add.w	r3, r7, #8
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff feca 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007af2:	4a05      	ldr	r2, [pc, #20]	; (8007b08 <SDMMC_CmdStopTransfer+0x40>)
 8007af4:	210c      	movs	r1, #12
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f970 	bl	8007ddc <SDMMC_GetCmdResp1>
 8007afc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007afe:	69fb      	ldr	r3, [r7, #28]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3720      	adds	r7, #32
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	05f5e100 	.word	0x05f5e100

08007b0c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08a      	sub	sp, #40	; 0x28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007b1c:	2307      	movs	r3, #7
 8007b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b20:	2340      	movs	r3, #64	; 0x40
 8007b22:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b24:	2300      	movs	r3, #0
 8007b26:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b2c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b2e:	f107 0310 	add.w	r3, r7, #16
 8007b32:	4619      	mov	r1, r3
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff fea6 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3e:	2107      	movs	r1, #7
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f94b 	bl	8007ddc <SDMMC_GetCmdResp1>
 8007b46:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3728      	adds	r7, #40	; 0x28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b088      	sub	sp, #32
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b66:	2300      	movs	r3, #0
 8007b68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b70:	f107 0308 	add.w	r3, r7, #8
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7ff fe85 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fb65 	bl	800824c <SDMMC_GetCmdError>
 8007b82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b84:	69fb      	ldr	r3, [r7, #28]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b088      	sub	sp, #32
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007b96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007b9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fe66 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 faf8 	bl	80081b0 <SDMMC_GetCmdResp7>
 8007bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3720      	adds	r7, #32
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007bda:	2337      	movs	r3, #55	; 0x37
 8007bdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bde:	2340      	movs	r3, #64	; 0x40
 8007be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bec:	f107 0308 	add.w	r3, r7, #8
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff fe47 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bfc:	2137      	movs	r1, #55	; 0x37
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f8ec 	bl	8007ddc <SDMMC_GetCmdResp1>
 8007c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c06:	69fb      	ldr	r3, [r7, #28]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3720      	adds	r7, #32
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007c26:	2329      	movs	r3, #41	; 0x29
 8007c28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c2a:	2340      	movs	r3, #64	; 0x40
 8007c2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c38:	f107 0308 	add.w	r3, r7, #8
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff fe21 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f9ff 	bl	8008048 <SDMMC_GetCmdResp3>
 8007c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b088      	sub	sp, #32
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007c64:	2306      	movs	r3, #6
 8007c66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c68:	2340      	movs	r3, #64	; 0x40
 8007c6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c76:	f107 0308 	add.w	r3, r7, #8
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fe02 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c86:	2106      	movs	r1, #6
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8a7 	bl	8007ddc <SDMMC_GetCmdResp1>
 8007c8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c90:	69fb      	ldr	r3, [r7, #28]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b088      	sub	sp, #32
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007ca6:	2333      	movs	r3, #51	; 0x33
 8007ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007caa:	2340      	movs	r3, #64	; 0x40
 8007cac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cb8:	f107 0308 	add.w	r3, r7, #8
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7ff fde1 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc8:	2133      	movs	r1, #51	; 0x33
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f886 	bl	8007ddc <SDMMC_GetCmdResp1>
 8007cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cd2:	69fb      	ldr	r3, [r7, #28]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007cec:	23c0      	movs	r3, #192	; 0xc0
 8007cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cf8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cfa:	f107 0308 	add.w	r3, r7, #8
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff fdc0 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f956 	bl	8007fb8 <SDMMC_GetCmdResp2>
 8007d0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007d26:	2309      	movs	r3, #9
 8007d28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007d2a:	23c0      	movs	r3, #192	; 0xc0
 8007d2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d38:	f107 0308 	add.w	r3, r7, #8
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff fda1 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f937 	bl	8007fb8 <SDMMC_GetCmdResp2>
 8007d4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d4c:	69fb      	ldr	r3, [r7, #28]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b088      	sub	sp, #32
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007d64:	2303      	movs	r3, #3
 8007d66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d68:	2340      	movs	r3, #64	; 0x40
 8007d6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d76:	f107 0308 	add.w	r3, r7, #8
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fd82 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	2103      	movs	r1, #3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f99c 	bl	80080c4 <SDMMC_GetCmdResp6>
 8007d8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d8e:	69fb      	ldr	r3, [r7, #28]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3720      	adds	r7, #32
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007da6:	230d      	movs	r3, #13
 8007da8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007daa:	2340      	movs	r3, #64	; 0x40
 8007dac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dae:	2300      	movs	r3, #0
 8007db0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007db8:	f107 0308 	add.w	r3, r7, #8
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff fd61 	bl	8007886 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc8:	210d      	movs	r1, #13
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f806 	bl	8007ddc <SDMMC_GetCmdResp1>
 8007dd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3720      	adds	r7, #32
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	460b      	mov	r3, r1
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007dea:	4b70      	ldr	r3, [pc, #448]	; (8007fac <SDMMC_GetCmdResp1+0x1d0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a70      	ldr	r2, [pc, #448]	; (8007fb0 <SDMMC_GetCmdResp1+0x1d4>)
 8007df0:	fba2 2303 	umull	r2, r3, r2, r3
 8007df4:	0a5a      	lsrs	r2, r3, #9
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	fb02 f303 	mul.w	r3, r2, r3
 8007dfc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	1e5a      	subs	r2, r3, #1
 8007e02:	61fa      	str	r2, [r7, #28]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d102      	bne.n	8007e0e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e0c:	e0c9      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e12:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d0ef      	beq.n	8007dfe <SDMMC_GetCmdResp1+0x22>
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1ea      	bne.n	8007dfe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2204      	movs	r2, #4
 8007e38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e3a:	2304      	movs	r3, #4
 8007e3c:	e0b1      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0a6      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	22c5      	movs	r2, #197	; 0xc5
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff fd3d 	bl	80078da <SDIO_GetCommandResponse>
 8007e60:	4603      	mov	r3, r0
 8007e62:	461a      	mov	r2, r3
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d001      	beq.n	8007e6e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e099      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007e6e:	2100      	movs	r1, #0
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f7ff fd3f 	bl	80078f4 <SDIO_GetResponse>
 8007e76:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4b4e      	ldr	r3, [pc, #312]	; (8007fb4 <SDMMC_GetCmdResp1+0x1d8>)
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e08d      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	da02      	bge.n	8007e92 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007e8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e90:	e087      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007e9c:	2340      	movs	r3, #64	; 0x40
 8007e9e:	e080      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007eaa:	2380      	movs	r3, #128	; 0x80
 8007eac:	e079      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ebc:	e071      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ecc:	e069      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007edc:	e061      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007eec:	e059      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007efc:	e051      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f0c:	e049      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007f18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f1c:	e041      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007f28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f2c:	e039      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f3c:	e031      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007f48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007f4c:	e029      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007f58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f5c:	e021      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007f68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f6c:	e019      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007f78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f7c:	e011      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007f88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007f8c:	e009      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f003 0308 	and.w	r3, r3, #8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007f98:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007f9c:	e001      	b.n	8007fa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3720      	adds	r7, #32
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000004 	.word	0x20000004
 8007fb0:	10624dd3 	.word	0x10624dd3
 8007fb4:	fdffe008 	.word	0xfdffe008

08007fb8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fc0:	4b1f      	ldr	r3, [pc, #124]	; (8008040 <SDMMC_GetCmdResp2+0x88>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <SDMMC_GetCmdResp2+0x8c>)
 8007fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fca:	0a5b      	lsrs	r3, r3, #9
 8007fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd0:	fb02 f303 	mul.w	r3, r2, r3
 8007fd4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	1e5a      	subs	r2, r3, #1
 8007fda:	60fa      	str	r2, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fe0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fe4:	e026      	b.n	8008034 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0ef      	beq.n	8007fd6 <SDMMC_GetCmdResp2+0x1e>
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1ea      	bne.n	8007fd6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d004      	beq.n	8008016 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2204      	movs	r2, #4
 8008010:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008012:	2304      	movs	r3, #4
 8008014:	e00e      	b.n	8008034 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d004      	beq.n	800802c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008028:	2301      	movs	r3, #1
 800802a:	e003      	b.n	8008034 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	22c5      	movs	r2, #197	; 0xc5
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	20000004 	.word	0x20000004
 8008044:	10624dd3 	.word	0x10624dd3

08008048 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008050:	4b1a      	ldr	r3, [pc, #104]	; (80080bc <SDMMC_GetCmdResp3+0x74>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1a      	ldr	r2, [pc, #104]	; (80080c0 <SDMMC_GetCmdResp3+0x78>)
 8008056:	fba2 2303 	umull	r2, r3, r2, r3
 800805a:	0a5b      	lsrs	r3, r3, #9
 800805c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008060:	fb02 f303 	mul.w	r3, r2, r3
 8008064:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	1e5a      	subs	r2, r3, #1
 800806a:	60fa      	str	r2, [r7, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d102      	bne.n	8008076 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008074:	e01b      	b.n	80080ae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0ef      	beq.n	8008066 <SDMMC_GetCmdResp3+0x1e>
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1ea      	bne.n	8008066 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b00      	cmp	r3, #0
 800809a:	d004      	beq.n	80080a6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2204      	movs	r2, #4
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080a2:	2304      	movs	r3, #4
 80080a4:	e003      	b.n	80080ae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	22c5      	movs	r2, #197	; 0xc5
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20000004 	.word	0x20000004
 80080c0:	10624dd3 	.word	0x10624dd3

080080c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	460b      	mov	r3, r1
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080d2:	4b35      	ldr	r3, [pc, #212]	; (80081a8 <SDMMC_GetCmdResp6+0xe4>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a35      	ldr	r2, [pc, #212]	; (80081ac <SDMMC_GetCmdResp6+0xe8>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	0a5b      	lsrs	r3, r3, #9
 80080de:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e2:	fb02 f303 	mul.w	r3, r2, r3
 80080e6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	1e5a      	subs	r2, r3, #1
 80080ec:	61fa      	str	r2, [r7, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d102      	bne.n	80080f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080f6:	e052      	b.n	800819e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0ef      	beq.n	80080e8 <SDMMC_GetCmdResp6+0x24>
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1ea      	bne.n	80080e8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2204      	movs	r2, #4
 8008122:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008124:	2304      	movs	r3, #4
 8008126:	e03a      	b.n	800819e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d004      	beq.n	800813e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2201      	movs	r2, #1
 8008138:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800813a:	2301      	movs	r3, #1
 800813c:	e02f      	b.n	800819e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7ff fbcb 	bl	80078da <SDIO_GetCommandResponse>
 8008144:	4603      	mov	r3, r0
 8008146:	461a      	mov	r2, r3
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	4293      	cmp	r3, r2
 800814c:	d001      	beq.n	8008152 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800814e:	2301      	movs	r3, #1
 8008150:	e025      	b.n	800819e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	22c5      	movs	r2, #197	; 0xc5
 8008156:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008158:	2100      	movs	r1, #0
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff fbca 	bl	80078f4 <SDIO_GetResponse>
 8008160:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d106      	bne.n	800817a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	0c1b      	lsrs	r3, r3, #16
 8008170:	b29a      	uxth	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008176:	2300      	movs	r3, #0
 8008178:	e011      	b.n	800819e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008188:	e009      	b.n	800819e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008198:	e001      	b.n	800819e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800819a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000004 	.word	0x20000004
 80081ac:	10624dd3 	.word	0x10624dd3

080081b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081b8:	4b22      	ldr	r3, [pc, #136]	; (8008244 <SDMMC_GetCmdResp7+0x94>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a22      	ldr	r2, [pc, #136]	; (8008248 <SDMMC_GetCmdResp7+0x98>)
 80081be:	fba2 2303 	umull	r2, r3, r2, r3
 80081c2:	0a5b      	lsrs	r3, r3, #9
 80081c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c8:	fb02 f303 	mul.w	r3, r2, r3
 80081cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	1e5a      	subs	r2, r3, #1
 80081d2:	60fa      	str	r2, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081dc:	e02c      	b.n	8008238 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0ef      	beq.n	80081ce <SDMMC_GetCmdResp7+0x1e>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1ea      	bne.n	80081ce <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2204      	movs	r2, #4
 8008208:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800820a:	2304      	movs	r3, #4
 800820c:	e014      	b.n	8008238 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008220:	2301      	movs	r3, #1
 8008222:	e009      	b.n	8008238 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2240      	movs	r2, #64	; 0x40
 8008234:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008236:	2300      	movs	r3, #0
  
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	20000004 	.word	0x20000004
 8008248:	10624dd3 	.word	0x10624dd3

0800824c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008254:	4b11      	ldr	r3, [pc, #68]	; (800829c <SDMMC_GetCmdError+0x50>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a11      	ldr	r2, [pc, #68]	; (80082a0 <SDMMC_GetCmdError+0x54>)
 800825a:	fba2 2303 	umull	r2, r3, r2, r3
 800825e:	0a5b      	lsrs	r3, r3, #9
 8008260:	f241 3288 	movw	r2, #5000	; 0x1388
 8008264:	fb02 f303 	mul.w	r3, r2, r3
 8008268:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	1e5a      	subs	r2, r3, #1
 800826e:	60fa      	str	r2, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d102      	bne.n	800827a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008274:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008278:	e009      	b.n	800828e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f1      	beq.n	800826a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	22c5      	movs	r2, #197	; 0xc5
 800828a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	20000004 	.word	0x20000004
 80082a0:	10624dd3 	.word	0x10624dd3

080082a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80082a8:	4904      	ldr	r1, [pc, #16]	; (80082bc <MX_FATFS_Init+0x18>)
 80082aa:	4805      	ldr	r0, [pc, #20]	; (80082c0 <MX_FATFS_Init+0x1c>)
 80082ac:	f002 ffe4 	bl	800b278 <FATFS_LinkDriver>
 80082b0:	4603      	mov	r3, r0
 80082b2:	461a      	mov	r2, r3
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <MX_FATFS_Init+0x20>)
 80082b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80082b8:	bf00      	nop
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20000b54 	.word	0x20000b54
 80082c0:	0800bcc8 	.word	0x0800bcc8
 80082c4:	20000b50 	.word	0x20000b50

080082c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80082cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80082e2:	f000 f8ac 	bl	800843e <BSP_SD_IsDetected>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d001      	beq.n	80082f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e012      	b.n	8008316 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80082f0:	480b      	ldr	r0, [pc, #44]	; (8008320 <BSP_SD_Init+0x48>)
 80082f2:	f7fc fecd 	bl	8005090 <HAL_SD_Init>
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d109      	bne.n	8008314 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008300:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008304:	4806      	ldr	r0, [pc, #24]	; (8008320 <BSP_SD_Init+0x48>)
 8008306:	f7fd fe27 	bl	8005f58 <HAL_SD_ConfigWideBusOperation>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008314:	79fb      	ldrb	r3, [r7, #7]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000194 	.word	0x20000194

08008324 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b088      	sub	sp, #32
 8008328:	af02      	add	r7, sp, #8
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	68f9      	ldr	r1, [r7, #12]
 8008340:	4806      	ldr	r0, [pc, #24]	; (800835c <BSP_SD_ReadBlocks+0x38>)
 8008342:	f7fc ff55 	bl	80051f0 <HAL_SD_ReadBlocks>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000194 	.word	0x20000194

08008360 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af02      	add	r7, sp, #8
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	68f9      	ldr	r1, [r7, #12]
 800837c:	4806      	ldr	r0, [pc, #24]	; (8008398 <BSP_SD_WriteBlocks+0x38>)
 800837e:	f7fd f915 	bl	80055ac <HAL_SD_WriteBlocks>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000194 	.word	0x20000194

0800839c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80083a0:	4805      	ldr	r0, [pc, #20]	; (80083b8 <BSP_SD_GetCardState+0x1c>)
 80083a2:	f7fd fe73 	bl	800608c <HAL_SD_GetCardState>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	bf14      	ite	ne
 80083ac:	2301      	movne	r3, #1
 80083ae:	2300      	moveq	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20000194 	.word	0x20000194

080083bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	4803      	ldr	r0, [pc, #12]	; (80083d4 <BSP_SD_GetCardInfo+0x18>)
 80083c8:	f7fd fd9a 	bl	8005f00 <HAL_SD_GetCardInfo>
}
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20000194 	.word	0x20000194

080083d8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80083e0:	f000 f818 	bl	8008414 <BSP_SD_AbortCallback>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80083f4:	f000 f815 	bl	8008422 <BSP_SD_WriteCpltCallback>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008408:	f000 f812 	bl	8008430 <BSP_SD_ReadCpltCallback>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0

}
 8008418:	bf00      	nop
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8008422:	b480      	push	{r7}
 8008424:	af00      	add	r7, sp, #0

}
 8008426:	bf00      	nop
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8008430:	b480      	push	{r7}
 8008432:	af00      	add	r7, sp, #0

}
 8008434:	bf00      	nop
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008444:	2301      	movs	r3, #1
 8008446:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008448:	f000 f80c 	bl	8008464 <BSP_PlatformIsDetected>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008452:	2300      	movs	r3, #0
 8008454:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008456:	79fb      	ldrb	r3, [r7, #7]
 8008458:	b2db      	uxtb	r3, r3
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800846a:	2301      	movs	r3, #1
 800846c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800846e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008472:	4806      	ldr	r0, [pc, #24]	; (800848c <BSP_PlatformIsDetected+0x28>)
 8008474:	f7fa f9be 	bl	80027f4 <HAL_GPIO_ReadPin>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800847e:	2300      	movs	r3, #0
 8008480:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008482:	79fb      	ldrb	r3, [r7, #7]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	40020400 	.word	0x40020400

08008490 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <SD_CheckStatus+0x38>)
 800849c:	2201      	movs	r2, #1
 800849e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80084a0:	f7ff ff7c 	bl	800839c <BSP_SD_GetCardState>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d107      	bne.n	80084ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80084aa:	4b07      	ldr	r3, [pc, #28]	; (80084c8 <SD_CheckStatus+0x38>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f023 0301 	bic.w	r3, r3, #1
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <SD_CheckStatus+0x38>)
 80084b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80084ba:	4b03      	ldr	r3, [pc, #12]	; (80084c8 <SD_CheckStatus+0x38>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	b2db      	uxtb	r3, r3
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	2000000d 	.word	0x2000000d

080084cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80084d6:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <SD_initialize+0x38>)
 80084d8:	2201      	movs	r2, #1
 80084da:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80084dc:	f7ff fefc 	bl	80082d8 <BSP_SD_Init>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d107      	bne.n	80084f6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80084e6:	79fb      	ldrb	r3, [r7, #7]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff ffd1 	bl	8008490 <SD_CheckStatus>
 80084ee:	4603      	mov	r3, r0
 80084f0:	461a      	mov	r2, r3
 80084f2:	4b04      	ldr	r3, [pc, #16]	; (8008504 <SD_initialize+0x38>)
 80084f4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80084f6:	4b03      	ldr	r3, [pc, #12]	; (8008504 <SD_initialize+0x38>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	b2db      	uxtb	r3, r3
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	2000000d 	.word	0x2000000d

08008508 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008512:	79fb      	ldrb	r3, [r7, #7]
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff ffbb 	bl	8008490 <SD_CheckStatus>
 800851a:	4603      	mov	r3, r0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	607a      	str	r2, [r7, #4]
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	68b8      	ldr	r0, [r7, #8]
 8008542:	f7ff feef 	bl	8008324 <BSP_SD_ReadBlocks>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d107      	bne.n	800855c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800854c:	bf00      	nop
 800854e:	f7ff ff25 	bl	800839c <BSP_SD_GetCardState>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1fa      	bne.n	800854e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3718      	adds	r7, #24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b086      	sub	sp, #24
 800856a:	af00      	add	r7, sp, #0
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	603b      	str	r3, [r7, #0]
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800857a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	6879      	ldr	r1, [r7, #4]
 8008582:	68b8      	ldr	r0, [r7, #8]
 8008584:	f7ff feec 	bl	8008360 <BSP_SD_WriteBlocks>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d107      	bne.n	800859e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800858e:	bf00      	nop
 8008590:	f7ff ff04 	bl	800839c <BSP_SD_GetCardState>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1fa      	bne.n	8008590 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800859e:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08c      	sub	sp, #48	; 0x30
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	603a      	str	r2, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
 80085b4:	460b      	mov	r3, r1
 80085b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80085be:	4b25      	ldr	r3, [pc, #148]	; (8008654 <SD_ioctl+0xac>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <SD_ioctl+0x28>
 80085cc:	2303      	movs	r3, #3
 80085ce:	e03c      	b.n	800864a <SD_ioctl+0xa2>

  switch (cmd)
 80085d0:	79bb      	ldrb	r3, [r7, #6]
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d834      	bhi.n	8008640 <SD_ioctl+0x98>
 80085d6:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <SD_ioctl+0x34>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	080085ed 	.word	0x080085ed
 80085e0:	080085f5 	.word	0x080085f5
 80085e4:	0800860d 	.word	0x0800860d
 80085e8:	08008627 	.word	0x08008627
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80085f2:	e028      	b.n	8008646 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80085f4:	f107 030c 	add.w	r3, r7, #12
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7ff fedf 	bl	80083bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80085fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800860a:	e01c      	b.n	8008646 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800860c:	f107 030c 	add.w	r3, r7, #12
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fed3 	bl	80083bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	b29a      	uxth	r2, r3
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008624:	e00f      	b.n	8008646 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008626:	f107 030c 	add.w	r3, r7, #12
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff fec6 	bl	80083bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	0a5a      	lsrs	r2, r3, #9
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800863e:	e002      	b.n	8008646 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008640:	2304      	movs	r3, #4
 8008642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800864a:	4618      	mov	r0, r3
 800864c:	3730      	adds	r7, #48	; 0x30
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	2000000d 	.word	0x2000000d

08008658 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	4a08      	ldr	r2, [pc, #32]	; (8008688 <disk_status+0x30>)
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	79fa      	ldrb	r2, [r7, #7]
 8008670:	4905      	ldr	r1, [pc, #20]	; (8008688 <disk_status+0x30>)
 8008672:	440a      	add	r2, r1
 8008674:	7a12      	ldrb	r2, [r2, #8]
 8008676:	4610      	mov	r0, r2
 8008678:	4798      	blx	r3
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20000db0 	.word	0x20000db0

0800868c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	4a0d      	ldr	r2, [pc, #52]	; (80086d4 <disk_initialize+0x48>)
 800869e:	5cd3      	ldrb	r3, [r2, r3]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d111      	bne.n	80086c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	4a0b      	ldr	r2, [pc, #44]	; (80086d4 <disk_initialize+0x48>)
 80086a8:	2101      	movs	r1, #1
 80086aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	4a09      	ldr	r2, [pc, #36]	; (80086d4 <disk_initialize+0x48>)
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	79fa      	ldrb	r2, [r7, #7]
 80086ba:	4906      	ldr	r1, [pc, #24]	; (80086d4 <disk_initialize+0x48>)
 80086bc:	440a      	add	r2, r1
 80086be:	7a12      	ldrb	r2, [r2, #8]
 80086c0:	4610      	mov	r0, r2
 80086c2:	4798      	blx	r3
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000db0 	.word	0x20000db0

080086d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80086d8:	b590      	push	{r4, r7, lr}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	4603      	mov	r3, r0
 80086e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	4a0a      	ldr	r2, [pc, #40]	; (8008714 <disk_read+0x3c>)
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	689c      	ldr	r4, [r3, #8]
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	4a07      	ldr	r2, [pc, #28]	; (8008714 <disk_read+0x3c>)
 80086f8:	4413      	add	r3, r2
 80086fa:	7a18      	ldrb	r0, [r3, #8]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	68b9      	ldr	r1, [r7, #8]
 8008702:	47a0      	blx	r4
 8008704:	4603      	mov	r3, r0
 8008706:	75fb      	strb	r3, [r7, #23]
  return res;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
}
 800870a:	4618      	mov	r0, r3
 800870c:	371c      	adds	r7, #28
 800870e:	46bd      	mov	sp, r7
 8008710:	bd90      	pop	{r4, r7, pc}
 8008712:	bf00      	nop
 8008714:	20000db0 	.word	0x20000db0

08008718 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008718:	b590      	push	{r4, r7, lr}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	4a0a      	ldr	r2, [pc, #40]	; (8008754 <disk_write+0x3c>)
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	68dc      	ldr	r4, [r3, #12]
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	4a07      	ldr	r2, [pc, #28]	; (8008754 <disk_write+0x3c>)
 8008738:	4413      	add	r3, r2
 800873a:	7a18      	ldrb	r0, [r3, #8]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	47a0      	blx	r4
 8008744:	4603      	mov	r3, r0
 8008746:	75fb      	strb	r3, [r7, #23]
  return res;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
}
 800874a:	4618      	mov	r0, r3
 800874c:	371c      	adds	r7, #28
 800874e:	46bd      	mov	sp, r7
 8008750:	bd90      	pop	{r4, r7, pc}
 8008752:	bf00      	nop
 8008754:	20000db0 	.word	0x20000db0

08008758 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	603a      	str	r2, [r7, #0]
 8008762:	71fb      	strb	r3, [r7, #7]
 8008764:	460b      	mov	r3, r1
 8008766:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	4a09      	ldr	r2, [pc, #36]	; (8008790 <disk_ioctl+0x38>)
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	79fa      	ldrb	r2, [r7, #7]
 8008776:	4906      	ldr	r1, [pc, #24]	; (8008790 <disk_ioctl+0x38>)
 8008778:	440a      	add	r2, r1
 800877a:	7a10      	ldrb	r0, [r2, #8]
 800877c:	79b9      	ldrb	r1, [r7, #6]
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	4798      	blx	r3
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]
  return res;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000db0 	.word	0x20000db0

08008794 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3301      	adds	r3, #1
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80087a4:	89fb      	ldrh	r3, [r7, #14]
 80087a6:	021b      	lsls	r3, r3, #8
 80087a8:	b21a      	sxth	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	b21b      	sxth	r3, r3
 80087b0:	4313      	orrs	r3, r2
 80087b2:	b21b      	sxth	r3, r3
 80087b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80087b6:	89fb      	ldrh	r3, [r7, #14]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3303      	adds	r3, #3
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	3202      	adds	r2, #2
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	3201      	adds	r2, #1
 80087ea:	7812      	ldrb	r2, [r2, #0]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	021b      	lsls	r3, r3, #8
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	7812      	ldrb	r2, [r2, #0]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80087fc:	68fb      	ldr	r3, [r7, #12]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	887a      	ldrh	r2, [r7, #2]
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	701a      	strb	r2, [r3, #0]
 8008822:	887b      	ldrh	r3, [r7, #2]
 8008824:	0a1b      	lsrs	r3, r3, #8
 8008826:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	607a      	str	r2, [r7, #4]
 800882e:	887a      	ldrh	r2, [r7, #2]
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	701a      	strb	r2, [r3, #0]
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	607a      	str	r2, [r7, #4]
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	b2d2      	uxtb	r2, r2
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	0a1b      	lsrs	r3, r3, #8
 800885a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	607a      	str	r2, [r7, #4]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	b2d2      	uxtb	r2, r2
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	0a1b      	lsrs	r3, r3, #8
 800886c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	0a1b      	lsrs	r3, r3, #8
 800887e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	b2d2      	uxtb	r2, r2
 800888a:	701a      	strb	r2, [r3, #0]
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00d      	beq.n	80088ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	1c53      	adds	r3, r2, #1
 80088b6:	613b      	str	r3, [r7, #16]
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	1c59      	adds	r1, r3, #1
 80088bc:	6179      	str	r1, [r7, #20]
 80088be:	7812      	ldrb	r2, [r2, #0]
 80088c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	607b      	str	r3, [r7, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f1      	bne.n	80088b2 <mem_cpy+0x1a>
	}
}
 80088ce:	bf00      	nop
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80088da:	b480      	push	{r7}
 80088dc:	b087      	sub	sp, #28
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	617a      	str	r2, [r7, #20]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	607b      	str	r3, [r7, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f3      	bne.n	80088ea <mem_set+0x10>
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	371c      	adds	r7, #28
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008910:	b480      	push	{r7}
 8008912:	b089      	sub	sp, #36	; 0x24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	61fb      	str	r3, [r7, #28]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	61fa      	str	r2, [r7, #28]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	4619      	mov	r1, r3
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	61ba      	str	r2, [r7, #24]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	1acb      	subs	r3, r1, r3
 800893c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3b01      	subs	r3, #1
 8008942:	607b      	str	r3, [r7, #4]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d002      	beq.n	8008950 <mem_cmp+0x40>
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0eb      	beq.n	8008928 <mem_cmp+0x18>

	return r;
 8008950:	697b      	ldr	r3, [r7, #20]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3724      	adds	r7, #36	; 0x24
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008968:	e002      	b.n	8008970 <chk_chr+0x12>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	3301      	adds	r3, #1
 800896e:	607b      	str	r3, [r7, #4]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <chk_chr+0x26>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	4293      	cmp	r3, r2
 8008982:	d1f2      	bne.n	800896a <chk_chr+0xc>
	return *str;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	781b      	ldrb	r3, [r3, #0]
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800899e:	2300      	movs	r3, #0
 80089a0:	60bb      	str	r3, [r7, #8]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e029      	b.n	80089fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80089a8:	4a27      	ldr	r2, [pc, #156]	; (8008a48 <chk_lock+0xb4>)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	011b      	lsls	r3, r3, #4
 80089ae:	4413      	add	r3, r2
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d01d      	beq.n	80089f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089b6:	4a24      	ldr	r2, [pc, #144]	; (8008a48 <chk_lock+0xb4>)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	011b      	lsls	r3, r3, #4
 80089bc:	4413      	add	r3, r2
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d116      	bne.n	80089f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80089c8:	4a1f      	ldr	r2, [pc, #124]	; (8008a48 <chk_lock+0xb4>)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	4413      	add	r3, r2
 80089d0:	3304      	adds	r3, #4
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089d8:	429a      	cmp	r2, r3
 80089da:	d10c      	bne.n	80089f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80089dc:	4a1a      	ldr	r2, [pc, #104]	; (8008a48 <chk_lock+0xb4>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	4413      	add	r3, r2
 80089e4:	3308      	adds	r3, #8
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d102      	bne.n	80089f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80089f0:	e007      	b.n	8008a02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80089f2:	2301      	movs	r3, #1
 80089f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d9d2      	bls.n	80089a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d109      	bne.n	8008a1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d102      	bne.n	8008a14 <chk_lock+0x80>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d101      	bne.n	8008a18 <chk_lock+0x84>
 8008a14:	2300      	movs	r3, #0
 8008a16:	e010      	b.n	8008a3a <chk_lock+0xa6>
 8008a18:	2312      	movs	r3, #18
 8008a1a:	e00e      	b.n	8008a3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d108      	bne.n	8008a34 <chk_lock+0xa0>
 8008a22:	4a09      	ldr	r2, [pc, #36]	; (8008a48 <chk_lock+0xb4>)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	4413      	add	r3, r2
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a32:	d101      	bne.n	8008a38 <chk_lock+0xa4>
 8008a34:	2310      	movs	r3, #16
 8008a36:	e000      	b.n	8008a3a <chk_lock+0xa6>
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	20000d90 	.word	0x20000d90

08008a4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]
 8008a56:	e002      	b.n	8008a5e <enq_lock+0x12>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	607b      	str	r3, [r7, #4]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d806      	bhi.n	8008a72 <enq_lock+0x26>
 8008a64:	4a09      	ldr	r2, [pc, #36]	; (8008a8c <enq_lock+0x40>)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	4413      	add	r3, r2
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1f2      	bne.n	8008a58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	bf14      	ite	ne
 8008a78:	2301      	movne	r3, #1
 8008a7a:	2300      	moveq	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	20000d90 	.word	0x20000d90

08008a90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e01f      	b.n	8008ae0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008aa0:	4a41      	ldr	r2, [pc, #260]	; (8008ba8 <inc_lock+0x118>)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	4413      	add	r3, r2
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d113      	bne.n	8008ada <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008ab2:	4a3d      	ldr	r2, [pc, #244]	; (8008ba8 <inc_lock+0x118>)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	011b      	lsls	r3, r3, #4
 8008ab8:	4413      	add	r3, r2
 8008aba:	3304      	adds	r3, #4
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d109      	bne.n	8008ada <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008ac6:	4a38      	ldr	r2, [pc, #224]	; (8008ba8 <inc_lock+0x118>)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	011b      	lsls	r3, r3, #4
 8008acc:	4413      	add	r3, r2
 8008ace:	3308      	adds	r3, #8
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d006      	beq.n	8008ae8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3301      	adds	r3, #1
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d9dc      	bls.n	8008aa0 <inc_lock+0x10>
 8008ae6:	e000      	b.n	8008aea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008ae8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d132      	bne.n	8008b56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	e002      	b.n	8008afc <inc_lock+0x6c>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d806      	bhi.n	8008b10 <inc_lock+0x80>
 8008b02:	4a29      	ldr	r2, [pc, #164]	; (8008ba8 <inc_lock+0x118>)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	4413      	add	r3, r2
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1f2      	bne.n	8008af6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d101      	bne.n	8008b1a <inc_lock+0x8a>
 8008b16:	2300      	movs	r3, #0
 8008b18:	e040      	b.n	8008b9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	4922      	ldr	r1, [pc, #136]	; (8008ba8 <inc_lock+0x118>)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	440b      	add	r3, r1
 8008b26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	491e      	ldr	r1, [pc, #120]	; (8008ba8 <inc_lock+0x118>)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	440b      	add	r3, r1
 8008b34:	3304      	adds	r3, #4
 8008b36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	695a      	ldr	r2, [r3, #20]
 8008b3c:	491a      	ldr	r1, [pc, #104]	; (8008ba8 <inc_lock+0x118>)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	440b      	add	r3, r1
 8008b44:	3308      	adds	r3, #8
 8008b46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008b48:	4a17      	ldr	r2, [pc, #92]	; (8008ba8 <inc_lock+0x118>)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	011b      	lsls	r3, r3, #4
 8008b4e:	4413      	add	r3, r2
 8008b50:	330c      	adds	r3, #12
 8008b52:	2200      	movs	r2, #0
 8008b54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <inc_lock+0xe0>
 8008b5c:	4a12      	ldr	r2, [pc, #72]	; (8008ba8 <inc_lock+0x118>)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	4413      	add	r3, r2
 8008b64:	330c      	adds	r3, #12
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <inc_lock+0xe0>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e015      	b.n	8008b9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d108      	bne.n	8008b88 <inc_lock+0xf8>
 8008b76:	4a0c      	ldr	r2, [pc, #48]	; (8008ba8 <inc_lock+0x118>)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	4413      	add	r3, r2
 8008b7e:	330c      	adds	r3, #12
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	e001      	b.n	8008b8c <inc_lock+0xfc>
 8008b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b8c:	4906      	ldr	r1, [pc, #24]	; (8008ba8 <inc_lock+0x118>)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	011b      	lsls	r3, r3, #4
 8008b92:	440b      	add	r3, r1
 8008b94:	330c      	adds	r3, #12
 8008b96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3301      	adds	r3, #1
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	20000d90 	.word	0x20000d90

08008bac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	607b      	str	r3, [r7, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d825      	bhi.n	8008c0c <dec_lock+0x60>
		n = Files[i].ctr;
 8008bc0:	4a17      	ldr	r2, [pc, #92]	; (8008c20 <dec_lock+0x74>)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	011b      	lsls	r3, r3, #4
 8008bc6:	4413      	add	r3, r2
 8008bc8:	330c      	adds	r3, #12
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008bce:	89fb      	ldrh	r3, [r7, #14]
 8008bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd4:	d101      	bne.n	8008bda <dec_lock+0x2e>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008bda:	89fb      	ldrh	r3, [r7, #14]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <dec_lock+0x3a>
 8008be0:	89fb      	ldrh	r3, [r7, #14]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008be6:	4a0e      	ldr	r2, [pc, #56]	; (8008c20 <dec_lock+0x74>)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	4413      	add	r3, r2
 8008bee:	330c      	adds	r3, #12
 8008bf0:	89fa      	ldrh	r2, [r7, #14]
 8008bf2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008bf4:	89fb      	ldrh	r3, [r7, #14]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d105      	bne.n	8008c06 <dec_lock+0x5a>
 8008bfa:	4a09      	ldr	r2, [pc, #36]	; (8008c20 <dec_lock+0x74>)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	4413      	add	r3, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	737b      	strb	r3, [r7, #13]
 8008c0a:	e001      	b.n	8008c10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008c10:	7b7b      	ldrb	r3, [r7, #13]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	20000d90 	.word	0x20000d90

08008c24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	e010      	b.n	8008c54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008c32:	4a0d      	ldr	r2, [pc, #52]	; (8008c68 <clear_lock+0x44>)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	4413      	add	r3, r2
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d105      	bne.n	8008c4e <clear_lock+0x2a>
 8008c42:	4a09      	ldr	r2, [pc, #36]	; (8008c68 <clear_lock+0x44>)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	011b      	lsls	r3, r3, #4
 8008c48:	4413      	add	r3, r2
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3301      	adds	r3, #1
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d9eb      	bls.n	8008c32 <clear_lock+0xe>
	}
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	20000d90 	.word	0x20000d90

08008c6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	78db      	ldrb	r3, [r3, #3]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d034      	beq.n	8008cea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	7858      	ldrb	r0, [r3, #1]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c90:	2301      	movs	r3, #1
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	f7ff fd40 	bl	8008718 <disk_write>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	73fb      	strb	r3, [r7, #15]
 8008ca2:	e022      	b.n	8008cea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	1ad2      	subs	r2, r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d217      	bcs.n	8008cea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	789b      	ldrb	r3, [r3, #2]
 8008cbe:	613b      	str	r3, [r7, #16]
 8008cc0:	e010      	b.n	8008ce4 <sync_window+0x78>
					wsect += fs->fsize;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4413      	add	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	7858      	ldrb	r0, [r3, #1]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	f7ff fd1d 	bl	8008718 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	613b      	str	r3, [r7, #16]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d8eb      	bhi.n	8008cc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d01b      	beq.n	8008d44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff ffad 	bl	8008c6c <sync_window>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d113      	bne.n	8008d44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	7858      	ldrb	r0, [r3, #1]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d26:	2301      	movs	r3, #1
 8008d28:	683a      	ldr	r2, [r7, #0]
 8008d2a:	f7ff fcd5 	bl	80086d8 <disk_read>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d004      	beq.n	8008d3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff ff87 	bl	8008c6c <sync_window>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d158      	bne.n	8008e1a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d148      	bne.n	8008e02 <sync_fs+0xb2>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	791b      	ldrb	r3, [r3, #4]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d144      	bne.n	8008e02 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3330      	adds	r3, #48	; 0x30
 8008d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d80:	2100      	movs	r1, #0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff fda9 	bl	80088da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3330      	adds	r3, #48	; 0x30
 8008d8c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d90:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff fd38 	bl	800880a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3330      	adds	r3, #48	; 0x30
 8008d9e:	4921      	ldr	r1, [pc, #132]	; (8008e24 <sync_fs+0xd4>)
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7ff fd4d 	bl	8008840 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3330      	adds	r3, #48	; 0x30
 8008daa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008dae:	491e      	ldr	r1, [pc, #120]	; (8008e28 <sync_fs+0xd8>)
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff fd45 	bl	8008840 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3330      	adds	r3, #48	; 0x30
 8008dba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	f7ff fd3b 	bl	8008840 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3330      	adds	r3, #48	; 0x30
 8008dce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4610      	mov	r0, r2
 8008dda:	f7ff fd31 	bl	8008840 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	7858      	ldrb	r0, [r3, #1]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df6:	2301      	movs	r3, #1
 8008df8:	f7ff fc8e 	bl	8008718 <disk_write>
			fs->fsi_flag = 0;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	785b      	ldrb	r3, [r3, #1]
 8008e06:	2200      	movs	r2, #0
 8008e08:	2100      	movs	r1, #0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fca4 	bl	8008758 <disk_ioctl>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <sync_fs+0xca>
 8008e16:	2301      	movs	r3, #1
 8008e18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	41615252 	.word	0x41615252
 8008e28:	61417272 	.word	0x61417272

08008e2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	3b02      	subs	r3, #2
 8008e3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	3b02      	subs	r3, #2
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d301      	bcc.n	8008e4c <clust2sect+0x20>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	e008      	b.n	8008e5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	895b      	ldrh	r3, [r3, #10]
 8008e50:	461a      	mov	r2, r3
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	fb03 f202 	mul.w	r2, r3, r2
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	4413      	add	r3, r2
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b086      	sub	sp, #24
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d904      	bls.n	8008e8a <get_fat+0x20>
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d302      	bcc.n	8008e90 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	617b      	str	r3, [r7, #20]
 8008e8e:	e08f      	b.n	8008fb0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d062      	beq.n	8008f64 <get_fat+0xfa>
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	dc7c      	bgt.n	8008f9c <get_fat+0x132>
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d002      	beq.n	8008eac <get_fat+0x42>
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d042      	beq.n	8008f30 <get_fat+0xc6>
 8008eaa:	e077      	b.n	8008f9c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	6a1a      	ldr	r2, [r3, #32]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	0a5b      	lsrs	r3, r3, #9
 8008ec2:	4413      	add	r3, r2
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6938      	ldr	r0, [r7, #16]
 8008ec8:	f7ff ff14 	bl	8008cf4 <move_window>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d167      	bne.n	8008fa2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	60fa      	str	r2, [r7, #12]
 8008ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ee4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	6a1a      	ldr	r2, [r3, #32]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	0a5b      	lsrs	r3, r3, #9
 8008eee:	4413      	add	r3, r2
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6938      	ldr	r0, [r7, #16]
 8008ef4:	f7ff fefe 	bl	8008cf4 <move_window>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d153      	bne.n	8008fa6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	4413      	add	r3, r2
 8008f08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	461a      	mov	r2, r3
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <get_fat+0xbc>
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	091b      	lsrs	r3, r3, #4
 8008f24:	e002      	b.n	8008f2c <get_fat+0xc2>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f2c:	617b      	str	r3, [r7, #20]
			break;
 8008f2e:	e03f      	b.n	8008fb0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6a1a      	ldr	r2, [r3, #32]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	0a1b      	lsrs	r3, r3, #8
 8008f38:	4413      	add	r3, r2
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6938      	ldr	r0, [r7, #16]
 8008f3e:	f7ff fed9 	bl	8008cf4 <move_window>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d130      	bne.n	8008faa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008f56:	4413      	add	r3, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff fc1b 	bl	8008794 <ld_word>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	617b      	str	r3, [r7, #20]
			break;
 8008f62:	e025      	b.n	8008fb0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	6a1a      	ldr	r2, [r3, #32]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	09db      	lsrs	r3, r3, #7
 8008f6c:	4413      	add	r3, r2
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6938      	ldr	r0, [r7, #16]
 8008f72:	f7ff febf 	bl	8008cf4 <move_window>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d118      	bne.n	8008fae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008f8a:	4413      	add	r3, r2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7ff fc19 	bl	80087c4 <ld_dword>
 8008f92:	4603      	mov	r3, r0
 8008f94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f98:	617b      	str	r3, [r7, #20]
			break;
 8008f9a:	e009      	b.n	8008fb0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	e006      	b.n	8008fb0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fa2:	bf00      	nop
 8008fa4:	e004      	b.n	8008fb0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fa6:	bf00      	nop
 8008fa8:	e002      	b.n	8008fb0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008faa:	bf00      	nop
 8008fac:	e000      	b.n	8008fb0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fae:	bf00      	nop
		}
	}

	return val;
 8008fb0:	697b      	ldr	r3, [r7, #20]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008fba:	b590      	push	{r4, r7, lr}
 8008fbc:	b089      	sub	sp, #36	; 0x24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	f240 80d2 	bls.w	8009176 <put_fat+0x1bc>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	f080 80cc 	bcs.w	8009176 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	f000 8096 	beq.w	8009114 <put_fat+0x15a>
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	f300 80cd 	bgt.w	8009188 <put_fat+0x1ce>
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d002      	beq.n	8008ff8 <put_fat+0x3e>
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d06e      	beq.n	80090d4 <put_fat+0x11a>
 8008ff6:	e0c7      	b.n	8009188 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	61bb      	str	r3, [r7, #24]
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	085b      	lsrs	r3, r3, #1
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	4413      	add	r3, r2
 8009004:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6a1a      	ldr	r2, [r3, #32]
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	0a5b      	lsrs	r3, r3, #9
 800900e:	4413      	add	r3, r2
 8009010:	4619      	mov	r1, r3
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f7ff fe6e 	bl	8008cf4 <move_window>
 8009018:	4603      	mov	r3, r0
 800901a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800901c:	7ffb      	ldrb	r3, [r7, #31]
 800901e:	2b00      	cmp	r3, #0
 8009020:	f040 80ab 	bne.w	800917a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	1c59      	adds	r1, r3, #1
 800902e:	61b9      	str	r1, [r7, #24]
 8009030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009034:	4413      	add	r3, r2
 8009036:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00d      	beq.n	800905e <put_fat+0xa4>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	b25b      	sxtb	r3, r3
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	b25a      	sxtb	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	b25b      	sxtb	r3, r3
 8009056:	4313      	orrs	r3, r2
 8009058:	b25b      	sxtb	r3, r3
 800905a:	b2db      	uxtb	r3, r3
 800905c:	e001      	b.n	8009062 <put_fat+0xa8>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a1a      	ldr	r2, [r3, #32]
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	0a5b      	lsrs	r3, r3, #9
 8009074:	4413      	add	r3, r2
 8009076:	4619      	mov	r1, r3
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f7ff fe3b 	bl	8008cf4 <move_window>
 800907e:	4603      	mov	r3, r0
 8009080:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009082:	7ffb      	ldrb	r3, [r7, #31]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d17a      	bne.n	800917e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009094:	4413      	add	r3, r2
 8009096:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <put_fat+0xf0>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	091b      	lsrs	r3, r3, #4
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	e00e      	b.n	80090c8 <put_fat+0x10e>
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	b25b      	sxtb	r3, r3
 80090b0:	f023 030f 	bic.w	r3, r3, #15
 80090b4:	b25a      	sxtb	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	0a1b      	lsrs	r3, r3, #8
 80090ba:	b25b      	sxtb	r3, r3
 80090bc:	f003 030f 	and.w	r3, r3, #15
 80090c0:	b25b      	sxtb	r3, r3
 80090c2:	4313      	orrs	r3, r2
 80090c4:	b25b      	sxtb	r3, r3
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	70da      	strb	r2, [r3, #3]
			break;
 80090d2:	e059      	b.n	8009188 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a1a      	ldr	r2, [r3, #32]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	4413      	add	r3, r2
 80090de:	4619      	mov	r1, r3
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f7ff fe07 	bl	8008cf4 <move_window>
 80090e6:	4603      	mov	r3, r0
 80090e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090ea:	7ffb      	ldrb	r3, [r7, #31]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d148      	bne.n	8009182 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80090fe:	4413      	add	r3, r2
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	b292      	uxth	r2, r2
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fb7f 	bl	800880a <st_word>
			fs->wflag = 1;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2201      	movs	r2, #1
 8009110:	70da      	strb	r2, [r3, #3]
			break;
 8009112:	e039      	b.n	8009188 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a1a      	ldr	r2, [r3, #32]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	09db      	lsrs	r3, r3, #7
 800911c:	4413      	add	r3, r2
 800911e:	4619      	mov	r1, r3
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f7ff fde7 	bl	8008cf4 <move_window>
 8009126:	4603      	mov	r3, r0
 8009128:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800912a:	7ffb      	ldrb	r3, [r7, #31]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d12a      	bne.n	8009186 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009144:	4413      	add	r3, r2
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff fb3c 	bl	80087c4 <ld_dword>
 800914c:	4603      	mov	r3, r0
 800914e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009152:	4323      	orrs	r3, r4
 8009154:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009164:	4413      	add	r3, r2
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff fb69 	bl	8008840 <st_dword>
			fs->wflag = 1;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	70da      	strb	r2, [r3, #3]
			break;
 8009174:	e008      	b.n	8009188 <put_fat+0x1ce>
		}
	}
 8009176:	bf00      	nop
 8009178:	e006      	b.n	8009188 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800917a:	bf00      	nop
 800917c:	e004      	b.n	8009188 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800917e:	bf00      	nop
 8009180:	e002      	b.n	8009188 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009182:	bf00      	nop
 8009184:	e000      	b.n	8009188 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009186:	bf00      	nop
	return res;
 8009188:	7ffb      	ldrb	r3, [r7, #31]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3724      	adds	r7, #36	; 0x24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd90      	pop	{r4, r7, pc}

08009192 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b088      	sub	sp, #32
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d904      	bls.n	80091b8 <remove_chain+0x26>
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d301      	bcc.n	80091bc <remove_chain+0x2a>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e04b      	b.n	8009254 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00c      	beq.n	80091dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	69b8      	ldr	r0, [r7, #24]
 80091ca:	f7ff fef6 	bl	8008fba <put_fat>
 80091ce:	4603      	mov	r3, r0
 80091d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80091d2:	7ffb      	ldrb	r3, [r7, #31]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <remove_chain+0x4a>
 80091d8:	7ffb      	ldrb	r3, [r7, #31]
 80091da:	e03b      	b.n	8009254 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80091dc:	68b9      	ldr	r1, [r7, #8]
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7ff fe43 	bl	8008e6a <get_fat>
 80091e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d031      	beq.n	8009250 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <remove_chain+0x64>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e02e      	b.n	8009254 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091fc:	d101      	bne.n	8009202 <remove_chain+0x70>
 80091fe:	2301      	movs	r3, #1
 8009200:	e028      	b.n	8009254 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009202:	2200      	movs	r2, #0
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	69b8      	ldr	r0, [r7, #24]
 8009208:	f7ff fed7 	bl	8008fba <put_fat>
 800920c:	4603      	mov	r3, r0
 800920e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009210:	7ffb      	ldrb	r3, [r7, #31]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <remove_chain+0x88>
 8009216:	7ffb      	ldrb	r3, [r7, #31]
 8009218:	e01c      	b.n	8009254 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	691a      	ldr	r2, [r3, #16]
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	3b02      	subs	r3, #2
 8009224:	429a      	cmp	r2, r3
 8009226:	d20b      	bcs.n	8009240 <remove_chain+0xae>
			fs->free_clst++;
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	791b      	ldrb	r3, [r3, #4]
 8009236:	f043 0301 	orr.w	r3, r3, #1
 800923a:	b2da      	uxtb	r2, r3
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	429a      	cmp	r2, r3
 800924c:	d3c6      	bcc.n	80091dc <remove_chain+0x4a>
 800924e:	e000      	b.n	8009252 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009250:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10d      	bne.n	800928e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d004      	beq.n	8009288 <create_chain+0x2c>
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	429a      	cmp	r2, r3
 8009286:	d31b      	bcc.n	80092c0 <create_chain+0x64>
 8009288:	2301      	movs	r3, #1
 800928a:	61bb      	str	r3, [r7, #24]
 800928c:	e018      	b.n	80092c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff fdea 	bl	8008e6a <get_fat>
 8009296:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d801      	bhi.n	80092a2 <create_chain+0x46>
 800929e:	2301      	movs	r3, #1
 80092a0:	e070      	b.n	8009384 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092a8:	d101      	bne.n	80092ae <create_chain+0x52>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	e06a      	b.n	8009384 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d201      	bcs.n	80092bc <create_chain+0x60>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	e063      	b.n	8009384 <create_chain+0x128>
		scl = clst;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	3301      	adds	r3, #1
 80092c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	69fa      	ldr	r2, [r7, #28]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d307      	bcc.n	80092e4 <create_chain+0x88>
				ncl = 2;
 80092d4:	2302      	movs	r3, #2
 80092d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80092d8:	69fa      	ldr	r2, [r7, #28]
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d901      	bls.n	80092e4 <create_chain+0x88>
 80092e0:	2300      	movs	r3, #0
 80092e2:	e04f      	b.n	8009384 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80092e4:	69f9      	ldr	r1, [r7, #28]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff fdbf 	bl	8008e6a <get_fat>
 80092ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00e      	beq.n	8009312 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d003      	beq.n	8009302 <create_chain+0xa6>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009300:	d101      	bne.n	8009306 <create_chain+0xaa>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	e03e      	b.n	8009384 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009306:	69fa      	ldr	r2, [r7, #28]
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	429a      	cmp	r2, r3
 800930c:	d1da      	bne.n	80092c4 <create_chain+0x68>
 800930e:	2300      	movs	r3, #0
 8009310:	e038      	b.n	8009384 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009312:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009318:	69f9      	ldr	r1, [r7, #28]
 800931a:	6938      	ldr	r0, [r7, #16]
 800931c:	f7ff fe4d 	bl	8008fba <put_fat>
 8009320:	4603      	mov	r3, r0
 8009322:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d109      	bne.n	800933e <create_chain+0xe2>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d006      	beq.n	800933e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009330:	69fa      	ldr	r2, [r7, #28]
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6938      	ldr	r0, [r7, #16]
 8009336:	f7ff fe40 	bl	8008fba <put_fat>
 800933a:	4603      	mov	r3, r0
 800933c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d116      	bne.n	8009372 <create_chain+0x116>
		fs->last_clst = ncl;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	69fa      	ldr	r2, [r7, #28]
 8009348:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	691a      	ldr	r2, [r3, #16]
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	3b02      	subs	r3, #2
 8009354:	429a      	cmp	r2, r3
 8009356:	d804      	bhi.n	8009362 <create_chain+0x106>
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	1e5a      	subs	r2, r3, #1
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	791b      	ldrb	r3, [r3, #4]
 8009366:	f043 0301 	orr.w	r3, r3, #1
 800936a:	b2da      	uxtb	r2, r3
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	711a      	strb	r2, [r3, #4]
 8009370:	e007      	b.n	8009382 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d102      	bne.n	800937e <create_chain+0x122>
 8009378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800937c:	e000      	b.n	8009380 <create_chain+0x124>
 800937e:	2301      	movs	r3, #1
 8009380:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009382:	69fb      	ldr	r3, [r7, #28]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a0:	3304      	adds	r3, #4
 80093a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	0a5b      	lsrs	r3, r3, #9
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	8952      	ldrh	r2, [r2, #10]
 80093ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80093b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	1d1a      	adds	r2, r3, #4
 80093b6:	613a      	str	r2, [r7, #16]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <clmt_clust+0x3a>
 80093c2:	2300      	movs	r3, #0
 80093c4:	e010      	b.n	80093e8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d307      	bcc.n	80093de <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	617b      	str	r3, [r7, #20]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	3304      	adds	r3, #4
 80093da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093dc:	e7e9      	b.n	80093b2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80093de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	4413      	add	r3, r2
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	371c      	adds	r7, #28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800940a:	d204      	bcs.n	8009416 <dir_sdi+0x22>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	f003 031f 	and.w	r3, r3, #31
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009416:	2302      	movs	r3, #2
 8009418:	e063      	b.n	80094e2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d106      	bne.n	800943a <dir_sdi+0x46>
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d902      	bls.n	800943a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10c      	bne.n	800945a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	095b      	lsrs	r3, r3, #5
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	8912      	ldrh	r2, [r2, #8]
 8009448:	4293      	cmp	r3, r2
 800944a:	d301      	bcc.n	8009450 <dir_sdi+0x5c>
 800944c:	2302      	movs	r3, #2
 800944e:	e048      	b.n	80094e2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	61da      	str	r2, [r3, #28]
 8009458:	e029      	b.n	80094ae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	895b      	ldrh	r3, [r3, #10]
 800945e:	025b      	lsls	r3, r3, #9
 8009460:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009462:	e019      	b.n	8009498 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6979      	ldr	r1, [r7, #20]
 8009468:	4618      	mov	r0, r3
 800946a:	f7ff fcfe 	bl	8008e6a <get_fat>
 800946e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009476:	d101      	bne.n	800947c <dir_sdi+0x88>
 8009478:	2301      	movs	r3, #1
 800947a:	e032      	b.n	80094e2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d904      	bls.n	800948c <dir_sdi+0x98>
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	429a      	cmp	r2, r3
 800948a:	d301      	bcc.n	8009490 <dir_sdi+0x9c>
 800948c:	2302      	movs	r3, #2
 800948e:	e028      	b.n	80094e2 <dir_sdi+0xee>
			ofs -= csz;
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	429a      	cmp	r2, r3
 800949e:	d2e1      	bcs.n	8009464 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80094a0:	6979      	ldr	r1, [r7, #20]
 80094a2:	6938      	ldr	r0, [r7, #16]
 80094a4:	f7ff fcc2 	bl	8008e2c <clust2sect>
 80094a8:	4602      	mov	r2, r0
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d101      	bne.n	80094c0 <dir_sdi+0xcc>
 80094bc:	2302      	movs	r3, #2
 80094be:	e010      	b.n	80094e2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	69da      	ldr	r2, [r3, #28]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	0a5b      	lsrs	r3, r3, #9
 80094c8:	441a      	add	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094da:	441a      	add	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b086      	sub	sp, #24
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	3320      	adds	r3, #32
 8009500:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <dir_next+0x28>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009510:	d301      	bcc.n	8009516 <dir_next+0x2c>
 8009512:	2304      	movs	r3, #4
 8009514:	e0aa      	b.n	800966c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951c:	2b00      	cmp	r3, #0
 800951e:	f040 8098 	bne.w	8009652 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10b      	bne.n	800954c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	095b      	lsrs	r3, r3, #5
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	8912      	ldrh	r2, [r2, #8]
 800953c:	4293      	cmp	r3, r2
 800953e:	f0c0 8088 	bcc.w	8009652 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	61da      	str	r2, [r3, #28]
 8009548:	2304      	movs	r3, #4
 800954a:	e08f      	b.n	800966c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	0a5b      	lsrs	r3, r3, #9
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	8952      	ldrh	r2, [r2, #10]
 8009554:	3a01      	subs	r2, #1
 8009556:	4013      	ands	r3, r2
 8009558:	2b00      	cmp	r3, #0
 800955a:	d17a      	bne.n	8009652 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f7ff fc80 	bl	8008e6a <get_fat>
 800956a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d801      	bhi.n	8009576 <dir_next+0x8c>
 8009572:	2302      	movs	r3, #2
 8009574:	e07a      	b.n	800966c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800957c:	d101      	bne.n	8009582 <dir_next+0x98>
 800957e:	2301      	movs	r3, #1
 8009580:	e074      	b.n	800966c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	429a      	cmp	r2, r3
 800958a:	d358      	bcc.n	800963e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d104      	bne.n	800959c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	61da      	str	r2, [r3, #28]
 8009598:	2304      	movs	r3, #4
 800959a:	e067      	b.n	800966c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	4619      	mov	r1, r3
 80095a4:	4610      	mov	r0, r2
 80095a6:	f7ff fe59 	bl	800925c <create_chain>
 80095aa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <dir_next+0xcc>
 80095b2:	2307      	movs	r3, #7
 80095b4:	e05a      	b.n	800966c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <dir_next+0xd6>
 80095bc:	2302      	movs	r3, #2
 80095be:	e055      	b.n	800966c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095c6:	d101      	bne.n	80095cc <dir_next+0xe2>
 80095c8:	2301      	movs	r3, #1
 80095ca:	e04f      	b.n	800966c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f7ff fb4d 	bl	8008c6c <sync_window>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <dir_next+0xf2>
 80095d8:	2301      	movs	r3, #1
 80095da:	e047      	b.n	800966c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3330      	adds	r3, #48	; 0x30
 80095e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095e4:	2100      	movs	r1, #0
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff f977 	bl	80088da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80095ec:	2300      	movs	r3, #0
 80095ee:	613b      	str	r3, [r7, #16]
 80095f0:	6979      	ldr	r1, [r7, #20]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f7ff fc1a 	bl	8008e2c <clust2sect>
 80095f8:	4602      	mov	r2, r0
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80095fe:	e012      	b.n	8009626 <dir_next+0x13c>
						fs->wflag = 1;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2201      	movs	r2, #1
 8009604:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7ff fb30 	bl	8008c6c <sync_window>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <dir_next+0x12c>
 8009612:	2301      	movs	r3, #1
 8009614:	e02a      	b.n	800966c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	3301      	adds	r3, #1
 800961a:	613b      	str	r3, [r7, #16]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	62da      	str	r2, [r3, #44]	; 0x2c
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	895b      	ldrh	r3, [r3, #10]
 800962a:	461a      	mov	r2, r3
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	4293      	cmp	r3, r2
 8009630:	d3e6      	bcc.n	8009600 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	1ad2      	subs	r2, r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009644:	6979      	ldr	r1, [r7, #20]
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7ff fbf0 	bl	8008e2c <clust2sect>
 800964c:	4602      	mov	r2, r0
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009664:	441a      	add	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3718      	adds	r7, #24
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009684:	2100      	movs	r1, #0
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff feb4 	bl	80093f4 <dir_sdi>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d12b      	bne.n	80096ee <dir_alloc+0x7a>
		n = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	69db      	ldr	r3, [r3, #28]
 800969e:	4619      	mov	r1, r3
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f7ff fb27 	bl	8008cf4 <move_window>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d11d      	bne.n	80096ec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2be5      	cmp	r3, #229	; 0xe5
 80096b8:	d004      	beq.n	80096c4 <dir_alloc+0x50>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d107      	bne.n	80096d4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	3301      	adds	r3, #1
 80096c8:	613b      	str	r3, [r7, #16]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d102      	bne.n	80096d8 <dir_alloc+0x64>
 80096d2:	e00c      	b.n	80096ee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80096d4:	2300      	movs	r3, #0
 80096d6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80096d8:	2101      	movs	r1, #1
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7ff ff05 	bl	80094ea <dir_next>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0d7      	beq.n	800969a <dir_alloc+0x26>
 80096ea:	e000      	b.n	80096ee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80096ec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d101      	bne.n	80096f8 <dir_alloc+0x84>
 80096f4:	2307      	movs	r3, #7
 80096f6:	75fb      	strb	r3, [r7, #23]
	return res;
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	331a      	adds	r3, #26
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff f83f 	bl	8008794 <ld_word>
 8009716:	4603      	mov	r3, r0
 8009718:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	2b03      	cmp	r3, #3
 8009720:	d109      	bne.n	8009736 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	3314      	adds	r3, #20
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff f834 	bl	8008794 <ld_word>
 800972c:	4603      	mov	r3, r0
 800972e:	041b      	lsls	r3, r3, #16
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009736:	68fb      	ldr	r3, [r7, #12]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	331a      	adds	r3, #26
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	b292      	uxth	r2, r2
 8009754:	4611      	mov	r1, r2
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff f857 	bl	800880a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b03      	cmp	r3, #3
 8009762:	d109      	bne.n	8009778 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	f103 0214 	add.w	r2, r3, #20
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	0c1b      	lsrs	r3, r3, #16
 800976e:	b29b      	uxth	r3, r3
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f7ff f849 	bl	800880a <st_word>
	}
}
 8009778:	bf00      	nop
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800978a:	2304      	movs	r3, #4
 800978c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009794:	e03c      	b.n	8009810 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	4619      	mov	r1, r3
 800979c:	6938      	ldr	r0, [r7, #16]
 800979e:	f7ff faa9 	bl	8008cf4 <move_window>
 80097a2:	4603      	mov	r3, r0
 80097a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d136      	bne.n	800981a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d102      	bne.n	80097c0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80097ba:	2304      	movs	r3, #4
 80097bc:	75fb      	strb	r3, [r7, #23]
 80097be:	e031      	b.n	8009824 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	330b      	adds	r3, #11
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097cc:	73bb      	strb	r3, [r7, #14]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	7bba      	ldrb	r2, [r7, #14]
 80097d2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	2be5      	cmp	r3, #229	; 0xe5
 80097d8:	d011      	beq.n	80097fe <dir_read+0x7e>
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	2b2e      	cmp	r3, #46	; 0x2e
 80097de:	d00e      	beq.n	80097fe <dir_read+0x7e>
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
 80097e2:	2b0f      	cmp	r3, #15
 80097e4:	d00b      	beq.n	80097fe <dir_read+0x7e>
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	f023 0320 	bic.w	r3, r3, #32
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	bf0c      	ite	eq
 80097f0:	2301      	moveq	r3, #1
 80097f2:	2300      	movne	r3, #0
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	461a      	mov	r2, r3
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d00f      	beq.n	800981e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80097fe:	2100      	movs	r1, #0
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff fe72 	bl	80094ea <dir_next>
 8009806:	4603      	mov	r3, r0
 8009808:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d108      	bne.n	8009822 <dir_read+0xa2>
	while (dp->sect) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1be      	bne.n	8009796 <dir_read+0x16>
 8009818:	e004      	b.n	8009824 <dir_read+0xa4>
		if (res != FR_OK) break;
 800981a:	bf00      	nop
 800981c:	e002      	b.n	8009824 <dir_read+0xa4>
				break;
 800981e:	bf00      	nop
 8009820:	e000      	b.n	8009824 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009822:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <dir_read+0xb0>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	61da      	str	r2, [r3, #28]
	return res;
 8009830:	7dfb      	ldrb	r3, [r7, #23]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3718      	adds	r7, #24
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b086      	sub	sp, #24
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009848:	2100      	movs	r1, #0
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fdd2 	bl	80093f4 <dir_sdi>
 8009850:	4603      	mov	r3, r0
 8009852:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <dir_find+0x24>
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	e03e      	b.n	80098dc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	4619      	mov	r1, r3
 8009864:	6938      	ldr	r0, [r7, #16]
 8009866:	f7ff fa45 	bl	8008cf4 <move_window>
 800986a:	4603      	mov	r3, r0
 800986c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800986e:	7dfb      	ldrb	r3, [r7, #23]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d12f      	bne.n	80098d4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d102      	bne.n	8009888 <dir_find+0x4e>
 8009882:	2304      	movs	r3, #4
 8009884:	75fb      	strb	r3, [r7, #23]
 8009886:	e028      	b.n	80098da <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	330b      	adds	r3, #11
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009894:	b2da      	uxtb	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	330b      	adds	r3, #11
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	f003 0308 	and.w	r3, r3, #8
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10a      	bne.n	80098c0 <dir_find+0x86>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a18      	ldr	r0, [r3, #32]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	3324      	adds	r3, #36	; 0x24
 80098b2:	220b      	movs	r2, #11
 80098b4:	4619      	mov	r1, r3
 80098b6:	f7ff f82b 	bl	8008910 <mem_cmp>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80098c0:	2100      	movs	r1, #0
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7ff fe11 	bl	80094ea <dir_next>
 80098c8:	4603      	mov	r3, r0
 80098ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0c5      	beq.n	800985e <dir_find+0x24>
 80098d2:	e002      	b.n	80098da <dir_find+0xa0>
		if (res != FR_OK) break;
 80098d4:	bf00      	nop
 80098d6:	e000      	b.n	80098da <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80098d8:	bf00      	nop

	return res;
 80098da:	7dfb      	ldrb	r3, [r7, #23]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80098f2:	2101      	movs	r1, #1
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff febd 	bl	8009674 <dir_alloc>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d11c      	bne.n	800993e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	4619      	mov	r1, r3
 800990a:	68b8      	ldr	r0, [r7, #8]
 800990c:	f7ff f9f2 	bl	8008cf4 <move_window>
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d111      	bne.n	800993e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	2220      	movs	r2, #32
 8009920:	2100      	movs	r1, #0
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe ffd9 	bl	80088da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a18      	ldr	r0, [r3, #32]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3324      	adds	r3, #36	; 0x24
 8009930:	220b      	movs	r2, #11
 8009932:	4619      	mov	r1, r3
 8009934:	f7fe ffb0 	bl	8008898 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2201      	movs	r2, #1
 800993c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800993e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	4619      	mov	r1, r3
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f7ff f9c9 	bl	8008cf4 <move_window>
 8009962:	4603      	mov	r3, r0
 8009964:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8009966:	7afb      	ldrb	r3, [r7, #11]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d106      	bne.n	800997a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a1b      	ldr	r3, [r3, #32]
 8009970:	22e5      	movs	r2, #229	; 0xe5
 8009972:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800997a:	7afb      	ldrb	r3, [r7, #11]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2200      	movs	r2, #0
 8009992:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d04e      	beq.n	8009a3a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80099a4:	e021      	b.n	80099ea <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1a      	ldr	r2, [r3, #32]
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	1c59      	adds	r1, r3, #1
 80099ae:	6179      	str	r1, [r7, #20]
 80099b0:	4413      	add	r3, r2
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d100      	bne.n	80099be <get_fileinfo+0x3a>
 80099bc:	e015      	b.n	80099ea <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b05      	cmp	r3, #5
 80099c2:	d101      	bne.n	80099c8 <get_fileinfo+0x44>
 80099c4:	23e5      	movs	r3, #229	; 0xe5
 80099c6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	2b09      	cmp	r3, #9
 80099cc:	d106      	bne.n	80099dc <get_fileinfo+0x58>
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	613a      	str	r2, [r7, #16]
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	4413      	add	r3, r2
 80099d8:	222e      	movs	r2, #46	; 0x2e
 80099da:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	613a      	str	r2, [r7, #16]
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	4413      	add	r3, r2
 80099e6:	7bfa      	ldrb	r2, [r7, #15]
 80099e8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b0a      	cmp	r3, #10
 80099ee:	d9da      	bls.n	80099a6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	4413      	add	r3, r2
 80099f6:	3309      	adds	r3, #9
 80099f8:	2200      	movs	r2, #0
 80099fa:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	7ada      	ldrb	r2, [r3, #11]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	331c      	adds	r3, #28
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe fed9 	bl	80087c4 <ld_dword>
 8009a12:	4602      	mov	r2, r0
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	3316      	adds	r3, #22
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fed0 	bl	80087c4 <ld_dword>
 8009a24:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	80da      	strh	r2, [r3, #6]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	0c1b      	lsrs	r3, r3, #16
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	809a      	strh	r2, [r3, #4]
 8009a38:	e000      	b.n	8009a3c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009a3a:	bf00      	nop
}
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3324      	adds	r3, #36	; 0x24
 8009a58:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009a5a:	220b      	movs	r2, #11
 8009a5c:	2120      	movs	r1, #32
 8009a5e:	68b8      	ldr	r0, [r7, #8]
 8009a60:	f7fe ff3b 	bl	80088da <mem_set>
	si = i = 0; ni = 8;
 8009a64:	2300      	movs	r3, #0
 8009a66:	613b      	str	r3, [r7, #16]
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	61fb      	str	r3, [r7, #28]
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	61fa      	str	r2, [r7, #28]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	4413      	add	r3, r2
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a7e:	7efb      	ldrb	r3, [r7, #27]
 8009a80:	2b20      	cmp	r3, #32
 8009a82:	d94e      	bls.n	8009b22 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009a84:	7efb      	ldrb	r3, [r7, #27]
 8009a86:	2b2f      	cmp	r3, #47	; 0x2f
 8009a88:	d006      	beq.n	8009a98 <create_name+0x54>
 8009a8a:	7efb      	ldrb	r3, [r7, #27]
 8009a8c:	2b5c      	cmp	r3, #92	; 0x5c
 8009a8e:	d110      	bne.n	8009ab2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009a90:	e002      	b.n	8009a98 <create_name+0x54>
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	3301      	adds	r3, #1
 8009a96:	61fb      	str	r3, [r7, #28]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	2b2f      	cmp	r3, #47	; 0x2f
 8009aa2:	d0f6      	beq.n	8009a92 <create_name+0x4e>
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b5c      	cmp	r3, #92	; 0x5c
 8009aae:	d0f0      	beq.n	8009a92 <create_name+0x4e>
			break;
 8009ab0:	e038      	b.n	8009b24 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009ab2:	7efb      	ldrb	r3, [r7, #27]
 8009ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ab6:	d003      	beq.n	8009ac0 <create_name+0x7c>
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d30c      	bcc.n	8009ada <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	2b0b      	cmp	r3, #11
 8009ac4:	d002      	beq.n	8009acc <create_name+0x88>
 8009ac6:	7efb      	ldrb	r3, [r7, #27]
 8009ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8009aca:	d001      	beq.n	8009ad0 <create_name+0x8c>
 8009acc:	2306      	movs	r3, #6
 8009ace:	e044      	b.n	8009b5a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	230b      	movs	r3, #11
 8009ad6:	617b      	str	r3, [r7, #20]
			continue;
 8009ad8:	e022      	b.n	8009b20 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009ada:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	da04      	bge.n	8009aec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009ae2:	7efb      	ldrb	r3, [r7, #27]
 8009ae4:	3b80      	subs	r3, #128	; 0x80
 8009ae6:	4a1f      	ldr	r2, [pc, #124]	; (8009b64 <create_name+0x120>)
 8009ae8:	5cd3      	ldrb	r3, [r2, r3]
 8009aea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009aec:	7efb      	ldrb	r3, [r7, #27]
 8009aee:	4619      	mov	r1, r3
 8009af0:	481d      	ldr	r0, [pc, #116]	; (8009b68 <create_name+0x124>)
 8009af2:	f7fe ff34 	bl	800895e <chk_chr>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <create_name+0xbc>
 8009afc:	2306      	movs	r3, #6
 8009afe:	e02c      	b.n	8009b5a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009b00:	7efb      	ldrb	r3, [r7, #27]
 8009b02:	2b60      	cmp	r3, #96	; 0x60
 8009b04:	d905      	bls.n	8009b12 <create_name+0xce>
 8009b06:	7efb      	ldrb	r3, [r7, #27]
 8009b08:	2b7a      	cmp	r3, #122	; 0x7a
 8009b0a:	d802      	bhi.n	8009b12 <create_name+0xce>
 8009b0c:	7efb      	ldrb	r3, [r7, #27]
 8009b0e:	3b20      	subs	r3, #32
 8009b10:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	613a      	str	r2, [r7, #16]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	7efa      	ldrb	r2, [r7, #27]
 8009b1e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009b20:	e7a6      	b.n	8009a70 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009b22:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	441a      	add	r2, r3
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d101      	bne.n	8009b38 <create_name+0xf4>
 8009b34:	2306      	movs	r3, #6
 8009b36:	e010      	b.n	8009b5a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2be5      	cmp	r3, #229	; 0xe5
 8009b3e:	d102      	bne.n	8009b46 <create_name+0x102>
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	2205      	movs	r2, #5
 8009b44:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009b46:	7efb      	ldrb	r3, [r7, #27]
 8009b48:	2b20      	cmp	r3, #32
 8009b4a:	d801      	bhi.n	8009b50 <create_name+0x10c>
 8009b4c:	2204      	movs	r2, #4
 8009b4e:	e000      	b.n	8009b52 <create_name+0x10e>
 8009b50:	2200      	movs	r2, #0
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	330b      	adds	r3, #11
 8009b56:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009b58:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3720      	adds	r7, #32
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	0800bcdc 	.word	0x0800bcdc
 8009b68:	0800bc64 	.word	0x0800bc64

08009b6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009b80:	e002      	b.n	8009b88 <follow_path+0x1c>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	3301      	adds	r3, #1
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2b2f      	cmp	r3, #47	; 0x2f
 8009b8e:	d0f8      	beq.n	8009b82 <follow_path+0x16>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b5c      	cmp	r3, #92	; 0x5c
 8009b96:	d0f4      	beq.n	8009b82 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b1f      	cmp	r3, #31
 8009ba4:	d80a      	bhi.n	8009bbc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2280      	movs	r2, #128	; 0x80
 8009baa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009bae:	2100      	movs	r1, #0
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7ff fc1f 	bl	80093f4 <dir_sdi>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75fb      	strb	r3, [r7, #23]
 8009bba:	e043      	b.n	8009c44 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009bbc:	463b      	mov	r3, r7
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7ff ff3f 	bl	8009a44 <create_name>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d134      	bne.n	8009c3a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff fe32 	bl	800983a <dir_find>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009be0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00a      	beq.n	8009bfe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
 8009bea:	2b04      	cmp	r3, #4
 8009bec:	d127      	bne.n	8009c3e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009bee:	7afb      	ldrb	r3, [r7, #11]
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d122      	bne.n	8009c3e <follow_path+0xd2>
 8009bf8:	2305      	movs	r3, #5
 8009bfa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009bfc:	e01f      	b.n	8009c3e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009bfe:	7afb      	ldrb	r3, [r7, #11]
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d11c      	bne.n	8009c42 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	799b      	ldrb	r3, [r3, #6]
 8009c0c:	f003 0310 	and.w	r3, r3, #16
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d102      	bne.n	8009c1a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009c14:	2305      	movs	r3, #5
 8009c16:	75fb      	strb	r3, [r7, #23]
 8009c18:	e014      	b.n	8009c44 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c28:	4413      	add	r3, r2
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7ff fd68 	bl	8009702 <ld_clust>
 8009c32:	4602      	mov	r2, r0
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c38:	e7c0      	b.n	8009bbc <follow_path+0x50>
			if (res != FR_OK) break;
 8009c3a:	bf00      	nop
 8009c3c:	e002      	b.n	8009c44 <follow_path+0xd8>
				break;
 8009c3e:	bf00      	nop
 8009c40:	e000      	b.n	8009c44 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c42:	bf00      	nop
			}
		}
	}

	return res;
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b087      	sub	sp, #28
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c5a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d031      	beq.n	8009cc8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	617b      	str	r3, [r7, #20]
 8009c6a:	e002      	b.n	8009c72 <get_ldnumber+0x24>
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	617b      	str	r3, [r7, #20]
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	2b20      	cmp	r3, #32
 8009c78:	d903      	bls.n	8009c82 <get_ldnumber+0x34>
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b3a      	cmp	r3, #58	; 0x3a
 8009c80:	d1f4      	bne.n	8009c6c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b3a      	cmp	r3, #58	; 0x3a
 8009c88:	d11c      	bne.n	8009cc4 <get_ldnumber+0x76>
			tp = *path;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	60fa      	str	r2, [r7, #12]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	3b30      	subs	r3, #48	; 0x30
 8009c9a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b09      	cmp	r3, #9
 8009ca0:	d80e      	bhi.n	8009cc0 <get_ldnumber+0x72>
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d10a      	bne.n	8009cc0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d107      	bne.n	8009cc0 <get_ldnumber+0x72>
					vol = (int)i;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	617b      	str	r3, [r7, #20]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	e002      	b.n	8009cca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009cc8:	693b      	ldr	r3, [r7, #16]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
	...

08009cd8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	70da      	strb	r2, [r3, #3]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7fe fffe 	bl	8008cf4 <move_window>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <check_fs+0x2a>
 8009cfe:	2304      	movs	r3, #4
 8009d00:	e038      	b.n	8009d74 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3330      	adds	r3, #48	; 0x30
 8009d06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe fd42 	bl	8008794 <ld_word>
 8009d10:	4603      	mov	r3, r0
 8009d12:	461a      	mov	r2, r3
 8009d14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d001      	beq.n	8009d20 <check_fs+0x48>
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e029      	b.n	8009d74 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d26:	2be9      	cmp	r3, #233	; 0xe9
 8009d28:	d009      	beq.n	8009d3e <check_fs+0x66>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d30:	2beb      	cmp	r3, #235	; 0xeb
 8009d32:	d11e      	bne.n	8009d72 <check_fs+0x9a>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009d3a:	2b90      	cmp	r3, #144	; 0x90
 8009d3c:	d119      	bne.n	8009d72 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	3330      	adds	r3, #48	; 0x30
 8009d42:	3336      	adds	r3, #54	; 0x36
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fe fd3d 	bl	80087c4 <ld_dword>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d50:	4a0a      	ldr	r2, [pc, #40]	; (8009d7c <check_fs+0xa4>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d101      	bne.n	8009d5a <check_fs+0x82>
 8009d56:	2300      	movs	r3, #0
 8009d58:	e00c      	b.n	8009d74 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3330      	adds	r3, #48	; 0x30
 8009d5e:	3352      	adds	r3, #82	; 0x52
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fd2f 	bl	80087c4 <ld_dword>
 8009d66:	4603      	mov	r3, r0
 8009d68:	4a05      	ldr	r2, [pc, #20]	; (8009d80 <check_fs+0xa8>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d101      	bne.n	8009d72 <check_fs+0x9a>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e000      	b.n	8009d74 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009d72:	2302      	movs	r3, #2
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	00544146 	.word	0x00544146
 8009d80:	33544146 	.word	0x33544146

08009d84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b096      	sub	sp, #88	; 0x58
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2200      	movs	r2, #0
 8009d96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f7ff ff58 	bl	8009c4e <get_ldnumber>
 8009d9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	da01      	bge.n	8009daa <find_volume+0x26>
 8009da6:	230b      	movs	r3, #11
 8009da8:	e22d      	b.n	800a206 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009daa:	4aa1      	ldr	r2, [pc, #644]	; (800a030 <find_volume+0x2ac>)
 8009dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009db2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <find_volume+0x3a>
 8009dba:	230c      	movs	r3, #12
 8009dbc:	e223      	b.n	800a206 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dc2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009dc4:	79fb      	ldrb	r3, [r7, #7]
 8009dc6:	f023 0301 	bic.w	r3, r3, #1
 8009dca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01a      	beq.n	8009e0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd6:	785b      	ldrb	r3, [r3, #1]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe fc3d 	bl	8008658 <disk_status>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009de4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10c      	bne.n	8009e0a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d007      	beq.n	8009e06 <find_volume+0x82>
 8009df6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dfa:	f003 0304 	and.w	r3, r3, #4
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009e02:	230a      	movs	r3, #10
 8009e04:	e1ff      	b.n	800a206 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009e06:	2300      	movs	r3, #0
 8009e08:	e1fd      	b.n	800a206 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1a:	785b      	ldrb	r3, [r3, #1]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe fc35 	bl	800868c <disk_initialize>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009e28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009e34:	2303      	movs	r3, #3
 8009e36:	e1e6      	b.n	800a206 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009e38:	79fb      	ldrb	r3, [r7, #7]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d007      	beq.n	8009e4e <find_volume+0xca>
 8009e3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e42:	f003 0304 	and.w	r3, r3, #4
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009e4a:	230a      	movs	r3, #10
 8009e4c:	e1db      	b.n	800a206 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009e52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e56:	f7ff ff3f 	bl	8009cd8 <check_fs>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d149      	bne.n	8009efc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e68:	2300      	movs	r3, #0
 8009e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8009e6c:	e01e      	b.n	8009eac <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e76:	011b      	lsls	r3, r3, #4
 8009e78:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009e7c:	4413      	add	r3, r2
 8009e7e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	3304      	adds	r3, #4
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d006      	beq.n	8009e98 <find_volume+0x114>
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fc98 	bl	80087c4 <ld_dword>
 8009e94:	4602      	mov	r2, r0
 8009e96:	e000      	b.n	8009e9a <find_volume+0x116>
 8009e98:	2200      	movs	r2, #0
 8009e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	3358      	adds	r3, #88	; 0x58
 8009ea0:	443b      	add	r3, r7
 8009ea2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8009eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d9dd      	bls.n	8009e6e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <find_volume+0x13e>
 8009ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	3358      	adds	r3, #88	; 0x58
 8009ec8:	443b      	add	r3, r7
 8009eca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009ece:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d005      	beq.n	8009ee2 <find_volume+0x15e>
 8009ed6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009eda:	f7ff fefd 	bl	8009cd8 <check_fs>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	e000      	b.n	8009ee4 <find_volume+0x160>
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d905      	bls.n	8009efc <find_volume+0x178>
 8009ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8009ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d9e2      	bls.n	8009ec2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d101      	bne.n	8009f08 <find_volume+0x184>
 8009f04:	2301      	movs	r3, #1
 8009f06:	e17e      	b.n	800a206 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d901      	bls.n	8009f14 <find_volume+0x190>
 8009f10:	230d      	movs	r3, #13
 8009f12:	e178      	b.n	800a206 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	3330      	adds	r3, #48	; 0x30
 8009f18:	330b      	adds	r3, #11
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fe fc3a 	bl	8008794 <ld_word>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f26:	d001      	beq.n	8009f2c <find_volume+0x1a8>
 8009f28:	230d      	movs	r3, #13
 8009f2a:	e16c      	b.n	800a206 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	3330      	adds	r3, #48	; 0x30
 8009f30:	3316      	adds	r3, #22
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fc2e 	bl	8008794 <ld_word>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d106      	bne.n	8009f50 <find_volume+0x1cc>
 8009f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f44:	3330      	adds	r3, #48	; 0x30
 8009f46:	3324      	adds	r3, #36	; 0x24
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fe fc3b 	bl	80087c4 <ld_dword>
 8009f4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f54:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	789b      	ldrb	r3, [r3, #2]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d005      	beq.n	8009f74 <find_volume+0x1f0>
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	789b      	ldrb	r3, [r3, #2]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d001      	beq.n	8009f74 <find_volume+0x1f0>
 8009f70:	230d      	movs	r3, #13
 8009f72:	e148      	b.n	800a206 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	789b      	ldrb	r3, [r3, #2]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7c:	fb02 f303 	mul.w	r3, r2, r3
 8009f80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f90:	895b      	ldrh	r3, [r3, #10]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d008      	beq.n	8009fa8 <find_volume+0x224>
 8009f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f98:	895b      	ldrh	r3, [r3, #10]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	895b      	ldrh	r3, [r3, #10]
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <find_volume+0x228>
 8009fa8:	230d      	movs	r3, #13
 8009faa:	e12c      	b.n	800a206 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fae:	3330      	adds	r3, #48	; 0x30
 8009fb0:	3311      	adds	r3, #17
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fbee 	bl	8008794 <ld_word>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	461a      	mov	r2, r3
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	891b      	ldrh	r3, [r3, #8]
 8009fc4:	f003 030f 	and.w	r3, r3, #15
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <find_volume+0x24e>
 8009fce:	230d      	movs	r3, #13
 8009fd0:	e119      	b.n	800a206 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	3330      	adds	r3, #48	; 0x30
 8009fd6:	3313      	adds	r3, #19
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fe fbdb 	bl	8008794 <ld_word>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d106      	bne.n	8009ff6 <find_volume+0x272>
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	3330      	adds	r3, #48	; 0x30
 8009fec:	3320      	adds	r3, #32
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fbe8 	bl	80087c4 <ld_dword>
 8009ff4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff8:	3330      	adds	r3, #48	; 0x30
 8009ffa:	330e      	adds	r3, #14
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fe fbc9 	bl	8008794 <ld_word>
 800a002:	4603      	mov	r3, r0
 800a004:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a006:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <find_volume+0x28c>
 800a00c:	230d      	movs	r3, #13
 800a00e:	e0fa      	b.n	800a206 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a010:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a014:	4413      	add	r3, r2
 800a016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a018:	8912      	ldrh	r2, [r2, #8]
 800a01a:	0912      	lsrs	r2, r2, #4
 800a01c:	b292      	uxth	r2, r2
 800a01e:	4413      	add	r3, r2
 800a020:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	429a      	cmp	r2, r3
 800a028:	d204      	bcs.n	800a034 <find_volume+0x2b0>
 800a02a:	230d      	movs	r3, #13
 800a02c:	e0eb      	b.n	800a206 <find_volume+0x482>
 800a02e:	bf00      	nop
 800a030:	20000d88 	.word	0x20000d88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a03c:	8952      	ldrh	r2, [r2, #10]
 800a03e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a042:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <find_volume+0x2ca>
 800a04a:	230d      	movs	r3, #13
 800a04c:	e0db      	b.n	800a206 <find_volume+0x482>
		fmt = FS_FAT32;
 800a04e:	2303      	movs	r3, #3
 800a050:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d802      	bhi.n	800a064 <find_volume+0x2e0>
 800a05e:	2302      	movs	r3, #2
 800a060:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d802      	bhi.n	800a074 <find_volume+0x2f0>
 800a06e:	2301      	movs	r3, #1
 800a070:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	1c9a      	adds	r2, r3, #2
 800a078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a080:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a082:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a086:	441a      	add	r2, r3
 800a088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a08c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	441a      	add	r2, r3
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a096:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d11e      	bne.n	800a0dc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a0:	3330      	adds	r3, #48	; 0x30
 800a0a2:	332a      	adds	r3, #42	; 0x2a
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe fb75 	bl	8008794 <ld_word>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <find_volume+0x330>
 800a0b0:	230d      	movs	r3, #13
 800a0b2:	e0a8      	b.n	800a206 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b6:	891b      	ldrh	r3, [r3, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d001      	beq.n	800a0c0 <find_volume+0x33c>
 800a0bc:	230d      	movs	r3, #13
 800a0be:	e0a2      	b.n	800a206 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c2:	3330      	adds	r3, #48	; 0x30
 800a0c4:	332c      	adds	r3, #44	; 0x2c
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fb7c 	bl	80087c4 <ld_dword>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	647b      	str	r3, [r7, #68]	; 0x44
 800a0da:	e01f      	b.n	800a11c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	891b      	ldrh	r3, [r3, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <find_volume+0x364>
 800a0e4:	230d      	movs	r3, #13
 800a0e6:	e08e      	b.n	800a206 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	6a1a      	ldr	r2, [r3, #32]
 800a0ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ee:	441a      	add	r2, r3
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a0f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d103      	bne.n	800a104 <find_volume+0x380>
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	695b      	ldr	r3, [r3, #20]
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	e00a      	b.n	800a11a <find_volume+0x396>
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	695a      	ldr	r2, [r3, #20]
 800a108:	4613      	mov	r3, r2
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	085a      	lsrs	r2, r3, #1
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	f003 0301 	and.w	r3, r3, #1
 800a118:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a11a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a122:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a126:	0a5b      	lsrs	r3, r3, #9
 800a128:	429a      	cmp	r2, r3
 800a12a:	d201      	bcs.n	800a130 <find_volume+0x3ac>
 800a12c:	230d      	movs	r3, #13
 800a12e:	e06a      	b.n	800a206 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a136:	611a      	str	r2, [r3, #16]
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	691a      	ldr	r2, [r3, #16]
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	2280      	movs	r2, #128	; 0x80
 800a144:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a146:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d149      	bne.n	800a1e2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a150:	3330      	adds	r3, #48	; 0x30
 800a152:	3330      	adds	r3, #48	; 0x30
 800a154:	4618      	mov	r0, r3
 800a156:	f7fe fb1d 	bl	8008794 <ld_word>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d140      	bne.n	800a1e2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a162:	3301      	adds	r3, #1
 800a164:	4619      	mov	r1, r3
 800a166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a168:	f7fe fdc4 	bl	8008cf4 <move_window>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d137      	bne.n	800a1e2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	2200      	movs	r2, #0
 800a176:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	3330      	adds	r3, #48	; 0x30
 800a17c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a180:	4618      	mov	r0, r3
 800a182:	f7fe fb07 	bl	8008794 <ld_word>
 800a186:	4603      	mov	r3, r0
 800a188:	461a      	mov	r2, r3
 800a18a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a18e:	429a      	cmp	r2, r3
 800a190:	d127      	bne.n	800a1e2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	3330      	adds	r3, #48	; 0x30
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fb14 	bl	80087c4 <ld_dword>
 800a19c:	4603      	mov	r3, r0
 800a19e:	4a1c      	ldr	r2, [pc, #112]	; (800a210 <find_volume+0x48c>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d11e      	bne.n	800a1e2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a6:	3330      	adds	r3, #48	; 0x30
 800a1a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fe fb09 	bl	80087c4 <ld_dword>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	4a17      	ldr	r2, [pc, #92]	; (800a214 <find_volume+0x490>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d113      	bne.n	800a1e2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1bc:	3330      	adds	r3, #48	; 0x30
 800a1be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fe fafe 	bl	80087c4 <ld_dword>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d0:	3330      	adds	r3, #48	; 0x30
 800a1d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fe faf4 	bl	80087c4 <ld_dword>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a1e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a1ea:	4b0b      	ldr	r3, [pc, #44]	; (800a218 <find_volume+0x494>)
 800a1ec:	881b      	ldrh	r3, [r3, #0]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	4b09      	ldr	r3, [pc, #36]	; (800a218 <find_volume+0x494>)
 800a1f4:	801a      	strh	r2, [r3, #0]
 800a1f6:	4b08      	ldr	r3, [pc, #32]	; (800a218 <find_volume+0x494>)
 800a1f8:	881a      	ldrh	r2, [r3, #0]
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a1fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a200:	f7fe fd10 	bl	8008c24 <clear_lock>
#endif
	return FR_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3758      	adds	r7, #88	; 0x58
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	41615252 	.word	0x41615252
 800a214:	61417272 	.word	0x61417272
 800a218:	20000d8c 	.word	0x20000d8c

0800a21c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a226:	2309      	movs	r3, #9
 800a228:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d01c      	beq.n	800a26a <validate+0x4e>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d018      	beq.n	800a26a <validate+0x4e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d013      	beq.n	800a26a <validate+0x4e>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	889a      	ldrh	r2, [r3, #4]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	88db      	ldrh	r3, [r3, #6]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d10c      	bne.n	800a26a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	785b      	ldrb	r3, [r3, #1]
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe f9fe 	bl	8008658 <disk_status>
 800a25c:	4603      	mov	r3, r0
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <validate+0x4e>
			res = FR_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d102      	bne.n	800a276 <validate+0x5a>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	e000      	b.n	800a278 <validate+0x5c>
 800a276:	2300      	movs	r3, #0
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	6013      	str	r3, [r2, #0]
	return res;
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b088      	sub	sp, #32
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	4613      	mov	r3, r2
 800a294:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a29a:	f107 0310 	add.w	r3, r7, #16
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7ff fcd5 	bl	8009c4e <get_ldnumber>
 800a2a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	da01      	bge.n	800a2b0 <f_mount+0x28>
 800a2ac:	230b      	movs	r3, #11
 800a2ae:	e02b      	b.n	800a308 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a2b0:	4a17      	ldr	r2, [pc, #92]	; (800a310 <f_mount+0x88>)
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d005      	beq.n	800a2cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a2c0:	69b8      	ldr	r0, [r7, #24]
 800a2c2:	f7fe fcaf 	bl	8008c24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	490d      	ldr	r1, [pc, #52]	; (800a310 <f_mount+0x88>)
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <f_mount+0x66>
 800a2e8:	79fb      	ldrb	r3, [r7, #7]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d001      	beq.n	800a2f2 <f_mount+0x6a>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e00a      	b.n	800a308 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a2f2:	f107 010c 	add.w	r1, r7, #12
 800a2f6:	f107 0308 	add.w	r3, r7, #8
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7ff fd41 	bl	8009d84 <find_volume>
 800a302:	4603      	mov	r3, r0
 800a304:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a306:	7dfb      	ldrb	r3, [r7, #23]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3720      	adds	r7, #32
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20000d88 	.word	0x20000d88

0800a314 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b098      	sub	sp, #96	; 0x60
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	4613      	mov	r3, r2
 800a320:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <f_open+0x18>
 800a328:	2309      	movs	r3, #9
 800a32a:	e1ad      	b.n	800a688 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a332:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a334:	79fa      	ldrb	r2, [r7, #7]
 800a336:	f107 0110 	add.w	r1, r7, #16
 800a33a:	f107 0308 	add.w	r3, r7, #8
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff fd20 	bl	8009d84 <find_volume>
 800a344:	4603      	mov	r3, r0
 800a346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a34a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f040 8191 	bne.w	800a676 <f_open+0x362>
		dj.obj.fs = fs;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	f107 0314 	add.w	r3, r7, #20
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f7ff fc03 	bl	8009b6c <follow_path>
 800a366:	4603      	mov	r3, r0
 800a368:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a36c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a370:	2b00      	cmp	r3, #0
 800a372:	d11a      	bne.n	800a3aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a374:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a378:	b25b      	sxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	da03      	bge.n	800a386 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a37e:	2306      	movs	r3, #6
 800a380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a384:	e011      	b.n	800a3aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	f023 0301 	bic.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	bf14      	ite	ne
 800a390:	2301      	movne	r3, #1
 800a392:	2300      	moveq	r3, #0
 800a394:	b2db      	uxtb	r3, r3
 800a396:	461a      	mov	r2, r3
 800a398:	f107 0314 	add.w	r3, r7, #20
 800a39c:	4611      	mov	r1, r2
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fe faf8 	bl	8008994 <chk_lock>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	f003 031c 	and.w	r3, r3, #28
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d07f      	beq.n	800a4b4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a3b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d017      	beq.n	800a3ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a3bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3c0:	2b04      	cmp	r3, #4
 800a3c2:	d10e      	bne.n	800a3e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a3c4:	f7fe fb42 	bl	8008a4c <enq_lock>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d006      	beq.n	800a3dc <f_open+0xc8>
 800a3ce:	f107 0314 	add.w	r3, r7, #20
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff fa86 	bl	80098e4 <dir_register>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	e000      	b.n	800a3de <f_open+0xca>
 800a3dc:	2312      	movs	r3, #18
 800a3de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	f043 0308 	orr.w	r3, r3, #8
 800a3e8:	71fb      	strb	r3, [r7, #7]
 800a3ea:	e010      	b.n	800a40e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a3ec:	7ebb      	ldrb	r3, [r7, #26]
 800a3ee:	f003 0311 	and.w	r3, r3, #17
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <f_open+0xea>
					res = FR_DENIED;
 800a3f6:	2307      	movs	r3, #7
 800a3f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a3fc:	e007      	b.n	800a40e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	f003 0304 	and.w	r3, r3, #4
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <f_open+0xfa>
 800a408:	2308      	movs	r3, #8
 800a40a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a40e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a412:	2b00      	cmp	r3, #0
 800a414:	d168      	bne.n	800a4e8 <f_open+0x1d4>
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	f003 0308 	and.w	r3, r3, #8
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d063      	beq.n	800a4e8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a420:	f7fd ff52 	bl	80082c8 <get_fattime>
 800a424:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a428:	330e      	adds	r3, #14
 800a42a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fe fa07 	bl	8008840 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a434:	3316      	adds	r3, #22
 800a436:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fe fa01 	bl	8008840 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a440:	330b      	adds	r3, #11
 800a442:	2220      	movs	r2, #32
 800a444:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a44a:	4611      	mov	r1, r2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff f958 	bl	8009702 <ld_clust>
 800a452:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a458:	2200      	movs	r2, #0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7ff f970 	bl	8009740 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a462:	331c      	adds	r3, #28
 800a464:	2100      	movs	r1, #0
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe f9ea 	bl	8008840 <st_dword>
					fs->wflag = 1;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	2201      	movs	r2, #1
 800a470:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a474:	2b00      	cmp	r3, #0
 800a476:	d037      	beq.n	800a4e8 <f_open+0x1d4>
						dw = fs->winsect;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a47e:	f107 0314 	add.w	r3, r7, #20
 800a482:	2200      	movs	r2, #0
 800a484:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fe83 	bl	8009192 <remove_chain>
 800a48c:	4603      	mov	r3, r0
 800a48e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a492:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a496:	2b00      	cmp	r3, #0
 800a498:	d126      	bne.n	800a4e8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fc28 	bl	8008cf4 <move_window>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4ae:	3a01      	subs	r2, #1
 800a4b0:	60da      	str	r2, [r3, #12]
 800a4b2:	e019      	b.n	800a4e8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a4b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d115      	bne.n	800a4e8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a4bc:	7ebb      	ldrb	r3, [r7, #26]
 800a4be:	f003 0310 	and.w	r3, r3, #16
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <f_open+0x1ba>
					res = FR_NO_FILE;
 800a4c6:	2304      	movs	r3, #4
 800a4c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a4cc:	e00c      	b.n	800a4e8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a4ce:	79fb      	ldrb	r3, [r7, #7]
 800a4d0:	f003 0302 	and.w	r3, r3, #2
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d007      	beq.n	800a4e8 <f_open+0x1d4>
 800a4d8:	7ebb      	ldrb	r3, [r7, #26]
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <f_open+0x1d4>
						res = FR_DENIED;
 800a4e2:	2307      	movs	r3, #7
 800a4e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a4e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d128      	bne.n	800a542 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	f003 0308 	and.w	r3, r3, #8
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a4fa:	79fb      	ldrb	r3, [r7, #7]
 800a4fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a500:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a50a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a510:	79fb      	ldrb	r3, [r7, #7]
 800a512:	f023 0301 	bic.w	r3, r3, #1
 800a516:	2b00      	cmp	r3, #0
 800a518:	bf14      	ite	ne
 800a51a:	2301      	movne	r3, #1
 800a51c:	2300      	moveq	r3, #0
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	461a      	mov	r2, r3
 800a522:	f107 0314 	add.w	r3, r7, #20
 800a526:	4611      	mov	r1, r2
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe fab1 	bl	8008a90 <inc_lock>
 800a52e:	4602      	mov	r2, r0
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d102      	bne.n	800a542 <f_open+0x22e>
 800a53c:	2302      	movs	r3, #2
 800a53e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a546:	2b00      	cmp	r3, #0
 800a548:	f040 8095 	bne.w	800a676 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a550:	4611      	mov	r1, r2
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff f8d5 	bl	8009702 <ld_clust>
 800a558:	4602      	mov	r2, r0
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a560:	331c      	adds	r3, #28
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe f92e 	bl	80087c4 <ld_dword>
 800a568:	4602      	mov	r2, r0
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	88da      	ldrh	r2, [r3, #6]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	79fa      	ldrb	r2, [r7, #7]
 800a586:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3330      	adds	r3, #48	; 0x30
 800a59e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fe f998 	bl	80088da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	f003 0320 	and.w	r3, r3, #32
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d060      	beq.n	800a676 <f_open+0x362>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d05c      	beq.n	800a676 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	68da      	ldr	r2, [r3, #12]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	895b      	ldrh	r3, [r3, #10]
 800a5c8:	025b      	lsls	r3, r3, #9
 800a5ca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	657b      	str	r3, [r7, #84]	; 0x54
 800a5d8:	e016      	b.n	800a608 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fc43 	bl	8008e6a <get_fat>
 800a5e4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a5e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d802      	bhi.n	800a5f2 <f_open+0x2de>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a5f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5f8:	d102      	bne.n	800a600 <f_open+0x2ec>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	657b      	str	r3, [r7, #84]	; 0x54
 800a608:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d103      	bne.n	800a618 <f_open+0x304>
 800a610:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a614:	429a      	cmp	r2, r3
 800a616:	d8e0      	bhi.n	800a5da <f_open+0x2c6>
				}
				fp->clust = clst;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a61c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a61e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a622:	2b00      	cmp	r3, #0
 800a624:	d127      	bne.n	800a676 <f_open+0x362>
 800a626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d022      	beq.n	800a676 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a634:	4618      	mov	r0, r3
 800a636:	f7fe fbf9 	bl	8008e2c <clust2sect>
 800a63a:	6478      	str	r0, [r7, #68]	; 0x44
 800a63c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d103      	bne.n	800a64a <f_open+0x336>
						res = FR_INT_ERR;
 800a642:	2302      	movs	r3, #2
 800a644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a648:	e015      	b.n	800a676 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a64a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a64c:	0a5a      	lsrs	r2, r3, #9
 800a64e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a650:	441a      	add	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	7858      	ldrb	r0, [r3, #1]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6a1a      	ldr	r2, [r3, #32]
 800a664:	2301      	movs	r3, #1
 800a666:	f7fe f837 	bl	80086d8 <disk_read>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <f_open+0x362>
 800a670:	2301      	movs	r3, #1
 800a672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <f_open+0x370>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3760      	adds	r7, #96	; 0x60
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08c      	sub	sp, #48	; 0x30
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f107 0210 	add.w	r2, r7, #16
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7ff fdb3 	bl	800a21c <validate>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a6bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d107      	bne.n	800a6d4 <f_write+0x44>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	7d5b      	ldrb	r3, [r3, #21]
 800a6c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a6cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <f_write+0x4a>
 800a6d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6d8:	e14b      	b.n	800a972 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	7d1b      	ldrb	r3, [r3, #20]
 800a6de:	f003 0302 	and.w	r3, r3, #2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <f_write+0x5a>
 800a6e6:	2307      	movs	r3, #7
 800a6e8:	e143      	b.n	800a972 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	441a      	add	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	f080 812d 	bcs.w	800a956 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	43db      	mvns	r3, r3
 800a702:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a704:	e127      	b.n	800a956 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f040 80e3 	bne.w	800a8da <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	0a5b      	lsrs	r3, r3, #9
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	8952      	ldrh	r2, [r2, #10]
 800a71e:	3a01      	subs	r2, #1
 800a720:	4013      	ands	r3, r2
 800a722:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d143      	bne.n	800a7b2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10c      	bne.n	800a74c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d11a      	bne.n	800a774 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2100      	movs	r1, #0
 800a742:	4618      	mov	r0, r3
 800a744:	f7fe fd8a 	bl	800925c <create_chain>
 800a748:	62b8      	str	r0, [r7, #40]	; 0x28
 800a74a:	e013      	b.n	800a774 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	2b00      	cmp	r3, #0
 800a752:	d007      	beq.n	800a764 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	4619      	mov	r1, r3
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f7fe fe16 	bl	800938c <clmt_clust>
 800a760:	62b8      	str	r0, [r7, #40]	; 0x28
 800a762:	e007      	b.n	800a774 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	4619      	mov	r1, r3
 800a76c:	4610      	mov	r0, r2
 800a76e:	f7fe fd75 	bl	800925c <create_chain>
 800a772:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 80f2 	beq.w	800a960 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d104      	bne.n	800a78c <f_write+0xfc>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2202      	movs	r2, #2
 800a786:	755a      	strb	r2, [r3, #21]
 800a788:	2302      	movs	r3, #2
 800a78a:	e0f2      	b.n	800a972 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a792:	d104      	bne.n	800a79e <f_write+0x10e>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2201      	movs	r2, #1
 800a798:	755a      	strb	r2, [r3, #21]
 800a79a:	2301      	movs	r3, #1
 800a79c:	e0e9      	b.n	800a972 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d102      	bne.n	800a7b2 <f_write+0x122>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	7d1b      	ldrb	r3, [r3, #20]
 800a7b6:	b25b      	sxtb	r3, r3
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	da18      	bge.n	800a7ee <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	7858      	ldrb	r0, [r3, #1]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6a1a      	ldr	r2, [r3, #32]
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	f7fd ffa4 	bl	8008718 <disk_write>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <f_write+0x150>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	755a      	strb	r2, [r3, #21]
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e0c8      	b.n	800a972 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	7d1b      	ldrb	r3, [r3, #20]
 800a7e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	69db      	ldr	r3, [r3, #28]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	f7fe fb18 	bl	8008e2c <clust2sect>
 800a7fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d104      	bne.n	800a80e <f_write+0x17e>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2202      	movs	r2, #2
 800a808:	755a      	strb	r2, [r3, #21]
 800a80a:	2302      	movs	r3, #2
 800a80c:	e0b1      	b.n	800a972 <f_write+0x2e2>
			sect += csect;
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	4413      	add	r3, r2
 800a814:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	0a5b      	lsrs	r3, r3, #9
 800a81a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d03c      	beq.n	800a89c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a822:	69ba      	ldr	r2, [r7, #24]
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	4413      	add	r3, r2
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	8952      	ldrh	r2, [r2, #10]
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d905      	bls.n	800a83c <f_write+0x1ac>
					cc = fs->csize - csect;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	895b      	ldrh	r3, [r3, #10]
 800a834:	461a      	mov	r2, r3
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	7858      	ldrb	r0, [r3, #1]
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	69f9      	ldr	r1, [r7, #28]
 800a846:	f7fd ff67 	bl	8008718 <disk_write>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d004      	beq.n	800a85a <f_write+0x1ca>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2201      	movs	r2, #1
 800a854:	755a      	strb	r2, [r3, #21]
 800a856:	2301      	movs	r3, #1
 800a858:	e08b      	b.n	800a972 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6a1a      	ldr	r2, [r3, #32]
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	6a3a      	ldr	r2, [r7, #32]
 800a864:	429a      	cmp	r2, r3
 800a866:	d915      	bls.n	800a894 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6a1a      	ldr	r2, [r3, #32]
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	025b      	lsls	r3, r3, #9
 800a878:	69fa      	ldr	r2, [r7, #28]
 800a87a:	4413      	add	r3, r2
 800a87c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a880:	4619      	mov	r1, r3
 800a882:	f7fe f809 	bl	8008898 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	7d1b      	ldrb	r3, [r3, #20]
 800a88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	025b      	lsls	r3, r3, #9
 800a898:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a89a:	e03f      	b.n	800a91c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d016      	beq.n	800a8d4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	699a      	ldr	r2, [r3, #24]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d210      	bcs.n	800a8d4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	7858      	ldrb	r0, [r3, #1]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8bc:	2301      	movs	r3, #1
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	f7fd ff0a 	bl	80086d8 <disk_read>
 800a8c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d004      	beq.n	800a8d4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	755a      	strb	r2, [r3, #21]
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e04e      	b.n	800a972 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a8e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d901      	bls.n	800a8f4 <f_write+0x264>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a902:	4413      	add	r3, r2
 800a904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a906:	69f9      	ldr	r1, [r7, #28]
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fd ffc5 	bl	8008898 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	7d1b      	ldrb	r3, [r3, #20]
 800a912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a916:	b2da      	uxtb	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a91c:	69fa      	ldr	r2, [r7, #28]
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	4413      	add	r3, r2
 800a922:	61fb      	str	r3, [r7, #28]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	699a      	ldr	r2, [r3, #24]
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	441a      	add	r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	619a      	str	r2, [r3, #24]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	68da      	ldr	r2, [r3, #12]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	429a      	cmp	r2, r3
 800a93a:	bf38      	it	cc
 800a93c:	461a      	movcc	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	60da      	str	r2, [r3, #12]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	441a      	add	r2, r3
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f47f aed4 	bne.w	800a706 <f_write+0x76>
 800a95e:	e000      	b.n	800a962 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a960:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	7d1b      	ldrb	r3, [r3, #20]
 800a966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3730      	adds	r7, #48	; 0x30
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b086      	sub	sp, #24
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f107 0208 	add.w	r2, r7, #8
 800a988:	4611      	mov	r1, r2
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7ff fc46 	bl	800a21c <validate>
 800a990:	4603      	mov	r3, r0
 800a992:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a994:	7dfb      	ldrb	r3, [r7, #23]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d168      	bne.n	800aa6c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	7d1b      	ldrb	r3, [r3, #20]
 800a99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d062      	beq.n	800aa6c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	7d1b      	ldrb	r3, [r3, #20]
 800a9aa:	b25b      	sxtb	r3, r3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	da15      	bge.n	800a9dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	7858      	ldrb	r0, [r3, #1]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1a      	ldr	r2, [r3, #32]
 800a9be:	2301      	movs	r3, #1
 800a9c0:	f7fd feaa 	bl	8008718 <disk_write>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <f_sync+0x54>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e04f      	b.n	800aa6e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	7d1b      	ldrb	r3, [r3, #20]
 800a9d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a9dc:	f7fd fc74 	bl	80082c8 <get_fattime>
 800a9e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7fe f982 	bl	8008cf4 <move_window>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a9f4:	7dfb      	ldrb	r3, [r7, #23]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d138      	bne.n	800aa6c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	330b      	adds	r3, #11
 800aa04:	781a      	ldrb	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	330b      	adds	r3, #11
 800aa0a:	f042 0220 	orr.w	r2, r2, #32
 800aa0e:	b2d2      	uxtb	r2, r2
 800aa10:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6818      	ldr	r0, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	68f9      	ldr	r1, [r7, #12]
 800aa1e:	f7fe fe8f 	bl	8009740 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f103 021c 	add.w	r2, r3, #28
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	4610      	mov	r0, r2
 800aa30:	f7fd ff06 	bl	8008840 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3316      	adds	r3, #22
 800aa38:	6939      	ldr	r1, [r7, #16]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fd ff00 	bl	8008840 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	3312      	adds	r3, #18
 800aa44:	2100      	movs	r1, #0
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fd fedf 	bl	800880a <st_word>
					fs->wflag = 1;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fe f97b 	bl	8008d50 <sync_fs>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	7d1b      	ldrb	r3, [r3, #20]
 800aa62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff ff7b 	bl	800a97a <f_sync>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aa88:	7bfb      	ldrb	r3, [r7, #15]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d118      	bne.n	800aac0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f107 0208 	add.w	r2, r7, #8
 800aa94:	4611      	mov	r1, r2
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff fbc0 	bl	800a21c <validate>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10c      	bne.n	800aac0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fe f87e 	bl	8008bac <dec_lock>
 800aab0:	4603      	mov	r3, r0
 800aab2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d102      	bne.n	800aac0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b090      	sub	sp, #64	; 0x40
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f107 0208 	add.w	r2, r7, #8
 800aada:	4611      	mov	r1, r2
 800aadc:	4618      	mov	r0, r3
 800aade:	f7ff fb9d 	bl	800a21c <validate>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800aae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d103      	bne.n	800aaf8 <f_lseek+0x2e>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	7d5b      	ldrb	r3, [r3, #21]
 800aaf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800aaf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <f_lseek+0x3c>
 800ab00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab04:	e1e6      	b.n	800aed4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 80d1 	beq.w	800acb2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab16:	d15a      	bne.n	800abce <f_lseek+0x104>
			tbl = fp->cltbl;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	1d1a      	adds	r2, r3, #4
 800ab22:	627a      	str	r2, [r7, #36]	; 0x24
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	617b      	str	r3, [r7, #20]
 800ab28:	2302      	movs	r3, #2
 800ab2a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ab32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d03a      	beq.n	800abae <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	613b      	str	r3, [r7, #16]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	3302      	adds	r3, #2
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	60fb      	str	r3, [r7, #12]
 800ab4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fe f988 	bl	8008e6a <get_fat>
 800ab5a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d804      	bhi.n	800ab6c <f_lseek+0xa2>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2202      	movs	r2, #2
 800ab66:	755a      	strb	r2, [r3, #21]
 800ab68:	2302      	movs	r3, #2
 800ab6a:	e1b3      	b.n	800aed4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab72:	d104      	bne.n	800ab7e <f_lseek+0xb4>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	755a      	strb	r2, [r3, #21]
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e1aa      	b.n	800aed4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3301      	adds	r3, #1
 800ab82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d0de      	beq.n	800ab46 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ab88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d809      	bhi.n	800aba4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	1d1a      	adds	r2, r3, #4
 800ab94:	627a      	str	r2, [r7, #36]	; 0x24
 800ab96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	1d1a      	adds	r2, r3, #4
 800ab9e:	627a      	str	r2, [r7, #36]	; 0x24
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abaa:	429a      	cmp	r2, r3
 800abac:	d3c4      	bcc.n	800ab38 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abb4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800abb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d803      	bhi.n	800abc6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	2200      	movs	r2, #0
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	e184      	b.n	800aed0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800abc6:	2311      	movs	r3, #17
 800abc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800abcc:	e180      	b.n	800aed0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d902      	bls.n	800abde <f_lseek+0x114>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f000 8172 	beq.w	800aed0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	3b01      	subs	r3, #1
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7fe fbca 	bl	800938c <clmt_clust>
 800abf8:	4602      	mov	r2, r0
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	69db      	ldr	r3, [r3, #28]
 800ac04:	4619      	mov	r1, r3
 800ac06:	4610      	mov	r0, r2
 800ac08:	f7fe f910 	bl	8008e2c <clust2sect>
 800ac0c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d104      	bne.n	800ac1e <f_lseek+0x154>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	755a      	strb	r2, [r3, #21]
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e15a      	b.n	800aed4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	0a5b      	lsrs	r3, r3, #9
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	8952      	ldrh	r2, [r2, #10]
 800ac28:	3a01      	subs	r2, #1
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	4413      	add	r3, r2
 800ac30:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f000 8148 	beq.w	800aed0 <f_lseek+0x406>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a1b      	ldr	r3, [r3, #32]
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	f000 8142 	beq.w	800aed0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	7d1b      	ldrb	r3, [r3, #20]
 800ac50:	b25b      	sxtb	r3, r3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	da18      	bge.n	800ac88 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	7858      	ldrb	r0, [r3, #1]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a1a      	ldr	r2, [r3, #32]
 800ac64:	2301      	movs	r3, #1
 800ac66:	f7fd fd57 	bl	8008718 <disk_write>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d004      	beq.n	800ac7a <f_lseek+0x1b0>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	755a      	strb	r2, [r3, #21]
 800ac76:	2301      	movs	r3, #1
 800ac78:	e12c      	b.n	800aed4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	7d1b      	ldrb	r3, [r3, #20]
 800ac7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	7858      	ldrb	r0, [r3, #1]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac92:	2301      	movs	r3, #1
 800ac94:	69ba      	ldr	r2, [r7, #24]
 800ac96:	f7fd fd1f 	bl	80086d8 <disk_read>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d004      	beq.n	800acaa <f_lseek+0x1e0>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	755a      	strb	r2, [r3, #21]
 800aca6:	2301      	movs	r3, #1
 800aca8:	e114      	b.n	800aed4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	621a      	str	r2, [r3, #32]
 800acb0:	e10e      	b.n	800aed0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d908      	bls.n	800acce <f_lseek+0x204>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	7d1b      	ldrb	r3, [r3, #20]
 800acc0:	f003 0302 	and.w	r3, r3, #2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d102      	bne.n	800acce <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	637b      	str	r3, [r7, #52]	; 0x34
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acdc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 80a7 	beq.w	800ae34 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	895b      	ldrh	r3, [r3, #10]
 800acea:	025b      	lsls	r3, r3, #9
 800acec:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d01b      	beq.n	800ad2c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	1e5a      	subs	r2, r3, #1
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	fbb2 f2f3 	udiv	r2, r2, r3
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	1e59      	subs	r1, r3, #1
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d30f      	bcc.n	800ad2c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ad0c:	6a3b      	ldr	r3, [r7, #32]
 800ad0e:	1e5a      	subs	r2, r3, #1
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	425b      	negs	r3, r3
 800ad14:	401a      	ands	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	69db      	ldr	r3, [r3, #28]
 800ad28:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad2a:	e022      	b.n	800ad72 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d119      	bne.n	800ad6c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fa8d 	bl	800925c <create_chain>
 800ad42:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ad44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d104      	bne.n	800ad54 <f_lseek+0x28a>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	755a      	strb	r2, [r3, #21]
 800ad50:	2302      	movs	r3, #2
 800ad52:	e0bf      	b.n	800aed4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad5a:	d104      	bne.n	800ad66 <f_lseek+0x29c>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	755a      	strb	r2, [r3, #21]
 800ad62:	2301      	movs	r3, #1
 800ad64:	e0b6      	b.n	800aed4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad6a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad70:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ad72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d05d      	beq.n	800ae34 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ad78:	e03a      	b.n	800adf0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	603b      	str	r3, [r7, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	699a      	ldr	r2, [r3, #24]
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	441a      	add	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	7d1b      	ldrb	r3, [r3, #20]
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00b      	beq.n	800adb2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fa5c 	bl	800925c <create_chain>
 800ada4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ada6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d108      	bne.n	800adbe <f_lseek+0x2f4>
							ofs = 0; break;
 800adac:	2300      	movs	r3, #0
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	e022      	b.n	800adf8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe f857 	bl	8008e6a <get_fat>
 800adbc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800adbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adc4:	d104      	bne.n	800add0 <f_lseek+0x306>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	755a      	strb	r2, [r3, #21]
 800adcc:	2301      	movs	r3, #1
 800adce:	e081      	b.n	800aed4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	2b01      	cmp	r3, #1
 800add4:	d904      	bls.n	800ade0 <f_lseek+0x316>
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800addc:	429a      	cmp	r2, r3
 800adde:	d304      	bcc.n	800adea <f_lseek+0x320>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2202      	movs	r2, #2
 800ade4:	755a      	strb	r2, [r3, #21]
 800ade6:	2302      	movs	r3, #2
 800ade8:	e074      	b.n	800aed4 <f_lseek+0x40a>
					fp->clust = clst;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adee:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d8c0      	bhi.n	800ad7a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	699a      	ldr	r2, [r3, #24]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	441a      	add	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d012      	beq.n	800ae34 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fe f80a 	bl	8008e2c <clust2sect>
 800ae18:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ae1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d104      	bne.n	800ae2a <f_lseek+0x360>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	755a      	strb	r2, [r3, #21]
 800ae26:	2302      	movs	r3, #2
 800ae28:	e054      	b.n	800aed4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	0a5b      	lsrs	r3, r3, #9
 800ae2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae30:	4413      	add	r3, r2
 800ae32:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	699a      	ldr	r2, [r3, #24]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d90a      	bls.n	800ae56 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	699a      	ldr	r2, [r3, #24]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	7d1b      	ldrb	r3, [r3, #20]
 800ae4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d036      	beq.n	800aed0 <f_lseek+0x406>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d031      	beq.n	800aed0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	7d1b      	ldrb	r3, [r3, #20]
 800ae70:	b25b      	sxtb	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	da18      	bge.n	800aea8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	7858      	ldrb	r0, [r3, #1]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a1a      	ldr	r2, [r3, #32]
 800ae84:	2301      	movs	r3, #1
 800ae86:	f7fd fc47 	bl	8008718 <disk_write>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d004      	beq.n	800ae9a <f_lseek+0x3d0>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	755a      	strb	r2, [r3, #21]
 800ae96:	2301      	movs	r3, #1
 800ae98:	e01c      	b.n	800aed4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	7d1b      	ldrb	r3, [r3, #20]
 800ae9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	7858      	ldrb	r0, [r3, #1]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeb6:	f7fd fc0f 	bl	80086d8 <disk_read>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d004      	beq.n	800aeca <f_lseek+0x400>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	755a      	strb	r2, [r3, #21]
 800aec6:	2301      	movs	r3, #1
 800aec8:	e004      	b.n	800aed4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aece:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800aed0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3740      	adds	r7, #64	; 0x40
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <f_opendir+0x14>
 800aeec:	2309      	movs	r3, #9
 800aeee:	e064      	b.n	800afba <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800aef4:	f107 010c 	add.w	r1, r7, #12
 800aef8:	463b      	mov	r3, r7
 800aefa:	2200      	movs	r2, #0
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe ff41 	bl	8009d84 <find_volume>
 800af02:	4603      	mov	r3, r0
 800af04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af06:	7dfb      	ldrb	r3, [r7, #23]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d14f      	bne.n	800afac <f_opendir+0xd0>
		obj->fs = fs;
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7fe fe28 	bl	8009b6c <follow_path>
 800af1c:	4603      	mov	r3, r0
 800af1e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800af20:	7dfb      	ldrb	r3, [r7, #23]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d13d      	bne.n	800afa2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af2c:	b25b      	sxtb	r3, r3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	db12      	blt.n	800af58 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	799b      	ldrb	r3, [r3, #6]
 800af36:	f003 0310 	and.w	r3, r3, #16
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00a      	beq.n	800af54 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a1b      	ldr	r3, [r3, #32]
 800af44:	4619      	mov	r1, r3
 800af46:	4610      	mov	r0, r2
 800af48:	f7fe fbdb 	bl	8009702 <ld_clust>
 800af4c:	4602      	mov	r2, r0
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	609a      	str	r2, [r3, #8]
 800af52:	e001      	b.n	800af58 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800af54:	2305      	movs	r3, #5
 800af56:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800af58:	7dfb      	ldrb	r3, [r7, #23]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d121      	bne.n	800afa2 <f_opendir+0xc6>
				obj->id = fs->id;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	88da      	ldrh	r2, [r3, #6]
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800af66:	2100      	movs	r1, #0
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7fe fa43 	bl	80093f4 <dir_sdi>
 800af6e:	4603      	mov	r3, r0
 800af70:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d114      	bne.n	800afa2 <f_opendir+0xc6>
					if (obj->sclust) {
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00d      	beq.n	800af9c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800af80:	2100      	movs	r1, #0
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7fd fd84 	bl	8008a90 <inc_lock>
 800af88:	4602      	mov	r2, r0
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d105      	bne.n	800afa2 <f_opendir+0xc6>
 800af96:	2312      	movs	r3, #18
 800af98:	75fb      	strb	r3, [r7, #23]
 800af9a:	e002      	b.n	800afa2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	2200      	movs	r2, #0
 800afa0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d101      	bne.n	800afac <f_opendir+0xd0>
 800afa8:	2305      	movs	r3, #5
 800afaa:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <f_opendir+0xdc>
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	2200      	movs	r2, #0
 800afb6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b084      	sub	sp, #16
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f107 0208 	add.w	r2, r7, #8
 800afd0:	4611      	mov	r1, r2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff f922 	bl	800a21c <validate>
 800afd8:	4603      	mov	r3, r0
 800afda:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d110      	bne.n	800b004 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d006      	beq.n	800aff8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fd fddc 	bl	8008bac <dec_lock>
 800aff4:	4603      	mov	r3, r0
 800aff6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d102      	bne.n	800b004 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b004:	7bfb      	ldrb	r3, [r7, #15]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
 800b016:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f107 0208 	add.w	r2, r7, #8
 800b01e:	4611      	mov	r1, r2
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff f8fb 	bl	800a21c <validate>
 800b026:	4603      	mov	r3, r0
 800b028:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d126      	bne.n	800b07e <f_readdir+0x70>
		if (!fno) {
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d106      	bne.n	800b044 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b036:	2100      	movs	r1, #0
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7fe f9db 	bl	80093f4 <dir_sdi>
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]
 800b042:	e01c      	b.n	800b07e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b044:	2100      	movs	r1, #0
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7fe fb9a 	bl	8009780 <dir_read>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	2b04      	cmp	r3, #4
 800b054:	d101      	bne.n	800b05a <f_readdir+0x4c>
 800b056:	2300      	movs	r3, #0
 800b058:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10e      	bne.n	800b07e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7fe fc8e 	bl	8009984 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b068:	2100      	movs	r1, #0
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7fe fa3d 	bl	80094ea <dir_next>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	2b04      	cmp	r3, #4
 800b078:	d101      	bne.n	800b07e <f_readdir+0x70>
 800b07a:	2300      	movs	r3, #0
 800b07c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b09e      	sub	sp, #120	; 0x78
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b090:	2300      	movs	r3, #0
 800b092:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b094:	f107 010c 	add.w	r1, r7, #12
 800b098:	1d3b      	adds	r3, r7, #4
 800b09a:	2202      	movs	r2, #2
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7fe fe71 	bl	8009d84 <find_volume>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b0ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f040 808e 	bne.w	800b1d2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0bc:	4611      	mov	r1, r2
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe fd54 	bl	8009b6c <follow_path>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b0ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d108      	bne.n	800b0e4 <f_unlink+0x5c>
 800b0d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0d6:	2102      	movs	r1, #2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fd fc5b 	bl	8008994 <chk_lock>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b0e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d172      	bne.n	800b1d2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b0ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b0f0:	b25b      	sxtb	r3, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	da03      	bge.n	800b0fe <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b0f6:	2306      	movs	r3, #6
 800b0f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b0fc:	e008      	b.n	800b110 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b0fe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b10a:	2307      	movs	r3, #7
 800b10c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b110:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b114:	2b00      	cmp	r3, #0
 800b116:	d134      	bne.n	800b182 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b11c:	4611      	mov	r1, r2
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe faef 	bl	8009702 <ld_clust>
 800b124:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b126:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b12a:	f003 0310 	and.w	r3, r3, #16
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d027      	beq.n	800b182 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b138:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b13a:	f107 0310 	add.w	r3, r7, #16
 800b13e:	2100      	movs	r1, #0
 800b140:	4618      	mov	r0, r3
 800b142:	f7fe f957 	bl	80093f4 <dir_sdi>
 800b146:	4603      	mov	r3, r0
 800b148:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b14c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b150:	2b00      	cmp	r3, #0
 800b152:	d116      	bne.n	800b182 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b154:	f107 0310 	add.w	r3, r7, #16
 800b158:	2100      	movs	r1, #0
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe fb10 	bl	8009780 <dir_read>
 800b160:	4603      	mov	r3, r0
 800b162:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b166:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <f_unlink+0xec>
 800b16e:	2307      	movs	r3, #7
 800b170:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b174:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b178:	2b04      	cmp	r3, #4
 800b17a:	d102      	bne.n	800b182 <f_unlink+0xfa>
 800b17c:	2300      	movs	r3, #0
 800b17e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b182:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b186:	2b00      	cmp	r3, #0
 800b188:	d123      	bne.n	800b1d2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b18a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fe fbda 	bl	8009948 <dir_remove>
 800b194:	4603      	mov	r3, r0
 800b196:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b19a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10c      	bne.n	800b1bc <f_unlink+0x134>
 800b1a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d009      	beq.n	800b1bc <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b1a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fd ffee 	bl	8009192 <remove_chain>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b1bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d106      	bne.n	800b1d2 <f_unlink+0x14a>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fd fdc2 	bl	8008d50 <sync_fs>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b1d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3778      	adds	r7, #120	; 0x78
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
	...

0800b1e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b1f6:	4b1f      	ldr	r3, [pc, #124]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b1f8:	7a5b      	ldrb	r3, [r3, #9]
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d131      	bne.n	800b264 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b200:	4b1c      	ldr	r3, [pc, #112]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b202:	7a5b      	ldrb	r3, [r3, #9]
 800b204:	b2db      	uxtb	r3, r3
 800b206:	461a      	mov	r2, r3
 800b208:	4b1a      	ldr	r3, [pc, #104]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b20a:	2100      	movs	r1, #0
 800b20c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b20e:	4b19      	ldr	r3, [pc, #100]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b210:	7a5b      	ldrb	r3, [r3, #9]
 800b212:	b2db      	uxtb	r3, r3
 800b214:	4a17      	ldr	r2, [pc, #92]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b21e:	4b15      	ldr	r3, [pc, #84]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b220:	7a5b      	ldrb	r3, [r3, #9]
 800b222:	b2db      	uxtb	r3, r3
 800b224:	461a      	mov	r2, r3
 800b226:	4b13      	ldr	r3, [pc, #76]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b228:	4413      	add	r3, r2
 800b22a:	79fa      	ldrb	r2, [r7, #7]
 800b22c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b22e:	4b11      	ldr	r3, [pc, #68]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b230:	7a5b      	ldrb	r3, [r3, #9]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	b2d1      	uxtb	r1, r2
 800b238:	4a0e      	ldr	r2, [pc, #56]	; (800b274 <FATFS_LinkDriverEx+0x94>)
 800b23a:	7251      	strb	r1, [r2, #9]
 800b23c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b23e:	7dbb      	ldrb	r3, [r7, #22]
 800b240:	3330      	adds	r3, #48	; 0x30
 800b242:	b2da      	uxtb	r2, r3
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	3301      	adds	r3, #1
 800b24c:	223a      	movs	r2, #58	; 0x3a
 800b24e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	3302      	adds	r3, #2
 800b254:	222f      	movs	r2, #47	; 0x2f
 800b256:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	3303      	adds	r3, #3
 800b25c:	2200      	movs	r2, #0
 800b25e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b264:	7dfb      	ldrb	r3, [r7, #23]
}
 800b266:	4618      	mov	r0, r3
 800b268:	371c      	adds	r7, #28
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	20000db0 	.word	0x20000db0

0800b278 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b282:	2200      	movs	r2, #0
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff ffaa 	bl	800b1e0 <FATFS_LinkDriverEx>
 800b28c:	4603      	mov	r3, r0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <__errno>:
 800b298:	4b01      	ldr	r3, [pc, #4]	; (800b2a0 <__errno+0x8>)
 800b29a:	6818      	ldr	r0, [r3, #0]
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	20000010 	.word	0x20000010

0800b2a4 <exit>:
 800b2a4:	b508      	push	{r3, lr}
 800b2a6:	4b07      	ldr	r3, [pc, #28]	; (800b2c4 <exit+0x20>)
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	b113      	cbz	r3, 800b2b2 <exit+0xe>
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	f3af 8000 	nop.w
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <exit+0x24>)
 800b2b4:	6818      	ldr	r0, [r3, #0]
 800b2b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b2b8:	b103      	cbz	r3, 800b2bc <exit+0x18>
 800b2ba:	4798      	blx	r3
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f7f6 fac3 	bl	8001848 <_exit>
 800b2c2:	bf00      	nop
 800b2c4:	00000000 	.word	0x00000000
 800b2c8:	0800bd5c 	.word	0x0800bd5c

0800b2cc <__libc_init_array>:
 800b2cc:	b570      	push	{r4, r5, r6, lr}
 800b2ce:	4d0d      	ldr	r5, [pc, #52]	; (800b304 <__libc_init_array+0x38>)
 800b2d0:	4c0d      	ldr	r4, [pc, #52]	; (800b308 <__libc_init_array+0x3c>)
 800b2d2:	1b64      	subs	r4, r4, r5
 800b2d4:	10a4      	asrs	r4, r4, #2
 800b2d6:	2600      	movs	r6, #0
 800b2d8:	42a6      	cmp	r6, r4
 800b2da:	d109      	bne.n	800b2f0 <__libc_init_array+0x24>
 800b2dc:	4d0b      	ldr	r5, [pc, #44]	; (800b30c <__libc_init_array+0x40>)
 800b2de:	4c0c      	ldr	r4, [pc, #48]	; (800b310 <__libc_init_array+0x44>)
 800b2e0:	f000 fc9e 	bl	800bc20 <_init>
 800b2e4:	1b64      	subs	r4, r4, r5
 800b2e6:	10a4      	asrs	r4, r4, #2
 800b2e8:	2600      	movs	r6, #0
 800b2ea:	42a6      	cmp	r6, r4
 800b2ec:	d105      	bne.n	800b2fa <__libc_init_array+0x2e>
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
 800b2f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2f4:	4798      	blx	r3
 800b2f6:	3601      	adds	r6, #1
 800b2f8:	e7ee      	b.n	800b2d8 <__libc_init_array+0xc>
 800b2fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2fe:	4798      	blx	r3
 800b300:	3601      	adds	r6, #1
 800b302:	e7f2      	b.n	800b2ea <__libc_init_array+0x1e>
 800b304:	0800bd9c 	.word	0x0800bd9c
 800b308:	0800bd9c 	.word	0x0800bd9c
 800b30c:	0800bd9c 	.word	0x0800bd9c
 800b310:	0800bda0 	.word	0x0800bda0

0800b314 <malloc>:
 800b314:	4b02      	ldr	r3, [pc, #8]	; (800b320 <malloc+0xc>)
 800b316:	4601      	mov	r1, r0
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	f000 b87f 	b.w	800b41c <_malloc_r>
 800b31e:	bf00      	nop
 800b320:	20000010 	.word	0x20000010

0800b324 <free>:
 800b324:	4b02      	ldr	r3, [pc, #8]	; (800b330 <free+0xc>)
 800b326:	4601      	mov	r1, r0
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	f000 b80b 	b.w	800b344 <_free_r>
 800b32e:	bf00      	nop
 800b330:	20000010 	.word	0x20000010

0800b334 <memset>:
 800b334:	4402      	add	r2, r0
 800b336:	4603      	mov	r3, r0
 800b338:	4293      	cmp	r3, r2
 800b33a:	d100      	bne.n	800b33e <memset+0xa>
 800b33c:	4770      	bx	lr
 800b33e:	f803 1b01 	strb.w	r1, [r3], #1
 800b342:	e7f9      	b.n	800b338 <memset+0x4>

0800b344 <_free_r>:
 800b344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b346:	2900      	cmp	r1, #0
 800b348:	d044      	beq.n	800b3d4 <_free_r+0x90>
 800b34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b34e:	9001      	str	r0, [sp, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	f1a1 0404 	sub.w	r4, r1, #4
 800b356:	bfb8      	it	lt
 800b358:	18e4      	addlt	r4, r4, r3
 800b35a:	f000 f903 	bl	800b564 <__malloc_lock>
 800b35e:	4a1e      	ldr	r2, [pc, #120]	; (800b3d8 <_free_r+0x94>)
 800b360:	9801      	ldr	r0, [sp, #4]
 800b362:	6813      	ldr	r3, [r2, #0]
 800b364:	b933      	cbnz	r3, 800b374 <_free_r+0x30>
 800b366:	6063      	str	r3, [r4, #4]
 800b368:	6014      	str	r4, [r2, #0]
 800b36a:	b003      	add	sp, #12
 800b36c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b370:	f000 b8fe 	b.w	800b570 <__malloc_unlock>
 800b374:	42a3      	cmp	r3, r4
 800b376:	d908      	bls.n	800b38a <_free_r+0x46>
 800b378:	6825      	ldr	r5, [r4, #0]
 800b37a:	1961      	adds	r1, r4, r5
 800b37c:	428b      	cmp	r3, r1
 800b37e:	bf01      	itttt	eq
 800b380:	6819      	ldreq	r1, [r3, #0]
 800b382:	685b      	ldreq	r3, [r3, #4]
 800b384:	1949      	addeq	r1, r1, r5
 800b386:	6021      	streq	r1, [r4, #0]
 800b388:	e7ed      	b.n	800b366 <_free_r+0x22>
 800b38a:	461a      	mov	r2, r3
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	b10b      	cbz	r3, 800b394 <_free_r+0x50>
 800b390:	42a3      	cmp	r3, r4
 800b392:	d9fa      	bls.n	800b38a <_free_r+0x46>
 800b394:	6811      	ldr	r1, [r2, #0]
 800b396:	1855      	adds	r5, r2, r1
 800b398:	42a5      	cmp	r5, r4
 800b39a:	d10b      	bne.n	800b3b4 <_free_r+0x70>
 800b39c:	6824      	ldr	r4, [r4, #0]
 800b39e:	4421      	add	r1, r4
 800b3a0:	1854      	adds	r4, r2, r1
 800b3a2:	42a3      	cmp	r3, r4
 800b3a4:	6011      	str	r1, [r2, #0]
 800b3a6:	d1e0      	bne.n	800b36a <_free_r+0x26>
 800b3a8:	681c      	ldr	r4, [r3, #0]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	6053      	str	r3, [r2, #4]
 800b3ae:	4421      	add	r1, r4
 800b3b0:	6011      	str	r1, [r2, #0]
 800b3b2:	e7da      	b.n	800b36a <_free_r+0x26>
 800b3b4:	d902      	bls.n	800b3bc <_free_r+0x78>
 800b3b6:	230c      	movs	r3, #12
 800b3b8:	6003      	str	r3, [r0, #0]
 800b3ba:	e7d6      	b.n	800b36a <_free_r+0x26>
 800b3bc:	6825      	ldr	r5, [r4, #0]
 800b3be:	1961      	adds	r1, r4, r5
 800b3c0:	428b      	cmp	r3, r1
 800b3c2:	bf04      	itt	eq
 800b3c4:	6819      	ldreq	r1, [r3, #0]
 800b3c6:	685b      	ldreq	r3, [r3, #4]
 800b3c8:	6063      	str	r3, [r4, #4]
 800b3ca:	bf04      	itt	eq
 800b3cc:	1949      	addeq	r1, r1, r5
 800b3ce:	6021      	streq	r1, [r4, #0]
 800b3d0:	6054      	str	r4, [r2, #4]
 800b3d2:	e7ca      	b.n	800b36a <_free_r+0x26>
 800b3d4:	b003      	add	sp, #12
 800b3d6:	bd30      	pop	{r4, r5, pc}
 800b3d8:	20000dbc 	.word	0x20000dbc

0800b3dc <sbrk_aligned>:
 800b3dc:	b570      	push	{r4, r5, r6, lr}
 800b3de:	4e0e      	ldr	r6, [pc, #56]	; (800b418 <sbrk_aligned+0x3c>)
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	6831      	ldr	r1, [r6, #0]
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	b911      	cbnz	r1, 800b3ee <sbrk_aligned+0x12>
 800b3e8:	f000 f88c 	bl	800b504 <_sbrk_r>
 800b3ec:	6030      	str	r0, [r6, #0]
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f000 f887 	bl	800b504 <_sbrk_r>
 800b3f6:	1c43      	adds	r3, r0, #1
 800b3f8:	d00a      	beq.n	800b410 <sbrk_aligned+0x34>
 800b3fa:	1cc4      	adds	r4, r0, #3
 800b3fc:	f024 0403 	bic.w	r4, r4, #3
 800b400:	42a0      	cmp	r0, r4
 800b402:	d007      	beq.n	800b414 <sbrk_aligned+0x38>
 800b404:	1a21      	subs	r1, r4, r0
 800b406:	4628      	mov	r0, r5
 800b408:	f000 f87c 	bl	800b504 <_sbrk_r>
 800b40c:	3001      	adds	r0, #1
 800b40e:	d101      	bne.n	800b414 <sbrk_aligned+0x38>
 800b410:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b414:	4620      	mov	r0, r4
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	20000dc0 	.word	0x20000dc0

0800b41c <_malloc_r>:
 800b41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b420:	1ccd      	adds	r5, r1, #3
 800b422:	f025 0503 	bic.w	r5, r5, #3
 800b426:	3508      	adds	r5, #8
 800b428:	2d0c      	cmp	r5, #12
 800b42a:	bf38      	it	cc
 800b42c:	250c      	movcc	r5, #12
 800b42e:	2d00      	cmp	r5, #0
 800b430:	4607      	mov	r7, r0
 800b432:	db01      	blt.n	800b438 <_malloc_r+0x1c>
 800b434:	42a9      	cmp	r1, r5
 800b436:	d905      	bls.n	800b444 <_malloc_r+0x28>
 800b438:	230c      	movs	r3, #12
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	2600      	movs	r6, #0
 800b43e:	4630      	mov	r0, r6
 800b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b444:	4e2e      	ldr	r6, [pc, #184]	; (800b500 <_malloc_r+0xe4>)
 800b446:	f000 f88d 	bl	800b564 <__malloc_lock>
 800b44a:	6833      	ldr	r3, [r6, #0]
 800b44c:	461c      	mov	r4, r3
 800b44e:	bb34      	cbnz	r4, 800b49e <_malloc_r+0x82>
 800b450:	4629      	mov	r1, r5
 800b452:	4638      	mov	r0, r7
 800b454:	f7ff ffc2 	bl	800b3dc <sbrk_aligned>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	4604      	mov	r4, r0
 800b45c:	d14d      	bne.n	800b4fa <_malloc_r+0xde>
 800b45e:	6834      	ldr	r4, [r6, #0]
 800b460:	4626      	mov	r6, r4
 800b462:	2e00      	cmp	r6, #0
 800b464:	d140      	bne.n	800b4e8 <_malloc_r+0xcc>
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	4631      	mov	r1, r6
 800b46a:	4638      	mov	r0, r7
 800b46c:	eb04 0803 	add.w	r8, r4, r3
 800b470:	f000 f848 	bl	800b504 <_sbrk_r>
 800b474:	4580      	cmp	r8, r0
 800b476:	d13a      	bne.n	800b4ee <_malloc_r+0xd2>
 800b478:	6821      	ldr	r1, [r4, #0]
 800b47a:	3503      	adds	r5, #3
 800b47c:	1a6d      	subs	r5, r5, r1
 800b47e:	f025 0503 	bic.w	r5, r5, #3
 800b482:	3508      	adds	r5, #8
 800b484:	2d0c      	cmp	r5, #12
 800b486:	bf38      	it	cc
 800b488:	250c      	movcc	r5, #12
 800b48a:	4629      	mov	r1, r5
 800b48c:	4638      	mov	r0, r7
 800b48e:	f7ff ffa5 	bl	800b3dc <sbrk_aligned>
 800b492:	3001      	adds	r0, #1
 800b494:	d02b      	beq.n	800b4ee <_malloc_r+0xd2>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	442b      	add	r3, r5
 800b49a:	6023      	str	r3, [r4, #0]
 800b49c:	e00e      	b.n	800b4bc <_malloc_r+0xa0>
 800b49e:	6822      	ldr	r2, [r4, #0]
 800b4a0:	1b52      	subs	r2, r2, r5
 800b4a2:	d41e      	bmi.n	800b4e2 <_malloc_r+0xc6>
 800b4a4:	2a0b      	cmp	r2, #11
 800b4a6:	d916      	bls.n	800b4d6 <_malloc_r+0xba>
 800b4a8:	1961      	adds	r1, r4, r5
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	6025      	str	r5, [r4, #0]
 800b4ae:	bf18      	it	ne
 800b4b0:	6059      	strne	r1, [r3, #4]
 800b4b2:	6863      	ldr	r3, [r4, #4]
 800b4b4:	bf08      	it	eq
 800b4b6:	6031      	streq	r1, [r6, #0]
 800b4b8:	5162      	str	r2, [r4, r5]
 800b4ba:	604b      	str	r3, [r1, #4]
 800b4bc:	4638      	mov	r0, r7
 800b4be:	f104 060b 	add.w	r6, r4, #11
 800b4c2:	f000 f855 	bl	800b570 <__malloc_unlock>
 800b4c6:	f026 0607 	bic.w	r6, r6, #7
 800b4ca:	1d23      	adds	r3, r4, #4
 800b4cc:	1af2      	subs	r2, r6, r3
 800b4ce:	d0b6      	beq.n	800b43e <_malloc_r+0x22>
 800b4d0:	1b9b      	subs	r3, r3, r6
 800b4d2:	50a3      	str	r3, [r4, r2]
 800b4d4:	e7b3      	b.n	800b43e <_malloc_r+0x22>
 800b4d6:	6862      	ldr	r2, [r4, #4]
 800b4d8:	42a3      	cmp	r3, r4
 800b4da:	bf0c      	ite	eq
 800b4dc:	6032      	streq	r2, [r6, #0]
 800b4de:	605a      	strne	r2, [r3, #4]
 800b4e0:	e7ec      	b.n	800b4bc <_malloc_r+0xa0>
 800b4e2:	4623      	mov	r3, r4
 800b4e4:	6864      	ldr	r4, [r4, #4]
 800b4e6:	e7b2      	b.n	800b44e <_malloc_r+0x32>
 800b4e8:	4634      	mov	r4, r6
 800b4ea:	6876      	ldr	r6, [r6, #4]
 800b4ec:	e7b9      	b.n	800b462 <_malloc_r+0x46>
 800b4ee:	230c      	movs	r3, #12
 800b4f0:	603b      	str	r3, [r7, #0]
 800b4f2:	4638      	mov	r0, r7
 800b4f4:	f000 f83c 	bl	800b570 <__malloc_unlock>
 800b4f8:	e7a1      	b.n	800b43e <_malloc_r+0x22>
 800b4fa:	6025      	str	r5, [r4, #0]
 800b4fc:	e7de      	b.n	800b4bc <_malloc_r+0xa0>
 800b4fe:	bf00      	nop
 800b500:	20000dbc 	.word	0x20000dbc

0800b504 <_sbrk_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d06      	ldr	r5, [pc, #24]	; (800b520 <_sbrk_r+0x1c>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	f7f6 f9a4 	bl	800185c <_sbrk>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_sbrk_r+0x1a>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_sbrk_r+0x1a>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	20000dc4 	.word	0x20000dc4

0800b524 <siprintf>:
 800b524:	b40e      	push	{r1, r2, r3}
 800b526:	b500      	push	{lr}
 800b528:	b09c      	sub	sp, #112	; 0x70
 800b52a:	ab1d      	add	r3, sp, #116	; 0x74
 800b52c:	9002      	str	r0, [sp, #8]
 800b52e:	9006      	str	r0, [sp, #24]
 800b530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b534:	4809      	ldr	r0, [pc, #36]	; (800b55c <siprintf+0x38>)
 800b536:	9107      	str	r1, [sp, #28]
 800b538:	9104      	str	r1, [sp, #16]
 800b53a:	4909      	ldr	r1, [pc, #36]	; (800b560 <siprintf+0x3c>)
 800b53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b540:	9105      	str	r1, [sp, #20]
 800b542:	6800      	ldr	r0, [r0, #0]
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	a902      	add	r1, sp, #8
 800b548:	f000 f874 	bl	800b634 <_svfiprintf_r>
 800b54c:	9b02      	ldr	r3, [sp, #8]
 800b54e:	2200      	movs	r2, #0
 800b550:	701a      	strb	r2, [r3, #0]
 800b552:	b01c      	add	sp, #112	; 0x70
 800b554:	f85d eb04 	ldr.w	lr, [sp], #4
 800b558:	b003      	add	sp, #12
 800b55a:	4770      	bx	lr
 800b55c:	20000010 	.word	0x20000010
 800b560:	ffff0208 	.word	0xffff0208

0800b564 <__malloc_lock>:
 800b564:	4801      	ldr	r0, [pc, #4]	; (800b56c <__malloc_lock+0x8>)
 800b566:	f000 baf9 	b.w	800bb5c <__retarget_lock_acquire_recursive>
 800b56a:	bf00      	nop
 800b56c:	20000dc8 	.word	0x20000dc8

0800b570 <__malloc_unlock>:
 800b570:	4801      	ldr	r0, [pc, #4]	; (800b578 <__malloc_unlock+0x8>)
 800b572:	f000 baf4 	b.w	800bb5e <__retarget_lock_release_recursive>
 800b576:	bf00      	nop
 800b578:	20000dc8 	.word	0x20000dc8

0800b57c <__ssputs_r>:
 800b57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b580:	688e      	ldr	r6, [r1, #8]
 800b582:	429e      	cmp	r6, r3
 800b584:	4682      	mov	sl, r0
 800b586:	460c      	mov	r4, r1
 800b588:	4690      	mov	r8, r2
 800b58a:	461f      	mov	r7, r3
 800b58c:	d838      	bhi.n	800b600 <__ssputs_r+0x84>
 800b58e:	898a      	ldrh	r2, [r1, #12]
 800b590:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b594:	d032      	beq.n	800b5fc <__ssputs_r+0x80>
 800b596:	6825      	ldr	r5, [r4, #0]
 800b598:	6909      	ldr	r1, [r1, #16]
 800b59a:	eba5 0901 	sub.w	r9, r5, r1
 800b59e:	6965      	ldr	r5, [r4, #20]
 800b5a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	444b      	add	r3, r9
 800b5ac:	106d      	asrs	r5, r5, #1
 800b5ae:	429d      	cmp	r5, r3
 800b5b0:	bf38      	it	cc
 800b5b2:	461d      	movcc	r5, r3
 800b5b4:	0553      	lsls	r3, r2, #21
 800b5b6:	d531      	bpl.n	800b61c <__ssputs_r+0xa0>
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	f7ff ff2f 	bl	800b41c <_malloc_r>
 800b5be:	4606      	mov	r6, r0
 800b5c0:	b950      	cbnz	r0, 800b5d8 <__ssputs_r+0x5c>
 800b5c2:	230c      	movs	r3, #12
 800b5c4:	f8ca 3000 	str.w	r3, [sl]
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ce:	81a3      	strh	r3, [r4, #12]
 800b5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d8:	6921      	ldr	r1, [r4, #16]
 800b5da:	464a      	mov	r2, r9
 800b5dc:	f000 fac0 	bl	800bb60 <memcpy>
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ea:	81a3      	strh	r3, [r4, #12]
 800b5ec:	6126      	str	r6, [r4, #16]
 800b5ee:	6165      	str	r5, [r4, #20]
 800b5f0:	444e      	add	r6, r9
 800b5f2:	eba5 0509 	sub.w	r5, r5, r9
 800b5f6:	6026      	str	r6, [r4, #0]
 800b5f8:	60a5      	str	r5, [r4, #8]
 800b5fa:	463e      	mov	r6, r7
 800b5fc:	42be      	cmp	r6, r7
 800b5fe:	d900      	bls.n	800b602 <__ssputs_r+0x86>
 800b600:	463e      	mov	r6, r7
 800b602:	6820      	ldr	r0, [r4, #0]
 800b604:	4632      	mov	r2, r6
 800b606:	4641      	mov	r1, r8
 800b608:	f000 fab8 	bl	800bb7c <memmove>
 800b60c:	68a3      	ldr	r3, [r4, #8]
 800b60e:	1b9b      	subs	r3, r3, r6
 800b610:	60a3      	str	r3, [r4, #8]
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	4433      	add	r3, r6
 800b616:	6023      	str	r3, [r4, #0]
 800b618:	2000      	movs	r0, #0
 800b61a:	e7db      	b.n	800b5d4 <__ssputs_r+0x58>
 800b61c:	462a      	mov	r2, r5
 800b61e:	f000 fac7 	bl	800bbb0 <_realloc_r>
 800b622:	4606      	mov	r6, r0
 800b624:	2800      	cmp	r0, #0
 800b626:	d1e1      	bne.n	800b5ec <__ssputs_r+0x70>
 800b628:	6921      	ldr	r1, [r4, #16]
 800b62a:	4650      	mov	r0, sl
 800b62c:	f7ff fe8a 	bl	800b344 <_free_r>
 800b630:	e7c7      	b.n	800b5c2 <__ssputs_r+0x46>
	...

0800b634 <_svfiprintf_r>:
 800b634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b638:	4698      	mov	r8, r3
 800b63a:	898b      	ldrh	r3, [r1, #12]
 800b63c:	061b      	lsls	r3, r3, #24
 800b63e:	b09d      	sub	sp, #116	; 0x74
 800b640:	4607      	mov	r7, r0
 800b642:	460d      	mov	r5, r1
 800b644:	4614      	mov	r4, r2
 800b646:	d50e      	bpl.n	800b666 <_svfiprintf_r+0x32>
 800b648:	690b      	ldr	r3, [r1, #16]
 800b64a:	b963      	cbnz	r3, 800b666 <_svfiprintf_r+0x32>
 800b64c:	2140      	movs	r1, #64	; 0x40
 800b64e:	f7ff fee5 	bl	800b41c <_malloc_r>
 800b652:	6028      	str	r0, [r5, #0]
 800b654:	6128      	str	r0, [r5, #16]
 800b656:	b920      	cbnz	r0, 800b662 <_svfiprintf_r+0x2e>
 800b658:	230c      	movs	r3, #12
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b660:	e0d1      	b.n	800b806 <_svfiprintf_r+0x1d2>
 800b662:	2340      	movs	r3, #64	; 0x40
 800b664:	616b      	str	r3, [r5, #20]
 800b666:	2300      	movs	r3, #0
 800b668:	9309      	str	r3, [sp, #36]	; 0x24
 800b66a:	2320      	movs	r3, #32
 800b66c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b670:	f8cd 800c 	str.w	r8, [sp, #12]
 800b674:	2330      	movs	r3, #48	; 0x30
 800b676:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b820 <_svfiprintf_r+0x1ec>
 800b67a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b67e:	f04f 0901 	mov.w	r9, #1
 800b682:	4623      	mov	r3, r4
 800b684:	469a      	mov	sl, r3
 800b686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b68a:	b10a      	cbz	r2, 800b690 <_svfiprintf_r+0x5c>
 800b68c:	2a25      	cmp	r2, #37	; 0x25
 800b68e:	d1f9      	bne.n	800b684 <_svfiprintf_r+0x50>
 800b690:	ebba 0b04 	subs.w	fp, sl, r4
 800b694:	d00b      	beq.n	800b6ae <_svfiprintf_r+0x7a>
 800b696:	465b      	mov	r3, fp
 800b698:	4622      	mov	r2, r4
 800b69a:	4629      	mov	r1, r5
 800b69c:	4638      	mov	r0, r7
 800b69e:	f7ff ff6d 	bl	800b57c <__ssputs_r>
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	f000 80aa 	beq.w	800b7fc <_svfiprintf_r+0x1c8>
 800b6a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6aa:	445a      	add	r2, fp
 800b6ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 80a2 	beq.w	800b7fc <_svfiprintf_r+0x1c8>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6c2:	f10a 0a01 	add.w	sl, sl, #1
 800b6c6:	9304      	str	r3, [sp, #16]
 800b6c8:	9307      	str	r3, [sp, #28]
 800b6ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b6d0:	4654      	mov	r4, sl
 800b6d2:	2205      	movs	r2, #5
 800b6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6d8:	4851      	ldr	r0, [pc, #324]	; (800b820 <_svfiprintf_r+0x1ec>)
 800b6da:	f7f4 fda9 	bl	8000230 <memchr>
 800b6de:	9a04      	ldr	r2, [sp, #16]
 800b6e0:	b9d8      	cbnz	r0, 800b71a <_svfiprintf_r+0xe6>
 800b6e2:	06d0      	lsls	r0, r2, #27
 800b6e4:	bf44      	itt	mi
 800b6e6:	2320      	movmi	r3, #32
 800b6e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ec:	0711      	lsls	r1, r2, #28
 800b6ee:	bf44      	itt	mi
 800b6f0:	232b      	movmi	r3, #43	; 0x2b
 800b6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b6fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b6fc:	d015      	beq.n	800b72a <_svfiprintf_r+0xf6>
 800b6fe:	9a07      	ldr	r2, [sp, #28]
 800b700:	4654      	mov	r4, sl
 800b702:	2000      	movs	r0, #0
 800b704:	f04f 0c0a 	mov.w	ip, #10
 800b708:	4621      	mov	r1, r4
 800b70a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b70e:	3b30      	subs	r3, #48	; 0x30
 800b710:	2b09      	cmp	r3, #9
 800b712:	d94e      	bls.n	800b7b2 <_svfiprintf_r+0x17e>
 800b714:	b1b0      	cbz	r0, 800b744 <_svfiprintf_r+0x110>
 800b716:	9207      	str	r2, [sp, #28]
 800b718:	e014      	b.n	800b744 <_svfiprintf_r+0x110>
 800b71a:	eba0 0308 	sub.w	r3, r0, r8
 800b71e:	fa09 f303 	lsl.w	r3, r9, r3
 800b722:	4313      	orrs	r3, r2
 800b724:	9304      	str	r3, [sp, #16]
 800b726:	46a2      	mov	sl, r4
 800b728:	e7d2      	b.n	800b6d0 <_svfiprintf_r+0x9c>
 800b72a:	9b03      	ldr	r3, [sp, #12]
 800b72c:	1d19      	adds	r1, r3, #4
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	9103      	str	r1, [sp, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	bfbb      	ittet	lt
 800b736:	425b      	neglt	r3, r3
 800b738:	f042 0202 	orrlt.w	r2, r2, #2
 800b73c:	9307      	strge	r3, [sp, #28]
 800b73e:	9307      	strlt	r3, [sp, #28]
 800b740:	bfb8      	it	lt
 800b742:	9204      	strlt	r2, [sp, #16]
 800b744:	7823      	ldrb	r3, [r4, #0]
 800b746:	2b2e      	cmp	r3, #46	; 0x2e
 800b748:	d10c      	bne.n	800b764 <_svfiprintf_r+0x130>
 800b74a:	7863      	ldrb	r3, [r4, #1]
 800b74c:	2b2a      	cmp	r3, #42	; 0x2a
 800b74e:	d135      	bne.n	800b7bc <_svfiprintf_r+0x188>
 800b750:	9b03      	ldr	r3, [sp, #12]
 800b752:	1d1a      	adds	r2, r3, #4
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	9203      	str	r2, [sp, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	bfb8      	it	lt
 800b75c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b760:	3402      	adds	r4, #2
 800b762:	9305      	str	r3, [sp, #20]
 800b764:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b830 <_svfiprintf_r+0x1fc>
 800b768:	7821      	ldrb	r1, [r4, #0]
 800b76a:	2203      	movs	r2, #3
 800b76c:	4650      	mov	r0, sl
 800b76e:	f7f4 fd5f 	bl	8000230 <memchr>
 800b772:	b140      	cbz	r0, 800b786 <_svfiprintf_r+0x152>
 800b774:	2340      	movs	r3, #64	; 0x40
 800b776:	eba0 000a 	sub.w	r0, r0, sl
 800b77a:	fa03 f000 	lsl.w	r0, r3, r0
 800b77e:	9b04      	ldr	r3, [sp, #16]
 800b780:	4303      	orrs	r3, r0
 800b782:	3401      	adds	r4, #1
 800b784:	9304      	str	r3, [sp, #16]
 800b786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78a:	4826      	ldr	r0, [pc, #152]	; (800b824 <_svfiprintf_r+0x1f0>)
 800b78c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b790:	2206      	movs	r2, #6
 800b792:	f7f4 fd4d 	bl	8000230 <memchr>
 800b796:	2800      	cmp	r0, #0
 800b798:	d038      	beq.n	800b80c <_svfiprintf_r+0x1d8>
 800b79a:	4b23      	ldr	r3, [pc, #140]	; (800b828 <_svfiprintf_r+0x1f4>)
 800b79c:	bb1b      	cbnz	r3, 800b7e6 <_svfiprintf_r+0x1b2>
 800b79e:	9b03      	ldr	r3, [sp, #12]
 800b7a0:	3307      	adds	r3, #7
 800b7a2:	f023 0307 	bic.w	r3, r3, #7
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	9303      	str	r3, [sp, #12]
 800b7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ac:	4433      	add	r3, r6
 800b7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b0:	e767      	b.n	800b682 <_svfiprintf_r+0x4e>
 800b7b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	e7a5      	b.n	800b708 <_svfiprintf_r+0xd4>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	3401      	adds	r4, #1
 800b7c0:	9305      	str	r3, [sp, #20]
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	f04f 0c0a 	mov.w	ip, #10
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ce:	3a30      	subs	r2, #48	; 0x30
 800b7d0:	2a09      	cmp	r2, #9
 800b7d2:	d903      	bls.n	800b7dc <_svfiprintf_r+0x1a8>
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d0c5      	beq.n	800b764 <_svfiprintf_r+0x130>
 800b7d8:	9105      	str	r1, [sp, #20]
 800b7da:	e7c3      	b.n	800b764 <_svfiprintf_r+0x130>
 800b7dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e7f0      	b.n	800b7c8 <_svfiprintf_r+0x194>
 800b7e6:	ab03      	add	r3, sp, #12
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	462a      	mov	r2, r5
 800b7ec:	4b0f      	ldr	r3, [pc, #60]	; (800b82c <_svfiprintf_r+0x1f8>)
 800b7ee:	a904      	add	r1, sp, #16
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f3af 8000 	nop.w
 800b7f6:	1c42      	adds	r2, r0, #1
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	d1d6      	bne.n	800b7aa <_svfiprintf_r+0x176>
 800b7fc:	89ab      	ldrh	r3, [r5, #12]
 800b7fe:	065b      	lsls	r3, r3, #25
 800b800:	f53f af2c 	bmi.w	800b65c <_svfiprintf_r+0x28>
 800b804:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b806:	b01d      	add	sp, #116	; 0x74
 800b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80c:	ab03      	add	r3, sp, #12
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	462a      	mov	r2, r5
 800b812:	4b06      	ldr	r3, [pc, #24]	; (800b82c <_svfiprintf_r+0x1f8>)
 800b814:	a904      	add	r1, sp, #16
 800b816:	4638      	mov	r0, r7
 800b818:	f000 f87a 	bl	800b910 <_printf_i>
 800b81c:	e7eb      	b.n	800b7f6 <_svfiprintf_r+0x1c2>
 800b81e:	bf00      	nop
 800b820:	0800bd60 	.word	0x0800bd60
 800b824:	0800bd6a 	.word	0x0800bd6a
 800b828:	00000000 	.word	0x00000000
 800b82c:	0800b57d 	.word	0x0800b57d
 800b830:	0800bd66 	.word	0x0800bd66

0800b834 <_printf_common>:
 800b834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b838:	4616      	mov	r6, r2
 800b83a:	4699      	mov	r9, r3
 800b83c:	688a      	ldr	r2, [r1, #8]
 800b83e:	690b      	ldr	r3, [r1, #16]
 800b840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b844:	4293      	cmp	r3, r2
 800b846:	bfb8      	it	lt
 800b848:	4613      	movlt	r3, r2
 800b84a:	6033      	str	r3, [r6, #0]
 800b84c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b850:	4607      	mov	r7, r0
 800b852:	460c      	mov	r4, r1
 800b854:	b10a      	cbz	r2, 800b85a <_printf_common+0x26>
 800b856:	3301      	adds	r3, #1
 800b858:	6033      	str	r3, [r6, #0]
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	0699      	lsls	r1, r3, #26
 800b85e:	bf42      	ittt	mi
 800b860:	6833      	ldrmi	r3, [r6, #0]
 800b862:	3302      	addmi	r3, #2
 800b864:	6033      	strmi	r3, [r6, #0]
 800b866:	6825      	ldr	r5, [r4, #0]
 800b868:	f015 0506 	ands.w	r5, r5, #6
 800b86c:	d106      	bne.n	800b87c <_printf_common+0x48>
 800b86e:	f104 0a19 	add.w	sl, r4, #25
 800b872:	68e3      	ldr	r3, [r4, #12]
 800b874:	6832      	ldr	r2, [r6, #0]
 800b876:	1a9b      	subs	r3, r3, r2
 800b878:	42ab      	cmp	r3, r5
 800b87a:	dc26      	bgt.n	800b8ca <_printf_common+0x96>
 800b87c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b880:	1e13      	subs	r3, r2, #0
 800b882:	6822      	ldr	r2, [r4, #0]
 800b884:	bf18      	it	ne
 800b886:	2301      	movne	r3, #1
 800b888:	0692      	lsls	r2, r2, #26
 800b88a:	d42b      	bmi.n	800b8e4 <_printf_common+0xb0>
 800b88c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b890:	4649      	mov	r1, r9
 800b892:	4638      	mov	r0, r7
 800b894:	47c0      	blx	r8
 800b896:	3001      	adds	r0, #1
 800b898:	d01e      	beq.n	800b8d8 <_printf_common+0xa4>
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	68e5      	ldr	r5, [r4, #12]
 800b89e:	6832      	ldr	r2, [r6, #0]
 800b8a0:	f003 0306 	and.w	r3, r3, #6
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	bf08      	it	eq
 800b8a8:	1aad      	subeq	r5, r5, r2
 800b8aa:	68a3      	ldr	r3, [r4, #8]
 800b8ac:	6922      	ldr	r2, [r4, #16]
 800b8ae:	bf0c      	ite	eq
 800b8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8b4:	2500      	movne	r5, #0
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	bfc4      	itt	gt
 800b8ba:	1a9b      	subgt	r3, r3, r2
 800b8bc:	18ed      	addgt	r5, r5, r3
 800b8be:	2600      	movs	r6, #0
 800b8c0:	341a      	adds	r4, #26
 800b8c2:	42b5      	cmp	r5, r6
 800b8c4:	d11a      	bne.n	800b8fc <_printf_common+0xc8>
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	e008      	b.n	800b8dc <_printf_common+0xa8>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	4652      	mov	r2, sl
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	47c0      	blx	r8
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d103      	bne.n	800b8e0 <_printf_common+0xac>
 800b8d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e0:	3501      	adds	r5, #1
 800b8e2:	e7c6      	b.n	800b872 <_printf_common+0x3e>
 800b8e4:	18e1      	adds	r1, r4, r3
 800b8e6:	1c5a      	adds	r2, r3, #1
 800b8e8:	2030      	movs	r0, #48	; 0x30
 800b8ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8ee:	4422      	add	r2, r4
 800b8f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b8f8:	3302      	adds	r3, #2
 800b8fa:	e7c7      	b.n	800b88c <_printf_common+0x58>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	4622      	mov	r2, r4
 800b900:	4649      	mov	r1, r9
 800b902:	4638      	mov	r0, r7
 800b904:	47c0      	blx	r8
 800b906:	3001      	adds	r0, #1
 800b908:	d0e6      	beq.n	800b8d8 <_printf_common+0xa4>
 800b90a:	3601      	adds	r6, #1
 800b90c:	e7d9      	b.n	800b8c2 <_printf_common+0x8e>
	...

0800b910 <_printf_i>:
 800b910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b914:	7e0f      	ldrb	r7, [r1, #24]
 800b916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b918:	2f78      	cmp	r7, #120	; 0x78
 800b91a:	4691      	mov	r9, r2
 800b91c:	4680      	mov	r8, r0
 800b91e:	460c      	mov	r4, r1
 800b920:	469a      	mov	sl, r3
 800b922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b926:	d807      	bhi.n	800b938 <_printf_i+0x28>
 800b928:	2f62      	cmp	r7, #98	; 0x62
 800b92a:	d80a      	bhi.n	800b942 <_printf_i+0x32>
 800b92c:	2f00      	cmp	r7, #0
 800b92e:	f000 80d8 	beq.w	800bae2 <_printf_i+0x1d2>
 800b932:	2f58      	cmp	r7, #88	; 0x58
 800b934:	f000 80a3 	beq.w	800ba7e <_printf_i+0x16e>
 800b938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b93c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b940:	e03a      	b.n	800b9b8 <_printf_i+0xa8>
 800b942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b946:	2b15      	cmp	r3, #21
 800b948:	d8f6      	bhi.n	800b938 <_printf_i+0x28>
 800b94a:	a101      	add	r1, pc, #4	; (adr r1, 800b950 <_printf_i+0x40>)
 800b94c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b950:	0800b9a9 	.word	0x0800b9a9
 800b954:	0800b9bd 	.word	0x0800b9bd
 800b958:	0800b939 	.word	0x0800b939
 800b95c:	0800b939 	.word	0x0800b939
 800b960:	0800b939 	.word	0x0800b939
 800b964:	0800b939 	.word	0x0800b939
 800b968:	0800b9bd 	.word	0x0800b9bd
 800b96c:	0800b939 	.word	0x0800b939
 800b970:	0800b939 	.word	0x0800b939
 800b974:	0800b939 	.word	0x0800b939
 800b978:	0800b939 	.word	0x0800b939
 800b97c:	0800bac9 	.word	0x0800bac9
 800b980:	0800b9ed 	.word	0x0800b9ed
 800b984:	0800baab 	.word	0x0800baab
 800b988:	0800b939 	.word	0x0800b939
 800b98c:	0800b939 	.word	0x0800b939
 800b990:	0800baeb 	.word	0x0800baeb
 800b994:	0800b939 	.word	0x0800b939
 800b998:	0800b9ed 	.word	0x0800b9ed
 800b99c:	0800b939 	.word	0x0800b939
 800b9a0:	0800b939 	.word	0x0800b939
 800b9a4:	0800bab3 	.word	0x0800bab3
 800b9a8:	682b      	ldr	r3, [r5, #0]
 800b9aa:	1d1a      	adds	r2, r3, #4
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	602a      	str	r2, [r5, #0]
 800b9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e0a3      	b.n	800bb04 <_printf_i+0x1f4>
 800b9bc:	6820      	ldr	r0, [r4, #0]
 800b9be:	6829      	ldr	r1, [r5, #0]
 800b9c0:	0606      	lsls	r6, r0, #24
 800b9c2:	f101 0304 	add.w	r3, r1, #4
 800b9c6:	d50a      	bpl.n	800b9de <_printf_i+0xce>
 800b9c8:	680e      	ldr	r6, [r1, #0]
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	2e00      	cmp	r6, #0
 800b9ce:	da03      	bge.n	800b9d8 <_printf_i+0xc8>
 800b9d0:	232d      	movs	r3, #45	; 0x2d
 800b9d2:	4276      	negs	r6, r6
 800b9d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9d8:	485e      	ldr	r0, [pc, #376]	; (800bb54 <_printf_i+0x244>)
 800b9da:	230a      	movs	r3, #10
 800b9dc:	e019      	b.n	800ba12 <_printf_i+0x102>
 800b9de:	680e      	ldr	r6, [r1, #0]
 800b9e0:	602b      	str	r3, [r5, #0]
 800b9e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9e6:	bf18      	it	ne
 800b9e8:	b236      	sxthne	r6, r6
 800b9ea:	e7ef      	b.n	800b9cc <_printf_i+0xbc>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	6820      	ldr	r0, [r4, #0]
 800b9f0:	1d19      	adds	r1, r3, #4
 800b9f2:	6029      	str	r1, [r5, #0]
 800b9f4:	0601      	lsls	r1, r0, #24
 800b9f6:	d501      	bpl.n	800b9fc <_printf_i+0xec>
 800b9f8:	681e      	ldr	r6, [r3, #0]
 800b9fa:	e002      	b.n	800ba02 <_printf_i+0xf2>
 800b9fc:	0646      	lsls	r6, r0, #25
 800b9fe:	d5fb      	bpl.n	800b9f8 <_printf_i+0xe8>
 800ba00:	881e      	ldrh	r6, [r3, #0]
 800ba02:	4854      	ldr	r0, [pc, #336]	; (800bb54 <_printf_i+0x244>)
 800ba04:	2f6f      	cmp	r7, #111	; 0x6f
 800ba06:	bf0c      	ite	eq
 800ba08:	2308      	moveq	r3, #8
 800ba0a:	230a      	movne	r3, #10
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba12:	6865      	ldr	r5, [r4, #4]
 800ba14:	60a5      	str	r5, [r4, #8]
 800ba16:	2d00      	cmp	r5, #0
 800ba18:	bfa2      	ittt	ge
 800ba1a:	6821      	ldrge	r1, [r4, #0]
 800ba1c:	f021 0104 	bicge.w	r1, r1, #4
 800ba20:	6021      	strge	r1, [r4, #0]
 800ba22:	b90e      	cbnz	r6, 800ba28 <_printf_i+0x118>
 800ba24:	2d00      	cmp	r5, #0
 800ba26:	d04d      	beq.n	800bac4 <_printf_i+0x1b4>
 800ba28:	4615      	mov	r5, r2
 800ba2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba2e:	fb03 6711 	mls	r7, r3, r1, r6
 800ba32:	5dc7      	ldrb	r7, [r0, r7]
 800ba34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba38:	4637      	mov	r7, r6
 800ba3a:	42bb      	cmp	r3, r7
 800ba3c:	460e      	mov	r6, r1
 800ba3e:	d9f4      	bls.n	800ba2a <_printf_i+0x11a>
 800ba40:	2b08      	cmp	r3, #8
 800ba42:	d10b      	bne.n	800ba5c <_printf_i+0x14c>
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	07de      	lsls	r6, r3, #31
 800ba48:	d508      	bpl.n	800ba5c <_printf_i+0x14c>
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	6861      	ldr	r1, [r4, #4]
 800ba4e:	4299      	cmp	r1, r3
 800ba50:	bfde      	ittt	le
 800ba52:	2330      	movle	r3, #48	; 0x30
 800ba54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ba5c:	1b52      	subs	r2, r2, r5
 800ba5e:	6122      	str	r2, [r4, #16]
 800ba60:	f8cd a000 	str.w	sl, [sp]
 800ba64:	464b      	mov	r3, r9
 800ba66:	aa03      	add	r2, sp, #12
 800ba68:	4621      	mov	r1, r4
 800ba6a:	4640      	mov	r0, r8
 800ba6c:	f7ff fee2 	bl	800b834 <_printf_common>
 800ba70:	3001      	adds	r0, #1
 800ba72:	d14c      	bne.n	800bb0e <_printf_i+0x1fe>
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba78:	b004      	add	sp, #16
 800ba7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba7e:	4835      	ldr	r0, [pc, #212]	; (800bb54 <_printf_i+0x244>)
 800ba80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba84:	6829      	ldr	r1, [r5, #0]
 800ba86:	6823      	ldr	r3, [r4, #0]
 800ba88:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba8c:	6029      	str	r1, [r5, #0]
 800ba8e:	061d      	lsls	r5, r3, #24
 800ba90:	d514      	bpl.n	800babc <_printf_i+0x1ac>
 800ba92:	07df      	lsls	r7, r3, #31
 800ba94:	bf44      	itt	mi
 800ba96:	f043 0320 	orrmi.w	r3, r3, #32
 800ba9a:	6023      	strmi	r3, [r4, #0]
 800ba9c:	b91e      	cbnz	r6, 800baa6 <_printf_i+0x196>
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	f023 0320 	bic.w	r3, r3, #32
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	2310      	movs	r3, #16
 800baa8:	e7b0      	b.n	800ba0c <_printf_i+0xfc>
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	f043 0320 	orr.w	r3, r3, #32
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	2378      	movs	r3, #120	; 0x78
 800bab4:	4828      	ldr	r0, [pc, #160]	; (800bb58 <_printf_i+0x248>)
 800bab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800baba:	e7e3      	b.n	800ba84 <_printf_i+0x174>
 800babc:	0659      	lsls	r1, r3, #25
 800babe:	bf48      	it	mi
 800bac0:	b2b6      	uxthmi	r6, r6
 800bac2:	e7e6      	b.n	800ba92 <_printf_i+0x182>
 800bac4:	4615      	mov	r5, r2
 800bac6:	e7bb      	b.n	800ba40 <_printf_i+0x130>
 800bac8:	682b      	ldr	r3, [r5, #0]
 800baca:	6826      	ldr	r6, [r4, #0]
 800bacc:	6961      	ldr	r1, [r4, #20]
 800bace:	1d18      	adds	r0, r3, #4
 800bad0:	6028      	str	r0, [r5, #0]
 800bad2:	0635      	lsls	r5, r6, #24
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	d501      	bpl.n	800badc <_printf_i+0x1cc>
 800bad8:	6019      	str	r1, [r3, #0]
 800bada:	e002      	b.n	800bae2 <_printf_i+0x1d2>
 800badc:	0670      	lsls	r0, r6, #25
 800bade:	d5fb      	bpl.n	800bad8 <_printf_i+0x1c8>
 800bae0:	8019      	strh	r1, [r3, #0]
 800bae2:	2300      	movs	r3, #0
 800bae4:	6123      	str	r3, [r4, #16]
 800bae6:	4615      	mov	r5, r2
 800bae8:	e7ba      	b.n	800ba60 <_printf_i+0x150>
 800baea:	682b      	ldr	r3, [r5, #0]
 800baec:	1d1a      	adds	r2, r3, #4
 800baee:	602a      	str	r2, [r5, #0]
 800baf0:	681d      	ldr	r5, [r3, #0]
 800baf2:	6862      	ldr	r2, [r4, #4]
 800baf4:	2100      	movs	r1, #0
 800baf6:	4628      	mov	r0, r5
 800baf8:	f7f4 fb9a 	bl	8000230 <memchr>
 800bafc:	b108      	cbz	r0, 800bb02 <_printf_i+0x1f2>
 800bafe:	1b40      	subs	r0, r0, r5
 800bb00:	6060      	str	r0, [r4, #4]
 800bb02:	6863      	ldr	r3, [r4, #4]
 800bb04:	6123      	str	r3, [r4, #16]
 800bb06:	2300      	movs	r3, #0
 800bb08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb0c:	e7a8      	b.n	800ba60 <_printf_i+0x150>
 800bb0e:	6923      	ldr	r3, [r4, #16]
 800bb10:	462a      	mov	r2, r5
 800bb12:	4649      	mov	r1, r9
 800bb14:	4640      	mov	r0, r8
 800bb16:	47d0      	blx	sl
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d0ab      	beq.n	800ba74 <_printf_i+0x164>
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	079b      	lsls	r3, r3, #30
 800bb20:	d413      	bmi.n	800bb4a <_printf_i+0x23a>
 800bb22:	68e0      	ldr	r0, [r4, #12]
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	4298      	cmp	r0, r3
 800bb28:	bfb8      	it	lt
 800bb2a:	4618      	movlt	r0, r3
 800bb2c:	e7a4      	b.n	800ba78 <_printf_i+0x168>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	4632      	mov	r2, r6
 800bb32:	4649      	mov	r1, r9
 800bb34:	4640      	mov	r0, r8
 800bb36:	47d0      	blx	sl
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d09b      	beq.n	800ba74 <_printf_i+0x164>
 800bb3c:	3501      	adds	r5, #1
 800bb3e:	68e3      	ldr	r3, [r4, #12]
 800bb40:	9903      	ldr	r1, [sp, #12]
 800bb42:	1a5b      	subs	r3, r3, r1
 800bb44:	42ab      	cmp	r3, r5
 800bb46:	dcf2      	bgt.n	800bb2e <_printf_i+0x21e>
 800bb48:	e7eb      	b.n	800bb22 <_printf_i+0x212>
 800bb4a:	2500      	movs	r5, #0
 800bb4c:	f104 0619 	add.w	r6, r4, #25
 800bb50:	e7f5      	b.n	800bb3e <_printf_i+0x22e>
 800bb52:	bf00      	nop
 800bb54:	0800bd71 	.word	0x0800bd71
 800bb58:	0800bd82 	.word	0x0800bd82

0800bb5c <__retarget_lock_acquire_recursive>:
 800bb5c:	4770      	bx	lr

0800bb5e <__retarget_lock_release_recursive>:
 800bb5e:	4770      	bx	lr

0800bb60 <memcpy>:
 800bb60:	440a      	add	r2, r1
 800bb62:	4291      	cmp	r1, r2
 800bb64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bb68:	d100      	bne.n	800bb6c <memcpy+0xc>
 800bb6a:	4770      	bx	lr
 800bb6c:	b510      	push	{r4, lr}
 800bb6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb76:	4291      	cmp	r1, r2
 800bb78:	d1f9      	bne.n	800bb6e <memcpy+0xe>
 800bb7a:	bd10      	pop	{r4, pc}

0800bb7c <memmove>:
 800bb7c:	4288      	cmp	r0, r1
 800bb7e:	b510      	push	{r4, lr}
 800bb80:	eb01 0402 	add.w	r4, r1, r2
 800bb84:	d902      	bls.n	800bb8c <memmove+0x10>
 800bb86:	4284      	cmp	r4, r0
 800bb88:	4623      	mov	r3, r4
 800bb8a:	d807      	bhi.n	800bb9c <memmove+0x20>
 800bb8c:	1e43      	subs	r3, r0, #1
 800bb8e:	42a1      	cmp	r1, r4
 800bb90:	d008      	beq.n	800bba4 <memmove+0x28>
 800bb92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb9a:	e7f8      	b.n	800bb8e <memmove+0x12>
 800bb9c:	4402      	add	r2, r0
 800bb9e:	4601      	mov	r1, r0
 800bba0:	428a      	cmp	r2, r1
 800bba2:	d100      	bne.n	800bba6 <memmove+0x2a>
 800bba4:	bd10      	pop	{r4, pc}
 800bba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbae:	e7f7      	b.n	800bba0 <memmove+0x24>

0800bbb0 <_realloc_r>:
 800bbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	4614      	mov	r4, r2
 800bbb8:	460e      	mov	r6, r1
 800bbba:	b921      	cbnz	r1, 800bbc6 <_realloc_r+0x16>
 800bbbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	f7ff bc2b 	b.w	800b41c <_malloc_r>
 800bbc6:	b92a      	cbnz	r2, 800bbd4 <_realloc_r+0x24>
 800bbc8:	f7ff fbbc 	bl	800b344 <_free_r>
 800bbcc:	4625      	mov	r5, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd4:	f000 f81b 	bl	800bc0e <_malloc_usable_size_r>
 800bbd8:	4284      	cmp	r4, r0
 800bbda:	4607      	mov	r7, r0
 800bbdc:	d802      	bhi.n	800bbe4 <_realloc_r+0x34>
 800bbde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbe2:	d812      	bhi.n	800bc0a <_realloc_r+0x5a>
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	4640      	mov	r0, r8
 800bbe8:	f7ff fc18 	bl	800b41c <_malloc_r>
 800bbec:	4605      	mov	r5, r0
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d0ed      	beq.n	800bbce <_realloc_r+0x1e>
 800bbf2:	42bc      	cmp	r4, r7
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4631      	mov	r1, r6
 800bbf8:	bf28      	it	cs
 800bbfa:	463a      	movcs	r2, r7
 800bbfc:	f7ff ffb0 	bl	800bb60 <memcpy>
 800bc00:	4631      	mov	r1, r6
 800bc02:	4640      	mov	r0, r8
 800bc04:	f7ff fb9e 	bl	800b344 <_free_r>
 800bc08:	e7e1      	b.n	800bbce <_realloc_r+0x1e>
 800bc0a:	4635      	mov	r5, r6
 800bc0c:	e7df      	b.n	800bbce <_realloc_r+0x1e>

0800bc0e <_malloc_usable_size_r>:
 800bc0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc12:	1f18      	subs	r0, r3, #4
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	bfbc      	itt	lt
 800bc18:	580b      	ldrlt	r3, [r1, r0]
 800bc1a:	18c0      	addlt	r0, r0, r3
 800bc1c:	4770      	bx	lr
	...

0800bc20 <_init>:
 800bc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc22:	bf00      	nop
 800bc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc26:	bc08      	pop	{r3}
 800bc28:	469e      	mov	lr, r3
 800bc2a:	4770      	bx	lr

0800bc2c <_fini>:
 800bc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2e:	bf00      	nop
 800bc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc32:	bc08      	pop	{r3}
 800bc34:	469e      	mov	lr, r3
 800bc36:	4770      	bx	lr
