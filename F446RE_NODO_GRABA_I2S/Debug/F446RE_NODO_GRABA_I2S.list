
F446RE_NODO_GRABA_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b994  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800bb64  0800bb64  0001bb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcc0  0800bcc0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcc0  0800bcc0  0001bcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcc8  0800bcc8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcc8  0800bcc8  0001bcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bccc  0800bccc  0001bccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800bcd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf8  20000074  0800bd44  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d6c  0800bd44  00020d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018169  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003635  00000000  00000000  0003820d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003cc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d56  00000000  00000000  0003de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3a0  00000000  00000000  00063bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4fef  00000000  00000000  0007ef8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153f7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000567c  00000000  00000000  00153fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bb4c 	.word	0x0800bb4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800bb4c 	.word	0x0800bb4c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AIC3254_Init>:

/*
 * INIZIALIZE
 */

uint8_t AIC3254_Init(AIC3254_t *dev, I2C_HandleTypeDef *i2cHandle) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]

	/* Init Struct */
	dev->i2cHandle = i2cHandle;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	601a      	str	r2, [r3, #0]
	 * Set Stereo ADC with 48ksps Sample Rate and High Performance
	 */

	/* Initialize to Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f92b 	bl	8000844 <AIC3254_SendCommand>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <AIC3254_Init+0x2a>
 80005f8:	2001      	movs	r0, #1
 80005fa:	f00a fde9 	bl	800b1d0 <exit>

	/* S/W Reset to initialize all registers */

	status = AIC3254_SendCommand(dev, SW_RESET, 0x01);
 80005fe:	2201      	movs	r2, #1
 8000600:	2101      	movs	r1, #1
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f91e 	bl	8000844 <AIC3254_SendCommand>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <AIC3254_Init+0x44>
 8000612:	2001      	movs	r0, #1
 8000614:	f00a fddc 	bl	800b1d0 <exit>

	/* Power up NADC divider with value 1 */

	status = AIC3254_SendCommand(dev, CSR_8, 0x81);
 8000618:	2281      	movs	r2, #129	; 0x81
 800061a:	2112      	movs	r1, #18
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f911 	bl	8000844 <AIC3254_SendCommand>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <AIC3254_Init+0x5e>
 800062c:	2001      	movs	r0, #1
 800062e:	f00a fdcf 	bl	800b1d0 <exit>

	/* Power up MADC divider with value 2 */

	status = AIC3254_SendCommand(dev, CSR_9, 0x82);
 8000632:	2282      	movs	r2, #130	; 0x82
 8000634:	2113      	movs	r1, #19
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f904 	bl	8000844 <AIC3254_SendCommand>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <AIC3254_Init+0x78>
 8000646:	2001      	movs	r0, #1
 8000648:	f00a fdc2 	bl	800b1d0 <exit>

	/* Program OSR for ADC to 128 */

	status = AIC3254_SendCommand(dev, AOSR, 0x80);
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	2114      	movs	r1, #20
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f8f7 	bl	8000844 <AIC3254_SendCommand>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <AIC3254_Init+0x92>
 8000660:	2001      	movs	r0, #1
 8000662:	f00a fdb5 	bl	800b1d0 <exit>

	/* Select ADC PRB_R1 */

	status = AIC3254_SendCommand(dev, PBCR, 0x01);
 8000666:	2201      	movs	r2, #1
 8000668:	213d      	movs	r1, #61	; 0x3d
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f000 f8ea 	bl	8000844 <AIC3254_SendCommand>
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <AIC3254_Init+0xac>
 800067a:	2001      	movs	r0, #1
 800067c:	f00a fda8 	bl	800b1d0 <exit>

	/* Select Page 1 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_1);
 8000680:	2201      	movs	r2, #1
 8000682:	2100      	movs	r1, #0
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f8dd 	bl	8000844 <AIC3254_SendCommand>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <AIC3254_Init+0xc6>
 8000694:	2001      	movs	r0, #1
 8000696:	f00a fd9b 	bl	800b1d0 <exit>

	/* Disable Internal Crude AVdd in presence of external AVdd supply or before
	 * powering up internal AVdd LDO
	 */

	status = AIC3254_SendCommand(dev, POW_CONF, 0x08);
 800069a:	2208      	movs	r2, #8
 800069c:	2101      	movs	r1, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f8d0 	bl	8000844 <AIC3254_SendCommand>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <AIC3254_Init+0xe0>
 80006ae:	2001      	movs	r0, #1
 80006b0:	f00a fd8e 	bl	800b1d0 <exit>

	/* Enable Master Analog Power Control */

	status = AIC3254_SendCommand(dev, LDO_CR, 0x00);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2102      	movs	r1, #2
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f8c3 	bl	8000844 <AIC3254_SendCommand>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <AIC3254_Init+0xfa>
 80006c8:	2001      	movs	r0, #1
 80006ca:	f00a fd81 	bl	800b1d0 <exit>

	/* Set the input common mode to 0.9V */

	status = AIC3254_SendCommand(dev, CMM_CR, 0x00);
 80006ce:	2200      	movs	r2, #0
 80006d0:	210a      	movs	r1, #10
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f8b6 	bl	8000844 <AIC3254_SendCommand>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <AIC3254_Init+0x114>
 80006e2:	2001      	movs	r0, #1
 80006e4:	f00a fd74 	bl	800b1d0 <exit>

	/* Select ADC PTM_R4 */

	status = AIC3254_SendCommand(dev, POW_TUN, 0x00);
 80006e8:	2200      	movs	r2, #0
 80006ea:	213d      	movs	r1, #61	; 0x3d
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f8a9 	bl	8000844 <AIC3254_SendCommand>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <AIC3254_Init+0x12e>
 80006fc:	2001      	movs	r0, #1
 80006fe:	f00a fd67 	bl	800b1d0 <exit>

	/* Set MICBIAS to LDOIN - 3.3V */

	status = AIC3254_SendCommand(dev, MICBIAS_CR, 0x78);
 8000702:	2278      	movs	r2, #120	; 0x78
 8000704:	2133      	movs	r1, #51	; 0x33
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f89c 	bl	8000844 <AIC3254_SendCommand>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <AIC3254_Init+0x148>
 8000716:	2001      	movs	r0, #1
 8000718:	f00a fd5a 	bl	800b1d0 <exit>

	/* Set MicPGA startup delay to 3.1ms */

	status = AIC3254_SendCommand(dev, AIQC_CR, 0x32);
 800071c:	2232      	movs	r2, #50	; 0x32
 800071e:	2147      	movs	r1, #71	; 0x47
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f88f 	bl	8000844 <AIC3254_SendCommand>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <AIC3254_Init+0x162>
 8000730:	2001      	movs	r0, #1
 8000732:	f00a fd4d 	bl	800b1d0 <exit>

	/* Set the REF charging time to 40ms */

	status = AIC3254_SendCommand(dev, REF_POW_CR, 0x01);
 8000736:	2201      	movs	r2, #1
 8000738:	217b      	movs	r1, #123	; 0x7b
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f882 	bl	8000844 <AIC3254_SendCommand>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <AIC3254_Init+0x17c>
 800074a:	2001      	movs	r0, #1
 800074c:	f00a fd40 	bl	800b1d0 <exit>

	/* Route IN2L to LEFT_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, LROUTE_PCR, 0x20);
 8000750:	2220      	movs	r2, #32
 8000752:	2134      	movs	r1, #52	; 0x34
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f875 	bl	8000844 <AIC3254_SendCommand>
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <AIC3254_Init+0x196>
 8000764:	2001      	movs	r0, #1
 8000766:	f00a fd33 	bl	800b1d0 <exit>

	/* Route Common Mode to LEFT_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, LROUTE_NCR, 0x20);
 800076a:	2220      	movs	r2, #32
 800076c:	2136      	movs	r1, #54	; 0x36
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f868 	bl	8000844 <AIC3254_SendCommand>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <AIC3254_Init+0x1b0>
 800077e:	2001      	movs	r0, #1
 8000780:	f00a fd26 	bl	800b1d0 <exit>

	/* Route IN1R to Right_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, RROUTE_PCR, 0x80);
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	2137      	movs	r1, #55	; 0x37
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f85b 	bl	8000844 <AIC3254_SendCommand>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <AIC3254_Init+0x1ca>
 8000798:	2001      	movs	r0, #1
 800079a:	f00a fd19 	bl	800b1d0 <exit>

	/* Route Common Mode to Right_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, RROUTE_NCR, 0x20);
 800079e:	2220      	movs	r2, #32
 80007a0:	2139      	movs	r1, #57	; 0x39
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f84e 	bl	8000844 <AIC3254_SendCommand>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <AIC3254_Init+0x1e4>
 80007b2:	2001      	movs	r0, #1
 80007b4:	f00a fd0c 	bl	800b1d0 <exit>

	/* Unmute Left MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, LVOLUME_CR, 0x0c);
 80007b8:	220c      	movs	r2, #12
 80007ba:	213b      	movs	r1, #59	; 0x3b
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f841 	bl	8000844 <AIC3254_SendCommand>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <AIC3254_Init+0x1fe>
 80007cc:	2001      	movs	r0, #1
 80007ce:	f00a fcff 	bl	800b1d0 <exit>

	/* Unmute Right MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, RVOLUME_CR, 0x0c);
 80007d2:	220c      	movs	r2, #12
 80007d4:	213c      	movs	r1, #60	; 0x3c
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f834 	bl	8000844 <AIC3254_SendCommand>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <AIC3254_Init+0x218>
 80007e6:	2001      	movs	r0, #1
 80007e8:	f00a fcf2 	bl	800b1d0 <exit>

	/* Select Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f827 	bl	8000844 <AIC3254_SendCommand>
 80007f6:	4603      	mov	r3, r0
 80007f8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <AIC3254_Init+0x232>
 8000800:	2001      	movs	r0, #1
 8000802:	f00a fce5 	bl	800b1d0 <exit>

	/* Power up Left and Right ADC Channels */

	status = AIC3254_SendCommand(dev, CH_SETUP, 0xc0);
 8000806:	22c0      	movs	r2, #192	; 0xc0
 8000808:	2151      	movs	r1, #81	; 0x51
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f81a 	bl	8000844 <AIC3254_SendCommand>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <AIC3254_Init+0x24c>
 800081a:	2001      	movs	r0, #1
 800081c:	f00a fcd8 	bl	800b1d0 <exit>

	/* Unmute Left and Right ADC Digital Volume Control */

	status = AIC3254_SendCommand(dev, CH_GAIN, 0x00);
 8000820:	2200      	movs	r2, #0
 8000822:	2152      	movs	r1, #82	; 0x52
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f80d 	bl	8000844 <AIC3254_SendCommand>
 800082a:	4603      	mov	r3, r0
 800082c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <AIC3254_Init+0x266>
 8000834:	2001      	movs	r0, #1
 8000836:	f00a fccb 	bl	800b1d0 <exit>

	return status;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <AIC3254_SendCommand>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef AIC3254_SendCommand(AIC3254_t *dev, uint8_t Register, uint8_t Data) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af04      	add	r7, sp, #16
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
 8000850:	4613      	mov	r3, r2
 8000852:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, AIC3254_I2C_ADDR , Register, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6818      	ldr	r0, [r3, #0]
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	b29a      	uxth	r2, r3
 800085c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000860:	9302      	str	r3, [sp, #8]
 8000862:	2301      	movs	r3, #1
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	1cbb      	adds	r3, r7, #2
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	2130      	movs	r1, #48	; 0x30
 800086e:	f002 f8e7 	bl	8002a40 <HAL_I2C_Mem_Write>
 8000872:	4603      	mov	r3, r0

}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b0c2      	sub	sp, #264	; 0x108
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f000 fff3 	bl	800186c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f8bb 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f000 fa11 	bl	8000cb0 <MX_GPIO_Init>
  MX_DMA_Init();
 800088e:	f000 f9e7 	bl	8000c60 <MX_DMA_Init>
  MX_I2C1_Init();
 8000892:	f000 f93d 	bl	8000b10 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000896:	f000 f969 	bl	8000b6c <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 800089a:	f000 f995 	bl	8000bc8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800089e:	f007 fc97 	bl	80081d0 <MX_FATFS_Init>
  MX_CRC_Init();
 80008a2:	f000 f921 	bl	8000ae8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80008a6:	f000 f9b1 	bl	8000c0c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize CODEC */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b0:	4848      	ldr	r0, [pc, #288]	; (80009d4 <main+0x158>)
 80008b2:	f001 ff4d 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f001 f84a 	bl	8001950 <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c2:	4844      	ldr	r0, [pc, #272]	; (80009d4 <main+0x158>)
 80008c4:	f001 ff44 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f001 f841 	bl	8001950 <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d4:	483f      	ldr	r0, [pc, #252]	; (80009d4 <main+0x158>)
 80008d6:	f001 ff3b 	bl	8002750 <HAL_GPIO_WritePin>
  AIC3254_Init(&codec, &hi2c1);
 80008da:	493f      	ldr	r1, [pc, #252]	; (80009d8 <main+0x15c>)
 80008dc:	483f      	ldr	r0, [pc, #252]	; (80009dc <main+0x160>)
 80008de:	f7ff fe79 	bl	80005d4 <AIC3254_Init>
  /* USER CODE BEGIN WHILE */
  char filename[256];

  do
  {
	  res = f_mount(&SDFatFS, SDPath, 1);
 80008e2:	2201      	movs	r2, #1
 80008e4:	493e      	ldr	r1, [pc, #248]	; (80009e0 <main+0x164>)
 80008e6:	483f      	ldr	r0, [pc, #252]	; (80009e4 <main+0x168>)
 80008e8:	f009 fc64 	bl	800a1b4 <f_mount>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <main+0x16c>)
 80008f2:	701a      	strb	r2, [r3, #0]
  }
  while( res != FR_OK);
 80008f4:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <main+0x16c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1f2      	bne.n	80008e2 <main+0x66>

  do
  {
	  res = Format_SD();
 80008fc:	f000 fbcc 	bl	8001098 <Format_SD>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <main+0x16c>)
 8000906:	701a      	strb	r2, [r3, #0]
  }
  while (res != FR_OK);
 8000908:	4b37      	ldr	r3, [pc, #220]	; (80009e8 <main+0x16c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f5      	bne.n	80008fc <main+0x80>

  HAL_UART_Receive_IT(&huart2, (uint8_t *) RX_data, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	4936      	ldr	r1, [pc, #216]	; (80009ec <main+0x170>)
 8000914:	4836      	ldr	r0, [pc, #216]	; (80009f0 <main+0x174>)
 8000916:	f005 ffbd 	bl	8006894 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000920:	4834      	ldr	r0, [pc, #208]	; (80009f4 <main+0x178>)
 8000922:	f001 ff15 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092c:	4831      	ldr	r0, [pc, #196]	; (80009f4 <main+0x178>)
 800092e:	f001 ff0f 	bl	8002750 <HAL_GPIO_WritePin>
  do
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000936:	482f      	ldr	r0, [pc, #188]	; (80009f4 <main+0x178>)
 8000938:	f001 ff23 	bl	8002782 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800093c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000940:	482c      	ldr	r0, [pc, #176]	; (80009f4 <main+0x178>)
 8000942:	f001 ff1e 	bl	8002782 <HAL_GPIO_TogglePin>
	  HAL_Delay(150);
 8000946:	2096      	movs	r0, #150	; 0x96
 8000948:	f001 f802 	bl	8001950 <HAL_Delay>
  }
  while(audio_state == CONNECTING);
 800094c:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <main+0x17c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b04      	cmp	r3, #4
 8000952:	d0ee      	beq.n	8000932 <main+0xb6>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095a:	4826      	ldr	r0, [pc, #152]	; (80009f4 <main+0x178>)
 800095c:	f001 fef8 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000966:	4823      	ldr	r0, [pc, #140]	; (80009f4 <main+0x178>)
 8000968:	f001 fef2 	bl	8002750 <HAL_GPIO_WritePin>

  for (int i = 0; i < 4; i++)
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000972:	e012      	b.n	800099a <main+0x11e>
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000974:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000978:	481e      	ldr	r0, [pc, #120]	; (80009f4 <main+0x178>)
 800097a:	f001 ff02 	bl	8002782 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800097e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <main+0x178>)
 8000984:	f001 fefd 	bl	8002782 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000988:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098c:	f000 ffe0 	bl	8001950 <HAL_Delay>
  for (int i = 0; i < 4; i++)
 8000990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000994:	3301      	adds	r3, #1
 8000996:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800099a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800099e:	2b03      	cmp	r3, #3
 80009a0:	dde8      	ble.n	8000974 <main+0xf8>
  }


  uint16_t count = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
  while (1)
  {
	  if(audio_state == STATE_START_RECORDING)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <main+0x17c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d1fb      	bne.n	80009a8 <main+0x12c>
	  {
		  HAL_Delay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f000 ffcd 	bl	8001950 <HAL_Delay>
		  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 80009b6:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	f8a7 2102 	strh.w	r2, [r7, #258]	; 0x102
 80009c0:	4638      	mov	r0, r7
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <main+0x164>)
 80009c4:	490d      	ldr	r1, [pc, #52]	; (80009fc <main+0x180>)
 80009c6:	f00a fd43 	bl	800b450 <siprintf>
		  startRecord(filename);
 80009ca:	463b      	mov	r3, r7
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fa8b 	bl	8000ee8 <startRecord>
	  if(audio_state == STATE_START_RECORDING)
 80009d2:	e7e9      	b.n	80009a8 <main+0x12c>
 80009d4:	40020400 	.word	0x40020400
 80009d8:	20000098 	.word	0x20000098
 80009dc:	200002bc 	.word	0x200002bc
 80009e0:	20000af4 	.word	0x20000af4
 80009e4:	20000af8 	.word	0x20000af8
 80009e8:	20000ac8 	.word	0x20000ac8
 80009ec:	20000acc 	.word	0x20000acc
 80009f0:	20000278 	.word	0x20000278
 80009f4:	40020000 	.word	0x40020000
 80009f8:	20000002 	.word	0x20000002
 80009fc:	0800bb64 	.word	0x0800bb64

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2234      	movs	r2, #52	; 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00a fc26 	bl	800b260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <SystemClock_Config+0xe0>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <SystemClock_Config+0xe0>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <SystemClock_Config+0xe0>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <SystemClock_Config+0xe4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a4c:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <SystemClock_Config+0xe4>)
 8000a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <SystemClock_Config+0xe4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	2301      	movs	r3, #1
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a70:	2300      	movs	r3, #0
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a74:	2308      	movs	r3, #8
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a78:	23a8      	movs	r3, #168	; 0xa8
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a80:	2307      	movs	r3, #7
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 fff7 	bl	8004a80 <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a98:	f000 fb98 	bl	80011cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a9c:	f002 feec 	bl	8003878 <HAL_PWREx_EnableOverDrive>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000aa6:	f000 fb91 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	230f      	movs	r3, #15
 8000aac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2105      	movs	r1, #5
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 ff25 	bl	8003918 <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ad4:	f000 fb7a 	bl	80011cc <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3750      	adds	r7, #80	; 0x50
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40007000 	.word	0x40007000

08000ae8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_CRC_Init+0x20>)
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <MX_CRC_Init+0x24>)
 8000af0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_CRC_Init+0x20>)
 8000af4:	f001 f861 	bl	8001bba <HAL_CRC_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000afe:	f000 fb65 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000090 	.word	0x20000090
 8000b0c:	40023000 	.word	0x40023000

08000b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b16:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <MX_I2C1_Init+0x54>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b1c:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_I2C1_Init+0x58>)
 8000b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b4e:	f001 fe33 	bl	80027b8 <HAL_I2C_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b58:	f000 fb38 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000098 	.word	0x20000098
 8000b64:	40005400 	.word	0x40005400
 8000b68:	000186a0 	.word	0x000186a0

08000b6c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <MX_I2S2_Init+0x58>)
 8000b74:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b7c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b92:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000b96:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000bac:	f002 fa60 	bl	8003070 <HAL_I2S_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000bb6:	f000 fb09 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000ec 	.word	0x200000ec
 8000bc4:	40003800 	.word	0x40003800

08000bc8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <MX_SDIO_SD_Init+0x40>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000bec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000134 	.word	0x20000134
 8000c08:	40012c00 	.word	0x40012c00

08000c0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <MX_USART2_UART_Init+0x50>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c44:	f005 fdd9 	bl	80067fa <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c4e:	f000 fabd 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000278 	.word	0x20000278
 8000c5c:	40004400 	.word	0x40004400

08000c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_DMA_Init+0x4c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <MX_DMA_Init+0x4c>)
 8000c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_DMA_Init+0x4c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	203b      	movs	r0, #59	; 0x3b
 8000c88:	f000 ff61 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c8c:	203b      	movs	r0, #59	; 0x3b
 8000c8e:	f000 ff7a 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2045      	movs	r0, #69	; 0x45
 8000c98:	f000 ff59 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c9c:	2045      	movs	r0, #69	; 0x45
 8000c9e:	f000 ff72 	bl	8001b86 <HAL_NVIC_EnableIRQ>

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a3e      	ldr	r2, [pc, #248]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a37      	ldr	r2, [pc, #220]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d58:	481c      	ldr	r0, [pc, #112]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d5a:	f001 fcf9 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000d64:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000d66:	f001 fcf3 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d84:	f001 fb38 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_SDIO_API_Pin */
  GPIO_InitStruct.Pin = BSP_SDIO_API_Pin;
 8000d88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_SDIO_API_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d9e:	f001 fb2b 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000da2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000dbc:	f001 fb1c 	bl	80023f8 <HAL_GPIO_Init>

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <HAL_I2S_RxCpltCallback>:
	f_close(&fout);
	f_close(&fin);
}


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint8_t rcvCplt = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
	uint16_t* rpt, *wpt, *temppt;

	rCount++;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_I2S_RxCpltCallback+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <HAL_I2S_RxCpltCallback+0x40>)
 8000de8:	6013      	str	r3, [r2, #0]
	rpt = (rcvBuf)+(rCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_I2S_RxCpltCallback+0x40>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <HAL_I2S_RxCpltCallback+0x44>)
 8000df4:	8812      	ldrh	r2, [r2, #0]
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_I2S_RxCpltCallback+0x48>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	60bb      	str	r3, [r7, #8]
	HAL_I2S_Receive_DMA(hi2s, rpt, DMA_READ_SIZE);
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f002 fa2a 	bl	8003260 <HAL_I2S_Receive_DMA>
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000ac0 	.word	0x20000ac0
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	200002c0 	.word	0x200002c0

08000e20 <fwrite_wav_header>:

FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08e      	sub	sp, #56	; 0x38
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	4608      	mov	r0, r1
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4603      	mov	r3, r0
 8000e30:	807b      	strh	r3, [r7, #2]
 8000e32:	460b      	mov	r3, r1
 8000e34:	707b      	strb	r3, [r7, #1]
 8000e36:	4613      	mov	r3, r2
 8000e38:	703b      	strb	r3, [r7, #0]
	UINT bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000e3a:	2352      	movs	r3, #82	; 0x52
 8000e3c:	723b      	strb	r3, [r7, #8]
 8000e3e:	2349      	movs	r3, #73	; 0x49
 8000e40:	727b      	strb	r3, [r7, #9]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000e42:	2346      	movs	r3, #70	; 0x46
 8000e44:	72bb      	strb	r3, [r7, #10]
 8000e46:	2346      	movs	r3, #70	; 0x46
 8000e48:	72fb      	strb	r3, [r7, #11]
	wave_header.size = (uint32_t)0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000e4e:	2357      	movs	r3, #87	; 0x57
 8000e50:	743b      	strb	r3, [r7, #16]
 8000e52:	2341      	movs	r3, #65	; 0x41
 8000e54:	747b      	strb	r3, [r7, #17]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000e56:	2356      	movs	r3, #86	; 0x56
 8000e58:	74bb      	strb	r3, [r7, #18]
 8000e5a:	2345      	movs	r3, #69	; 0x45
 8000e5c:	74fb      	strb	r3, [r7, #19]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000e5e:	2366      	movs	r3, #102	; 0x66
 8000e60:	753b      	strb	r3, [r7, #20]
 8000e62:	236d      	movs	r3, #109	; 0x6d
 8000e64:	757b      	strb	r3, [r7, #21]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000e66:	2374      	movs	r3, #116	; 0x74
 8000e68:	75bb      	strb	r3, [r7, #22]
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt_size = 16;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	61bb      	str	r3, [r7, #24]
	wave_header.format = 1; // PCM
 8000e72:	2301      	movs	r3, #1
 8000e74:	83bb      	strh	r3, [r7, #28]
	wave_header.channels = channels; // channels
 8000e76:	783b      	ldrb	r3, [r7, #0]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	83fb      	strh	r3, [r7, #30]
	wave_header.sampleRate=sampleRate;  // sample rate
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	623b      	str	r3, [r7, #32]
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	787a      	ldrb	r2, [r7, #1]
 8000e84:	fb02 f303 	mul.w	r3, r2, r3
 8000e88:	783a      	ldrb	r2, [r7, #0]
 8000e8a:	fb02 f303 	mul.w	r3, r2, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da00      	bge.n	8000e94 <fwrite_wav_header+0x74>
 8000e92:	3307      	adds	r3, #7
 8000e94:	10db      	asrs	r3, r3, #3
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.bc =  bitsPerSample*channels/8;
 8000e98:	787b      	ldrb	r3, [r7, #1]
 8000e9a:	783a      	ldrb	r2, [r7, #0]
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	da00      	bge.n	8000ea6 <fwrite_wav_header+0x86>
 8000ea4:	3307      	adds	r3, #7
 8000ea6:	10db      	asrs	r3, r3, #3
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	853b      	strh	r3, [r7, #40]	; 0x28
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000eac:	787b      	ldrb	r3, [r7, #1]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	857b      	strh	r3, [r7, #42]	; 0x2a
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000eb2:	2364      	movs	r3, #100	; 0x64
 8000eb4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000eb8:	2361      	movs	r3, #97	; 0x61
 8000eba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000ebe:	2374      	movs	r3, #116	; 0x74
 8000ec0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000ec4:	2361      	movs	r3, #97	; 0x61
 8000ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	wave_header.data_size = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), &bw);
 8000ece:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ed2:	f107 0108 	add.w	r1, r7, #8
 8000ed6:	222c      	movs	r2, #44	; 0x2c
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f009 fb6f 	bl	800a5bc <f_write>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3738      	adds	r7, #56	; 0x38
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <startRecord>:

void startRecord(char *filename) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000ef4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000ef8:	6018      	str	r0, [r3, #0]
	uint16_t* rpt, *wpt, *temppt;
	UINT bw;
	UINT writeBytes;
	UINT skipCount=125;// skip 0.5 second
 8000efa:	237d      	movs	r3, #125	; 0x7d
 8000efc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	FIL fp;
	FRESULT res;

	writeBytes = DMA_TxRx_SIZE*2;
 8000f00:	4b5e      	ldr	r3, [pc, #376]	; (800107c <startRecord+0x194>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	do
	{
		res = f_open(&fp, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000f0a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000f0e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000f12:	f107 0010 	add.w	r0, r7, #16
 8000f16:	220a      	movs	r2, #10
 8000f18:	6819      	ldr	r1, [r3, #0]
 8000f1a:	f009 f991 	bl	800a240 <f_open>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
	}
	while(res != FR_OK);
 8000f24:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ee      	bne.n	8000f0a <startRecord+0x22>
	res = fwrite_wav_header(&fp, 48000, 32, 2);
 8000f2c:	f107 0010 	add.w	r0, r7, #16
 8000f30:	2302      	movs	r3, #2
 8000f32:	2220      	movs	r2, #32
 8000f34:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000f38:	f7ff ff72 	bl	8000e20 <fwrite_wav_header>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f48:	484d      	ldr	r0, [pc, #308]	; (8001080 <startRecord+0x198>)
 8000f4a:	f001 fc01 	bl	8002750 <HAL_GPIO_WritePin>
	audio_state = STATE_RECORDING;
 8000f4e:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <startRecord+0x19c>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	701a      	strb	r2, [r3, #0]
	rpt = rcvBuf;
 8000f54:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <startRecord+0x1a0>)
 8000f56:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	wpt = rpt;
 8000f5a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000f5e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	rCount=0; wCount=0;
 8000f62:	4b4a      	ldr	r3, [pc, #296]	; (800108c <startRecord+0x1a4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <startRecord+0x1a8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
	HAL_I2S_Receive_DMA(&hi2s2, rpt, DMA_READ_SIZE);
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8000f74:	4847      	ldr	r0, [pc, #284]	; (8001094 <startRecord+0x1ac>)
 8000f76:	f002 f973 	bl	8003260 <HAL_I2S_Receive_DMA>

	while (1)
	{
		if (wCount < rCount ) {
 8000f7a:	4b45      	ldr	r3, [pc, #276]	; (8001090 <startRecord+0x1a8>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b43      	ldr	r3, [pc, #268]	; (800108c <startRecord+0x1a4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d224      	bcs.n	8000fd0 <startRecord+0xe8>
			if (rCount > skipCount)
 8000f86:	4b41      	ldr	r3, [pc, #260]	; (800108c <startRecord+0x1a4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d20c      	bcs.n	8000fac <startRecord+0xc4>
			{
				res = f_write(&fp, wpt, writeBytes, &bw);
 8000f92:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000f96:	f107 0010 	add.w	r0, r7, #16
 8000f9a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000f9e:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8000fa2:	f009 fb0b 	bl	800a5bc <f_write>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
			}
			 wCount++;
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <startRecord+0x1a8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a37      	ldr	r2, [pc, #220]	; (8001090 <startRecord+0x1a8>)
 8000fb4:	6013      	str	r3, [r2, #0]
			 wpt = (rcvBuf)+(wCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <startRecord+0x1a8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	; (800107c <startRecord+0x194>)
 8000fc0:	8812      	ldrh	r2, [r2, #0]
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <startRecord+0x1a0>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		  }

		  if (audio_state == STATE_STOP || rCount > MAX_DMA_ACCESS_COUNT)
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <startRecord+0x19c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d004      	beq.n	8000fe2 <startRecord+0xfa>
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <startRecord+0x1a4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000fe0:	d9cb      	bls.n	8000f7a <startRecord+0x92>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 8000fe2:	482c      	ldr	r0, [pc, #176]	; (8001094 <startRecord+0x1ac>)
 8000fe4:	f002 f9f8 	bl	80033d8 <HAL_I2S_DMAStop>
			  break;
 8000fe8:	bf00      	nop
		  }
	}
	uint32_t data_len = (wCount-1) * writeBytes;
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <startRecord+0x1a8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000ff4:	fb03 f202 	mul.w	r2, r3, r2
 8000ff8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000ffc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001000:	601a      	str	r2, [r3, #0]
	uint32_t total_len = data_len+36;
 8001002:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001006:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001010:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001014:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001018:	601a      	str	r2, [r3, #0]
	f_lseek(&fp, 4);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	2104      	movs	r1, #4
 8001020:	4618      	mov	r0, r3
 8001022:	f009 fce8 	bl	800a9f6 <f_lseek>
	f_write(&fp, (uint8_t*)&total_len, 4, &bw);
 8001026:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800102a:	f107 0108 	add.w	r1, r7, #8
 800102e:	f107 0010 	add.w	r0, r7, #16
 8001032:	2204      	movs	r2, #4
 8001034:	f009 fac2 	bl	800a5bc <f_write>
	f_lseek(&fp, 40);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	2128      	movs	r1, #40	; 0x28
 800103e:	4618      	mov	r0, r3
 8001040:	f009 fcd9 	bl	800a9f6 <f_lseek>
	f_write(&fp, (uint8_t*)&data_len, 4, &bw);
 8001044:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001048:	f107 010c 	add.w	r1, r7, #12
 800104c:	f107 0010 	add.w	r0, r7, #16
 8001050:	2204      	movs	r2, #4
 8001052:	f009 fab3 	bl	800a5bc <f_write>
	f_close(&fp);
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4618      	mov	r0, r3
 800105c:	f009 fca1 	bl	800a9a2 <f_close>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <startRecord+0x198>)
 8001068:	f001 fb72 	bl	8002750 <HAL_GPIO_WritePin>
	audio_state = STATE_STOP;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <startRecord+0x19c>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	40020000 	.word	0x40020000
 8001084:	20000002 	.word	0x20000002
 8001088:	200002c0 	.word	0x200002c0
 800108c:	20000ac0 	.word	0x20000ac0
 8001090:	20000ac4 	.word	0x20000ac4
 8001094:	200000ec 	.word	0x200000ec

08001098 <Format_SD>:

FRESULT Format_SD (void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08e      	sub	sp, #56	; 0x38
 800109c:	af00      	add	r7, sp, #0
    DIR dir;
    static FILINFO fno;
    static FRESULT fresult;

    char *path = malloc(20*sizeof (char));
 800109e:	2014      	movs	r0, #20
 80010a0:	f00a f8ce 	bl	800b240 <malloc>
 80010a4:	4603      	mov	r3, r0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80010a8:	4a28      	ldr	r2, [pc, #160]	; (800114c <Format_SD+0xb4>)
 80010aa:	4929      	ldr	r1, [pc, #164]	; (8001150 <Format_SD+0xb8>)
 80010ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010ae:	f00a f9cf 	bl	800b450 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	4618      	mov	r0, r3
 80010b8:	f009 fea6 	bl	800ae08 <f_opendir>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <Format_SD+0xbc>)
 80010c2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <Format_SD+0xbc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d136      	bne.n	800113a <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4922      	ldr	r1, [pc, #136]	; (8001158 <Format_SD+0xc0>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f009 ff32 	bl	800af3a <f_readdir>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <Format_SD+0xbc>)
 80010dc:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <Format_SD+0xbc>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d125      	bne.n	8001132 <Format_SD+0x9a>
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <Format_SD+0xc0>)
 80010e8:	7a5b      	ldrb	r3, [r3, #9]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d021      	beq.n	8001132 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <Format_SD+0xc0>)
 80010f0:	7a1b      	ldrb	r3, [r3, #8]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d011      	beq.n	800111e <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80010fa:	4918      	ldr	r1, [pc, #96]	; (800115c <Format_SD+0xc4>)
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <Format_SD+0xc8>)
 80010fe:	f7ff f887 	bl	8000210 <strcmp>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d012      	beq.n	800112e <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 8001108:	4814      	ldr	r0, [pc, #80]	; (800115c <Format_SD+0xc4>)
 800110a:	f009 ff53 	bl	800afb4 <f_unlink>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <Format_SD+0xbc>)
 8001114:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <Format_SD+0xbc>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b07      	cmp	r3, #7
 800111c:	e7d6      	b.n	80010cc <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <Format_SD+0xc4>)
 8001120:	f009 ff48 	bl	800afb4 <f_unlink>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <Format_SD+0xbc>)
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e7ce      	b.n	80010cc <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800112e:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001130:	e7cc      	b.n	80010cc <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f009 feda 	bl	800aeee <f_closedir>
    }
    free(path);
 800113a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800113c:	f00a f888 	bl	800b250 <free>
    return fresult;
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <Format_SD+0xbc>)
 8001142:	781b      	ldrb	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3738      	adds	r7, #56	; 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	0800bb7c 	.word	0x0800bb7c
 8001150:	0800bb80 	.word	0x0800bb80
 8001154:	20000acd 	.word	0x20000acd
 8001158:	20000ad0 	.word	0x20000ad0
 800115c:	20000ad9 	.word	0x20000ad9
 8001160:	0800bb84 	.word	0x0800bb84

08001164 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

	switch (RX_data[0])
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_UART_RxCpltCallback+0x5c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b50      	cmp	r3, #80	; 0x50
 8001172:	d00e      	beq.n	8001192 <HAL_UART_RxCpltCallback+0x2e>
 8001174:	2b50      	cmp	r3, #80	; 0x50
 8001176:	dc18      	bgt.n	80011aa <HAL_UART_RxCpltCallback+0x46>
 8001178:	2b47      	cmp	r3, #71	; 0x47
 800117a:	d006      	beq.n	800118a <HAL_UART_RxCpltCallback+0x26>
 800117c:	2b47      	cmp	r3, #71	; 0x47
 800117e:	dc14      	bgt.n	80011aa <HAL_UART_RxCpltCallback+0x46>
 8001180:	2b2b      	cmp	r3, #43	; 0x2b
 8001182:	d00e      	beq.n	80011a2 <HAL_UART_RxCpltCallback+0x3e>
 8001184:	2b2e      	cmp	r3, #46	; 0x2e
 8001186:	d008      	beq.n	800119a <HAL_UART_RxCpltCallback+0x36>
		break;
	case '+':
		audio_state = STATE_STOP;
		break;
	default:
		break;
 8001188:	e00f      	b.n	80011aa <HAL_UART_RxCpltCallback+0x46>
		audio_state = STATE_START_RECORDING;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_UART_RxCpltCallback+0x60>)
 800118c:	2203      	movs	r2, #3
 800118e:	701a      	strb	r2, [r3, #0]
		break;
 8001190:	e00c      	b.n	80011ac <HAL_UART_RxCpltCallback+0x48>
		audio_state = STATE_STOP;
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_UART_RxCpltCallback+0x60>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
		break;
 8001198:	e008      	b.n	80011ac <HAL_UART_RxCpltCallback+0x48>
		audio_state = CONNECTING;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_UART_RxCpltCallback+0x60>)
 800119c:	2204      	movs	r2, #4
 800119e:	701a      	strb	r2, [r3, #0]
		break;
 80011a0:	e004      	b.n	80011ac <HAL_UART_RxCpltCallback+0x48>
		audio_state = STATE_STOP;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_UART_RxCpltCallback+0x60>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
		break;
 80011a8:	e000      	b.n	80011ac <HAL_UART_RxCpltCallback+0x48>
		break;
 80011aa:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *) RX_data, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	4904      	ldr	r1, [pc, #16]	; (80011c0 <HAL_UART_RxCpltCallback+0x5c>)
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <HAL_UART_RxCpltCallback+0x64>)
 80011b2:	f005 fb6f 	bl	8006894 <HAL_UART_Receive_IT>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000acc 	.word	0x20000acc
 80011c4:	20000002 	.word	0x20000002
 80011c8:	20000278 	.word	0x20000278

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_MspInit+0x4c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_MspInit+0x4c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_CRC_MspInit+0x3c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10d      	bne.n	8001256 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_CRC_MspInit+0x40>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <HAL_CRC_MspInit+0x40>)
 8001244:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <HAL_CRC_MspInit+0x40>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023000 	.word	0x40023000
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12b      	bne.n	80012e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012aa:	23c0      	movs	r3, #192	; 0xc0
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ba:	2304      	movs	r3, #4
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c6:	f001 f897 	bl	80023f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0a0      	sub	sp, #128	; 0x80
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	225c      	movs	r2, #92	; 0x5c
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f009 ff9f 	bl	800b260 <memset>
  if(hi2s->Instance==SPI2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <HAL_I2S_MspInit+0xc8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d146      	bne.n	80013ba <HAL_I2S_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 800132c:	2301      	movs	r3, #1
 800132e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001330:	2332      	movs	r3, #50	; 0x32
 8001332:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001334:	2302      	movs	r3, #2
 8001336:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001338:	2308      	movs	r3, #8
 800133a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800133c:	2302      	movs	r3, #2
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001344:	2301      	movs	r3, #1
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001348:	2300      	movs	r3, #0
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fbfb 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 800135c:	f7ff ff36 	bl	80011cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_I2S_MspInit+0xcc>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_I2S_MspInit+0xcc>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_I2S_MspInit+0xcc>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_I2S_MspInit+0xcc>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <HAL_I2S_MspInit+0xcc>)
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	6313      	str	r3, [r2, #48]	; 0x30
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_I2S_MspInit+0xcc>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001398:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800139c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013aa:	2305      	movs	r3, #5
 80013ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_I2S_MspInit+0xd0>)
 80013b6:	f001 f81f 	bl	80023f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3780      	adds	r7, #128	; 0x80
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40003800 	.word	0x40003800
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020400 	.word	0x40020400

080013d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0a2      	sub	sp, #136	; 0x88
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	225c      	movs	r2, #92	; 0x5c
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f009 ff35 	bl	800b260 <memset>
  if(hsd->Instance==SDIO)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7d      	ldr	r2, [pc, #500]	; (80015f0 <HAL_SD_MspInit+0x220>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	f040 80f3 	bne.w	80015e8 <HAL_SD_MspInit+0x218>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001406:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001408:	2300      	movs	r3, #0
 800140a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800140c:	2300      	movs	r3, #0
 800140e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fb99 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001420:	f7ff fed4 	bl	80011cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	4b72      	ldr	r3, [pc, #456]	; (80015f4 <HAL_SD_MspInit+0x224>)
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	4a71      	ldr	r2, [pc, #452]	; (80015f4 <HAL_SD_MspInit+0x224>)
 800142e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001432:	6453      	str	r3, [r2, #68]	; 0x44
 8001434:	4b6f      	ldr	r3, [pc, #444]	; (80015f4 <HAL_SD_MspInit+0x224>)
 8001436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <HAL_SD_MspInit+0x224>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a6a      	ldr	r2, [pc, #424]	; (80015f4 <HAL_SD_MspInit+0x224>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <HAL_SD_MspInit+0x224>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <HAL_SD_MspInit+0x224>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a63      	ldr	r2, [pc, #396]	; (80015f4 <HAL_SD_MspInit+0x224>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b61      	ldr	r3, [pc, #388]	; (80015f4 <HAL_SD_MspInit+0x224>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001478:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800147c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800148c:	230c      	movs	r3, #12
 800148e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001496:	4619      	mov	r1, r3
 8001498:	4857      	ldr	r0, [pc, #348]	; (80015f8 <HAL_SD_MspInit+0x228>)
 800149a:	f000 ffad 	bl	80023f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014b2:	230c      	movs	r3, #12
 80014b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014bc:	4619      	mov	r1, r3
 80014be:	484e      	ldr	r0, [pc, #312]	; (80015f8 <HAL_SD_MspInit+0x228>)
 80014c0:	f000 ff9a 	bl	80023f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014c4:	2304      	movs	r3, #4
 80014c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014d6:	230c      	movs	r3, #12
 80014d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014e0:	4619      	mov	r1, r3
 80014e2:	4846      	ldr	r0, [pc, #280]	; (80015fc <HAL_SD_MspInit+0x22c>)
 80014e4:	f000 ff88 	bl	80023f8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80014e8:	4b45      	ldr	r3, [pc, #276]	; (8001600 <HAL_SD_MspInit+0x230>)
 80014ea:	4a46      	ldr	r2, [pc, #280]	; (8001604 <HAL_SD_MspInit+0x234>)
 80014ec:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80014ee:	4b44      	ldr	r3, [pc, #272]	; (8001600 <HAL_SD_MspInit+0x230>)
 80014f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f6:	4b42      	ldr	r3, [pc, #264]	; (8001600 <HAL_SD_MspInit+0x230>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fc:	4b40      	ldr	r3, [pc, #256]	; (8001600 <HAL_SD_MspInit+0x230>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_SD_MspInit+0x230>)
 8001504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001508:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <HAL_SD_MspInit+0x230>)
 800150c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001510:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_SD_MspInit+0x230>)
 8001514:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001518:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800151a:	4b39      	ldr	r3, [pc, #228]	; (8001600 <HAL_SD_MspInit+0x230>)
 800151c:	2220      	movs	r2, #32
 800151e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_SD_MspInit+0x230>)
 8001522:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001526:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001528:	4b35      	ldr	r3, [pc, #212]	; (8001600 <HAL_SD_MspInit+0x230>)
 800152a:	2204      	movs	r2, #4
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_SD_MspInit+0x230>)
 8001530:	2203      	movs	r2, #3
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <HAL_SD_MspInit+0x230>)
 8001536:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_SD_MspInit+0x230>)
 800153e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001544:	482e      	ldr	r0, [pc, #184]	; (8001600 <HAL_SD_MspInit+0x230>)
 8001546:	f000 fb55 	bl	8001bf4 <HAL_DMA_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_SD_MspInit+0x184>
    {
      Error_Handler();
 8001550:	f7ff fe3c 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <HAL_SD_MspInit+0x230>)
 8001558:	641a      	str	r2, [r3, #64]	; 0x40
 800155a:	4a29      	ldr	r2, [pc, #164]	; (8001600 <HAL_SD_MspInit+0x230>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_SD_MspInit+0x238>)
 8001562:	4a2a      	ldr	r2, [pc, #168]	; (800160c <HAL_SD_MspInit+0x23c>)
 8001564:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <HAL_SD_MspInit+0x238>)
 8001568:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800156c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_SD_MspInit+0x238>)
 8001570:	2240      	movs	r2, #64	; 0x40
 8001572:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_SD_MspInit+0x238>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_SD_MspInit+0x238>)
 800157c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001580:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_SD_MspInit+0x238>)
 8001584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001588:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_SD_MspInit+0x238>)
 800158c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001590:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_SD_MspInit+0x238>)
 8001594:	2220      	movs	r2, #32
 8001596:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_SD_MspInit+0x238>)
 800159a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800159e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_SD_MspInit+0x238>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_SD_MspInit+0x238>)
 80015a8:	2203      	movs	r2, #3
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_SD_MspInit+0x238>)
 80015ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_SD_MspInit+0x238>)
 80015b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80015bc:	4812      	ldr	r0, [pc, #72]	; (8001608 <HAL_SD_MspInit+0x238>)
 80015be:	f000 fb19 	bl	8001bf4 <HAL_DMA_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_SD_MspInit+0x1fc>
    {
      Error_Handler();
 80015c8:	f7ff fe00 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_SD_MspInit+0x238>)
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_SD_MspInit+0x238>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2031      	movs	r0, #49	; 0x31
 80015de:	f000 fab6 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80015e2:	2031      	movs	r0, #49	; 0x31
 80015e4:	f000 facf 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3788      	adds	r7, #136	; 0x88
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40012c00 	.word	0x40012c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	200001b8 	.word	0x200001b8
 8001604:	40026458 	.word	0x40026458
 8001608:	20000218 	.word	0x20000218
 800160c:	400264a0 	.word	0x400264a0

08001610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <HAL_UART_MspInit+0x94>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d133      	bne.n	800169a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_UART_MspInit+0x98>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_UART_MspInit+0x98>)
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_UART_MspInit+0x98>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_UART_MspInit+0x98>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_UART_MspInit+0x98>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_UART_MspInit+0x98>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800166a:	230c      	movs	r3, #12
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800167a:	2307      	movs	r3, #7
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <HAL_UART_MspInit+0x9c>)
 8001686:	f000 feb7 	bl	80023f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	2026      	movs	r0, #38	; 0x26
 8001690:	f000 fa5d 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001694:	2026      	movs	r0, #38	; 0x26
 8001696:	f000 fa76 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40004400 	.word	0x40004400
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <NMI_Handler+0x4>

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fc:	f000 f908 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <USART2_IRQHandler+0x10>)
 800170a:	f005 f8f3 	bl	80068f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000278 	.word	0x20000278

08001718 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <SDIO_IRQHandler+0x10>)
 800171e:	f004 f861 	bl	80057e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000134 	.word	0x20000134

0800172c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA2_Stream3_IRQHandler+0x10>)
 8001732:	f000 fbf7 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200001b8 	.word	0x200001b8

08001740 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <DMA2_Stream6_IRQHandler+0x10>)
 8001746:	f000 fbed 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000218 	.word	0x20000218

08001754 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800175e:	f009 fd31 	bl	800b1c4 <__errno>
 8001762:	4603      	mov	r3, r0
 8001764:	2216      	movs	r2, #22
 8001766:	601a      	str	r2, [r3, #0]
	return -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_exit>:

void _exit (int status)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800177c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ffe7 	bl	8001754 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001786:	e7fe      	b.n	8001786 <_exit+0x12>

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f009 fd04 	bl	800b1c4 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20020000 	.word	0x20020000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	20000ae8 	.word	0x20000ae8
 80017f0:	20000d70 	.word	0x20000d70

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001834:	4c0b      	ldr	r4, [pc, #44]	; (8001864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001842:	f7ff ffd7 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f009 fcd7 	bl	800b1f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff f817 	bl	800087c <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800185c:	0800bcd0 	.word	0x0800bcd0
  ldr r2, =_sbss
 8001860:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001864:	20000d6c 	.word	0x20000d6c

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f94f 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fc9a 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f967 	bl	8001ba2 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018ec:	f000 f92f 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000004 	.word	0x20000004
 8001908:	2000000c 	.word	0x2000000c
 800190c:	20000008 	.word	0x20000008

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	2000000c 	.word	0x2000000c
 8001934:	20000aec 	.word	0x20000aec

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000aec 	.word	0x20000aec

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000000c 	.word	0x2000000c

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff3e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff31 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e00e      	b.n	8001bea <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	795b      	ldrb	r3, [r3, #5]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fb23 	bl	8001228 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff fe9a 	bl	8001938 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e099      	b.n	8001d44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c30:	e00f      	b.n	8001c52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c32:	f7ff fe81 	bl	8001938 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d908      	bls.n	8001c52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e078      	b.n	8001d44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e8      	bne.n	8001c32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_DMA_Init+0x158>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d107      	bne.n	8001cbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d117      	bne.n	8001d16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00e      	beq.n	8001d16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fb01 	bl	8002300 <DMA_CheckFifoParam>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d12:	2301      	movs	r3, #1
 8001d14:	e016      	b.n	8001d44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fab8 	bl	8002294 <DMA_CalcBaseAndBitshift>
 8001d24:	4603      	mov	r3, r0
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	223f      	movs	r2, #63	; 0x3f
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	f010803f 	.word	0xf010803f

08001d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_DMA_Start_IT+0x26>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e040      	b.n	8001df8 <HAL_DMA_Start_IT+0xa8>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d12f      	bne.n	8001dea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fa4a 	bl	8002238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	223f      	movs	r2, #63	; 0x3f
 8001daa:	409a      	lsls	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0216 	orr.w	r2, r2, #22
 8001dbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0208 	orr.w	r2, r2, #8
 8001dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e005      	b.n	8001df6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e0e:	f7ff fd93 	bl	8001938 <HAL_GetTick>
 8001e12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d008      	beq.n	8001e32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e052      	b.n	8001ed8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0216 	bic.w	r2, r2, #22
 8001e40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <HAL_DMA_Abort+0x62>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0208 	bic.w	r2, r2, #8
 8001e70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e82:	e013      	b.n	8001eac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e84:	f7ff fd58 	bl	8001938 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d90c      	bls.n	8001eac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e015      	b.n	8001ed8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1e4      	bne.n	8001e84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	223f      	movs	r2, #63	; 0x3f
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d004      	beq.n	8001efe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00c      	b.n	8001f18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2205      	movs	r2, #5
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f30:	4b8e      	ldr	r3, [pc, #568]	; (800216c <HAL_DMA_IRQHandler+0x248>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a8e      	ldr	r2, [pc, #568]	; (8002170 <HAL_DMA_IRQHandler+0x24c>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a9b      	lsrs	r3, r3, #10
 8001f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	2208      	movs	r2, #8
 8001f50:	409a      	lsls	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01a      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	2201      	movs	r2, #1
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d012      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f043 0202 	orr.w	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	2204      	movs	r2, #4
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	2204      	movs	r2, #4
 8001fea:	409a      	lsls	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f043 0204 	orr.w	r2, r3, #4
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	2210      	movs	r2, #16
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d043      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d03c      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	2210      	movs	r2, #16
 8002020:	409a      	lsls	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d018      	beq.n	8002066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d108      	bne.n	8002054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d024      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
 8002052:	e01f      	b.n	8002094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01b      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e016      	b.n	8002094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0208 	bic.w	r2, r2, #8
 8002082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	2220      	movs	r2, #32
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 808f 	beq.w	80021c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8087 	beq.w	80021c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	2220      	movs	r2, #32
 80020bc:	409a      	lsls	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d136      	bne.n	800213c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0216 	bic.w	r2, r2, #22
 80020dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d103      	bne.n	80020fe <HAL_DMA_IRQHandler+0x1da>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0208 	bic.w	r2, r2, #8
 800210c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	223f      	movs	r2, #63	; 0x3f
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212e:	2b00      	cmp	r3, #0
 8002130:	d07e      	beq.n	8002230 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
        }
        return;
 800213a:	e079      	b.n	8002230 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01d      	beq.n	8002186 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10d      	bne.n	8002174 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	2b00      	cmp	r3, #0
 800215e:	d031      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
 8002168:	e02c      	b.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
 800216a:	bf00      	nop
 800216c:	20000004 	.word	0x20000004
 8002170:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
 8002184:	e01e      	b.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10f      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0210 	bic.w	r2, r2, #16
 80021a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d032      	beq.n	8002232 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d022      	beq.n	800221e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2205      	movs	r2, #5
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	3301      	adds	r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d307      	bcc.n	800220c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f2      	bne.n	80021f0 <HAL_DMA_IRQHandler+0x2cc>
 800220a:	e000      	b.n	800220e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800220c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
 800222e:	e000      	b.n	8002232 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002230:	bf00      	nop
    }
  }
}
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b40      	cmp	r3, #64	; 0x40
 8002264:	d108      	bne.n	8002278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002276:	e007      	b.n	8002288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3b10      	subs	r3, #16
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <DMA_CalcBaseAndBitshift+0x64>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <DMA_CalcBaseAndBitshift+0x68>)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d909      	bls.n	80022d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	1d1a      	adds	r2, r3, #4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	; 0x58
 80022d4:	e007      	b.n	80022e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	aaaaaaab 	.word	0xaaaaaaab
 80022fc:	0800bbec 	.word	0x0800bbec

08002300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d11f      	bne.n	800235a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d856      	bhi.n	80023ce <DMA_CheckFifoParam+0xce>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <DMA_CheckFifoParam+0x28>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	08002339 	.word	0x08002339
 800232c:	0800234b 	.word	0x0800234b
 8002330:	08002339 	.word	0x08002339
 8002334:	080023cf 	.word	0x080023cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d046      	beq.n	80023d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002348:	e043      	b.n	80023d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002352:	d140      	bne.n	80023d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002358:	e03d      	b.n	80023d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002362:	d121      	bne.n	80023a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d837      	bhi.n	80023da <DMA_CheckFifoParam+0xda>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <DMA_CheckFifoParam+0x70>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	08002381 	.word	0x08002381
 8002374:	08002387 	.word	0x08002387
 8002378:	08002381 	.word	0x08002381
 800237c:	08002399 	.word	0x08002399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      break;
 8002384:	e030      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d025      	beq.n	80023de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002396:	e022      	b.n	80023de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023a0:	d11f      	bne.n	80023e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023a6:	e01c      	b.n	80023e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d903      	bls.n	80023b6 <DMA_CheckFifoParam+0xb6>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d003      	beq.n	80023bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023b4:	e018      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
      break;
 80023ba:	e015      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e00b      	b.n	80023e6 <DMA_CheckFifoParam+0xe6>
      break;
 80023ce:	bf00      	nop
 80023d0:	e00a      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e008      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e006      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023da:	bf00      	nop
 80023dc:	e004      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
 80023e0:	e002      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <DMA_CheckFifoParam+0xe8>
      break;
 80023e6:	bf00      	nop
    }
  } 
  
  return status; 
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop

080023f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	e165      	b.n	80026e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002414:	2201      	movs	r2, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	f040 8154 	bne.w	80026da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d005      	beq.n	800244a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002446:	2b02      	cmp	r3, #2
 8002448:	d130      	bne.n	80024ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0201 	and.w	r2, r3, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d017      	beq.n	80024e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d123      	bne.n	800253c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80ae 	beq.w	80026da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_GPIO_Init+0x300>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a5c      	ldr	r2, [pc, #368]	; (80026f8 <HAL_GPIO_Init+0x300>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b5a      	ldr	r3, [pc, #360]	; (80026f8 <HAL_GPIO_Init+0x300>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259a:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_GPIO_Init+0x304>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4f      	ldr	r2, [pc, #316]	; (8002700 <HAL_GPIO_Init+0x308>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d025      	beq.n	8002612 <HAL_GPIO_Init+0x21a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4e      	ldr	r2, [pc, #312]	; (8002704 <HAL_GPIO_Init+0x30c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <HAL_GPIO_Init+0x216>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4d      	ldr	r2, [pc, #308]	; (8002708 <HAL_GPIO_Init+0x310>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x212>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4c      	ldr	r2, [pc, #304]	; (800270c <HAL_GPIO_Init+0x314>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x20e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <HAL_GPIO_Init+0x318>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x20a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <HAL_GPIO_Init+0x31c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x206>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a49      	ldr	r2, [pc, #292]	; (8002718 <HAL_GPIO_Init+0x320>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x202>
 80025f6:	2306      	movs	r3, #6
 80025f8:	e00c      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e00a      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 80025fe:	2305      	movs	r3, #5
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 8002602:	2304      	movs	r3, #4
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b3a      	ldr	r3, [pc, #232]	; (800271c <HAL_GPIO_Init+0x324>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a31      	ldr	r2, [pc, #196]	; (800271c <HAL_GPIO_Init+0x324>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_GPIO_Init+0x324>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <HAL_GPIO_Init+0x324>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_GPIO_Init+0x324>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026aa:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_GPIO_Init+0x324>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_GPIO_Init+0x324>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_GPIO_Init+0x324>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f ae96 	bls.w	8002414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40021400 	.word	0x40021400
 8002718:	40021800 	.word	0x40021800
 800271c:	40013c00 	.word	0x40013c00

08002720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e001      	b.n	8002742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800276c:	e003      	b.n	8002776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	619a      	str	r2, [r3, #24]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002782:	b480      	push	{r7}
 8002784:	b085      	sub	sp, #20
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002794:	887a      	ldrh	r2, [r7, #2]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	041a      	lsls	r2, r3, #16
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43d9      	mvns	r1, r3
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	400b      	ands	r3, r1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e12b      	b.n	8002a22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fd44 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800280a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800281a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800281c:	f001 f96e 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8002820:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a81      	ldr	r2, [pc, #516]	; (8002a2c <HAL_I2C_Init+0x274>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d807      	bhi.n	800283c <HAL_I2C_Init+0x84>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a80      	ldr	r2, [pc, #512]	; (8002a30 <HAL_I2C_Init+0x278>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e006      	b.n	800284a <HAL_I2C_Init+0x92>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a7d      	ldr	r2, [pc, #500]	; (8002a34 <HAL_I2C_Init+0x27c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	bf94      	ite	ls
 8002844:	2301      	movls	r3, #1
 8002846:	2300      	movhi	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0e7      	b.n	8002a22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a78      	ldr	r2, [pc, #480]	; (8002a38 <HAL_I2C_Init+0x280>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9b      	lsrs	r3, r3, #18
 800285c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a6a      	ldr	r2, [pc, #424]	; (8002a2c <HAL_I2C_Init+0x274>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d802      	bhi.n	800288c <HAL_I2C_Init+0xd4>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3301      	adds	r3, #1
 800288a:	e009      	b.n	80028a0 <HAL_I2C_Init+0xe8>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	4a69      	ldr	r2, [pc, #420]	; (8002a3c <HAL_I2C_Init+0x284>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	3301      	adds	r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	495c      	ldr	r1, [pc, #368]	; (8002a2c <HAL_I2C_Init+0x274>)
 80028bc:	428b      	cmp	r3, r1
 80028be:	d819      	bhi.n	80028f4 <HAL_I2C_Init+0x13c>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e59      	subs	r1, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ce:	1c59      	adds	r1, r3, #1
 80028d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028d4:	400b      	ands	r3, r1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_I2C_Init+0x138>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e59      	subs	r1, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ee:	e051      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e04f      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d111      	bne.n	8002920 <HAL_I2C_Init+0x168>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e012      	b.n	8002946 <HAL_I2C_Init+0x18e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Init+0x196>
 800294a:	2301      	movs	r3, #1
 800294c:	e022      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10e      	bne.n	8002974 <HAL_I2C_Init+0x1bc>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e58      	subs	r0, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	440b      	add	r3, r1
 8002964:	fbb0 f3f3 	udiv	r3, r0, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002972:	e00f      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	6809      	ldr	r1, [r1, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6911      	ldr	r1, [r2, #16]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	4311      	orrs	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	000186a0 	.word	0x000186a0
 8002a30:	001e847f 	.word	0x001e847f
 8002a34:	003d08ff 	.word	0x003d08ff
 8002a38:	431bde83 	.word	0x431bde83
 8002a3c:	10624dd3 	.word	0x10624dd3

08002a40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	817b      	strh	r3, [r7, #10]
 8002a52:	460b      	mov	r3, r1
 8002a54:	813b      	strh	r3, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a5a:	f7fe ff6d 	bl	8001938 <HAL_GetTick>
 8002a5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f040 80d9 	bne.w	8002c20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2319      	movs	r3, #25
 8002a74:	2201      	movs	r2, #1
 8002a76:	496d      	ldr	r1, [pc, #436]	; (8002c2c <HAL_I2C_Mem_Write+0x1ec>)
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f971 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
 8002a86:	e0cc      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_I2C_Mem_Write+0x56>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e0c5      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d007      	beq.n	8002abc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2221      	movs	r2, #33	; 0x21
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a3a      	ldr	r2, [r7, #32]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a4d      	ldr	r2, [pc, #308]	; (8002c30 <HAL_I2C_Mem_Write+0x1f0>)
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002afe:	88f8      	ldrh	r0, [r7, #6]
 8002b00:	893a      	ldrh	r2, [r7, #8]
 8002b02:	8979      	ldrh	r1, [r7, #10]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f890 	bl	8002c34 <I2C_RequestMemoryWrite>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d052      	beq.n	8002bc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e081      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f9f2 	bl	8002f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d107      	bne.n	8002b46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e06b      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d11b      	bne.n	8002bc0 <HAL_I2C_Mem_Write+0x180>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d017      	beq.n	8002bc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1aa      	bne.n	8002b1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f9de 	bl	8002f8e <I2C_WaitOnBTFFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d107      	bne.n	8002bf0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e016      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e000      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	00100002 	.word	0x00100002
 8002c30:	ffff0000 	.word	0xffff0000

08002c34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f878 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c84:	d103      	bne.n	8002c8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e05f      	b.n	8002d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c92:	897b      	ldrh	r3, [r7, #10]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ca0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	6a3a      	ldr	r2, [r7, #32]
 8002ca6:	492d      	ldr	r1, [pc, #180]	; (8002d5c <I2C_RequestMemoryWrite+0x128>)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f8b0 	bl	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e04c      	b.n	8002d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	6a39      	ldr	r1, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f91a 	bl	8002f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e02b      	b.n	8002d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d00:	893b      	ldrh	r3, [r7, #8]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]
 8002d0a:	e021      	b.n	8002d50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d0c:	893b      	ldrh	r3, [r7, #8]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1c:	6a39      	ldr	r1, [r7, #32]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f8f4 	bl	8002f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d107      	bne.n	8002d42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e005      	b.n	8002d52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d46:	893b      	ldrh	r3, [r7, #8]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	00010002 	.word	0x00010002

08002d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d70:	e025      	b.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d78:	d021      	beq.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7fe fddd 	bl	8001938 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e023      	b.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10d      	bne.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	e00c      	b.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4013      	ands	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d0b6      	beq.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e1c:	e051      	b.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2c:	d123      	bne.n	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f043 0204 	orr.w	r2, r3, #4
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e046      	b.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e7c:	d021      	beq.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7fe fd5b 	bl	8001938 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d116      	bne.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e020      	b.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d10c      	bne.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bf14      	ite	ne
 8002ede:	2301      	movne	r3, #1
 8002ee0:	2300      	moveq	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	e00b      	b.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	43da      	mvns	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d18d      	bne.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f18:	e02d      	b.n	8002f76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f878 	bl	8003010 <I2C_IsAcknowledgeFailed>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e02d      	b.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f30:	d021      	beq.n	8002f76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fe fd01 	bl	8001938 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d302      	bcc.n	8002f48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d116      	bne.n	8002f76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e007      	b.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f80:	2b80      	cmp	r3, #128	; 0x80
 8002f82:	d1ca      	bne.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f9a:	e02d      	b.n	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f837 	bl	8003010 <I2C_IsAcknowledgeFailed>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e02d      	b.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb2:	d021      	beq.n	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb4:	f7fe fcc0 	bl	8001938 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d302      	bcc.n	8002fca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d116      	bne.n	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e007      	b.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d1ca      	bne.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003026:	d11b      	bne.n	8003060 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003030:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0e1      	b.n	8003246 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a6d      	ldr	r2, [pc, #436]	; (8003250 <HAL_I2S_Init+0x1e0>)
 800309a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fe f92d 	bl	80012fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030b8:	f023 030f 	bic.w	r3, r3, #15
 80030bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2202      	movs	r2, #2
 80030c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d06f      	beq.n	80031ae <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d102      	bne.n	80030dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030d6:	2310      	movs	r3, #16
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e001      	b.n	80030e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030dc:	2320      	movs	r3, #32
 80030de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d802      	bhi.n	80030ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a58      	ldr	r2, [pc, #352]	; (8003254 <HAL_I2S_Init+0x1e4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d004      	beq.n	8003102 <HAL_I2S_Init+0x92>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_I2S_Init+0x1e8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d104      	bne.n	800310c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003102:	2001      	movs	r0, #1
 8003104:	f001 f84c 	bl	80041a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	e003      	b.n	8003114 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800310c:	2002      	movs	r0, #2
 800310e:	f001 f847 	bl	80041a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003112:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311c:	d125      	bne.n	800316a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d010      	beq.n	8003148 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	461a      	mov	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	3305      	adds	r3, #5
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	e01f      	b.n	8003188 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	3305      	adds	r3, #5
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	e00e      	b.n	8003188 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	461a      	mov	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	3305      	adds	r3, #5
 8003186:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4a34      	ldr	r2, [pc, #208]	; (800325c <HAL_I2S_Init+0x1ec>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	08db      	lsrs	r3, r3, #3
 8003192:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	e003      	b.n	80031b6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031ae:	2302      	movs	r3, #2
 80031b0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d902      	bls.n	80031c2 <HAL_I2S_Init+0x152>
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2bff      	cmp	r3, #255	; 0xff
 80031c0:	d907      	bls.n	80031d2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	f043 0210 	orr.w	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e039      	b.n	8003246 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	ea42 0103 	orr.w	r1, r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031f0:	f023 030f 	bic.w	r3, r3, #15
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6851      	ldr	r1, [r2, #4]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6892      	ldr	r2, [r2, #8]
 80031fc:	4311      	orrs	r1, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	4311      	orrs	r1, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6992      	ldr	r2, [r2, #24]
 8003208:	430a      	orrs	r2, r1
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003214:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b30      	cmp	r3, #48	; 0x30
 800321c:	d003      	beq.n	8003226 <HAL_I2S_Init+0x1b6>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2bb0      	cmp	r3, #176	; 0xb0
 8003224:	d107      	bne.n	8003236 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69da      	ldr	r2, [r3, #28]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003234:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3720      	adds	r7, #32
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	080036f1 	.word	0x080036f1
 8003254:	40003800 	.word	0x40003800
 8003258:	40003c00 	.word	0x40003c00
 800325c:	cccccccd 	.word	0xcccccccd

08003260 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	4613      	mov	r3, r2
 800326c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_I2S_Receive_DMA+0x1a>
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0a1      	b.n	80033c2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2S_Receive_DMA+0x2e>
 800328a:	2302      	movs	r3, #2
 800328c:	e099      	b.n	80033c2 <HAL_I2S_Receive_DMA+0x162>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d005      	beq.n	80032ae <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
 80032ac:	e089      	b.n	80033c2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2204      	movs	r2, #4
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d002      	beq.n	80032da <HAL_I2S_Receive_DMA+0x7a>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d10a      	bne.n	80032f0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	865a      	strh	r2, [r3, #50]	; 0x32
 80032ee:	e005      	b.n	80032fc <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	88fa      	ldrh	r2, [r7, #6]
 80032f4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	88fa      	ldrh	r2, [r7, #6]
 80032fa:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	4a32      	ldr	r2, [pc, #200]	; (80033cc <HAL_I2S_Receive_DMA+0x16c>)
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <HAL_I2S_Receive_DMA+0x170>)
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	4a30      	ldr	r2, [pc, #192]	; (80033d4 <HAL_I2S_Receive_DMA+0x174>)
 8003312:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003322:	d10a      	bne.n	800333a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	4619      	mov	r1, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003350:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003352:	f7fe fcfd 	bl	8001d50 <HAL_DMA_Start_IT>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00f      	beq.n	800337c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f043 0208 	orr.w	r2, r3, #8
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e022      	b.n	80033c2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003386:	2b00      	cmp	r3, #0
 8003388:	d107      	bne.n	800339a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003398:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	080035cf 	.word	0x080035cf
 80033d0:	0800358d 	.word	0x0800358d
 80033d4:	080035eb 	.word	0x080035eb

080033d8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ec:	d003      	beq.n	80033f6 <HAL_I2S_DMAStop+0x1e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d155      	bne.n	80034a2 <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00f      	beq.n	800341e <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fcfc 	bl	8001e00 <HAL_DMA_Abort>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f043 0208 	orr.w	r2, r3, #8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800341e:	2364      	movs	r3, #100	; 0x64
 8003420:	2201      	movs	r2, #1
 8003422:	2102      	movs	r1, #2
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f9ed 	bl	8003804 <I2S_WaitFlagStateUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00b      	beq.n	8003448 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	f043 0201 	orr.w	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003448:	2364      	movs	r3, #100	; 0x64
 800344a:	2200      	movs	r2, #0
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9d8 	bl	8003804 <I2S_WaitFlagStateUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003480:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0202 	bic.w	r2, r2, #2
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	e04d      	b.n	800353e <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034aa:	d004      	beq.n	80034b6 <HAL_I2S_DMAStop+0xde>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b4:	d143      	bne.n	800353e <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00f      	beq.n	80034de <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fc9c 	bl	8001e00 <HAL_DMA_Abort>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f043 0208 	orr.w	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ec:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351c:	d10c      	bne.n	8003538 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
 8003536:	e002      	b.n	800353e <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8003546:	7dfb      	ldrb	r3, [r7, #23]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10e      	bne.n	80035c0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7fd fc07 	bl	8000dd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff ffc1 	bl	8003564 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0203 	bic.w	r2, r2, #3
 8003606:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	f043 0208 	orr.w	r2, r3, #8
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff ffa5 	bl	8003578 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	1c9a      	adds	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10e      	bne.n	800368a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800367a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff63 	bl	8003550 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	b292      	uxth	r2, r2
 80036a6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	1c9a      	adds	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10e      	bne.n	80036e8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fb76 	bl	8000dd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b04      	cmp	r3, #4
 800370a:	d13a      	bne.n	8003782 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b01      	cmp	r3, #1
 8003714:	d109      	bne.n	800372a <I2S_IRQHandler+0x3a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d102      	bne.n	800372a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ffb4 	bl	8003692 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d126      	bne.n	8003782 <I2S_IRQHandler+0x92>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b20      	cmp	r3, #32
 8003740:	d11f      	bne.n	8003782 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003750:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	f043 0202 	orr.w	r2, r3, #2
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fefb 	bl	8003578 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b03      	cmp	r3, #3
 800378c:	d136      	bne.n	80037fc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b02      	cmp	r3, #2
 8003796:	d109      	bne.n	80037ac <I2S_IRQHandler+0xbc>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b80      	cmp	r3, #128	; 0x80
 80037a4:	d102      	bne.n	80037ac <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ff45 	bl	8003636 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d122      	bne.n	80037fc <I2S_IRQHandler+0x10c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d11b      	bne.n	80037fc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037d2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f043 0204 	orr.w	r2, r3, #4
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff febe 	bl	8003578 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037fc:	bf00      	nop
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003814:	f7fe f890 	bl	8001938 <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800381a:	e018      	b.n	800384e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003822:	d014      	beq.n	800384e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003824:	f7fe f888 	bl	8001938 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d902      	bls.n	800383a <I2S_WaitFlagStateUntilTimeout+0x36>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e00f      	b.n	800386e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	429a      	cmp	r2, r3
 800386a:	d1d7      	bne.n	800381c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <HAL_PWREx_EnableOverDrive+0x90>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <HAL_PWREx_EnableOverDrive+0x90>)
 800388c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003890:	6413      	str	r3, [r2, #64]	; 0x40
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_PWREx_EnableOverDrive+0x90>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_PWREx_EnableOverDrive+0x94>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038a4:	f7fe f848 	bl	8001938 <HAL_GetTick>
 80038a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038aa:	e009      	b.n	80038c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038ac:	f7fe f844 	bl	8001938 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ba:	d901      	bls.n	80038c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e01f      	b.n	8003900 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <HAL_PWREx_EnableOverDrive+0x98>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	d1ee      	bne.n	80038ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038ce:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038d4:	f7fe f830 	bl	8001938 <HAL_GetTick>
 80038d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038da:	e009      	b.n	80038f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038dc:	f7fe f82c 	bl	8001938 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ea:	d901      	bls.n	80038f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e007      	b.n	8003900 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <HAL_PWREx_EnableOverDrive+0x98>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038fc:	d1ee      	bne.n	80038dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40023800 	.word	0x40023800
 800390c:	420e0040 	.word	0x420e0040
 8003910:	40007000 	.word	0x40007000
 8003914:	420e0044 	.word	0x420e0044

08003918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0cc      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800392c:	4b68      	ldr	r3, [pc, #416]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d90c      	bls.n	8003954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0b8      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800396c:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	494d      	ldr	r1, [pc, #308]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d044      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d119      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e07f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d003      	beq.n	80039d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d6:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e06f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e6:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e067      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 0203 	bic.w	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4934      	ldr	r1, [pc, #208]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a08:	f7fd ff96 	bl	8001938 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a10:	f7fd ff92 	bl	8001938 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e04f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 020c 	and.w	r2, r3, #12
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d1eb      	bne.n	8003a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d20c      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e032      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4916      	ldr	r1, [pc, #88]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a9e:	f000 fdc1 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	490a      	ldr	r1, [pc, #40]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	5ccb      	ldrb	r3, [r1, r3]
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd fef6 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023c00 	.word	0x40023c00
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	0800bbd4 	.word	0x0800bbd4
 8003adc:	20000004 	.word	0x20000004
 8003ae0:	20000008 	.word	0x20000008

08003ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000004 	.word	0x20000004

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b00:	f7ff fff0 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	0a9b      	lsrs	r3, r3, #10
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	0800bbe4 	.word	0x0800bbe4

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b28:	f7ff ffdc 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0b5b      	lsrs	r3, r3, #13
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40023800 	.word	0x40023800
 8003b48:	0800bbe4 	.word	0x0800bbe4

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08c      	sub	sp, #48	; 0x30
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d010      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003b84:	4b6f      	ldr	r3, [pc, #444]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	496c      	ldr	r1, [pc, #432]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d010      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003bb2:	4b64      	ldr	r3, [pc, #400]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	4960      	ldr	r1, [pc, #384]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d017      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003be0:	4b58      	ldr	r3, [pc, #352]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	4955      	ldr	r1, [pc, #340]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003c00:	2301      	movs	r3, #1
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d017      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c1c:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2a:	4946      	ldr	r1, [pc, #280]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 808a 	beq.w	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a38      	ldr	r2, [pc, #224]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6a:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c76:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a33      	ldr	r2, [pc, #204]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c82:	f7fd fe59 	bl	8001938 <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c8a:	f7fd fe55 	bl	8001938 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e278      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c9c:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca8:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d02f      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d028      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc6:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cdc:	4a19      	ldr	r2, [pc, #100]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ce2:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d114      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fd fe23 	bl	8001938 <HAL_GetTick>
 8003cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fd fe1f 	bl	8001938 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e240      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0c:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ee      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d24:	d114      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3a:	4902      	ldr	r1, [pc, #8]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]
 8003d40:	e00c      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	42470e40 	.word	0x42470e40
 8003d50:	4b4a      	ldr	r3, [pc, #296]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a49      	ldr	r2, [pc, #292]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d5a:	6093      	str	r3, [r2, #8]
 8003d5c:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d68:	4944      	ldr	r1, [pc, #272]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003d80:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003d82:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003d90:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	4937      	ldr	r1, [pc, #220]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003db2:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	492e      	ldr	r1, [pc, #184]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d011      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dd4:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dda:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	4926      	ldr	r1, [pc, #152]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003df2:	d101      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003df4:	2301      	movs	r3, #1
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	491a      	ldr	r1, [pc, #104]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d011      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	4911      	ldr	r1, [pc, #68]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e44:	d101      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003e46:	2301      	movs	r3, #1
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e58:	f040 80ff 	bne.w	800405a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e62:	f7fd fd69 	bl	8001938 <HAL_GetTick>
 8003e66:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e68:	e00e      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e6a:	f7fd fd65 	bl	8001938 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d907      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e188      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	424711e0 	.word	0x424711e0
 8003e84:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e88:	4b7e      	ldr	r3, [pc, #504]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ea      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d028      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d124      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ebc:	4b71      	ldr	r3, [pc, #452]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ece:	4b6d      	ldr	r3, [pc, #436]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed4:	0e1b      	lsrs	r3, r3, #24
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	019b      	lsls	r3, r3, #6
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	3b01      	subs	r3, #1
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	061b      	lsls	r3, r3, #24
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	4961      	ldr	r1, [pc, #388]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d004      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d035      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f30:	d130      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f32:	4b54      	ldr	r3, [pc, #336]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f44:	4b4f      	ldr	r3, [pc, #316]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4a:	0f1b      	lsrs	r3, r3, #28
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	019b      	lsls	r3, r3, #6
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	3b01      	subs	r3, #1
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	071b      	lsls	r3, r3, #28
 8003f74:	4943      	ldr	r1, [pc, #268]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f7c:	4b41      	ldr	r3, [pc, #260]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f82:	f023 021f 	bic.w	r2, r3, #31
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	493d      	ldr	r1, [pc, #244]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d029      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa8:	d124      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003faa:	4b36      	ldr	r3, [pc, #216]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fbc:	4b31      	ldr	r3, [pc, #196]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc2:	0f1b      	lsrs	r3, r3, #28
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	019b      	lsls	r3, r3, #6
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	071b      	lsls	r3, r3, #28
 8003fec:	4925      	ldr	r1, [pc, #148]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d016      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	3b01      	subs	r3, #1
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	061b      	lsls	r3, r3, #24
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	071b      	lsls	r3, r3, #28
 8004026:	4917      	ldr	r1, [pc, #92]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004034:	f7fd fc80 	bl	8001938 <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800403c:	f7fd fc7c 	bl	8001938 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e09f      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	2b01      	cmp	r3, #1
 800405e:	f040 8095 	bne.w	800418c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004068:	f7fd fc66 	bl	8001938 <HAL_GetTick>
 800406c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800406e:	e00f      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004070:	f7fd fc62 	bl	8001938 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d908      	bls.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e085      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	42470068 	.word	0x42470068
 800408c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004090:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800409c:	d0e8      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d02b      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d127      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80040c6:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3301      	adds	r3, #1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	431a      	orrs	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	3b01      	subs	r3, #1
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	061b      	lsls	r3, r3, #24
 80040f4:	4928      	ldr	r1, [pc, #160]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040fc:	4b26      	ldr	r3, [pc, #152]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004102:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	3b01      	subs	r3, #1
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	4922      	ldr	r1, [pc, #136]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01d      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800412a:	d118      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	0e1b      	lsrs	r3, r3, #24
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	019b      	lsls	r3, r3, #6
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	3b01      	subs	r3, #1
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	4910      	ldr	r1, [pc, #64]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800415e:	4b0f      	ldr	r3, [pc, #60]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004164:	f7fd fbe8 	bl	8001938 <HAL_GetTick>
 8004168:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800416c:	f7fd fbe4 	bl	8001938 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e007      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800418a:	d1ef      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3730      	adds	r7, #48	; 0x30
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	42470070 	.word	0x42470070

080041a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b089      	sub	sp, #36	; 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	2b07      	cmp	r3, #7
 80041c6:	f200 8220 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080043d3 	.word	0x080043d3
 80041d4:	080044f5 	.word	0x080044f5
 80041d8:	0800460b 	.word	0x0800460b
 80041dc:	080041f1 	.word	0x080041f1
 80041e0:	0800460b 	.word	0x0800460b
 80041e4:	0800460b 	.word	0x0800460b
 80041e8:	0800460b 	.word	0x0800460b
 80041ec:	080041f1 	.word	0x080041f1
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80041f0:	4ba7      	ldr	r3, [pc, #668]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80041f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f6:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004206:	f000 80d6 	beq.w	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004210:	f200 80dd 	bhi.w	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800421a:	f000 809f 	beq.w	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004224:	f200 80d3 	bhi.w	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422e:	d05b      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004236:	f200 80ca 	bhi.w	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004240:	f000 80b6 	beq.w	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800424a:	f200 80c0 	bhi.w	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004254:	f000 8082 	beq.w	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800425e:	f200 80b6 	bhi.w	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800426e:	d03b      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8004270:	e0ad      	b.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004272:	4b87      	ldr	r3, [pc, #540]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800427e:	4b84      	ldr	r3, [pc, #528]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004288:	4a82      	ldr	r2, [pc, #520]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e008      	b.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8004292:	4b7f      	ldr	r3, [pc, #508]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429c:	4a7d      	ldr	r2, [pc, #500]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80042a4:	4b7a      	ldr	r3, [pc, #488]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	0e1b      	lsrs	r3, r3, #24
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80042b2:	4b77      	ldr	r3, [pc, #476]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	099b      	lsrs	r3, r3, #6
 80042ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	fb03 f202 	mul.w	r2, r3, r2
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80042cc:	4b70      	ldr	r3, [pc, #448]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	3301      	adds	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	61fb      	str	r3, [r7, #28]
          break;
 80042e6:	e073      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80042e8:	4b69      	ldr	r3, [pc, #420]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80042f4:	4b66      	ldr	r3, [pc, #408]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042fe:	4a65      	ldr	r2, [pc, #404]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	e008      	b.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8004308:	4b61      	ldr	r3, [pc, #388]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800430a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004312:	4a60      	ldr	r2, [pc, #384]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800431a:	4b5d      	ldr	r3, [pc, #372]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800431c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004320:	0e1b      	lsrs	r3, r3, #24
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8004328:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800432a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	fb03 f202 	mul.w	r2, r3, r2
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8004342:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	3301      	adds	r3, #1
 800434e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	61fb      	str	r3, [r7, #28]
          break;
 800435a:	e039      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800435c:	4b4c      	ldr	r3, [pc, #304]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d108      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004368:	4b49      	ldr	r3, [pc, #292]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004370:	4a48      	ldr	r2, [pc, #288]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004372:	fbb2 f3f3 	udiv	r3, r2, r3
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e007      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800437a:	4b45      	ldr	r3, [pc, #276]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004382:	4a44      	ldr	r2, [pc, #272]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	0f1b      	lsrs	r3, r3, #28
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8004396:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	fb03 f202 	mul.w	r2, r3, r2
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	61fb      	str	r3, [r7, #28]
          break;
 80043ae:	e00f      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80043b0:	4b39      	ldr	r3, [pc, #228]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80043b2:	61fb      	str	r3, [r7, #28]
          break;
 80043b4:	e00c      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043b6:	4b36      	ldr	r3, [pc, #216]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80043c2:	4b34      	ldr	r3, [pc, #208]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043c4:	61fb      	str	r3, [r7, #28]
          break;
 80043c6:	e003      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80043c8:	4b32      	ldr	r3, [pc, #200]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043ca:	61fb      	str	r3, [r7, #28]
          break;
 80043cc:	e000      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80043ce:	bf00      	nop
        }
      }
      break;
 80043d0:	e11b      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80043d2:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043d8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80043e4:	d075      	beq.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80043ec:	d87e      	bhi.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043f4:	d03c      	beq.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043fc:	d876      	bhi.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d006      	beq.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440a:	d16f      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800440c:	4b22      	ldr	r3, [pc, #136]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800440e:	61fb      	str	r3, [r7, #28]
          break;
 8004410:	e06f      	b.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004412:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800441e:	d109      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800442a:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e008      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004434:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800443e:	4a15      	ldr	r2, [pc, #84]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004460:	0f1b      	lsrs	r3, r3, #28
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	61fb      	str	r3, [r7, #28]
          break;
 800446e:	e040      	b.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800447c:	d10e      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004486:	4a03      	ldr	r2, [pc, #12]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	e00d      	b.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004490:	40023800 	.word	0x40023800
 8004494:	00f42400 	.word	0x00f42400
 8004498:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800449c:	4b5e      	ldr	r3, [pc, #376]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a4:	4a5d      	ldr	r2, [pc, #372]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80044ac:	4b5a      	ldr	r3, [pc, #360]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	099b      	lsrs	r3, r3, #6
 80044b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	fb02 f303 	mul.w	r3, r2, r3
 80044bc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80044be:	4b56      	ldr	r3, [pc, #344]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	0f1b      	lsrs	r3, r3, #28
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	61fb      	str	r3, [r7, #28]
          break;
 80044d0:	e00f      	b.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044d2:	4b51      	ldr	r3, [pc, #324]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044de:	d102      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          {
            frequency = HSE_VALUE;
 80044e0:	4b4e      	ldr	r3, [pc, #312]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80044e2:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80044e4:	e005      	b.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
            frequency = HSI_VALUE;
 80044e6:	4b4d      	ldr	r3, [pc, #308]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80044e8:	61fb      	str	r3, [r7, #28]
          break;
 80044ea:	e002      	b.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
          break;
 80044f0:	bf00      	nop
        }
      }
      break;
 80044f2:	e08a      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80044f4:	4b48      	ldr	r3, [pc, #288]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80044f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044fa:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004506:	d06f      	beq.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800450e:	d878      	bhi.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004516:	d03c      	beq.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800451e:	d870      	bhi.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800452c:	d169      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800452e:	4b3c      	ldr	r3, [pc, #240]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004530:	61fb      	str	r3, [r7, #28]
          break;
 8004532:	e069      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004534:	4b38      	ldr	r3, [pc, #224]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004540:	d109      	bne.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004542:	4b35      	ldr	r3, [pc, #212]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454c:	4a33      	ldr	r2, [pc, #204]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	e008      	b.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004556:	4b30      	ldr	r3, [pc, #192]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004560:	4a2e      	ldr	r2, [pc, #184]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004568:	4b2b      	ldr	r3, [pc, #172]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456e:	099b      	lsrs	r3, r3, #6
 8004570:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800457c:	4b26      	ldr	r3, [pc, #152]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800457e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004582:	0f1b      	lsrs	r3, r3, #28
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	61fb      	str	r3, [r7, #28]
          break;
 8004590:	e03a      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459e:	d108      	bne.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045a0:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a8:	4a1c      	ldr	r2, [pc, #112]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	e007      	b.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ba:	4a18      	ldr	r2, [pc, #96]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80045c2:	4b15      	ldr	r3, [pc, #84]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80045d4:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	0f1b      	lsrs	r3, r3, #28
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	61fb      	str	r3, [r7, #28]
          break;
 80045e6:	e00f      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f4:	d102      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          {
            frequency = HSE_VALUE;
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045f8:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80045fa:	e005      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = HSI_VALUE;
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045fe:	61fb      	str	r3, [r7, #28]
          break;
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
          break;
 8004606:	bf00      	nop
        }
      }
      break;
 8004608:	bf00      	nop
    }
  }
  return frequency;
 800460a:	69fb      	ldr	r3, [r7, #28]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3724      	adds	r7, #36	; 0x24
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40023800 	.word	0x40023800
 800461c:	00f42400 	.word	0x00f42400
 8004620:	00bb8000 	.word	0x00bb8000

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b0ae      	sub	sp, #184	; 0xb8
 800462a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800464a:	4bcb      	ldr	r3, [pc, #812]	; (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b0c      	cmp	r3, #12
 8004654:	f200 8204 	bhi.w	8004a60 <HAL_RCC_GetSysClockFreq+0x43c>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <HAL_RCC_GetSysClockFreq+0x3c>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004695 	.word	0x08004695
 8004664:	08004a61 	.word	0x08004a61
 8004668:	08004a61 	.word	0x08004a61
 800466c:	08004a61 	.word	0x08004a61
 8004670:	0800469d 	.word	0x0800469d
 8004674:	08004a61 	.word	0x08004a61
 8004678:	08004a61 	.word	0x08004a61
 800467c:	08004a61 	.word	0x08004a61
 8004680:	080046a5 	.word	0x080046a5
 8004684:	08004a61 	.word	0x08004a61
 8004688:	08004a61 	.word	0x08004a61
 800468c:	08004a61 	.word	0x08004a61
 8004690:	08004895 	.word	0x08004895
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004694:	4bb9      	ldr	r3, [pc, #740]	; (800497c <HAL_RCC_GetSysClockFreq+0x358>)
 8004696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800469a:	e1e5      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800469c:	4bb7      	ldr	r3, [pc, #732]	; (800497c <HAL_RCC_GetSysClockFreq+0x358>)
 800469e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046a2:	e1e1      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a4:	4bb4      	ldr	r3, [pc, #720]	; (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b0:	4bb1      	ldr	r3, [pc, #708]	; (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d071      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046bc:	4bae      	ldr	r3, [pc, #696]	; (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	099b      	lsrs	r3, r3, #6
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80046cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046e2:	4622      	mov	r2, r4
 80046e4:	462b      	mov	r3, r5
 80046e6:	f04f 0000 	mov.w	r0, #0
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	0159      	lsls	r1, r3, #5
 80046f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f4:	0150      	lsls	r0, r2, #5
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4621      	mov	r1, r4
 80046fc:	1a51      	subs	r1, r2, r1
 80046fe:	6439      	str	r1, [r7, #64]	; 0x40
 8004700:	4629      	mov	r1, r5
 8004702:	eb63 0301 	sbc.w	r3, r3, r1
 8004706:	647b      	str	r3, [r7, #68]	; 0x44
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004714:	4649      	mov	r1, r9
 8004716:	018b      	lsls	r3, r1, #6
 8004718:	4641      	mov	r1, r8
 800471a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800471e:	4641      	mov	r1, r8
 8004720:	018a      	lsls	r2, r1, #6
 8004722:	4641      	mov	r1, r8
 8004724:	1a51      	subs	r1, r2, r1
 8004726:	63b9      	str	r1, [r7, #56]	; 0x38
 8004728:	4649      	mov	r1, r9
 800472a:	eb63 0301 	sbc.w	r3, r3, r1
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800473c:	4649      	mov	r1, r9
 800473e:	00cb      	lsls	r3, r1, #3
 8004740:	4641      	mov	r1, r8
 8004742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004746:	4641      	mov	r1, r8
 8004748:	00ca      	lsls	r2, r1, #3
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	4603      	mov	r3, r0
 8004750:	4622      	mov	r2, r4
 8004752:	189b      	adds	r3, r3, r2
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
 8004756:	462b      	mov	r3, r5
 8004758:	460a      	mov	r2, r1
 800475a:	eb42 0303 	adc.w	r3, r2, r3
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800476c:	4629      	mov	r1, r5
 800476e:	028b      	lsls	r3, r1, #10
 8004770:	4621      	mov	r1, r4
 8004772:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004776:	4621      	mov	r1, r4
 8004778:	028a      	lsls	r2, r1, #10
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004788:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800478c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004790:	f7fb fd9e 	bl	80002d0 <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4613      	mov	r3, r2
 800479a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800479e:	e067      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a0:	4b75      	ldr	r3, [pc, #468]	; (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80047b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ba:	2300      	movs	r3, #0
 80047bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80047c2:	4622      	mov	r2, r4
 80047c4:	462b      	mov	r3, r5
 80047c6:	f04f 0000 	mov.w	r0, #0
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	0159      	lsls	r1, r3, #5
 80047d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d4:	0150      	lsls	r0, r2, #5
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4621      	mov	r1, r4
 80047dc:	1a51      	subs	r1, r2, r1
 80047de:	62b9      	str	r1, [r7, #40]	; 0x28
 80047e0:	4629      	mov	r1, r5
 80047e2:	eb63 0301 	sbc.w	r3, r3, r1
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80047f4:	4649      	mov	r1, r9
 80047f6:	018b      	lsls	r3, r1, #6
 80047f8:	4641      	mov	r1, r8
 80047fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047fe:	4641      	mov	r1, r8
 8004800:	018a      	lsls	r2, r1, #6
 8004802:	4641      	mov	r1, r8
 8004804:	ebb2 0a01 	subs.w	sl, r2, r1
 8004808:	4649      	mov	r1, r9
 800480a:	eb63 0b01 	sbc.w	fp, r3, r1
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800481a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800481e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004822:	4692      	mov	sl, r2
 8004824:	469b      	mov	fp, r3
 8004826:	4623      	mov	r3, r4
 8004828:	eb1a 0303 	adds.w	r3, sl, r3
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	462b      	mov	r3, r5
 8004830:	eb4b 0303 	adc.w	r3, fp, r3
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004842:	4629      	mov	r1, r5
 8004844:	028b      	lsls	r3, r1, #10
 8004846:	4621      	mov	r1, r4
 8004848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800484c:	4621      	mov	r1, r4
 800484e:	028a      	lsls	r2, r1, #10
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004858:	2200      	movs	r2, #0
 800485a:	673b      	str	r3, [r7, #112]	; 0x70
 800485c:	677a      	str	r2, [r7, #116]	; 0x74
 800485e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004862:	f7fb fd35 	bl	80002d0 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4613      	mov	r3, r2
 800486c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004870:	4b41      	ldr	r3, [pc, #260]	; (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	3301      	adds	r3, #1
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004882:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800488a:	fbb2 f3f3 	udiv	r3, r2, r3
 800488e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004892:	e0e9      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004894:	4b38      	ldr	r3, [pc, #224]	; (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800489c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048a0:	4b35      	ldr	r3, [pc, #212]	; (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d069      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ac:	4b32      	ldr	r3, [pc, #200]	; (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	2200      	movs	r2, #0
 80048b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80048b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	663b      	str	r3, [r7, #96]	; 0x60
 80048c0:	2300      	movs	r3, #0
 80048c2:	667b      	str	r3, [r7, #100]	; 0x64
 80048c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80048c8:	4622      	mov	r2, r4
 80048ca:	462b      	mov	r3, r5
 80048cc:	f04f 0000 	mov.w	r0, #0
 80048d0:	f04f 0100 	mov.w	r1, #0
 80048d4:	0159      	lsls	r1, r3, #5
 80048d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048da:	0150      	lsls	r0, r2, #5
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4621      	mov	r1, r4
 80048e2:	1a51      	subs	r1, r2, r1
 80048e4:	61b9      	str	r1, [r7, #24]
 80048e6:	4629      	mov	r1, r5
 80048e8:	eb63 0301 	sbc.w	r3, r3, r1
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80048fa:	4659      	mov	r1, fp
 80048fc:	018b      	lsls	r3, r1, #6
 80048fe:	4651      	mov	r1, sl
 8004900:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004904:	4651      	mov	r1, sl
 8004906:	018a      	lsls	r2, r1, #6
 8004908:	4651      	mov	r1, sl
 800490a:	ebb2 0801 	subs.w	r8, r2, r1
 800490e:	4659      	mov	r1, fp
 8004910:	eb63 0901 	sbc.w	r9, r3, r1
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004920:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004924:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004928:	4690      	mov	r8, r2
 800492a:	4699      	mov	r9, r3
 800492c:	4623      	mov	r3, r4
 800492e:	eb18 0303 	adds.w	r3, r8, r3
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	462b      	mov	r3, r5
 8004936:	eb49 0303 	adc.w	r3, r9, r3
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004948:	4629      	mov	r1, r5
 800494a:	028b      	lsls	r3, r1, #10
 800494c:	4621      	mov	r1, r4
 800494e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004952:	4621      	mov	r1, r4
 8004954:	028a      	lsls	r2, r1, #10
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800495e:	2200      	movs	r2, #0
 8004960:	65bb      	str	r3, [r7, #88]	; 0x58
 8004962:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004964:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004968:	f7fb fcb2 	bl	80002d0 <__aeabi_uldivmod>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4613      	mov	r3, r2
 8004972:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004976:	e063      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x41c>
 8004978:	40023800 	.word	0x40023800
 800497c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004980:	4b3d      	ldr	r3, [pc, #244]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x454>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	2200      	movs	r2, #0
 8004988:	4618      	mov	r0, r3
 800498a:	4611      	mov	r1, r2
 800498c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004990:	653b      	str	r3, [r7, #80]	; 0x50
 8004992:	2300      	movs	r3, #0
 8004994:	657b      	str	r3, [r7, #84]	; 0x54
 8004996:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800499a:	4642      	mov	r2, r8
 800499c:	464b      	mov	r3, r9
 800499e:	f04f 0000 	mov.w	r0, #0
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	0159      	lsls	r1, r3, #5
 80049a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ac:	0150      	lsls	r0, r2, #5
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4641      	mov	r1, r8
 80049b4:	1a51      	subs	r1, r2, r1
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	4649      	mov	r1, r9
 80049ba:	eb63 0301 	sbc.w	r3, r3, r1
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80049cc:	4659      	mov	r1, fp
 80049ce:	018b      	lsls	r3, r1, #6
 80049d0:	4651      	mov	r1, sl
 80049d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049d6:	4651      	mov	r1, sl
 80049d8:	018a      	lsls	r2, r1, #6
 80049da:	4651      	mov	r1, sl
 80049dc:	1a54      	subs	r4, r2, r1
 80049de:	4659      	mov	r1, fp
 80049e0:	eb63 0501 	sbc.w	r5, r3, r1
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	00eb      	lsls	r3, r5, #3
 80049ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049f2:	00e2      	lsls	r2, r4, #3
 80049f4:	4614      	mov	r4, r2
 80049f6:	461d      	mov	r5, r3
 80049f8:	4643      	mov	r3, r8
 80049fa:	18e3      	adds	r3, r4, r3
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	464b      	mov	r3, r9
 8004a00:	eb45 0303 	adc.w	r3, r5, r3
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a12:	4629      	mov	r1, r5
 8004a14:	028b      	lsls	r3, r1, #10
 8004a16:	4621      	mov	r1, r4
 8004a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	028a      	lsls	r2, r1, #10
 8004a20:	4610      	mov	r0, r2
 8004a22:	4619      	mov	r1, r3
 8004a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a28:	2200      	movs	r2, #0
 8004a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a2c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004a2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a32:	f7fb fc4d 	bl	80002d0 <__aeabi_uldivmod>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x454>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0f1b      	lsrs	r3, r3, #28
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004a4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a5e:	e003      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x458>)
 8004a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	37b8      	adds	r7, #184	; 0xb8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	00f42400 	.word	0x00f42400

08004a80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e28d      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 8083 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004aa0:	4b94      	ldr	r3, [pc, #592]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d019      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004aac:	4b91      	ldr	r3, [pc, #580]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ab8:	4b8e      	ldr	r3, [pc, #568]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac6:	4b8b      	ldr	r3, [pc, #556]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ace:	2b0c      	cmp	r3, #12
 8004ad0:	d112      	bne.n	8004af8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad2:	4b88      	ldr	r3, [pc, #544]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	4b84      	ldr	r3, [pc, #528]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05b      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x124>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d157      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e25a      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d106      	bne.n	8004b10 <HAL_RCC_OscConfig+0x90>
 8004b02:	4b7c      	ldr	r3, [pc, #496]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a7b      	ldr	r2, [pc, #492]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e01d      	b.n	8004b4c <HAL_RCC_OscConfig+0xcc>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0xb4>
 8004b1a:	4b76      	ldr	r3, [pc, #472]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a75      	ldr	r2, [pc, #468]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b73      	ldr	r3, [pc, #460]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a72      	ldr	r2, [pc, #456]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_OscConfig+0xcc>
 8004b34:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a6e      	ldr	r2, [pc, #440]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b6c      	ldr	r3, [pc, #432]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a6b      	ldr	r2, [pc, #428]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fc fef0 	bl	8001938 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fc feec 	bl	8001938 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e21f      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0xdc>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fc fedc 	bl	8001938 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fc fed8 	bl	8001938 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e20b      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	4b57      	ldr	r3, [pc, #348]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x104>
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d06f      	beq.n	8004c92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004bb2:	4b50      	ldr	r3, [pc, #320]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d017      	beq.n	8004bee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bbe:	4b4d      	ldr	r3, [pc, #308]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d105      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bca:	4b4a      	ldr	r3, [pc, #296]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd6:	4b47      	ldr	r3, [pc, #284]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d11c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be2:	4b44      	ldr	r3, [pc, #272]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d116      	bne.n	8004c1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bee:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_RCC_OscConfig+0x186>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d001      	beq.n	8004c06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e1d3      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c06:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4937      	ldr	r1, [pc, #220]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1a:	e03a      	b.n	8004c92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c24:	4b34      	ldr	r3, [pc, #208]	; (8004cf8 <HAL_RCC_OscConfig+0x278>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fc fe85 	bl	8001938 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c32:	f7fc fe81 	bl	8001938 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e1b4      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c44:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c50:	4b28      	ldr	r3, [pc, #160]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	4925      	ldr	r1, [pc, #148]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	600b      	str	r3, [r1, #0]
 8004c64:	e015      	b.n	8004c92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c66:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <HAL_RCC_OscConfig+0x278>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fc fe64 	bl	8001938 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c74:	f7fc fe60 	bl	8001938 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e193      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c86:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d036      	beq.n	8004d0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d016      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cac:	f7fc fe44 	bl	8001938 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb4:	f7fc fe40 	bl	8001938 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e173      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x234>
 8004cd2:	e01b      	b.n	8004d0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cda:	f7fc fe2d 	bl	8001938 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce0:	e00e      	b.n	8004d00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce2:	f7fc fe29 	bl	8001938 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d907      	bls.n	8004d00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e15c      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	42470000 	.word	0x42470000
 8004cfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d00:	4b8a      	ldr	r3, [pc, #552]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1ea      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8097 	beq.w	8004e48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1e:	4b83      	ldr	r3, [pc, #524]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10f      	bne.n	8004d4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	4b7f      	ldr	r3, [pc, #508]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	4a7e      	ldr	r2, [pc, #504]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3a:	4b7c      	ldr	r3, [pc, #496]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4a:	4b79      	ldr	r3, [pc, #484]	; (8004f30 <HAL_RCC_OscConfig+0x4b0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d118      	bne.n	8004d88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d56:	4b76      	ldr	r3, [pc, #472]	; (8004f30 <HAL_RCC_OscConfig+0x4b0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a75      	ldr	r2, [pc, #468]	; (8004f30 <HAL_RCC_OscConfig+0x4b0>)
 8004d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d62:	f7fc fde9 	bl	8001938 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6a:	f7fc fde5 	bl	8001938 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e118      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7c:	4b6c      	ldr	r3, [pc, #432]	; (8004f30 <HAL_RCC_OscConfig+0x4b0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_OscConfig+0x31e>
 8004d90:	4b66      	ldr	r3, [pc, #408]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	4a65      	ldr	r2, [pc, #404]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9c:	e01c      	b.n	8004dd8 <HAL_RCC_OscConfig+0x358>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x340>
 8004da6:	4b61      	ldr	r3, [pc, #388]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	4a60      	ldr	r2, [pc, #384]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004dac:	f043 0304 	orr.w	r3, r3, #4
 8004db0:	6713      	str	r3, [r2, #112]	; 0x70
 8004db2:	4b5e      	ldr	r3, [pc, #376]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db6:	4a5d      	ldr	r2, [pc, #372]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dbe:	e00b      	b.n	8004dd8 <HAL_RCC_OscConfig+0x358>
 8004dc0:	4b5a      	ldr	r3, [pc, #360]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a59      	ldr	r2, [pc, #356]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	4b57      	ldr	r3, [pc, #348]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4a56      	ldr	r2, [pc, #344]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004dd2:	f023 0304 	bic.w	r3, r3, #4
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d015      	beq.n	8004e0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fc fdaa 	bl	8001938 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fc fda6 	bl	8001938 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0d7      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	4b4b      	ldr	r3, [pc, #300]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0ee      	beq.n	8004de8 <HAL_RCC_OscConfig+0x368>
 8004e0a:	e014      	b.n	8004e36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fc fd94 	bl	8001938 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e14:	f7fc fd90 	bl	8001938 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e0c1      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2a:	4b40      	ldr	r3, [pc, #256]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1ee      	bne.n	8004e14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e3c:	4b3b      	ldr	r3, [pc, #236]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	4a3a      	ldr	r2, [pc, #232]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80ad 	beq.w	8004fac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e52:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d060      	beq.n	8004f20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d145      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e66:	4b33      	ldr	r3, [pc, #204]	; (8004f34 <HAL_RCC_OscConfig+0x4b4>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6c:	f7fc fd64 	bl	8001938 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e74:	f7fc fd60 	bl	8001938 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e093      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e86:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f0      	bne.n	8004e74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69da      	ldr	r2, [r3, #28]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	019b      	lsls	r3, r3, #6
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	061b      	lsls	r3, r3, #24
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	071b      	lsls	r3, r3, #28
 8004ebe:	491b      	ldr	r1, [pc, #108]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <HAL_RCC_OscConfig+0x4b4>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eca:	f7fc fd35 	bl	8001938 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed2:	f7fc fd31 	bl	8001938 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e064      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee4:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x452>
 8004ef0:	e05c      	b.n	8004fac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef2:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <HAL_RCC_OscConfig+0x4b4>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fc fd1e 	bl	8001938 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f00:	f7fc fd1a 	bl	8001938 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e04d      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <HAL_RCC_OscConfig+0x4ac>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x480>
 8004f1e:	e045      	b.n	8004fac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e040      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40007000 	.word	0x40007000
 8004f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f38:	4b1f      	ldr	r3, [pc, #124]	; (8004fb8 <HAL_RCC_OscConfig+0x538>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d030      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d129      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d122      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d119      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	085b      	lsrs	r3, r3, #1
 8004f80:	3b01      	subs	r3, #1
 8004f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d10f      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800

08004fbc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e022      	b.n	8005014 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fc f9f5 	bl	80013d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2203      	movs	r2, #3
 8004fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f814 	bl	800501c <HAL_SD_InitCard>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e00a      	b.n	8005014 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800501c:	b5b0      	push	{r4, r5, r7, lr}
 800501e:	b08e      	sub	sp, #56	; 0x38
 8005020:	af04      	add	r7, sp, #16
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005024:	2300      	movs	r3, #0
 8005026:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005034:	2300      	movs	r3, #0
 8005036:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005038:	2376      	movs	r3, #118	; 0x76
 800503a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681d      	ldr	r5, [r3, #0]
 8005040:	466c      	mov	r4, sp
 8005042:	f107 0314 	add.w	r3, r7, #20
 8005046:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800504a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800504e:	f107 0308 	add.w	r3, r7, #8
 8005052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005054:	4628      	mov	r0, r5
 8005056:	f002 fb47 	bl	80076e8 <SDIO_Init>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e04f      	b.n	800510c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800506c:	4b29      	ldr	r3, [pc, #164]	; (8005114 <HAL_SD_InitCard+0xf8>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f002 fb7f 	bl	800777a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800507c:	4b25      	ldr	r3, [pc, #148]	; (8005114 <HAL_SD_InitCard+0xf8>)
 800507e:	2201      	movs	r2, #1
 8005080:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005082:	2002      	movs	r0, #2
 8005084:	f7fc fc64 	bl	8001950 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 f8f1 	bl	8006270 <SD_PowerON>
 800508e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e02e      	b.n	800510c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f001 f810 	bl	80060d4 <SD_InitCard>
 80050b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00b      	beq.n	80050d4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e01b      	b.n	800510c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050dc:	4618      	mov	r0, r3
 80050de:	f002 fbde 	bl	800789e <SDMMC_CmdBlockLength>
 80050e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00f      	beq.n	800510a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <HAL_SD_InitCard+0xfc>)
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3728      	adds	r7, #40	; 0x28
 8005110:	46bd      	mov	sp, r7
 8005112:	bdb0      	pop	{r4, r5, r7, pc}
 8005114:	422580a0 	.word	0x422580a0
 8005118:	004005ff 	.word	0x004005ff

0800511c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b092      	sub	sp, #72	; 0x48
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800512a:	f7fc fc05 	bl	8001938 <HAL_GetTick>
 800512e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d107      	bne.n	800514e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e1bd      	b.n	80054ca <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	f040 81b0 	bne.w	80054bc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	441a      	add	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516c:	429a      	cmp	r2, r3
 800516e:	d907      	bls.n	8005180 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e1a4      	b.n	80054ca <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2203      	movs	r2, #3
 8005184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2200      	movs	r2, #0
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005194:	2b01      	cmp	r3, #1
 8005196:	d002      	beq.n	800519e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	025b      	lsls	r3, r3, #9
 800519c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051a2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	025b      	lsls	r3, r3, #9
 80051a8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80051aa:	2390      	movs	r3, #144	; 0x90
 80051ac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80051ae:	2302      	movs	r3, #2
 80051b0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80051b6:	2301      	movs	r3, #1
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f107 0214 	add.w	r2, r7, #20
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f002 fb3e 	bl	8007846 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d90a      	bls.n	80051e6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2202      	movs	r2, #2
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051dc:	4618      	mov	r0, r3
 80051de:	f002 fba2 	bl	8007926 <SDMMC_CmdReadMultiBlock>
 80051e2:	6478      	str	r0, [r7, #68]	; 0x44
 80051e4:	e009      	b.n	80051fa <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051f2:	4618      	mov	r0, r3
 80051f4:	f002 fb75 	bl	80078e2 <SDMMC_CmdReadSingleBlock>
 80051f8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80051fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d012      	beq.n	8005226 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a7a      	ldr	r2, [pc, #488]	; (80053f0 <HAL_SD_ReadBlocks+0x2d4>)
 8005206:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520e:	431a      	orrs	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e151      	b.n	80054ca <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800522a:	e061      	b.n	80052f0 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d03c      	beq.n	80052b4 <HAL_SD_ReadBlocks+0x198>
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d039      	beq.n	80052b4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005240:	2300      	movs	r3, #0
 8005242:	643b      	str	r3, [r7, #64]	; 0x40
 8005244:	e033      	b.n	80052ae <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f002 fa77 	bl	800773e <SDIO_ReadFIFO>
 8005250:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	b2da      	uxtb	r2, r3
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005258:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	3301      	adds	r3, #1
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005262:	3b01      	subs	r3, #1
 8005264:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	0a1b      	lsrs	r3, r3, #8
 800526a:	b2da      	uxtb	r2, r3
 800526c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005272:	3301      	adds	r3, #1
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005278:	3b01      	subs	r3, #1
 800527a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	b2da      	uxtb	r2, r3
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005284:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005288:	3301      	adds	r3, #1
 800528a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800528c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528e:	3b01      	subs	r3, #1
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	0e1b      	lsrs	r3, r3, #24
 8005296:	b2da      	uxtb	r2, r3
 8005298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	3301      	adds	r3, #1
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a4:	3b01      	subs	r3, #1
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80052a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052aa:	3301      	adds	r3, #1
 80052ac:	643b      	str	r3, [r7, #64]	; 0x40
 80052ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b0:	2b07      	cmp	r3, #7
 80052b2:	d9c8      	bls.n	8005246 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80052b4:	f7fc fb40 	bl	8001938 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d902      	bls.n	80052ca <HAL_SD_ReadBlocks+0x1ae>
 80052c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d112      	bne.n	80052f0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a48      	ldr	r2, [pc, #288]	; (80053f0 <HAL_SD_ReadBlocks+0x2d4>)
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e0ec      	b.n	80054ca <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d096      	beq.n	800522c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d022      	beq.n	8005352 <HAL_SD_ReadBlocks+0x236>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d91f      	bls.n	8005352 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	2b03      	cmp	r3, #3
 8005318:	d01b      	beq.n	8005352 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f002 fb68 	bl	80079f4 <SDMMC_CmdStopTransfer>
 8005324:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005328:	2b00      	cmp	r3, #0
 800532a:	d012      	beq.n	8005352 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2f      	ldr	r2, [pc, #188]	; (80053f0 <HAL_SD_ReadBlocks+0x2d4>)
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533a:	431a      	orrs	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e0bb      	b.n	80054ca <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d012      	beq.n	8005386 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a22      	ldr	r2, [pc, #136]	; (80053f0 <HAL_SD_ReadBlocks+0x2d4>)
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	f043 0208 	orr.w	r2, r3, #8
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e0a1      	b.n	80054ca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <HAL_SD_ReadBlocks+0x2d4>)
 800539a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	f043 0202 	orr.w	r2, r3, #2
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e087      	b.n	80054ca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d064      	beq.n	8005492 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <HAL_SD_ReadBlocks+0x2d4>)
 80053ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	f043 0220 	orr.w	r2, r3, #32
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e06d      	b.n	80054ca <HAL_SD_ReadBlocks+0x3ae>
 80053ee:	bf00      	nop
 80053f0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f002 f9a0 	bl	800773e <SDIO_ReadFIFO>
 80053fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	b2da      	uxtb	r2, r3
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	3301      	adds	r3, #1
 800540c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005410:	3b01      	subs	r3, #1
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	b2da      	uxtb	r2, r3
 800541a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005420:	3301      	adds	r3, #1
 8005422:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005426:	3b01      	subs	r3, #1
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	b2da      	uxtb	r2, r3
 8005430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005432:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005436:	3301      	adds	r3, #1
 8005438:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800543a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543c:	3b01      	subs	r3, #1
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	0e1b      	lsrs	r3, r3, #24
 8005444:	b2da      	uxtb	r2, r3
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800544a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544c:	3301      	adds	r3, #1
 800544e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005452:	3b01      	subs	r3, #1
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005456:	f7fc fa6f 	bl	8001938 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005462:	429a      	cmp	r2, r3
 8005464:	d902      	bls.n	800546c <HAL_SD_ReadBlocks+0x350>
 8005466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005468:	2b00      	cmp	r3, #0
 800546a:	d112      	bne.n	8005492 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <HAL_SD_ReadBlocks+0x3b8>)
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e01b      	b.n	80054ca <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_SD_ReadBlocks+0x38a>
 80054a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1a6      	bne.n	80053f4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e006      	b.n	80054ca <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3748      	adds	r7, #72	; 0x48
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	004005ff 	.word	0x004005ff

080054d8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b092      	sub	sp, #72	; 0x48
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80054e6:	f7fc fa27 	bl	8001938 <HAL_GetTick>
 80054ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d107      	bne.n	800550a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e165      	b.n	80057d6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	f040 8158 	bne.w	80057c8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800551e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	441a      	add	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005528:	429a      	cmp	r2, r3
 800552a:	d907      	bls.n	800553c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e14c      	b.n	80057d6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2203      	movs	r2, #3
 8005540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2200      	movs	r2, #0
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	2b01      	cmp	r3, #1
 8005552:	d002      	beq.n	800555a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	025b      	lsls	r3, r3, #9
 8005558:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800555e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	025b      	lsls	r3, r3, #9
 8005564:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005566:	2390      	movs	r3, #144	; 0x90
 8005568:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800556a:	2300      	movs	r3, #0
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800556e:	2300      	movs	r3, #0
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005572:	2301      	movs	r3, #1
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f107 0218 	add.w	r2, r7, #24
 800557e:	4611      	mov	r1, r2
 8005580:	4618      	mov	r0, r3
 8005582:	f002 f960 	bl	8007846 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d90a      	bls.n	80055a2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005598:	4618      	mov	r0, r3
 800559a:	f002 fa08 	bl	80079ae <SDMMC_CmdWriteMultiBlock>
 800559e:	6478      	str	r0, [r7, #68]	; 0x44
 80055a0:	e009      	b.n	80055b6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2210      	movs	r2, #16
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055ae:	4618      	mov	r0, r3
 80055b0:	f002 f9db 	bl	800796a <SDMMC_CmdWriteSingleBlock>
 80055b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80055b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d012      	beq.n	80055e2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a87      	ldr	r2, [pc, #540]	; (80057e0 <HAL_SD_WriteBlocks+0x308>)
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ca:	431a      	orrs	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e0f9      	b.n	80057d6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80055e6:	e065      	b.n	80056b4 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d040      	beq.n	8005678 <HAL_SD_WriteBlocks+0x1a0>
 80055f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d03d      	beq.n	8005678 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005600:	e037      	b.n	8005672 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560a:	3301      	adds	r3, #1
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	3b01      	subs	r3, #1
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	021a      	lsls	r2, r3, #8
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	3301      	adds	r3, #1
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005628:	3b01      	subs	r3, #1
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800562c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	041a      	lsls	r2, r3, #16
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563a:	3301      	adds	r3, #1
 800563c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	3b01      	subs	r3, #1
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	061a      	lsls	r2, r3, #24
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	3301      	adds	r3, #1
 8005654:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	3b01      	subs	r3, #1
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f107 0214 	add.w	r2, r7, #20
 8005664:	4611      	mov	r1, r2
 8005666:	4618      	mov	r0, r3
 8005668:	f002 f876 	bl	8007758 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800566c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566e:	3301      	adds	r3, #1
 8005670:	643b      	str	r3, [r7, #64]	; 0x40
 8005672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005674:	2b07      	cmp	r3, #7
 8005676:	d9c4      	bls.n	8005602 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005678:	f7fc f95e 	bl	8001938 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005684:	429a      	cmp	r2, r3
 8005686:	d902      	bls.n	800568e <HAL_SD_WriteBlocks+0x1b6>
 8005688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800568a:	2b00      	cmp	r3, #0
 800568c:	d112      	bne.n	80056b4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a53      	ldr	r2, [pc, #332]	; (80057e0 <HAL_SD_WriteBlocks+0x308>)
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800569a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e090      	b.n	80057d6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ba:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d092      	beq.n	80055e8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d022      	beq.n	8005716 <HAL_SD_WriteBlocks+0x23e>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d91f      	bls.n	8005716 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d01b      	beq.n	8005716 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f002 f986 	bl	80079f4 <SDMMC_CmdStopTransfer>
 80056e8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80056ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d012      	beq.n	8005716 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a3a      	ldr	r2, [pc, #232]	; (80057e0 <HAL_SD_WriteBlocks+0x308>)
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fe:	431a      	orrs	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e05f      	b.n	80057d6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d012      	beq.n	800574a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2d      	ldr	r2, [pc, #180]	; (80057e0 <HAL_SD_WriteBlocks+0x308>)
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	f043 0208 	orr.w	r2, r3, #8
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e045      	b.n	80057d6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d012      	beq.n	800577e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a20      	ldr	r2, [pc, #128]	; (80057e0 <HAL_SD_WriteBlocks+0x308>)
 800575e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	f043 0202 	orr.w	r2, r3, #2
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e02b      	b.n	80057d6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	f003 0310 	and.w	r3, r3, #16
 8005788:	2b00      	cmp	r3, #0
 800578a:	d012      	beq.n	80057b2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <HAL_SD_WriteBlocks+0x308>)
 8005792:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	f043 0210 	orr.w	r2, r3, #16
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e011      	b.n	80057d6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	e006      	b.n	80057d6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3748      	adds	r7, #72	; 0x48
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	004005ff 	.word	0x004005ff

080057e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <HAL_SD_IRQHandler+0x2e>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 ff4f 	bl	80066ae <SD_Read_IT>
 8005810:	e155      	b.n	8005abe <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 808f 	beq.w	8005940 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800582a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800583a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800583e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0201 	bic.w	r2, r2, #1
 800584e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d039      	beq.n	80058ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <HAL_SD_IRQHandler+0x8a>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d011      	beq.n	8005892 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f002 f8be 	bl	80079f4 <SDMMC_CmdStopTransfer>
 8005878:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f91f 	bl	8005ad0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f240 523a 	movw	r2, #1338	; 0x53a
 800589a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d104      	bne.n	80058be <HAL_SD_IRQHandler+0xda>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f002 fd34 	bl	800832c <HAL_SD_RxCpltCallback>
 80058c4:	e0fb      	b.n	8005abe <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f002 fd26 	bl	8008318 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058cc:	e0f7      	b.n	8005abe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80f2 	beq.w	8005abe <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d011      	beq.n	8005908 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f002 f883 	bl	80079f4 <SDMMC_CmdStopTransfer>
 80058ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8e4 	bl	8005ad0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 80d5 	bne.w	8005abe <HAL_SD_IRQHandler+0x2da>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	f040 80cf 	bne.w	8005abe <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0208 	bic.w	r2, r2, #8
 800592e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f002 fced 	bl	8008318 <HAL_SD_TxCpltCallback>
}
 800593e:	e0be      	b.n	8005abe <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d008      	beq.n	8005960 <HAL_SD_IRQHandler+0x17c>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fef9 	bl	8006750 <SD_Write_IT>
 800595e:	e0ae      	b.n	8005abe <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80a7 	beq.w	8005abe <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	f043 0202 	orr.w	r2, r3, #2
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	f043 0208 	orr.w	r2, r3, #8
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	f043 0220 	orr.w	r2, r3, #32
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	f043 0210 	orr.w	r2, r3, #16
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80059f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 fffc 	bl	80079f4 <SDMMC_CmdStopTransfer>
 80059fc:	4602      	mov	r2, r0
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f855 	bl	8005ad0 <HAL_SD_ErrorCallback>
}
 8005a26:	e04a      	b.n	8005abe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d045      	beq.n	8005abe <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <HAL_SD_IRQHandler+0x262>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d011      	beq.n	8005a6a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <HAL_SD_IRQHandler+0x2e4>)
 8005a4c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fc fa44 	bl	8001ee0 <HAL_DMA_Abort_IT>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d02f      	beq.n	8005abe <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fac8 	bl	8005ff8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005a68:	e029      	b.n	8005abe <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <HAL_SD_IRQHandler+0x29a>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d011      	beq.n	8005aa2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	4a12      	ldr	r2, [pc, #72]	; (8005acc <HAL_SD_IRQHandler+0x2e8>)
 8005a84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fc fa28 	bl	8001ee0 <HAL_DMA_Abort_IT>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d013      	beq.n	8005abe <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fae3 	bl	8006066 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005aa0:	e00d      	b.n	8005abe <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f002 fc24 	bl	8008304 <HAL_SD_AbortCallback>
}
 8005abc:	e7ff      	b.n	8005abe <HAL_SD_IRQHandler+0x2da>
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	08005ff9 	.word	0x08005ff9
 8005acc:	08006067 	.word	0x08006067

08005ad0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af2:	0f9b      	lsrs	r3, r3, #30
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afe:	0e9b      	lsrs	r3, r3, #26
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b10:	0e1b      	lsrs	r3, r3, #24
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f003 0303 	and.w	r3, r3, #3
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2e:	0a1b      	lsrs	r3, r3, #8
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b44:	0d1b      	lsrs	r3, r3, #20
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b62:	0bdb      	lsrs	r3, r3, #15
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b74:	0b9b      	lsrs	r3, r3, #14
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b86:	0b5b      	lsrs	r3, r3, #13
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b98:	0b1b      	lsrs	r3, r3, #12
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d163      	bne.n	8005c7c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb8:	009a      	lsls	r2, r3, #2
 8005bba:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005bc4:	0f92      	lsrs	r2, r2, #30
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd0:	0edb      	lsrs	r3, r3, #27
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be2:	0e1b      	lsrs	r3, r3, #24
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf4:	0d5b      	lsrs	r3, r3, #21
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c06:	0c9b      	lsrs	r3, r3, #18
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c18:	0bdb      	lsrs	r3, r3, #15
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	7e1b      	ldrb	r3, [r3, #24]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	3302      	adds	r3, #2
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c46:	fb03 f202 	mul.w	r2, r3, r2
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	7a1b      	ldrb	r3, [r3, #8]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	2201      	movs	r2, #1
 8005c5a:	409a      	lsls	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c68:	0a52      	lsrs	r2, r2, #9
 8005c6a:	fb03 f202 	mul.w	r2, r3, r2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c78:	661a      	str	r2, [r3, #96]	; 0x60
 8005c7a:	e031      	b.n	8005ce0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d11d      	bne.n	8005cc0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c88:	041b      	lsls	r3, r3, #16
 8005c8a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c92:	0c1b      	lsrs	r3, r3, #16
 8005c94:	431a      	orrs	r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	029a      	lsls	r2, r3, #10
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
 8005cbe:	e00f      	b.n	8005ce0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a58      	ldr	r2, [pc, #352]	; (8005e28 <HAL_SD_GetCardCSD+0x344>)
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e09d      	b.n	8005e1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce4:	0b9b      	lsrs	r3, r3, #14
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf6:	09db      	lsrs	r3, r3, #7
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	0fdb      	lsrs	r3, r3, #31
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d24:	0f5b      	lsrs	r3, r3, #29
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	0e9b      	lsrs	r3, r3, #26
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	0d9b      	lsrs	r3, r3, #22
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	0d5b      	lsrs	r3, r3, #21
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d76:	0c1b      	lsrs	r3, r3, #16
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	0bdb      	lsrs	r3, r3, #15
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	0b9b      	lsrs	r3, r3, #14
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db2:	0b5b      	lsrs	r3, r3, #13
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc6:	0b1b      	lsrs	r3, r3, #12
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dda:	0a9b      	lsrs	r3, r3, #10
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	004005ff 	.word	0x004005ff

08005e2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005e84:	b5b0      	push	{r4, r5, r7, lr}
 8005e86:	b08e      	sub	sp, #56	; 0x38
 8005e88:	af04      	add	r7, sp, #16
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2203      	movs	r2, #3
 8005e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d02e      	beq.n	8005f02 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eaa:	d106      	bne.n	8005eba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
 8005eb8:	e029      	b.n	8005f0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa8a 	bl	80063dc <SD_WideBus_Enable>
 8005ec8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
 8005ed6:	e01a      	b.n	8005f0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fac7 	bl	8006472 <SD_WideBus_Disable>
 8005ee4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ef2:	e00c      	b.n	8005f0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
 8005f00:	e005      	b.n	8005f0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a26      	ldr	r2, [pc, #152]	; (8005fb4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f2c:	e01f      	b.n	8005f6e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681d      	ldr	r5, [r3, #0]
 8005f54:	466c      	mov	r4, sp
 8005f56:	f107 0314 	add.w	r3, r7, #20
 8005f5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f62:	f107 0308 	add.w	r3, r7, #8
 8005f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f001 fbbd 	bl	80076e8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 fc91 	bl	800789e <SDMMC_CmdBlockLength>
 8005f7c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00c      	beq.n	8005f9e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a0a      	ldr	r2, [pc, #40]	; (8005fb4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3728      	adds	r7, #40	; 0x28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	004005ff 	.word	0x004005ff

08005fb8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005fc4:	f107 030c 	add.w	r3, r7, #12
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f9de 	bl	800638c <SD_SendStatus>
 8005fd0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	0a5b      	lsrs	r3, r3, #9
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005fee:	693b      	ldr	r3, [r7, #16]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f240 523a 	movw	r2, #1338	; 0x53a
 800600e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff ffd1 	bl	8005fb8 <HAL_SD_GetCardState>
 8006016:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b06      	cmp	r3, #6
 800602a:	d002      	beq.n	8006032 <SD_DMATxAbort+0x3a>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b05      	cmp	r3, #5
 8006030:	d10a      	bne.n	8006048 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f001 fcdc 	bl	80079f4 <SDMMC_CmdStopTransfer>
 800603c:	4602      	mov	r2, r0
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	431a      	orrs	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	d103      	bne.n	8006058 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f002 f957 	bl	8008304 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006056:	e002      	b.n	800605e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fd39 	bl	8005ad0 <HAL_SD_ErrorCallback>
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f240 523a 	movw	r2, #1338	; 0x53a
 800607c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff ff9a 	bl	8005fb8 <HAL_SD_GetCardState>
 8006084:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b06      	cmp	r3, #6
 8006098:	d002      	beq.n	80060a0 <SD_DMARxAbort+0x3a>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b05      	cmp	r3, #5
 800609e:	d10a      	bne.n	80060b6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f001 fca5 	bl	80079f4 <SDMMC_CmdStopTransfer>
 80060aa:	4602      	mov	r2, r0
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	431a      	orrs	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d103      	bne.n	80060c6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f002 f920 	bl	8008304 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80060c4:	e002      	b.n	80060cc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7ff fd02 	bl	8005ad0 <HAL_SD_ErrorCallback>
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060d4:	b5b0      	push	{r4, r5, r7, lr}
 80060d6:	b094      	sub	sp, #80	; 0x50
 80060d8:	af04      	add	r7, sp, #16
 80060da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80060dc:	2301      	movs	r3, #1
 80060de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 fb56 	bl	8007796 <SDIO_GetPowerState>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80060f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80060f4:	e0b8      	b.n	8006268 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d02f      	beq.n	800615e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fd80 	bl	8007c08 <SDMMC_CmdSendCID>
 8006108:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800610a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <SD_InitCard+0x40>
    {
      return errorstate;
 8006110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006112:	e0a9      	b.n	8006268 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2100      	movs	r1, #0
 800611a:	4618      	mov	r0, r3
 800611c:	f001 fb80 	bl	8007820 <SDIO_GetResponse>
 8006120:	4602      	mov	r2, r0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2104      	movs	r1, #4
 800612c:	4618      	mov	r0, r3
 800612e:	f001 fb77 	bl	8007820 <SDIO_GetResponse>
 8006132:	4602      	mov	r2, r0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2108      	movs	r1, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f001 fb6e 	bl	8007820 <SDIO_GetResponse>
 8006144:	4602      	mov	r2, r0
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	210c      	movs	r1, #12
 8006150:	4618      	mov	r0, r3
 8006152:	f001 fb65 	bl	8007820 <SDIO_GetResponse>
 8006156:	4602      	mov	r2, r0
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	2b03      	cmp	r3, #3
 8006164:	d00d      	beq.n	8006182 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f107 020e 	add.w	r2, r7, #14
 800616e:	4611      	mov	r1, r2
 8006170:	4618      	mov	r0, r3
 8006172:	f001 fd86 	bl	8007c82 <SDMMC_CmdSetRelAdd>
 8006176:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <SD_InitCard+0xae>
    {
      return errorstate;
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006180:	e072      	b.n	8006268 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	2b03      	cmp	r3, #3
 8006188:	d036      	beq.n	80061f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800618a:	89fb      	ldrh	r3, [r7, #14]
 800618c:	461a      	mov	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f001 fd50 	bl	8007c44 <SDMMC_CmdSendCSD>
 80061a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80061ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ae:	e05b      	b.n	8006268 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 fb32 	bl	8007820 <SDIO_GetResponse>
 80061bc:	4602      	mov	r2, r0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2104      	movs	r1, #4
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 fb29 	bl	8007820 <SDIO_GetResponse>
 80061ce:	4602      	mov	r2, r0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2108      	movs	r1, #8
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 fb20 	bl	8007820 <SDIO_GetResponse>
 80061e0:	4602      	mov	r2, r0
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	210c      	movs	r1, #12
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 fb17 	bl	8007820 <SDIO_GetResponse>
 80061f2:	4602      	mov	r2, r0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2104      	movs	r1, #4
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 fb0e 	bl	8007820 <SDIO_GetResponse>
 8006204:	4603      	mov	r3, r0
 8006206:	0d1a      	lsrs	r2, r3, #20
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800620c:	f107 0310 	add.w	r3, r7, #16
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fc66 	bl	8005ae4 <HAL_SD_GetCardCSD>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800621e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006222:	e021      	b.n	8006268 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6819      	ldr	r1, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622c:	041b      	lsls	r3, r3, #16
 800622e:	2200      	movs	r2, #0
 8006230:	461c      	mov	r4, r3
 8006232:	4615      	mov	r5, r2
 8006234:	4622      	mov	r2, r4
 8006236:	462b      	mov	r3, r5
 8006238:	4608      	mov	r0, r1
 800623a:	f001 fbfd 	bl	8007a38 <SDMMC_CmdSelDesel>
 800623e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <SD_InitCard+0x176>
  {
    return errorstate;
 8006246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006248:	e00e      	b.n	8006268 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681d      	ldr	r5, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	466c      	mov	r4, sp
 8006252:	f103 0210 	add.w	r2, r3, #16
 8006256:	ca07      	ldmia	r2, {r0, r1, r2}
 8006258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800625c:	3304      	adds	r3, #4
 800625e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006260:	4628      	mov	r0, r5
 8006262:	f001 fa41 	bl	80076e8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3740      	adds	r7, #64	; 0x40
 800626c:	46bd      	mov	sp, r7
 800626e:	bdb0      	pop	{r4, r5, r7, pc}

08006270 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	2300      	movs	r3, #0
 8006282:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f001 fbf8 	bl	8007a7e <SDMMC_CmdGoIdleState>
 800628e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	e072      	b.n	8006380 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 fc0b 	bl	8007aba <SDMMC_CmdOperCond>
 80062a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00d      	beq.n	80062c8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fbe1 	bl	8007a7e <SDMMC_CmdGoIdleState>
 80062bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <SD_PowerON+0x5e>
    {
      return errorstate;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	e05b      	b.n	8006380 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d137      	bne.n	8006346 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2100      	movs	r1, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 fc0b 	bl	8007af8 <SDMMC_CmdAppCommand>
 80062e2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d02d      	beq.n	8006346 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062ee:	e047      	b.n	8006380 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2100      	movs	r1, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 fbfe 	bl	8007af8 <SDMMC_CmdAppCommand>
 80062fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <SD_PowerON+0x98>
    {
      return errorstate;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	e03b      	b.n	8006380 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	491e      	ldr	r1, [pc, #120]	; (8006388 <SD_PowerON+0x118>)
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fc14 	bl	8007b3c <SDMMC_CmdAppOperCommand>
 8006314:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800631c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006320:	e02e      	b.n	8006380 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2100      	movs	r1, #0
 8006328:	4618      	mov	r0, r3
 800632a:	f001 fa79 	bl	8007820 <SDIO_GetResponse>
 800632e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	0fdb      	lsrs	r3, r3, #31
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <SD_PowerON+0xcc>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <SD_PowerON+0xce>
 800633c:	2300      	movs	r3, #0
 800633e:	613b      	str	r3, [r7, #16]

    count++;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	3301      	adds	r3, #1
 8006344:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800634c:	4293      	cmp	r3, r2
 800634e:	d802      	bhi.n	8006356 <SD_PowerON+0xe6>
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0cc      	beq.n	80062f0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800635c:	4293      	cmp	r3, r2
 800635e:	d902      	bls.n	8006366 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006364:	e00c      	b.n	8006380 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	645a      	str	r2, [r3, #68]	; 0x44
 8006376:	e002      	b.n	800637e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	c1100000 	.word	0xc1100000

0800638c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d102      	bne.n	80063a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800639c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063a0:	e018      	b.n	80063d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063aa:	041b      	lsls	r3, r3, #16
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f001 fc88 	bl	8007cc4 <SDMMC_CmdSendStatus>
 80063b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	e009      	b.n	80063d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 fa2a 	bl	8007820 <SDIO_GetResponse>
 80063cc:	4602      	mov	r2, r0
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2100      	movs	r1, #0
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 fa14 	bl	8007820 <SDIO_GetResponse>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006402:	d102      	bne.n	800640a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006408:	e02f      	b.n	800646a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800640a:	f107 030c 	add.w	r3, r7, #12
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f879 	bl	8006508 <SD_FindSCR>
 8006416:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	e023      	b.n	800646a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01c      	beq.n	8006466 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006434:	041b      	lsls	r3, r3, #16
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f001 fb5d 	bl	8007af8 <SDMMC_CmdAppCommand>
 800643e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	e00f      	b.n	800646a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2102      	movs	r1, #2
 8006450:	4618      	mov	r0, r3
 8006452:	f001 fb96 	bl	8007b82 <SDMMC_CmdBusWidth>
 8006456:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	e003      	b.n	800646a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006462:	2300      	movs	r3, #0
 8006464:	e001      	b.n	800646a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006466:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b086      	sub	sp, #24
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	2300      	movs	r3, #0
 8006480:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2100      	movs	r1, #0
 8006488:	4618      	mov	r0, r3
 800648a:	f001 f9c9 	bl	8007820 <SDIO_GetResponse>
 800648e:	4603      	mov	r3, r0
 8006490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006498:	d102      	bne.n	80064a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800649a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800649e:	e02f      	b.n	8006500 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064a0:	f107 030c 	add.w	r3, r7, #12
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f82e 	bl	8006508 <SD_FindSCR>
 80064ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	e023      	b.n	8006500 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01c      	beq.n	80064fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ca:	041b      	lsls	r3, r3, #16
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f001 fb12 	bl	8007af8 <SDMMC_CmdAppCommand>
 80064d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	e00f      	b.n	8006500 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2100      	movs	r1, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 fb4b 	bl	8007b82 <SDMMC_CmdBusWidth>
 80064ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	e003      	b.n	8006500 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	e001      	b.n	8006500 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006508:	b590      	push	{r4, r7, lr}
 800650a:	b08f      	sub	sp, #60	; 0x3c
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006512:	f7fb fa11 	bl	8001938 <HAL_GetTick>
 8006516:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800651c:	2300      	movs	r3, #0
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2108      	movs	r1, #8
 800652e:	4618      	mov	r0, r3
 8006530:	f001 f9b5 	bl	800789e <SDMMC_CmdBlockLength>
 8006534:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <SD_FindSCR+0x38>
  {
    return errorstate;
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	e0b2      	b.n	80066a6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006548:	041b      	lsls	r3, r3, #16
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f001 fad3 	bl	8007af8 <SDMMC_CmdAppCommand>
 8006552:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <SD_FindSCR+0x56>
  {
    return errorstate;
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	e0a3      	b.n	80066a6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800655e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006562:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006564:	2308      	movs	r3, #8
 8006566:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006568:	2330      	movs	r3, #48	; 0x30
 800656a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800656c:	2302      	movs	r3, #2
 800656e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006570:	2300      	movs	r3, #0
 8006572:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006574:	2301      	movs	r3, #1
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f107 0210 	add.w	r2, r7, #16
 8006580:	4611      	mov	r1, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f001 f95f 	bl	8007846 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fb1a 	bl	8007bc6 <SDMMC_CmdSendSCR>
 8006592:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	d02a      	beq.n	80065f0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	e083      	b.n	80066a6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00f      	beq.n	80065cc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6819      	ldr	r1, [r3, #0]
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	f107 0208 	add.w	r2, r7, #8
 80065b8:	18d4      	adds	r4, r2, r3
 80065ba:	4608      	mov	r0, r1
 80065bc:	f001 f8bf 	bl	800773e <SDIO_ReadFIFO>
 80065c0:	4603      	mov	r3, r0
 80065c2:	6023      	str	r3, [r4, #0]
      index++;
 80065c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c6:	3301      	adds	r3, #1
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
 80065ca:	e006      	b.n	80065da <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d012      	beq.n	8006600 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80065da:	f7fb f9ad 	bl	8001938 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e8:	d102      	bne.n	80065f0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80065ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065ee:	e05a      	b.n	80066a6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0cf      	beq.n	800659e <SD_FindSCR+0x96>
 80065fe:	e000      	b.n	8006602 <SD_FindSCR+0xfa>
      break;
 8006600:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2208      	movs	r2, #8
 8006616:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006618:	2308      	movs	r3, #8
 800661a:	e044      	b.n	80066a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d005      	beq.n	8006636 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2202      	movs	r2, #2
 8006630:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006632:	2302      	movs	r3, #2
 8006634:	e037      	b.n	80066a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2220      	movs	r2, #32
 800664a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800664c:	2320      	movs	r3, #32
 800664e:	e02a      	b.n	80066a6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f240 523a 	movw	r2, #1338	; 0x53a
 8006658:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	061a      	lsls	r2, r3, #24
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006666:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	0a1b      	lsrs	r3, r3, #8
 800666c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006670:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	0e1b      	lsrs	r3, r3, #24
 8006676:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	601a      	str	r2, [r3, #0]
    scr++;
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	3304      	adds	r3, #4
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	061a      	lsls	r2, r3, #24
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800668e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006698:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	0e1b      	lsrs	r3, r3, #24
 800669e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	373c      	adds	r7, #60	; 0x3c
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd90      	pop	{r4, r7, pc}

080066ae <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b086      	sub	sp, #24
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d03f      	beq.n	8006748 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e033      	b.n	8006736 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 f833 	bl	800773e <SDIO_ReadFIFO>
 80066d8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3301      	adds	r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	0a1b      	lsrs	r3, r3, #8
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3301      	adds	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	3b01      	subs	r3, #1
 8006702:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	0c1b      	lsrs	r3, r3, #16
 8006708:	b2da      	uxtb	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3301      	adds	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3b01      	subs	r3, #1
 8006718:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	0e1b      	lsrs	r3, r3, #24
 800671e:	b2da      	uxtb	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3301      	adds	r3, #1
 8006728:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	3b01      	subs	r3, #1
 800672e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	3301      	adds	r3, #1
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b07      	cmp	r3, #7
 800673a:	d9c8      	bls.n	80066ce <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006748:	bf00      	nop
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d043      	beq.n	80067f2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	e037      	b.n	80067e0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	3b01      	subs	r3, #1
 8006780:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	021a      	lsls	r2, r3, #8
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4313      	orrs	r3, r2
 800678c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3b01      	subs	r3, #1
 8006798:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	041a      	lsls	r2, r3, #16
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3301      	adds	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	061a      	lsls	r2, r3, #24
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f107 0208 	add.w	r2, r7, #8
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 ffbf 	bl	8007758 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	3301      	adds	r3, #1
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b07      	cmp	r3, #7
 80067e4:	d9c4      	bls.n	8006770 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80067f2:	bf00      	nop
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e03f      	b.n	800688c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d106      	bne.n	8006826 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7fa fef5 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2224      	movs	r2, #36	; 0x24
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800683c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fcde 	bl	8007200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006852:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006862:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006872:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d11d      	bne.n	80068ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_UART_Receive_IT+0x26>
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e016      	b.n	80068ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_UART_Receive_IT+0x38>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e00f      	b.n	80068ec <HAL_UART_Receive_IT+0x58>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	461a      	mov	r2, r3
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 fab5 	bl	8006e50 <UART_Start_Receive_IT>
 80068e6:	4603      	mov	r3, r0
 80068e8:	e000      	b.n	80068ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80068ea:	2302      	movs	r3, #2
  }
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b0ba      	sub	sp, #232	; 0xe8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800691a:	2300      	movs	r3, #0
 800691c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006920:	2300      	movs	r3, #0
 8006922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10f      	bne.n	800695a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800693a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <HAL_UART_IRQHandler+0x66>
 8006946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fb99 	bl	800708a <UART_Receive_IT>
      return;
 8006958:	e256      	b.n	8006e08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800695a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 80de 	beq.w	8006b20 <HAL_UART_IRQHandler+0x22c>
 8006964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80d1 	beq.w	8006b20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800697e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <HAL_UART_IRQHandler+0xae>
 800698a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f043 0201 	orr.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <HAL_UART_IRQHandler+0xd2>
 80069ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f043 0202 	orr.w	r2, r3, #2
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00b      	beq.n	80069ea <HAL_UART_IRQHandler+0xf6>
 80069d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	f043 0204 	orr.w	r2, r3, #4
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d011      	beq.n	8006a1a <HAL_UART_IRQHandler+0x126>
 80069f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d105      	bne.n	8006a0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	f043 0208 	orr.w	r2, r3, #8
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 81ed 	beq.w	8006dfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <HAL_UART_IRQHandler+0x14e>
 8006a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fb24 	bl	800708a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	bf0c      	ite	eq
 8006a50:	2301      	moveq	r3, #1
 8006a52:	2300      	movne	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d103      	bne.n	8006a6e <HAL_UART_IRQHandler+0x17a>
 8006a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d04f      	beq.n	8006b0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa2c 	bl	8006ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d141      	bne.n	8006b06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3314      	adds	r3, #20
 8006a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3314      	adds	r3, #20
 8006aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1d9      	bne.n	8006a82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d013      	beq.n	8006afe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	4a7d      	ldr	r2, [pc, #500]	; (8006cd0 <HAL_UART_IRQHandler+0x3dc>)
 8006adc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fb f9fc 	bl	8001ee0 <HAL_DMA_Abort_IT>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d016      	beq.n	8006b1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afc:	e00e      	b.n	8006b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f990 	bl	8006e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b04:	e00a      	b.n	8006b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f98c 	bl	8006e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0c:	e006      	b.n	8006b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f988 	bl	8006e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b1a:	e170      	b.n	8006dfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1c:	bf00      	nop
    return;
 8006b1e:	e16e      	b.n	8006dfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	f040 814a 	bne.w	8006dbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2e:	f003 0310 	and.w	r3, r3, #16
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 8143 	beq.w	8006dbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 813c 	beq.w	8006dbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b46:	2300      	movs	r3, #0
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b66:	2b40      	cmp	r3, #64	; 0x40
 8006b68:	f040 80b4 	bne.w	8006cd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8140 	beq.w	8006e02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	f080 8139 	bcs.w	8006e02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba2:	f000 8088 	beq.w	8006cb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	330c      	adds	r3, #12
 8006bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1d9      	bne.n	8006ba6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3314      	adds	r3, #20
 8006bf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3314      	adds	r3, #20
 8006c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e1      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3314      	adds	r3, #20
 8006c34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e3      	bne.n	8006c2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	330c      	adds	r3, #12
 8006c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c86:	f023 0310 	bic.w	r3, r3, #16
 8006c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	330c      	adds	r3, #12
 8006c94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c98:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e3      	bne.n	8006c74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fb f8a5 	bl	8001e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f8b6 	bl	8006e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ccc:	e099      	b.n	8006e02 <HAL_UART_IRQHandler+0x50e>
 8006cce:	bf00      	nop
 8006cd0:	08006f93 	.word	0x08006f93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 808b 	beq.w	8006e06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 8086 	beq.w	8006e06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	330c      	adds	r3, #12
 8006d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	330c      	adds	r3, #12
 8006d1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d1e:	647a      	str	r2, [r7, #68]	; 0x44
 8006d20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e3      	bne.n	8006cfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3314      	adds	r3, #20
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	623b      	str	r3, [r7, #32]
   return(result);
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3314      	adds	r3, #20
 8006d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d56:	633a      	str	r2, [r7, #48]	; 0x30
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e3      	bne.n	8006d32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	330c      	adds	r3, #12
 8006d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0310 	bic.w	r3, r3, #16
 8006d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	330c      	adds	r3, #12
 8006d98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d9c:	61fa      	str	r2, [r7, #28]
 8006d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	69b9      	ldr	r1, [r7, #24]
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	617b      	str	r3, [r7, #20]
   return(result);
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e3      	bne.n	8006d78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f83e 	bl	8006e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dbc:	e023      	b.n	8006e06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <HAL_UART_IRQHandler+0x4ea>
 8006dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f8ef 	bl	8006fba <UART_Transmit_IT>
    return;
 8006ddc:	e014      	b.n	8006e08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00e      	beq.n	8006e08 <HAL_UART_IRQHandler+0x514>
 8006dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d008      	beq.n	8006e08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f92f 	bl	800705a <UART_EndTransmit_IT>
    return;
 8006dfc:	e004      	b.n	8006e08 <HAL_UART_IRQHandler+0x514>
    return;
 8006dfe:	bf00      	nop
 8006e00:	e002      	b.n	8006e08 <HAL_UART_IRQHandler+0x514>
      return;
 8006e02:	bf00      	nop
 8006e04:	e000      	b.n	8006e08 <HAL_UART_IRQHandler+0x514>
      return;
 8006e06:	bf00      	nop
  }
}
 8006e08:	37e8      	adds	r7, #232	; 0xe8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop

08006e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	88fa      	ldrh	r2, [r7, #6]
 8006e68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	88fa      	ldrh	r2, [r7, #6]
 8006e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2222      	movs	r2, #34	; 0x22
 8006e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	695a      	ldr	r2, [r3, #20]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f042 0201 	orr.w	r2, r2, #1
 8006eac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0220 	orr.w	r2, r2, #32
 8006ebc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b095      	sub	sp, #84	; 0x54
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ef4:	643a      	str	r2, [r7, #64]	; 0x40
 8006ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e5      	bne.n	8006ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3314      	adds	r3, #20
 8006f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3314      	adds	r3, #20
 8006f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e5      	bne.n	8006f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d119      	bne.n	8006f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330c      	adds	r3, #12
 8006f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f023 0310 	bic.w	r3, r3, #16
 8006f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	330c      	adds	r3, #12
 8006f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f64:	61ba      	str	r2, [r7, #24]
 8006f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6979      	ldr	r1, [r7, #20]
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	613b      	str	r3, [r7, #16]
   return(result);
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e5      	bne.n	8006f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f86:	bf00      	nop
 8006f88:	3754      	adds	r7, #84	; 0x54
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7ff ff39 	bl	8006e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b21      	cmp	r3, #33	; 0x21
 8006fcc:	d13e      	bne.n	800704c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd6:	d114      	bne.n	8007002 <UART_Transmit_IT+0x48>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d110      	bne.n	8007002 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ff4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	1c9a      	adds	r2, r3, #2
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	621a      	str	r2, [r3, #32]
 8007000:	e008      	b.n	8007014 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	1c59      	adds	r1, r3, #1
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	6211      	str	r1, [r2, #32]
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29b      	uxth	r3, r3
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	4619      	mov	r1, r3
 8007022:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10f      	bne.n	8007048 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007036:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007046:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	e000      	b.n	800704e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800704c:	2302      	movs	r3, #2
  }
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff fec8 	bl	8006e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b08c      	sub	sp, #48	; 0x30
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b22      	cmp	r3, #34	; 0x22
 800709c:	f040 80ab 	bne.w	80071f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a8:	d117      	bne.n	80070da <UART_Receive_IT+0x50>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d113      	bne.n	80070da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	1c9a      	adds	r2, r3, #2
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	629a      	str	r2, [r3, #40]	; 0x28
 80070d8:	e026      	b.n	8007128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ec:	d007      	beq.n	80070fe <UART_Receive_IT+0x74>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <UART_Receive_IT+0x82>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	b2da      	uxtb	r2, r3
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	e008      	b.n	800711e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007118:	b2da      	uxtb	r2, r3
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29b      	uxth	r3, r3
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	4619      	mov	r1, r3
 8007136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007138:	2b00      	cmp	r3, #0
 800713a:	d15a      	bne.n	80071f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0220 	bic.w	r2, r2, #32
 800714a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800715a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	2b01      	cmp	r3, #1
 800717a:	d135      	bne.n	80071e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	330c      	adds	r3, #12
 8007188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	613b      	str	r3, [r7, #16]
   return(result);
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f023 0310 	bic.w	r3, r3, #16
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a2:	623a      	str	r2, [r7, #32]
 80071a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	69f9      	ldr	r1, [r7, #28]
 80071a8:	6a3a      	ldr	r2, [r7, #32]
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e5      	bne.n	8007182 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d10a      	bne.n	80071da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff fe29 	bl	8006e38 <HAL_UARTEx_RxEventCallback>
 80071e6:	e002      	b.n	80071ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7f9 ffbb 	bl	8001164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e002      	b.n	80071f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	e000      	b.n	80071f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80071f6:	2302      	movs	r3, #2
  }
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3730      	adds	r7, #48	; 0x30
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007204:	b0c0      	sub	sp, #256	; 0x100
 8007206:	af00      	add	r7, sp, #0
 8007208:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721c:	68d9      	ldr	r1, [r3, #12]
 800721e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	ea40 0301 	orr.w	r3, r0, r1
 8007228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800722a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	431a      	orrs	r2, r3
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	431a      	orrs	r2, r3
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800724c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007258:	f021 010c 	bic.w	r1, r1, #12
 800725c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007266:	430b      	orrs	r3, r1
 8007268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800726a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727a:	6999      	ldr	r1, [r3, #24]
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	ea40 0301 	orr.w	r3, r0, r1
 8007286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	4b8f      	ldr	r3, [pc, #572]	; (80074cc <UART_SetConfig+0x2cc>)
 8007290:	429a      	cmp	r2, r3
 8007292:	d005      	beq.n	80072a0 <UART_SetConfig+0xa0>
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b8d      	ldr	r3, [pc, #564]	; (80074d0 <UART_SetConfig+0x2d0>)
 800729c:	429a      	cmp	r2, r3
 800729e:	d104      	bne.n	80072aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072a0:	f7fc fc40 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 80072a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072a8:	e003      	b.n	80072b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072aa:	f7fc fc27 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 80072ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072bc:	f040 810c 	bne.w	80074d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072d2:	4622      	mov	r2, r4
 80072d4:	462b      	mov	r3, r5
 80072d6:	1891      	adds	r1, r2, r2
 80072d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80072da:	415b      	adcs	r3, r3
 80072dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072e2:	4621      	mov	r1, r4
 80072e4:	eb12 0801 	adds.w	r8, r2, r1
 80072e8:	4629      	mov	r1, r5
 80072ea:	eb43 0901 	adc.w	r9, r3, r1
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007302:	4690      	mov	r8, r2
 8007304:	4699      	mov	r9, r3
 8007306:	4623      	mov	r3, r4
 8007308:	eb18 0303 	adds.w	r3, r8, r3
 800730c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007310:	462b      	mov	r3, r5
 8007312:	eb49 0303 	adc.w	r3, r9, r3
 8007316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800731a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007326:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800732a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800732e:	460b      	mov	r3, r1
 8007330:	18db      	adds	r3, r3, r3
 8007332:	653b      	str	r3, [r7, #80]	; 0x50
 8007334:	4613      	mov	r3, r2
 8007336:	eb42 0303 	adc.w	r3, r2, r3
 800733a:	657b      	str	r3, [r7, #84]	; 0x54
 800733c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007344:	f7f8 ffc4 	bl	80002d0 <__aeabi_uldivmod>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4b61      	ldr	r3, [pc, #388]	; (80074d4 <UART_SetConfig+0x2d4>)
 800734e:	fba3 2302 	umull	r2, r3, r3, r2
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	011c      	lsls	r4, r3, #4
 8007356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800735a:	2200      	movs	r2, #0
 800735c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007360:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007368:	4642      	mov	r2, r8
 800736a:	464b      	mov	r3, r9
 800736c:	1891      	adds	r1, r2, r2
 800736e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007370:	415b      	adcs	r3, r3
 8007372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007378:	4641      	mov	r1, r8
 800737a:	eb12 0a01 	adds.w	sl, r2, r1
 800737e:	4649      	mov	r1, r9
 8007380:	eb43 0b01 	adc.w	fp, r3, r1
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007398:	4692      	mov	sl, r2
 800739a:	469b      	mov	fp, r3
 800739c:	4643      	mov	r3, r8
 800739e:	eb1a 0303 	adds.w	r3, sl, r3
 80073a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073a6:	464b      	mov	r3, r9
 80073a8:	eb4b 0303 	adc.w	r3, fp, r3
 80073ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073c4:	460b      	mov	r3, r1
 80073c6:	18db      	adds	r3, r3, r3
 80073c8:	643b      	str	r3, [r7, #64]	; 0x40
 80073ca:	4613      	mov	r3, r2
 80073cc:	eb42 0303 	adc.w	r3, r2, r3
 80073d0:	647b      	str	r3, [r7, #68]	; 0x44
 80073d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073da:	f7f8 ff79 	bl	80002d0 <__aeabi_uldivmod>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4611      	mov	r1, r2
 80073e4:	4b3b      	ldr	r3, [pc, #236]	; (80074d4 <UART_SetConfig+0x2d4>)
 80073e6:	fba3 2301 	umull	r2, r3, r3, r1
 80073ea:	095b      	lsrs	r3, r3, #5
 80073ec:	2264      	movs	r2, #100	; 0x64
 80073ee:	fb02 f303 	mul.w	r3, r2, r3
 80073f2:	1acb      	subs	r3, r1, r3
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073fa:	4b36      	ldr	r3, [pc, #216]	; (80074d4 <UART_SetConfig+0x2d4>)
 80073fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007408:	441c      	add	r4, r3
 800740a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800740e:	2200      	movs	r2, #0
 8007410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007414:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800741c:	4642      	mov	r2, r8
 800741e:	464b      	mov	r3, r9
 8007420:	1891      	adds	r1, r2, r2
 8007422:	63b9      	str	r1, [r7, #56]	; 0x38
 8007424:	415b      	adcs	r3, r3
 8007426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800742c:	4641      	mov	r1, r8
 800742e:	1851      	adds	r1, r2, r1
 8007430:	6339      	str	r1, [r7, #48]	; 0x30
 8007432:	4649      	mov	r1, r9
 8007434:	414b      	adcs	r3, r1
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007444:	4659      	mov	r1, fp
 8007446:	00cb      	lsls	r3, r1, #3
 8007448:	4651      	mov	r1, sl
 800744a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800744e:	4651      	mov	r1, sl
 8007450:	00ca      	lsls	r2, r1, #3
 8007452:	4610      	mov	r0, r2
 8007454:	4619      	mov	r1, r3
 8007456:	4603      	mov	r3, r0
 8007458:	4642      	mov	r2, r8
 800745a:	189b      	adds	r3, r3, r2
 800745c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007460:	464b      	mov	r3, r9
 8007462:	460a      	mov	r2, r1
 8007464:	eb42 0303 	adc.w	r3, r2, r3
 8007468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007478:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800747c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007480:	460b      	mov	r3, r1
 8007482:	18db      	adds	r3, r3, r3
 8007484:	62bb      	str	r3, [r7, #40]	; 0x28
 8007486:	4613      	mov	r3, r2
 8007488:	eb42 0303 	adc.w	r3, r2, r3
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800748e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007496:	f7f8 ff1b 	bl	80002d0 <__aeabi_uldivmod>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <UART_SetConfig+0x2d4>)
 80074a0:	fba3 1302 	umull	r1, r3, r3, r2
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	2164      	movs	r1, #100	; 0x64
 80074a8:	fb01 f303 	mul.w	r3, r1, r3
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	3332      	adds	r3, #50	; 0x32
 80074b2:	4a08      	ldr	r2, [pc, #32]	; (80074d4 <UART_SetConfig+0x2d4>)
 80074b4:	fba2 2303 	umull	r2, r3, r2, r3
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	f003 0207 	and.w	r2, r3, #7
 80074be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4422      	add	r2, r4
 80074c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074c8:	e105      	b.n	80076d6 <UART_SetConfig+0x4d6>
 80074ca:	bf00      	nop
 80074cc:	40011000 	.word	0x40011000
 80074d0:	40011400 	.word	0x40011400
 80074d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074dc:	2200      	movs	r2, #0
 80074de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074ea:	4642      	mov	r2, r8
 80074ec:	464b      	mov	r3, r9
 80074ee:	1891      	adds	r1, r2, r2
 80074f0:	6239      	str	r1, [r7, #32]
 80074f2:	415b      	adcs	r3, r3
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
 80074f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074fa:	4641      	mov	r1, r8
 80074fc:	1854      	adds	r4, r2, r1
 80074fe:	4649      	mov	r1, r9
 8007500:	eb43 0501 	adc.w	r5, r3, r1
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	00eb      	lsls	r3, r5, #3
 800750e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007512:	00e2      	lsls	r2, r4, #3
 8007514:	4614      	mov	r4, r2
 8007516:	461d      	mov	r5, r3
 8007518:	4643      	mov	r3, r8
 800751a:	18e3      	adds	r3, r4, r3
 800751c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007520:	464b      	mov	r3, r9
 8007522:	eb45 0303 	adc.w	r3, r5, r3
 8007526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800752a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800753a:	f04f 0200 	mov.w	r2, #0
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007546:	4629      	mov	r1, r5
 8007548:	008b      	lsls	r3, r1, #2
 800754a:	4621      	mov	r1, r4
 800754c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007550:	4621      	mov	r1, r4
 8007552:	008a      	lsls	r2, r1, #2
 8007554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007558:	f7f8 feba 	bl	80002d0 <__aeabi_uldivmod>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4b60      	ldr	r3, [pc, #384]	; (80076e4 <UART_SetConfig+0x4e4>)
 8007562:	fba3 2302 	umull	r2, r3, r3, r2
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	011c      	lsls	r4, r3, #4
 800756a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800756e:	2200      	movs	r2, #0
 8007570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007574:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800757c:	4642      	mov	r2, r8
 800757e:	464b      	mov	r3, r9
 8007580:	1891      	adds	r1, r2, r2
 8007582:	61b9      	str	r1, [r7, #24]
 8007584:	415b      	adcs	r3, r3
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800758c:	4641      	mov	r1, r8
 800758e:	1851      	adds	r1, r2, r1
 8007590:	6139      	str	r1, [r7, #16]
 8007592:	4649      	mov	r1, r9
 8007594:	414b      	adcs	r3, r1
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075a4:	4659      	mov	r1, fp
 80075a6:	00cb      	lsls	r3, r1, #3
 80075a8:	4651      	mov	r1, sl
 80075aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ae:	4651      	mov	r1, sl
 80075b0:	00ca      	lsls	r2, r1, #3
 80075b2:	4610      	mov	r0, r2
 80075b4:	4619      	mov	r1, r3
 80075b6:	4603      	mov	r3, r0
 80075b8:	4642      	mov	r2, r8
 80075ba:	189b      	adds	r3, r3, r2
 80075bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075c0:	464b      	mov	r3, r9
 80075c2:	460a      	mov	r2, r1
 80075c4:	eb42 0303 	adc.w	r3, r2, r3
 80075c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80075d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075e4:	4649      	mov	r1, r9
 80075e6:	008b      	lsls	r3, r1, #2
 80075e8:	4641      	mov	r1, r8
 80075ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ee:	4641      	mov	r1, r8
 80075f0:	008a      	lsls	r2, r1, #2
 80075f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075f6:	f7f8 fe6b 	bl	80002d0 <__aeabi_uldivmod>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4b39      	ldr	r3, [pc, #228]	; (80076e4 <UART_SetConfig+0x4e4>)
 8007600:	fba3 1302 	umull	r1, r3, r3, r2
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	2164      	movs	r1, #100	; 0x64
 8007608:	fb01 f303 	mul.w	r3, r1, r3
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	3332      	adds	r3, #50	; 0x32
 8007612:	4a34      	ldr	r2, [pc, #208]	; (80076e4 <UART_SetConfig+0x4e4>)
 8007614:	fba2 2303 	umull	r2, r3, r2, r3
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800761e:	441c      	add	r4, r3
 8007620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007624:	2200      	movs	r2, #0
 8007626:	673b      	str	r3, [r7, #112]	; 0x70
 8007628:	677a      	str	r2, [r7, #116]	; 0x74
 800762a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800762e:	4642      	mov	r2, r8
 8007630:	464b      	mov	r3, r9
 8007632:	1891      	adds	r1, r2, r2
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	415b      	adcs	r3, r3
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800763e:	4641      	mov	r1, r8
 8007640:	1851      	adds	r1, r2, r1
 8007642:	6039      	str	r1, [r7, #0]
 8007644:	4649      	mov	r1, r9
 8007646:	414b      	adcs	r3, r1
 8007648:	607b      	str	r3, [r7, #4]
 800764a:	f04f 0200 	mov.w	r2, #0
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007656:	4659      	mov	r1, fp
 8007658:	00cb      	lsls	r3, r1, #3
 800765a:	4651      	mov	r1, sl
 800765c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007660:	4651      	mov	r1, sl
 8007662:	00ca      	lsls	r2, r1, #3
 8007664:	4610      	mov	r0, r2
 8007666:	4619      	mov	r1, r3
 8007668:	4603      	mov	r3, r0
 800766a:	4642      	mov	r2, r8
 800766c:	189b      	adds	r3, r3, r2
 800766e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007670:	464b      	mov	r3, r9
 8007672:	460a      	mov	r2, r1
 8007674:	eb42 0303 	adc.w	r3, r2, r3
 8007678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800767a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	663b      	str	r3, [r7, #96]	; 0x60
 8007684:	667a      	str	r2, [r7, #100]	; 0x64
 8007686:	f04f 0200 	mov.w	r2, #0
 800768a:	f04f 0300 	mov.w	r3, #0
 800768e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007692:	4649      	mov	r1, r9
 8007694:	008b      	lsls	r3, r1, #2
 8007696:	4641      	mov	r1, r8
 8007698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800769c:	4641      	mov	r1, r8
 800769e:	008a      	lsls	r2, r1, #2
 80076a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076a4:	f7f8 fe14 	bl	80002d0 <__aeabi_uldivmod>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <UART_SetConfig+0x4e4>)
 80076ae:	fba3 1302 	umull	r1, r3, r3, r2
 80076b2:	095b      	lsrs	r3, r3, #5
 80076b4:	2164      	movs	r1, #100	; 0x64
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	3332      	adds	r3, #50	; 0x32
 80076c0:	4a08      	ldr	r2, [pc, #32]	; (80076e4 <UART_SetConfig+0x4e4>)
 80076c2:	fba2 2303 	umull	r2, r3, r2, r3
 80076c6:	095b      	lsrs	r3, r3, #5
 80076c8:	f003 020f 	and.w	r2, r3, #15
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4422      	add	r2, r4
 80076d4:	609a      	str	r2, [r3, #8]
}
 80076d6:	bf00      	nop
 80076d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076dc:	46bd      	mov	sp, r7
 80076de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076e2:	bf00      	nop
 80076e4:	51eb851f 	.word	0x51eb851f

080076e8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80076e8:	b084      	sub	sp, #16
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	f107 001c 	add.w	r0, r7, #28
 80076f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80076fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007700:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007702:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007706:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800770a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800770e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007712:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007722:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	b004      	add	sp, #16
 800773c:	4770      	bx	lr

0800773e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2203      	movs	r2, #3
 8007786:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0303 	and.w	r3, r3, #3
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077d0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80077d6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80077dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80077ec:	f023 030f 	bic.w	r3, r3, #15
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	b2db      	uxtb	r3, r3
}
 8007814:	4618      	mov	r0, r3
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3314      	adds	r3, #20
 800782e:	461a      	mov	r2, r3
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	4413      	add	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
}  
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007846:	b480      	push	{r7}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800786c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007872:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007878:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007890:	2300      	movs	r3, #0

}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b088      	sub	sp, #32
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80078ac:	2310      	movs	r3, #16
 80078ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078b0:	2340      	movs	r3, #64	; 0x40
 80078b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078be:	f107 0308 	add.w	r3, r7, #8
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff ff74 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80078ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ce:	2110      	movs	r1, #16
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fa19 	bl	8007d08 <SDMMC_GetCmdResp1>
 80078d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078d8:	69fb      	ldr	r3, [r7, #28]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b088      	sub	sp, #32
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80078f0:	2311      	movs	r3, #17
 80078f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078f4:	2340      	movs	r3, #64	; 0x40
 80078f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078f8:	2300      	movs	r3, #0
 80078fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007900:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007902:	f107 0308 	add.w	r3, r7, #8
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff ff52 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800790e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007912:	2111      	movs	r1, #17
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f9f7 	bl	8007d08 <SDMMC_GetCmdResp1>
 800791a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800791c:	69fb      	ldr	r3, [r7, #28]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b088      	sub	sp, #32
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007934:	2312      	movs	r3, #18
 8007936:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007938:	2340      	movs	r3, #64	; 0x40
 800793a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800793c:	2300      	movs	r3, #0
 800793e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007944:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007946:	f107 0308 	add.w	r3, r7, #8
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff ff30 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007952:	f241 3288 	movw	r2, #5000	; 0x1388
 8007956:	2112      	movs	r1, #18
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f9d5 	bl	8007d08 <SDMMC_GetCmdResp1>
 800795e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007960:	69fb      	ldr	r3, [r7, #28]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b088      	sub	sp, #32
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007978:	2318      	movs	r3, #24
 800797a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800797c:	2340      	movs	r3, #64	; 0x40
 800797e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007980:	2300      	movs	r3, #0
 8007982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007988:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800798a:	f107 0308 	add.w	r3, r7, #8
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff ff0e 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007996:	f241 3288 	movw	r2, #5000	; 0x1388
 800799a:	2118      	movs	r1, #24
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9b3 	bl	8007d08 <SDMMC_GetCmdResp1>
 80079a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079a4:	69fb      	ldr	r3, [r7, #28]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3720      	adds	r7, #32
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b088      	sub	sp, #32
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80079bc:	2319      	movs	r3, #25
 80079be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079c0:	2340      	movs	r3, #64	; 0x40
 80079c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ce:	f107 0308 	add.w	r3, r7, #8
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff feec 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80079da:	f241 3288 	movw	r2, #5000	; 0x1388
 80079de:	2119      	movs	r1, #25
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f991 	bl	8007d08 <SDMMC_GetCmdResp1>
 80079e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079e8:	69fb      	ldr	r3, [r7, #28]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b088      	sub	sp, #32
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007a00:	230c      	movs	r3, #12
 8007a02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a04:	2340      	movs	r3, #64	; 0x40
 8007a06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a12:	f107 0308 	add.w	r3, r7, #8
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff feca 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007a1e:	4a05      	ldr	r2, [pc, #20]	; (8007a34 <SDMMC_CmdStopTransfer+0x40>)
 8007a20:	210c      	movs	r1, #12
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f970 	bl	8007d08 <SDMMC_GetCmdResp1>
 8007a28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a2a:	69fb      	ldr	r3, [r7, #28]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3720      	adds	r7, #32
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	05f5e100 	.word	0x05f5e100

08007a38 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007a48:	2307      	movs	r3, #7
 8007a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a4c:	2340      	movs	r3, #64	; 0x40
 8007a4e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a58:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a5a:	f107 0310 	add.w	r3, r7, #16
 8007a5e:	4619      	mov	r1, r3
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff fea6 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6a:	2107      	movs	r1, #7
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f94b 	bl	8007d08 <SDMMC_GetCmdResp1>
 8007a72:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3728      	adds	r7, #40	; 0x28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b088      	sub	sp, #32
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a9c:	f107 0308 	add.w	r3, r7, #8
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fe85 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fb65 	bl	8008178 <SDMMC_GetCmdError>
 8007aae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3720      	adds	r7, #32
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b088      	sub	sp, #32
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007ac2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007ac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007ac8:	2308      	movs	r3, #8
 8007aca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ad8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ada:	f107 0308 	add.w	r3, r7, #8
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fe66 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 faf8 	bl	80080dc <SDMMC_GetCmdResp7>
 8007aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007aee:	69fb      	ldr	r3, [r7, #28]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3720      	adds	r7, #32
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007b06:	2337      	movs	r3, #55	; 0x37
 8007b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b0a:	2340      	movs	r3, #64	; 0x40
 8007b0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b18:	f107 0308 	add.w	r3, r7, #8
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff fe47 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b28:	2137      	movs	r1, #55	; 0x37
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8ec 	bl	8007d08 <SDMMC_GetCmdResp1>
 8007b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b32:	69fb      	ldr	r3, [r7, #28]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3720      	adds	r7, #32
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b52:	2329      	movs	r3, #41	; 0x29
 8007b54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b56:	2340      	movs	r3, #64	; 0x40
 8007b58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b64:	f107 0308 	add.w	r3, r7, #8
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff fe21 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f9ff 	bl	8007f74 <SDMMC_GetCmdResp3>
 8007b76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b78:	69fb      	ldr	r3, [r7, #28]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b088      	sub	sp, #32
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007b90:	2306      	movs	r3, #6
 8007b92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b94:	2340      	movs	r3, #64	; 0x40
 8007b96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ba0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ba2:	f107 0308 	add.w	r3, r7, #8
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff fe02 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb2:	2106      	movs	r1, #6
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f8a7 	bl	8007d08 <SDMMC_GetCmdResp1>
 8007bba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3720      	adds	r7, #32
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b088      	sub	sp, #32
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007bd2:	2333      	movs	r3, #51	; 0x33
 8007bd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bd6:	2340      	movs	r3, #64	; 0x40
 8007bd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007be4:	f107 0308 	add.w	r3, r7, #8
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff fde1 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bf4:	2133      	movs	r1, #51	; 0x33
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f886 	bl	8007d08 <SDMMC_GetCmdResp1>
 8007bfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bfe:	69fb      	ldr	r3, [r7, #28]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3720      	adds	r7, #32
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007c14:	2302      	movs	r3, #2
 8007c16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007c18:	23c0      	movs	r3, #192	; 0xc0
 8007c1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c26:	f107 0308 	add.w	r3, r7, #8
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff fdc0 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f956 	bl	8007ee4 <SDMMC_GetCmdResp2>
 8007c38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3720      	adds	r7, #32
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007c52:	2309      	movs	r3, #9
 8007c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007c56:	23c0      	movs	r3, #192	; 0xc0
 8007c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c64:	f107 0308 	add.w	r3, r7, #8
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff fda1 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f937 	bl	8007ee4 <SDMMC_GetCmdResp2>
 8007c76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c78:	69fb      	ldr	r3, [r7, #28]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3720      	adds	r7, #32
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b088      	sub	sp, #32
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007c90:	2303      	movs	r3, #3
 8007c92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c94:	2340      	movs	r3, #64	; 0x40
 8007c96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ca2:	f107 0308 	add.w	r3, r7, #8
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff fd82 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	2103      	movs	r1, #3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f99c 	bl	8007ff0 <SDMMC_GetCmdResp6>
 8007cb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cba:	69fb      	ldr	r3, [r7, #28]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3720      	adds	r7, #32
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007cd2:	230d      	movs	r3, #13
 8007cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cd6:	2340      	movs	r3, #64	; 0x40
 8007cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ce2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ce4:	f107 0308 	add.w	r3, r7, #8
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff fd61 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf4:	210d      	movs	r1, #13
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f806 	bl	8007d08 <SDMMC_GetCmdResp1>
 8007cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	460b      	mov	r3, r1
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007d16:	4b70      	ldr	r3, [pc, #448]	; (8007ed8 <SDMMC_GetCmdResp1+0x1d0>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a70      	ldr	r2, [pc, #448]	; (8007edc <SDMMC_GetCmdResp1+0x1d4>)
 8007d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d20:	0a5a      	lsrs	r2, r3, #9
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	fb02 f303 	mul.w	r3, r2, r3
 8007d28:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	1e5a      	subs	r2, r3, #1
 8007d2e:	61fa      	str	r2, [r7, #28]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d38:	e0c9      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0ef      	beq.n	8007d2a <SDMMC_GetCmdResp1+0x22>
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1ea      	bne.n	8007d2a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2204      	movs	r2, #4
 8007d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d66:	2304      	movs	r3, #4
 8007d68:	e0b1      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d004      	beq.n	8007d80 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e0a6      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	22c5      	movs	r2, #197	; 0xc5
 8007d84:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fd3d 	bl	8007806 <SDIO_GetCommandResponse>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d001      	beq.n	8007d9a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e099      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff fd3f 	bl	8007820 <SDIO_GetResponse>
 8007da2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	4b4e      	ldr	r3, [pc, #312]	; (8007ee0 <SDMMC_GetCmdResp1+0x1d8>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007dae:	2300      	movs	r3, #0
 8007db0:	e08d      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	da02      	bge.n	8007dbe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dbc:	e087      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007dc8:	2340      	movs	r3, #64	; 0x40
 8007dca:	e080      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007dd6:	2380      	movs	r3, #128	; 0x80
 8007dd8:	e079      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007de8:	e071      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007df8:	e069      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e08:	e061      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e18:	e059      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e28:	e051      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e38:	e049      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007e44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e48:	e041      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e58:	e039      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e68:	e031      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007e74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e78:	e029      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007e84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e88:	e021      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007e94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e98:	e019      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007ea4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007ea8:	e011      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007eb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007eb8:	e009      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007ec4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ec8:	e001      	b.n	8007ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3720      	adds	r7, #32
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000004 	.word	0x20000004
 8007edc:	10624dd3 	.word	0x10624dd3
 8007ee0:	fdffe008 	.word	0xfdffe008

08007ee4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007eec:	4b1f      	ldr	r3, [pc, #124]	; (8007f6c <SDMMC_GetCmdResp2+0x88>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a1f      	ldr	r2, [pc, #124]	; (8007f70 <SDMMC_GetCmdResp2+0x8c>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	0a5b      	lsrs	r3, r3, #9
 8007ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efc:	fb02 f303 	mul.w	r3, r2, r3
 8007f00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	1e5a      	subs	r2, r3, #1
 8007f06:	60fa      	str	r2, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d102      	bne.n	8007f12 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f10:	e026      	b.n	8007f60 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0ef      	beq.n	8007f02 <SDMMC_GetCmdResp2+0x1e>
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1ea      	bne.n	8007f02 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f30:	f003 0304 	and.w	r3, r3, #4
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f3e:	2304      	movs	r3, #4
 8007f40:	e00e      	b.n	8007f60 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d004      	beq.n	8007f58 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e003      	b.n	8007f60 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	22c5      	movs	r2, #197	; 0xc5
 8007f5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	20000004 	.word	0x20000004
 8007f70:	10624dd3 	.word	0x10624dd3

08007f74 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f7c:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <SDMMC_GetCmdResp3+0x74>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1a      	ldr	r2, [pc, #104]	; (8007fec <SDMMC_GetCmdResp3+0x78>)
 8007f82:	fba2 2303 	umull	r2, r3, r2, r3
 8007f86:	0a5b      	lsrs	r3, r3, #9
 8007f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8c:	fb02 f303 	mul.w	r3, r2, r3
 8007f90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	1e5a      	subs	r2, r3, #1
 8007f96:	60fa      	str	r2, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fa0:	e01b      	b.n	8007fda <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0ef      	beq.n	8007f92 <SDMMC_GetCmdResp3+0x1e>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1ea      	bne.n	8007f92 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2204      	movs	r2, #4
 8007fcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fce:	2304      	movs	r3, #4
 8007fd0:	e003      	b.n	8007fda <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	22c5      	movs	r2, #197	; 0xc5
 8007fd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20000004 	.word	0x20000004
 8007fec:	10624dd3 	.word	0x10624dd3

08007ff0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ffe:	4b35      	ldr	r3, [pc, #212]	; (80080d4 <SDMMC_GetCmdResp6+0xe4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a35      	ldr	r2, [pc, #212]	; (80080d8 <SDMMC_GetCmdResp6+0xe8>)
 8008004:	fba2 2303 	umull	r2, r3, r2, r3
 8008008:	0a5b      	lsrs	r3, r3, #9
 800800a:	f241 3288 	movw	r2, #5000	; 0x1388
 800800e:	fb02 f303 	mul.w	r3, r2, r3
 8008012:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	1e5a      	subs	r2, r3, #1
 8008018:	61fa      	str	r2, [r7, #28]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800801e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008022:	e052      	b.n	80080ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008028:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0ef      	beq.n	8008014 <SDMMC_GetCmdResp6+0x24>
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1ea      	bne.n	8008014 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008042:	f003 0304 	and.w	r3, r3, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	d004      	beq.n	8008054 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2204      	movs	r2, #4
 800804e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008050:	2304      	movs	r3, #4
 8008052:	e03a      	b.n	80080ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2201      	movs	r2, #1
 8008064:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008066:	2301      	movs	r3, #1
 8008068:	e02f      	b.n	80080ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f7ff fbcb 	bl	8007806 <SDIO_GetCommandResponse>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	7afb      	ldrb	r3, [r7, #11]
 8008076:	4293      	cmp	r3, r2
 8008078:	d001      	beq.n	800807e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800807a:	2301      	movs	r3, #1
 800807c:	e025      	b.n	80080ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	22c5      	movs	r2, #197	; 0xc5
 8008082:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008084:	2100      	movs	r1, #0
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f7ff fbca 	bl	8007820 <SDIO_GetResponse>
 800808c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d106      	bne.n	80080a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	0c1b      	lsrs	r3, r3, #16
 800809c:	b29a      	uxth	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e011      	b.n	80080ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80080b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080b4:	e009      	b.n	80080ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80080c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080c4:	e001      	b.n	80080ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80080c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3720      	adds	r7, #32
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000004 	.word	0x20000004
 80080d8:	10624dd3 	.word	0x10624dd3

080080dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080e4:	4b22      	ldr	r3, [pc, #136]	; (8008170 <SDMMC_GetCmdResp7+0x94>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a22      	ldr	r2, [pc, #136]	; (8008174 <SDMMC_GetCmdResp7+0x98>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	0a5b      	lsrs	r3, r3, #9
 80080f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f4:	fb02 f303 	mul.w	r3, r2, r3
 80080f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	1e5a      	subs	r2, r3, #1
 80080fe:	60fa      	str	r2, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d102      	bne.n	800810a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008108:	e02c      	b.n	8008164 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0ef      	beq.n	80080fa <SDMMC_GetCmdResp7+0x1e>
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1ea      	bne.n	80080fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2204      	movs	r2, #4
 8008134:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008136:	2304      	movs	r3, #4
 8008138:	e014      	b.n	8008164 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d004      	beq.n	8008150 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800814c:	2301      	movs	r3, #1
 800814e:	e009      	b.n	8008164 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2240      	movs	r2, #64	; 0x40
 8008160:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008162:	2300      	movs	r3, #0
  
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	20000004 	.word	0x20000004
 8008174:	10624dd3 	.word	0x10624dd3

08008178 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008180:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <SDMMC_GetCmdError+0x50>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a11      	ldr	r2, [pc, #68]	; (80081cc <SDMMC_GetCmdError+0x54>)
 8008186:	fba2 2303 	umull	r2, r3, r2, r3
 800818a:	0a5b      	lsrs	r3, r3, #9
 800818c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008190:	fb02 f303 	mul.w	r3, r2, r3
 8008194:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	1e5a      	subs	r2, r3, #1
 800819a:	60fa      	str	r2, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081a4:	e009      	b.n	80081ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0f1      	beq.n	8008196 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	22c5      	movs	r2, #197	; 0xc5
 80081b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	20000004 	.word	0x20000004
 80081cc:	10624dd3 	.word	0x10624dd3

080081d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80081d4:	4904      	ldr	r1, [pc, #16]	; (80081e8 <MX_FATFS_Init+0x18>)
 80081d6:	4805      	ldr	r0, [pc, #20]	; (80081ec <MX_FATFS_Init+0x1c>)
 80081d8:	f002 ffe4 	bl	800b1a4 <FATFS_LinkDriver>
 80081dc:	4603      	mov	r3, r0
 80081de:	461a      	mov	r2, r3
 80081e0:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <MX_FATFS_Init+0x20>)
 80081e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081e4:	bf00      	nop
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	20000af4 	.word	0x20000af4
 80081ec:	0800bbf4 	.word	0x0800bbf4
 80081f0:	20000af0 	.word	0x20000af0

080081f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80081f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800820e:	f000 f8ac 	bl	800836a <BSP_SD_IsDetected>
 8008212:	4603      	mov	r3, r0
 8008214:	2b01      	cmp	r3, #1
 8008216:	d001      	beq.n	800821c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e012      	b.n	8008242 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800821c:	480b      	ldr	r0, [pc, #44]	; (800824c <BSP_SD_Init+0x48>)
 800821e:	f7fc fecd 	bl	8004fbc <HAL_SD_Init>
 8008222:	4603      	mov	r3, r0
 8008224:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d109      	bne.n	8008240 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800822c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008230:	4806      	ldr	r0, [pc, #24]	; (800824c <BSP_SD_Init+0x48>)
 8008232:	f7fd fe27 	bl	8005e84 <HAL_SD_ConfigWideBusOperation>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008240:	79fb      	ldrb	r3, [r7, #7]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000134 	.word	0x20000134

08008250 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af02      	add	r7, sp, #8
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	68f9      	ldr	r1, [r7, #12]
 800826c:	4806      	ldr	r0, [pc, #24]	; (8008288 <BSP_SD_ReadBlocks+0x38>)
 800826e:	f7fc ff55 	bl	800511c <HAL_SD_ReadBlocks>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000134 	.word	0x20000134

0800828c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af02      	add	r7, sp, #8
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	68f9      	ldr	r1, [r7, #12]
 80082a8:	4806      	ldr	r0, [pc, #24]	; (80082c4 <BSP_SD_WriteBlocks+0x38>)
 80082aa:	f7fd f915 	bl	80054d8 <HAL_SD_WriteBlocks>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000134 	.word	0x20000134

080082c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80082cc:	4805      	ldr	r0, [pc, #20]	; (80082e4 <BSP_SD_GetCardState+0x1c>)
 80082ce:	f7fd fe73 	bl	8005fb8 <HAL_SD_GetCardState>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	bf14      	ite	ne
 80082d8:	2301      	movne	r3, #1
 80082da:	2300      	moveq	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
}
 80082de:	4618      	mov	r0, r3
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20000134 	.word	0x20000134

080082e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	4803      	ldr	r0, [pc, #12]	; (8008300 <BSP_SD_GetCardInfo+0x18>)
 80082f4:	f7fd fd9a 	bl	8005e2c <HAL_SD_GetCardInfo>
}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000134 	.word	0x20000134

08008304 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800830c:	f000 f818 	bl	8008340 <BSP_SD_AbortCallback>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008320:	f000 f815 	bl	800834e <BSP_SD_WriteCpltCallback>
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008334:	f000 f812 	bl	800835c <BSP_SD_ReadCpltCallback>
}
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0

}
 8008344:	bf00      	nop
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800834e:	b480      	push	{r7}
 8008350:	af00      	add	r7, sp, #0

}
 8008352:	bf00      	nop
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0

}
 8008360:	bf00      	nop
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008370:	2301      	movs	r3, #1
 8008372:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008374:	f000 f80c 	bl	8008390 <BSP_PlatformIsDetected>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800837e:	2300      	movs	r3, #0
 8008380:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	b2db      	uxtb	r3, r3
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008396:	2301      	movs	r3, #1
 8008398:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800839a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800839e:	4806      	ldr	r0, [pc, #24]	; (80083b8 <BSP_PlatformIsDetected+0x28>)
 80083a0:	f7fa f9be 	bl	8002720 <HAL_GPIO_ReadPin>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80083aa:	2300      	movs	r3, #0
 80083ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80083ae:	79fb      	ldrb	r3, [r7, #7]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	40020400 	.word	0x40020400

080083bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80083c6:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <SD_CheckStatus+0x38>)
 80083c8:	2201      	movs	r2, #1
 80083ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80083cc:	f7ff ff7c 	bl	80082c8 <BSP_SD_GetCardState>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d107      	bne.n	80083e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80083d6:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <SD_CheckStatus+0x38>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f023 0301 	bic.w	r3, r3, #1
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	4b04      	ldr	r3, [pc, #16]	; (80083f4 <SD_CheckStatus+0x38>)
 80083e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80083e6:	4b03      	ldr	r3, [pc, #12]	; (80083f4 <SD_CheckStatus+0x38>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	b2db      	uxtb	r3, r3
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	2000000d 	.word	0x2000000d

080083f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008402:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <SD_initialize+0x38>)
 8008404:	2201      	movs	r2, #1
 8008406:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008408:	f7ff fefc 	bl	8008204 <BSP_SD_Init>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d107      	bne.n	8008422 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff ffd1 	bl	80083bc <SD_CheckStatus>
 800841a:	4603      	mov	r3, r0
 800841c:	461a      	mov	r2, r3
 800841e:	4b04      	ldr	r3, [pc, #16]	; (8008430 <SD_initialize+0x38>)
 8008420:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008422:	4b03      	ldr	r3, [pc, #12]	; (8008430 <SD_initialize+0x38>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	b2db      	uxtb	r3, r3
}
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	2000000d 	.word	0x2000000d

08008434 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff ffbb 	bl	80083bc <SD_CheckStatus>
 8008446:	4603      	mov	r3, r0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60b9      	str	r1, [r7, #8]
 8008458:	607a      	str	r2, [r7, #4]
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	68b8      	ldr	r0, [r7, #8]
 800846e:	f7ff feef 	bl	8008250 <BSP_SD_ReadBlocks>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d107      	bne.n	8008488 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008478:	bf00      	nop
 800847a:	f7ff ff25 	bl	80082c8 <BSP_SD_GetCardState>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1fa      	bne.n	800847a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008488:	7dfb      	ldrb	r3, [r7, #23]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b086      	sub	sp, #24
 8008496:	af00      	add	r7, sp, #0
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80084a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	68b8      	ldr	r0, [r7, #8]
 80084b0:	f7ff feec 	bl	800828c <BSP_SD_WriteBlocks>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d107      	bne.n	80084ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80084ba:	bf00      	nop
 80084bc:	f7ff ff04 	bl	80082c8 <BSP_SD_GetCardState>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1fa      	bne.n	80084bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08c      	sub	sp, #48	; 0x30
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	603a      	str	r2, [r7, #0]
 80084de:	71fb      	strb	r3, [r7, #7]
 80084e0:	460b      	mov	r3, r1
 80084e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80084ea:	4b25      	ldr	r3, [pc, #148]	; (8008580 <SD_ioctl+0xac>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <SD_ioctl+0x28>
 80084f8:	2303      	movs	r3, #3
 80084fa:	e03c      	b.n	8008576 <SD_ioctl+0xa2>

  switch (cmd)
 80084fc:	79bb      	ldrb	r3, [r7, #6]
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d834      	bhi.n	800856c <SD_ioctl+0x98>
 8008502:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <SD_ioctl+0x34>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	08008519 	.word	0x08008519
 800850c:	08008521 	.word	0x08008521
 8008510:	08008539 	.word	0x08008539
 8008514:	08008553 	.word	0x08008553
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800851e:	e028      	b.n	8008572 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008520:	f107 030c 	add.w	r3, r7, #12
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff fedf 	bl	80082e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800852a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008536:	e01c      	b.n	8008572 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008538:	f107 030c 	add.w	r3, r7, #12
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fed3 	bl	80082e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	b29a      	uxth	r2, r3
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008550:	e00f      	b.n	8008572 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008552:	f107 030c 	add.w	r3, r7, #12
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fec6 	bl	80082e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	0a5a      	lsrs	r2, r3, #9
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800856a:	e002      	b.n	8008572 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800856c:	2304      	movs	r3, #4
 800856e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008576:	4618      	mov	r0, r3
 8008578:	3730      	adds	r7, #48	; 0x30
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	2000000d 	.word	0x2000000d

08008584 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	4a08      	ldr	r2, [pc, #32]	; (80085b4 <disk_status+0x30>)
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	79fa      	ldrb	r2, [r7, #7]
 800859c:	4905      	ldr	r1, [pc, #20]	; (80085b4 <disk_status+0x30>)
 800859e:	440a      	add	r2, r1
 80085a0:	7a12      	ldrb	r2, [r2, #8]
 80085a2:	4610      	mov	r0, r2
 80085a4:	4798      	blx	r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20000d50 	.word	0x20000d50

080085b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	4a0d      	ldr	r2, [pc, #52]	; (8008600 <disk_initialize+0x48>)
 80085ca:	5cd3      	ldrb	r3, [r2, r3]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d111      	bne.n	80085f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	4a0b      	ldr	r2, [pc, #44]	; (8008600 <disk_initialize+0x48>)
 80085d4:	2101      	movs	r1, #1
 80085d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	4a09      	ldr	r2, [pc, #36]	; (8008600 <disk_initialize+0x48>)
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	79fa      	ldrb	r2, [r7, #7]
 80085e6:	4906      	ldr	r1, [pc, #24]	; (8008600 <disk_initialize+0x48>)
 80085e8:	440a      	add	r2, r1
 80085ea:	7a12      	ldrb	r2, [r2, #8]
 80085ec:	4610      	mov	r0, r2
 80085ee:	4798      	blx	r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20000d50 	.word	0x20000d50

08008604 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008604:	b590      	push	{r4, r7, lr}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	4a0a      	ldr	r2, [pc, #40]	; (8008640 <disk_read+0x3c>)
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	689c      	ldr	r4, [r3, #8]
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	4a07      	ldr	r2, [pc, #28]	; (8008640 <disk_read+0x3c>)
 8008624:	4413      	add	r3, r2
 8008626:	7a18      	ldrb	r0, [r3, #8]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	47a0      	blx	r4
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]
  return res;
 8008634:	7dfb      	ldrb	r3, [r7, #23]
}
 8008636:	4618      	mov	r0, r3
 8008638:	371c      	adds	r7, #28
 800863a:	46bd      	mov	sp, r7
 800863c:	bd90      	pop	{r4, r7, pc}
 800863e:	bf00      	nop
 8008640:	20000d50 	.word	0x20000d50

08008644 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008644:	b590      	push	{r4, r7, lr}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	607a      	str	r2, [r7, #4]
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	4603      	mov	r3, r0
 8008652:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008654:	7bfb      	ldrb	r3, [r7, #15]
 8008656:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <disk_write+0x3c>)
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	68dc      	ldr	r4, [r3, #12]
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	4a07      	ldr	r2, [pc, #28]	; (8008680 <disk_write+0x3c>)
 8008664:	4413      	add	r3, r2
 8008666:	7a18      	ldrb	r0, [r3, #8]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	47a0      	blx	r4
 8008670:	4603      	mov	r3, r0
 8008672:	75fb      	strb	r3, [r7, #23]
  return res;
 8008674:	7dfb      	ldrb	r3, [r7, #23]
}
 8008676:	4618      	mov	r0, r3
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	bd90      	pop	{r4, r7, pc}
 800867e:	bf00      	nop
 8008680:	20000d50 	.word	0x20000d50

08008684 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	603a      	str	r2, [r7, #0]
 800868e:	71fb      	strb	r3, [r7, #7]
 8008690:	460b      	mov	r3, r1
 8008692:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	4a09      	ldr	r2, [pc, #36]	; (80086bc <disk_ioctl+0x38>)
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	79fa      	ldrb	r2, [r7, #7]
 80086a2:	4906      	ldr	r1, [pc, #24]	; (80086bc <disk_ioctl+0x38>)
 80086a4:	440a      	add	r2, r1
 80086a6:	7a10      	ldrb	r0, [r2, #8]
 80086a8:	79b9      	ldrb	r1, [r7, #6]
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4798      	blx	r3
 80086ae:	4603      	mov	r3, r0
 80086b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20000d50 	.word	0x20000d50

080086c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3301      	adds	r3, #1
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80086d0:	89fb      	ldrh	r3, [r7, #14]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	b21a      	sxth	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	b21b      	sxth	r3, r3
 80086dc:	4313      	orrs	r3, r2
 80086de:	b21b      	sxth	r3, r3
 80086e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80086e2:	89fb      	ldrh	r3, [r7, #14]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3303      	adds	r3, #3
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	3202      	adds	r2, #2
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	3201      	adds	r2, #1
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	4313      	orrs	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	7812      	ldrb	r2, [r2, #0]
 8008724:	4313      	orrs	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
	return rv;
 8008728:	68fb      	ldr	r3, [r7, #12]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	887a      	ldrh	r2, [r7, #2]
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	887b      	ldrh	r3, [r7, #2]
 8008750:	0a1b      	lsrs	r3, r3, #8
 8008752:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	887a      	ldrh	r2, [r7, #2]
 800875c:	b2d2      	uxtb	r2, r2
 800875e:	701a      	strb	r2, [r3, #0]
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	b2d2      	uxtb	r2, r2
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	0a1b      	lsrs	r3, r3, #8
 8008786:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	607a      	str	r2, [r7, #4]
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	b2d2      	uxtb	r2, r2
 8008792:	701a      	strb	r2, [r3, #0]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	0a1b      	lsrs	r3, r3, #8
 8008798:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	b2d2      	uxtb	r2, r2
 80087a4:	701a      	strb	r2, [r3, #0]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	0a1b      	lsrs	r3, r3, #8
 80087aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	607a      	str	r2, [r7, #4]
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	b2d2      	uxtb	r2, r2
 80087b6:	701a      	strb	r2, [r3, #0]
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00d      	beq.n	80087fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	1c53      	adds	r3, r2, #1
 80087e2:	613b      	str	r3, [r7, #16]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	1c59      	adds	r1, r3, #1
 80087e8:	6179      	str	r1, [r7, #20]
 80087ea:	7812      	ldrb	r2, [r2, #0]
 80087ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	607b      	str	r3, [r7, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f1      	bne.n	80087de <mem_cpy+0x1a>
	}
}
 80087fa:	bf00      	nop
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008806:	b480      	push	{r7}
 8008808:	b087      	sub	sp, #28
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	617a      	str	r2, [r7, #20]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3b01      	subs	r3, #1
 8008826:	607b      	str	r3, [r7, #4]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f3      	bne.n	8008816 <mem_set+0x10>
}
 800882e:	bf00      	nop
 8008830:	bf00      	nop
 8008832:	371c      	adds	r7, #28
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800883c:	b480      	push	{r7}
 800883e:	b089      	sub	sp, #36	; 0x24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	61fb      	str	r3, [r7, #28]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008850:	2300      	movs	r3, #0
 8008852:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	61fa      	str	r2, [r7, #28]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	4619      	mov	r1, r3
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	61ba      	str	r2, [r7, #24]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	1acb      	subs	r3, r1, r3
 8008868:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	3b01      	subs	r3, #1
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <mem_cmp+0x40>
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0eb      	beq.n	8008854 <mem_cmp+0x18>

	return r;
 800887c:	697b      	ldr	r3, [r7, #20]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3724      	adds	r7, #36	; 0x24
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008894:	e002      	b.n	800889c <chk_chr+0x12>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	3301      	adds	r3, #1
 800889a:	607b      	str	r3, [r7, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <chk_chr+0x26>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d1f2      	bne.n	8008896 <chk_chr+0xc>
	return *str;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	781b      	ldrb	r3, [r3, #0]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088ca:	2300      	movs	r3, #0
 80088cc:	60bb      	str	r3, [r7, #8]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	e029      	b.n	8008928 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80088d4:	4a27      	ldr	r2, [pc, #156]	; (8008974 <chk_lock+0xb4>)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	011b      	lsls	r3, r3, #4
 80088da:	4413      	add	r3, r2
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d01d      	beq.n	800891e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088e2:	4a24      	ldr	r2, [pc, #144]	; (8008974 <chk_lock+0xb4>)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	011b      	lsls	r3, r3, #4
 80088e8:	4413      	add	r3, r2
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d116      	bne.n	8008922 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80088f4:	4a1f      	ldr	r2, [pc, #124]	; (8008974 <chk_lock+0xb4>)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	011b      	lsls	r3, r3, #4
 80088fa:	4413      	add	r3, r2
 80088fc:	3304      	adds	r3, #4
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008904:	429a      	cmp	r2, r3
 8008906:	d10c      	bne.n	8008922 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008908:	4a1a      	ldr	r2, [pc, #104]	; (8008974 <chk_lock+0xb4>)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	4413      	add	r3, r2
 8008910:	3308      	adds	r3, #8
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008918:	429a      	cmp	r2, r3
 800891a:	d102      	bne.n	8008922 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800891c:	e007      	b.n	800892e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800891e:	2301      	movs	r3, #1
 8008920:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3301      	adds	r3, #1
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d9d2      	bls.n	80088d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d109      	bne.n	8008948 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <chk_lock+0x80>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d101      	bne.n	8008944 <chk_lock+0x84>
 8008940:	2300      	movs	r3, #0
 8008942:	e010      	b.n	8008966 <chk_lock+0xa6>
 8008944:	2312      	movs	r3, #18
 8008946:	e00e      	b.n	8008966 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d108      	bne.n	8008960 <chk_lock+0xa0>
 800894e:	4a09      	ldr	r2, [pc, #36]	; (8008974 <chk_lock+0xb4>)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	011b      	lsls	r3, r3, #4
 8008954:	4413      	add	r3, r2
 8008956:	330c      	adds	r3, #12
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800895e:	d101      	bne.n	8008964 <chk_lock+0xa4>
 8008960:	2310      	movs	r3, #16
 8008962:	e000      	b.n	8008966 <chk_lock+0xa6>
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20000d30 	.word	0x20000d30

08008978 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800897e:	2300      	movs	r3, #0
 8008980:	607b      	str	r3, [r7, #4]
 8008982:	e002      	b.n	800898a <enq_lock+0x12>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3301      	adds	r3, #1
 8008988:	607b      	str	r3, [r7, #4]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d806      	bhi.n	800899e <enq_lock+0x26>
 8008990:	4a09      	ldr	r2, [pc, #36]	; (80089b8 <enq_lock+0x40>)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	4413      	add	r3, r2
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1f2      	bne.n	8008984 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	bf14      	ite	ne
 80089a4:	2301      	movne	r3, #1
 80089a6:	2300      	moveq	r3, #0
 80089a8:	b2db      	uxtb	r3, r3
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	20000d30 	.word	0x20000d30

080089bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	e01f      	b.n	8008a0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80089cc:	4a41      	ldr	r2, [pc, #260]	; (8008ad4 <inc_lock+0x118>)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	4413      	add	r3, r2
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d113      	bne.n	8008a06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80089de:	4a3d      	ldr	r2, [pc, #244]	; (8008ad4 <inc_lock+0x118>)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	4413      	add	r3, r2
 80089e6:	3304      	adds	r3, #4
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d109      	bne.n	8008a06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80089f2:	4a38      	ldr	r2, [pc, #224]	; (8008ad4 <inc_lock+0x118>)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	011b      	lsls	r3, r3, #4
 80089f8:	4413      	add	r3, r2
 80089fa:	3308      	adds	r3, #8
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d006      	beq.n	8008a14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d9dc      	bls.n	80089cc <inc_lock+0x10>
 8008a12:	e000      	b.n	8008a16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008a14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d132      	bne.n	8008a82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	e002      	b.n	8008a28 <inc_lock+0x6c>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3301      	adds	r3, #1
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d806      	bhi.n	8008a3c <inc_lock+0x80>
 8008a2e:	4a29      	ldr	r2, [pc, #164]	; (8008ad4 <inc_lock+0x118>)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	011b      	lsls	r3, r3, #4
 8008a34:	4413      	add	r3, r2
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1f2      	bne.n	8008a22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d101      	bne.n	8008a46 <inc_lock+0x8a>
 8008a42:	2300      	movs	r3, #0
 8008a44:	e040      	b.n	8008ac8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	4922      	ldr	r1, [pc, #136]	; (8008ad4 <inc_lock+0x118>)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	440b      	add	r3, r1
 8008a52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	491e      	ldr	r1, [pc, #120]	; (8008ad4 <inc_lock+0x118>)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	011b      	lsls	r3, r3, #4
 8008a5e:	440b      	add	r3, r1
 8008a60:	3304      	adds	r3, #4
 8008a62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	695a      	ldr	r2, [r3, #20]
 8008a68:	491a      	ldr	r1, [pc, #104]	; (8008ad4 <inc_lock+0x118>)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	440b      	add	r3, r1
 8008a70:	3308      	adds	r3, #8
 8008a72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008a74:	4a17      	ldr	r2, [pc, #92]	; (8008ad4 <inc_lock+0x118>)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	4413      	add	r3, r2
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	2200      	movs	r2, #0
 8008a80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <inc_lock+0xe0>
 8008a88:	4a12      	ldr	r2, [pc, #72]	; (8008ad4 <inc_lock+0x118>)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	4413      	add	r3, r2
 8008a90:	330c      	adds	r3, #12
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <inc_lock+0xe0>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	e015      	b.n	8008ac8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d108      	bne.n	8008ab4 <inc_lock+0xf8>
 8008aa2:	4a0c      	ldr	r2, [pc, #48]	; (8008ad4 <inc_lock+0x118>)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	4413      	add	r3, r2
 8008aaa:	330c      	adds	r3, #12
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	e001      	b.n	8008ab8 <inc_lock+0xfc>
 8008ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ab8:	4906      	ldr	r1, [pc, #24]	; (8008ad4 <inc_lock+0x118>)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	011b      	lsls	r3, r3, #4
 8008abe:	440b      	add	r3, r1
 8008ac0:	330c      	adds	r3, #12
 8008ac2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	20000d30 	.word	0x20000d30

08008ad8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d825      	bhi.n	8008b38 <dec_lock+0x60>
		n = Files[i].ctr;
 8008aec:	4a17      	ldr	r2, [pc, #92]	; (8008b4c <dec_lock+0x74>)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	4413      	add	r3, r2
 8008af4:	330c      	adds	r3, #12
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008afa:	89fb      	ldrh	r3, [r7, #14]
 8008afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b00:	d101      	bne.n	8008b06 <dec_lock+0x2e>
 8008b02:	2300      	movs	r3, #0
 8008b04:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008b06:	89fb      	ldrh	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <dec_lock+0x3a>
 8008b0c:	89fb      	ldrh	r3, [r7, #14]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008b12:	4a0e      	ldr	r2, [pc, #56]	; (8008b4c <dec_lock+0x74>)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	4413      	add	r3, r2
 8008b1a:	330c      	adds	r3, #12
 8008b1c:	89fa      	ldrh	r2, [r7, #14]
 8008b1e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b20:	89fb      	ldrh	r3, [r7, #14]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d105      	bne.n	8008b32 <dec_lock+0x5a>
 8008b26:	4a09      	ldr	r2, [pc, #36]	; (8008b4c <dec_lock+0x74>)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	4413      	add	r3, r2
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	737b      	strb	r3, [r7, #13]
 8008b36:	e001      	b.n	8008b3c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008b38:	2302      	movs	r3, #2
 8008b3a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008b3c:	7b7b      	ldrb	r3, [r7, #13]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000d30 	.word	0x20000d30

08008b50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	e010      	b.n	8008b80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008b5e:	4a0d      	ldr	r2, [pc, #52]	; (8008b94 <clear_lock+0x44>)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	4413      	add	r3, r2
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d105      	bne.n	8008b7a <clear_lock+0x2a>
 8008b6e:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <clear_lock+0x44>)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	4413      	add	r3, r2
 8008b76:	2200      	movs	r2, #0
 8008b78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d9eb      	bls.n	8008b5e <clear_lock+0xe>
	}
}
 8008b86:	bf00      	nop
 8008b88:	bf00      	nop
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	20000d30 	.word	0x20000d30

08008b98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	78db      	ldrb	r3, [r3, #3]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d034      	beq.n	8008c16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7858      	ldrb	r0, [r3, #1]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	f7ff fd40 	bl	8008644 <disk_write>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	73fb      	strb	r3, [r7, #15]
 8008bce:	e022      	b.n	8008c16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	1ad2      	subs	r2, r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d217      	bcs.n	8008c16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	789b      	ldrb	r3, [r3, #2]
 8008bea:	613b      	str	r3, [r7, #16]
 8008bec:	e010      	b.n	8008c10 <sync_window+0x78>
					wsect += fs->fsize;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	7858      	ldrb	r0, [r3, #1]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c02:	2301      	movs	r3, #1
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	f7ff fd1d 	bl	8008644 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	613b      	str	r3, [r7, #16]
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d8eb      	bhi.n	8008bee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d01b      	beq.n	8008c70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff ffad 	bl	8008b98 <sync_window>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d113      	bne.n	8008c70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	7858      	ldrb	r0, [r3, #1]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c52:	2301      	movs	r3, #1
 8008c54:	683a      	ldr	r2, [r7, #0]
 8008c56:	f7ff fcd5 	bl	8008604 <disk_read>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d004      	beq.n	8008c6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7ff ff87 	bl	8008b98 <sync_window>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d158      	bne.n	8008d46 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d148      	bne.n	8008d2e <sync_fs+0xb2>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	791b      	ldrb	r3, [r3, #4]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d144      	bne.n	8008d2e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3330      	adds	r3, #48	; 0x30
 8008ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff fda9 	bl	8008806 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3330      	adds	r3, #48	; 0x30
 8008cb8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008cbc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7ff fd38 	bl	8008736 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3330      	adds	r3, #48	; 0x30
 8008cca:	4921      	ldr	r1, [pc, #132]	; (8008d50 <sync_fs+0xd4>)
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff fd4d 	bl	800876c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	3330      	adds	r3, #48	; 0x30
 8008cd6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008cda:	491e      	ldr	r1, [pc, #120]	; (8008d54 <sync_fs+0xd8>)
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7ff fd45 	bl	800876c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3330      	adds	r3, #48	; 0x30
 8008ce6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	f7ff fd3b 	bl	800876c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3330      	adds	r3, #48	; 0x30
 8008cfa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f7ff fd31 	bl	800876c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	1c5a      	adds	r2, r3, #1
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	7858      	ldrb	r0, [r3, #1]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d22:	2301      	movs	r3, #1
 8008d24:	f7ff fc8e 	bl	8008644 <disk_write>
			fs->fsi_flag = 0;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	785b      	ldrb	r3, [r3, #1]
 8008d32:	2200      	movs	r2, #0
 8008d34:	2100      	movs	r1, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7ff fca4 	bl	8008684 <disk_ioctl>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <sync_fs+0xca>
 8008d42:	2301      	movs	r3, #1
 8008d44:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	41615252 	.word	0x41615252
 8008d54:	61417272 	.word	0x61417272

08008d58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	3b02      	subs	r3, #2
 8008d66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	3b02      	subs	r3, #2
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d301      	bcc.n	8008d78 <clust2sect+0x20>
 8008d74:	2300      	movs	r3, #0
 8008d76:	e008      	b.n	8008d8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	895b      	ldrh	r3, [r3, #10]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	fb03 f202 	mul.w	r2, r3, r2
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d88:	4413      	add	r3, r2
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b086      	sub	sp, #24
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d904      	bls.n	8008db6 <get_fat+0x20>
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d302      	bcc.n	8008dbc <get_fat+0x26>
		val = 1;	/* Internal error */
 8008db6:	2301      	movs	r3, #1
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	e08f      	b.n	8008edc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dc0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d062      	beq.n	8008e90 <get_fat+0xfa>
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	dc7c      	bgt.n	8008ec8 <get_fat+0x132>
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d002      	beq.n	8008dd8 <get_fat+0x42>
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d042      	beq.n	8008e5c <get_fat+0xc6>
 8008dd6:	e077      	b.n	8008ec8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	6a1a      	ldr	r2, [r3, #32]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	0a5b      	lsrs	r3, r3, #9
 8008dee:	4413      	add	r3, r2
 8008df0:	4619      	mov	r1, r3
 8008df2:	6938      	ldr	r0, [r7, #16]
 8008df4:	f7ff ff14 	bl	8008c20 <move_window>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d167      	bne.n	8008ece <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	60fa      	str	r2, [r7, #12]
 8008e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	6a1a      	ldr	r2, [r3, #32]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	0a5b      	lsrs	r3, r3, #9
 8008e1a:	4413      	add	r3, r2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6938      	ldr	r0, [r7, #16]
 8008e20:	f7ff fefe 	bl	8008c20 <move_window>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d153      	bne.n	8008ed2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4413      	add	r3, r2
 8008e34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e38:	021b      	lsls	r3, r3, #8
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <get_fat+0xbc>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	091b      	lsrs	r3, r3, #4
 8008e50:	e002      	b.n	8008e58 <get_fat+0xc2>
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e58:	617b      	str	r3, [r7, #20]
			break;
 8008e5a:	e03f      	b.n	8008edc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	6a1a      	ldr	r2, [r3, #32]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	0a1b      	lsrs	r3, r3, #8
 8008e64:	4413      	add	r3, r2
 8008e66:	4619      	mov	r1, r3
 8008e68:	6938      	ldr	r0, [r7, #16]
 8008e6a:	f7ff fed9 	bl	8008c20 <move_window>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d130      	bne.n	8008ed6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008e82:	4413      	add	r3, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff fc1b 	bl	80086c0 <ld_word>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	617b      	str	r3, [r7, #20]
			break;
 8008e8e:	e025      	b.n	8008edc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	6a1a      	ldr	r2, [r3, #32]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	09db      	lsrs	r3, r3, #7
 8008e98:	4413      	add	r3, r2
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6938      	ldr	r0, [r7, #16]
 8008e9e:	f7ff febf 	bl	8008c20 <move_window>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d118      	bne.n	8008eda <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008eb6:	4413      	add	r3, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff fc19 	bl	80086f0 <ld_dword>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008ec4:	617b      	str	r3, [r7, #20]
			break;
 8008ec6:	e009      	b.n	8008edc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008ec8:	2301      	movs	r3, #1
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	e006      	b.n	8008edc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ece:	bf00      	nop
 8008ed0:	e004      	b.n	8008edc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ed2:	bf00      	nop
 8008ed4:	e002      	b.n	8008edc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ed6:	bf00      	nop
 8008ed8:	e000      	b.n	8008edc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008eda:	bf00      	nop
		}
	}

	return val;
 8008edc:	697b      	ldr	r3, [r7, #20]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008ee6:	b590      	push	{r4, r7, lr}
 8008ee8:	b089      	sub	sp, #36	; 0x24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	f240 80d2 	bls.w	80090a2 <put_fat+0x1bc>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	f080 80cc 	bcs.w	80090a2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	f000 8096 	beq.w	8009040 <put_fat+0x15a>
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	f300 80cd 	bgt.w	80090b4 <put_fat+0x1ce>
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d002      	beq.n	8008f24 <put_fat+0x3e>
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d06e      	beq.n	8009000 <put_fat+0x11a>
 8008f22:	e0c7      	b.n	80090b4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	61bb      	str	r3, [r7, #24]
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	4413      	add	r3, r2
 8008f30:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a1a      	ldr	r2, [r3, #32]
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	0a5b      	lsrs	r3, r3, #9
 8008f3a:	4413      	add	r3, r2
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f7ff fe6e 	bl	8008c20 <move_window>
 8008f44:	4603      	mov	r3, r0
 8008f46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f48:	7ffb      	ldrb	r3, [r7, #31]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f040 80ab 	bne.w	80090a6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	1c59      	adds	r1, r3, #1
 8008f5a:	61b9      	str	r1, [r7, #24]
 8008f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f60:	4413      	add	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00d      	beq.n	8008f8a <put_fat+0xa4>
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b25b      	sxtb	r3, r3
 8008f74:	f003 030f 	and.w	r3, r3, #15
 8008f78:	b25a      	sxtb	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	b25b      	sxtb	r3, r3
 8008f82:	4313      	orrs	r3, r2
 8008f84:	b25b      	sxtb	r3, r3
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	e001      	b.n	8008f8e <put_fat+0xa8>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a1a      	ldr	r2, [r3, #32]
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	0a5b      	lsrs	r3, r3, #9
 8008fa0:	4413      	add	r3, r2
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7ff fe3b 	bl	8008c20 <move_window>
 8008faa:	4603      	mov	r3, r0
 8008fac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fae:	7ffb      	ldrb	r3, [r7, #31]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d17a      	bne.n	80090aa <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc0:	4413      	add	r3, r2
 8008fc2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <put_fat+0xf0>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	091b      	lsrs	r3, r3, #4
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	e00e      	b.n	8008ff4 <put_fat+0x10e>
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b25b      	sxtb	r3, r3
 8008fdc:	f023 030f 	bic.w	r3, r3, #15
 8008fe0:	b25a      	sxtb	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	0a1b      	lsrs	r3, r3, #8
 8008fe6:	b25b      	sxtb	r3, r3
 8008fe8:	f003 030f 	and.w	r3, r3, #15
 8008fec:	b25b      	sxtb	r3, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	b25b      	sxtb	r3, r3
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	70da      	strb	r2, [r3, #3]
			break;
 8008ffe:	e059      	b.n	80090b4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a1a      	ldr	r2, [r3, #32]
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	0a1b      	lsrs	r3, r3, #8
 8009008:	4413      	add	r3, r2
 800900a:	4619      	mov	r1, r3
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f7ff fe07 	bl	8008c20 <move_window>
 8009012:	4603      	mov	r3, r0
 8009014:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009016:	7ffb      	ldrb	r3, [r7, #31]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d148      	bne.n	80090ae <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800902a:	4413      	add	r3, r2
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	b292      	uxth	r2, r2
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff fb7f 	bl	8008736 <st_word>
			fs->wflag = 1;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	70da      	strb	r2, [r3, #3]
			break;
 800903e:	e039      	b.n	80090b4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a1a      	ldr	r2, [r3, #32]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	09db      	lsrs	r3, r3, #7
 8009048:	4413      	add	r3, r2
 800904a:	4619      	mov	r1, r3
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f7ff fde7 	bl	8008c20 <move_window>
 8009052:	4603      	mov	r3, r0
 8009054:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009056:	7ffb      	ldrb	r3, [r7, #31]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d12a      	bne.n	80090b2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009070:	4413      	add	r3, r2
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff fb3c 	bl	80086f0 <ld_dword>
 8009078:	4603      	mov	r3, r0
 800907a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800907e:	4323      	orrs	r3, r4
 8009080:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009090:	4413      	add	r3, r2
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	4618      	mov	r0, r3
 8009096:	f7ff fb69 	bl	800876c <st_dword>
			fs->wflag = 1;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	70da      	strb	r2, [r3, #3]
			break;
 80090a0:	e008      	b.n	80090b4 <put_fat+0x1ce>
		}
	}
 80090a2:	bf00      	nop
 80090a4:	e006      	b.n	80090b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80090a6:	bf00      	nop
 80090a8:	e004      	b.n	80090b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80090aa:	bf00      	nop
 80090ac:	e002      	b.n	80090b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80090ae:	bf00      	nop
 80090b0:	e000      	b.n	80090b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80090b2:	bf00      	nop
	return res;
 80090b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3724      	adds	r7, #36	; 0x24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd90      	pop	{r4, r7, pc}

080090be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b088      	sub	sp, #32
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d904      	bls.n	80090e4 <remove_chain+0x26>
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d301      	bcc.n	80090e8 <remove_chain+0x2a>
 80090e4:	2302      	movs	r3, #2
 80090e6:	e04b      	b.n	8009180 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00c      	beq.n	8009108 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80090ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	69b8      	ldr	r0, [r7, #24]
 80090f6:	f7ff fef6 	bl	8008ee6 <put_fat>
 80090fa:	4603      	mov	r3, r0
 80090fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80090fe:	7ffb      	ldrb	r3, [r7, #31]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <remove_chain+0x4a>
 8009104:	7ffb      	ldrb	r3, [r7, #31]
 8009106:	e03b      	b.n	8009180 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009108:	68b9      	ldr	r1, [r7, #8]
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff fe43 	bl	8008d96 <get_fat>
 8009110:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d031      	beq.n	800917c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <remove_chain+0x64>
 800911e:	2302      	movs	r3, #2
 8009120:	e02e      	b.n	8009180 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009128:	d101      	bne.n	800912e <remove_chain+0x70>
 800912a:	2301      	movs	r3, #1
 800912c:	e028      	b.n	8009180 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800912e:	2200      	movs	r2, #0
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	69b8      	ldr	r0, [r7, #24]
 8009134:	f7ff fed7 	bl	8008ee6 <put_fat>
 8009138:	4603      	mov	r3, r0
 800913a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800913c:	7ffb      	ldrb	r3, [r7, #31]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <remove_chain+0x88>
 8009142:	7ffb      	ldrb	r3, [r7, #31]
 8009144:	e01c      	b.n	8009180 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	691a      	ldr	r2, [r3, #16]
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	3b02      	subs	r3, #2
 8009150:	429a      	cmp	r2, r3
 8009152:	d20b      	bcs.n	800916c <remove_chain+0xae>
			fs->free_clst++;
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	791b      	ldrb	r3, [r3, #4]
 8009162:	f043 0301 	orr.w	r3, r3, #1
 8009166:	b2da      	uxtb	r2, r3
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	429a      	cmp	r2, r3
 8009178:	d3c6      	bcc.n	8009108 <remove_chain+0x4a>
 800917a:	e000      	b.n	800917e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800917c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3720      	adds	r7, #32
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10d      	bne.n	80091ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <create_chain+0x2c>
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d31b      	bcc.n	80091ec <create_chain+0x64>
 80091b4:	2301      	movs	r3, #1
 80091b6:	61bb      	str	r3, [r7, #24]
 80091b8:	e018      	b.n	80091ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff fdea 	bl	8008d96 <get_fat>
 80091c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d801      	bhi.n	80091ce <create_chain+0x46>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e070      	b.n	80092b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091d4:	d101      	bne.n	80091da <create_chain+0x52>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	e06a      	b.n	80092b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d201      	bcs.n	80091e8 <create_chain+0x60>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	e063      	b.n	80092b0 <create_chain+0x128>
		scl = clst;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	3301      	adds	r3, #1
 80091f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d307      	bcc.n	8009210 <create_chain+0x88>
				ncl = 2;
 8009200:	2302      	movs	r3, #2
 8009202:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	429a      	cmp	r2, r3
 800920a:	d901      	bls.n	8009210 <create_chain+0x88>
 800920c:	2300      	movs	r3, #0
 800920e:	e04f      	b.n	80092b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009210:	69f9      	ldr	r1, [r7, #28]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7ff fdbf 	bl	8008d96 <get_fat>
 8009218:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00e      	beq.n	800923e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d003      	beq.n	800922e <create_chain+0xa6>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800922c:	d101      	bne.n	8009232 <create_chain+0xaa>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	e03e      	b.n	80092b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	429a      	cmp	r2, r3
 8009238:	d1da      	bne.n	80091f0 <create_chain+0x68>
 800923a:	2300      	movs	r3, #0
 800923c:	e038      	b.n	80092b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800923e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009244:	69f9      	ldr	r1, [r7, #28]
 8009246:	6938      	ldr	r0, [r7, #16]
 8009248:	f7ff fe4d 	bl	8008ee6 <put_fat>
 800924c:	4603      	mov	r3, r0
 800924e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d109      	bne.n	800926a <create_chain+0xe2>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d006      	beq.n	800926a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800925c:	69fa      	ldr	r2, [r7, #28]
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6938      	ldr	r0, [r7, #16]
 8009262:	f7ff fe40 	bl	8008ee6 <put_fat>
 8009266:	4603      	mov	r3, r0
 8009268:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800926a:	7dfb      	ldrb	r3, [r7, #23]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d116      	bne.n	800929e <create_chain+0x116>
		fs->last_clst = ncl;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	691a      	ldr	r2, [r3, #16]
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	3b02      	subs	r3, #2
 8009280:	429a      	cmp	r2, r3
 8009282:	d804      	bhi.n	800928e <create_chain+0x106>
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	1e5a      	subs	r2, r3, #1
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	791b      	ldrb	r3, [r3, #4]
 8009292:	f043 0301 	orr.w	r3, r3, #1
 8009296:	b2da      	uxtb	r2, r3
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	711a      	strb	r2, [r3, #4]
 800929c:	e007      	b.n	80092ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800929e:	7dfb      	ldrb	r3, [r7, #23]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d102      	bne.n	80092aa <create_chain+0x122>
 80092a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092a8:	e000      	b.n	80092ac <create_chain+0x124>
 80092aa:	2301      	movs	r3, #1
 80092ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80092ae:	69fb      	ldr	r3, [r7, #28]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3720      	adds	r7, #32
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	3304      	adds	r3, #4
 80092ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	0a5b      	lsrs	r3, r3, #9
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	8952      	ldrh	r2, [r2, #10]
 80092d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	1d1a      	adds	r2, r3, #4
 80092e2:	613a      	str	r2, [r7, #16]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d101      	bne.n	80092f2 <clmt_clust+0x3a>
 80092ee:	2300      	movs	r3, #0
 80092f0:	e010      	b.n	8009314 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d307      	bcc.n	800930a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	617b      	str	r3, [r7, #20]
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	3304      	adds	r3, #4
 8009306:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009308:	e7e9      	b.n	80092de <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800930a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	4413      	add	r3, r2
}
 8009314:	4618      	mov	r0, r3
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009336:	d204      	bcs.n	8009342 <dir_sdi+0x22>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	f003 031f 	and.w	r3, r3, #31
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009342:	2302      	movs	r3, #2
 8009344:	e063      	b.n	800940e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d106      	bne.n	8009366 <dir_sdi+0x46>
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d902      	bls.n	8009366 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10c      	bne.n	8009386 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	095b      	lsrs	r3, r3, #5
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	8912      	ldrh	r2, [r2, #8]
 8009374:	4293      	cmp	r3, r2
 8009376:	d301      	bcc.n	800937c <dir_sdi+0x5c>
 8009378:	2302      	movs	r3, #2
 800937a:	e048      	b.n	800940e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	61da      	str	r2, [r3, #28]
 8009384:	e029      	b.n	80093da <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	895b      	ldrh	r3, [r3, #10]
 800938a:	025b      	lsls	r3, r3, #9
 800938c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800938e:	e019      	b.n	80093c4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6979      	ldr	r1, [r7, #20]
 8009394:	4618      	mov	r0, r3
 8009396:	f7ff fcfe 	bl	8008d96 <get_fat>
 800939a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093a2:	d101      	bne.n	80093a8 <dir_sdi+0x88>
 80093a4:	2301      	movs	r3, #1
 80093a6:	e032      	b.n	800940e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d904      	bls.n	80093b8 <dir_sdi+0x98>
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d301      	bcc.n	80093bc <dir_sdi+0x9c>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e028      	b.n	800940e <dir_sdi+0xee>
			ofs -= csz;
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d2e1      	bcs.n	8009390 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80093cc:	6979      	ldr	r1, [r7, #20]
 80093ce:	6938      	ldr	r0, [r7, #16]
 80093d0:	f7ff fcc2 	bl	8008d58 <clust2sect>
 80093d4:	4602      	mov	r2, r0
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <dir_sdi+0xcc>
 80093e8:	2302      	movs	r3, #2
 80093ea:	e010      	b.n	800940e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	69da      	ldr	r2, [r3, #28]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	0a5b      	lsrs	r3, r3, #9
 80093f4:	441a      	add	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009406:	441a      	add	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b086      	sub	sp, #24
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	3320      	adds	r3, #32
 800942c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <dir_next+0x28>
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800943c:	d301      	bcc.n	8009442 <dir_next+0x2c>
 800943e:	2304      	movs	r3, #4
 8009440:	e0aa      	b.n	8009598 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009448:	2b00      	cmp	r3, #0
 800944a:	f040 8098 	bne.w	800957e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10b      	bne.n	8009478 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	095b      	lsrs	r3, r3, #5
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	8912      	ldrh	r2, [r2, #8]
 8009468:	4293      	cmp	r3, r2
 800946a:	f0c0 8088 	bcc.w	800957e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	61da      	str	r2, [r3, #28]
 8009474:	2304      	movs	r3, #4
 8009476:	e08f      	b.n	8009598 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	0a5b      	lsrs	r3, r3, #9
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	8952      	ldrh	r2, [r2, #10]
 8009480:	3a01      	subs	r2, #1
 8009482:	4013      	ands	r3, r2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d17a      	bne.n	800957e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	4619      	mov	r1, r3
 8009490:	4610      	mov	r0, r2
 8009492:	f7ff fc80 	bl	8008d96 <get_fat>
 8009496:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d801      	bhi.n	80094a2 <dir_next+0x8c>
 800949e:	2302      	movs	r3, #2
 80094a0:	e07a      	b.n	8009598 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094a8:	d101      	bne.n	80094ae <dir_next+0x98>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e074      	b.n	8009598 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d358      	bcc.n	800956a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d104      	bne.n	80094c8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	61da      	str	r2, [r3, #28]
 80094c4:	2304      	movs	r3, #4
 80094c6:	e067      	b.n	8009598 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	4619      	mov	r1, r3
 80094d0:	4610      	mov	r0, r2
 80094d2:	f7ff fe59 	bl	8009188 <create_chain>
 80094d6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <dir_next+0xcc>
 80094de:	2307      	movs	r3, #7
 80094e0:	e05a      	b.n	8009598 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d101      	bne.n	80094ec <dir_next+0xd6>
 80094e8:	2302      	movs	r3, #2
 80094ea:	e055      	b.n	8009598 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094f2:	d101      	bne.n	80094f8 <dir_next+0xe2>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e04f      	b.n	8009598 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff fb4d 	bl	8008b98 <sync_window>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <dir_next+0xf2>
 8009504:	2301      	movs	r3, #1
 8009506:	e047      	b.n	8009598 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	3330      	adds	r3, #48	; 0x30
 800950c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009510:	2100      	movs	r1, #0
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff f977 	bl	8008806 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009518:	2300      	movs	r3, #0
 800951a:	613b      	str	r3, [r7, #16]
 800951c:	6979      	ldr	r1, [r7, #20]
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f7ff fc1a 	bl	8008d58 <clust2sect>
 8009524:	4602      	mov	r2, r0
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	62da      	str	r2, [r3, #44]	; 0x2c
 800952a:	e012      	b.n	8009552 <dir_next+0x13c>
						fs->wflag = 1;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2201      	movs	r2, #1
 8009530:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f7ff fb30 	bl	8008b98 <sync_window>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <dir_next+0x12c>
 800953e:	2301      	movs	r3, #1
 8009540:	e02a      	b.n	8009598 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	3301      	adds	r3, #1
 8009546:	613b      	str	r3, [r7, #16]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	62da      	str	r2, [r3, #44]	; 0x2c
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	895b      	ldrh	r3, [r3, #10]
 8009556:	461a      	mov	r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	4293      	cmp	r3, r2
 800955c:	d3e6      	bcc.n	800952c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	1ad2      	subs	r2, r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009570:	6979      	ldr	r1, [r7, #20]
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f7ff fbf0 	bl	8008d58 <clust2sect>
 8009578:	4602      	mov	r2, r0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009590:	441a      	add	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80095b0:	2100      	movs	r1, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff feb4 	bl	8009320 <dir_sdi>
 80095b8:	4603      	mov	r3, r0
 80095ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d12b      	bne.n	800961a <dir_alloc+0x7a>
		n = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	4619      	mov	r1, r3
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f7ff fb27 	bl	8008c20 <move_window>
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d11d      	bne.n	8009618 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2be5      	cmp	r3, #229	; 0xe5
 80095e4:	d004      	beq.n	80095f0 <dir_alloc+0x50>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d107      	bne.n	8009600 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	3301      	adds	r3, #1
 80095f4:	613b      	str	r3, [r7, #16]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d102      	bne.n	8009604 <dir_alloc+0x64>
 80095fe:	e00c      	b.n	800961a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009600:	2300      	movs	r3, #0
 8009602:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009604:	2101      	movs	r1, #1
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7ff ff05 	bl	8009416 <dir_next>
 800960c:	4603      	mov	r3, r0
 800960e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0d7      	beq.n	80095c6 <dir_alloc+0x26>
 8009616:	e000      	b.n	800961a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009618:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	2b04      	cmp	r3, #4
 800961e:	d101      	bne.n	8009624 <dir_alloc+0x84>
 8009620:	2307      	movs	r3, #7
 8009622:	75fb      	strb	r3, [r7, #23]
	return res;
 8009624:	7dfb      	ldrb	r3, [r7, #23]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3718      	adds	r7, #24
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	331a      	adds	r3, #26
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff f83f 	bl	80086c0 <ld_word>
 8009642:	4603      	mov	r3, r0
 8009644:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b03      	cmp	r3, #3
 800964c:	d109      	bne.n	8009662 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	3314      	adds	r3, #20
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff f834 	bl	80086c0 <ld_word>
 8009658:	4603      	mov	r3, r0
 800965a:	041b      	lsls	r3, r3, #16
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009662:	68fb      	ldr	r3, [r7, #12]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	331a      	adds	r3, #26
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	b292      	uxth	r2, r2
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff f857 	bl	8008736 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b03      	cmp	r3, #3
 800968e:	d109      	bne.n	80096a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f103 0214 	add.w	r2, r3, #20
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	0c1b      	lsrs	r3, r3, #16
 800969a:	b29b      	uxth	r3, r3
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	f7ff f849 	bl	8008736 <st_word>
	}
}
 80096a4:	bf00      	nop
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80096b6:	2304      	movs	r3, #4
 80096b8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80096c0:	e03c      	b.n	800973c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	4619      	mov	r1, r3
 80096c8:	6938      	ldr	r0, [r7, #16]
 80096ca:	f7ff faa9 	bl	8008c20 <move_window>
 80096ce:	4603      	mov	r3, r0
 80096d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d136      	bne.n	8009746 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a1b      	ldr	r3, [r3, #32]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d102      	bne.n	80096ec <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80096e6:	2304      	movs	r3, #4
 80096e8:	75fb      	strb	r3, [r7, #23]
 80096ea:	e031      	b.n	8009750 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	330b      	adds	r3, #11
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096f8:	73bb      	strb	r3, [r7, #14]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	7bba      	ldrb	r2, [r7, #14]
 80096fe:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	2be5      	cmp	r3, #229	; 0xe5
 8009704:	d011      	beq.n	800972a <dir_read+0x7e>
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	2b2e      	cmp	r3, #46	; 0x2e
 800970a:	d00e      	beq.n	800972a <dir_read+0x7e>
 800970c:	7bbb      	ldrb	r3, [r7, #14]
 800970e:	2b0f      	cmp	r3, #15
 8009710:	d00b      	beq.n	800972a <dir_read+0x7e>
 8009712:	7bbb      	ldrb	r3, [r7, #14]
 8009714:	f023 0320 	bic.w	r3, r3, #32
 8009718:	2b08      	cmp	r3, #8
 800971a:	bf0c      	ite	eq
 800971c:	2301      	moveq	r3, #1
 800971e:	2300      	movne	r3, #0
 8009720:	b2db      	uxtb	r3, r3
 8009722:	461a      	mov	r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	4293      	cmp	r3, r2
 8009728:	d00f      	beq.n	800974a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800972a:	2100      	movs	r1, #0
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff fe72 	bl	8009416 <dir_next>
 8009732:	4603      	mov	r3, r0
 8009734:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d108      	bne.n	800974e <dir_read+0xa2>
	while (dp->sect) {
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1be      	bne.n	80096c2 <dir_read+0x16>
 8009744:	e004      	b.n	8009750 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009746:	bf00      	nop
 8009748:	e002      	b.n	8009750 <dir_read+0xa4>
				break;
 800974a:	bf00      	nop
 800974c:	e000      	b.n	8009750 <dir_read+0xa4>
		if (res != FR_OK) break;
 800974e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <dir_read+0xb0>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	61da      	str	r2, [r3, #28]
	return res;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b086      	sub	sp, #24
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009774:	2100      	movs	r1, #0
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7ff fdd2 	bl	8009320 <dir_sdi>
 800977c:	4603      	mov	r3, r0
 800977e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <dir_find+0x24>
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	e03e      	b.n	8009808 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	4619      	mov	r1, r3
 8009790:	6938      	ldr	r0, [r7, #16]
 8009792:	f7ff fa45 	bl	8008c20 <move_window>
 8009796:	4603      	mov	r3, r0
 8009798:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800979a:	7dfb      	ldrb	r3, [r7, #23]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d12f      	bne.n	8009800 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d102      	bne.n	80097b4 <dir_find+0x4e>
 80097ae:	2304      	movs	r3, #4
 80097b0:	75fb      	strb	r3, [r7, #23]
 80097b2:	e028      	b.n	8009806 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	330b      	adds	r3, #11
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	330b      	adds	r3, #11
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	f003 0308 	and.w	r3, r3, #8
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10a      	bne.n	80097ec <dir_find+0x86>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a18      	ldr	r0, [r3, #32]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3324      	adds	r3, #36	; 0x24
 80097de:	220b      	movs	r2, #11
 80097e0:	4619      	mov	r1, r3
 80097e2:	f7ff f82b 	bl	800883c <mem_cmp>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00b      	beq.n	8009804 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80097ec:	2100      	movs	r1, #0
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fe11 	bl	8009416 <dir_next>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0c5      	beq.n	800978a <dir_find+0x24>
 80097fe:	e002      	b.n	8009806 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009800:	bf00      	nop
 8009802:	e000      	b.n	8009806 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009804:	bf00      	nop

	return res;
 8009806:	7dfb      	ldrb	r3, [r7, #23]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800981e:	2101      	movs	r1, #1
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff febd 	bl	80095a0 <dir_alloc>
 8009826:	4603      	mov	r3, r0
 8009828:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d11c      	bne.n	800986a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	4619      	mov	r1, r3
 8009836:	68b8      	ldr	r0, [r7, #8]
 8009838:	f7ff f9f2 	bl	8008c20 <move_window>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d111      	bne.n	800986a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	2220      	movs	r2, #32
 800984c:	2100      	movs	r1, #0
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe ffd9 	bl	8008806 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a18      	ldr	r0, [r3, #32]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3324      	adds	r3, #36	; 0x24
 800985c:	220b      	movs	r2, #11
 800985e:	4619      	mov	r1, r3
 8009860:	f7fe ffb0 	bl	80087c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2201      	movs	r2, #1
 8009868:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	4619      	mov	r1, r3
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7ff f9c9 	bl	8008c20 <move_window>
 800988e:	4603      	mov	r3, r0
 8009890:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d106      	bne.n	80098a6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	22e5      	movs	r2, #229	; 0xe5
 800989e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2201      	movs	r2, #1
 80098a4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80098a6:	7afb      	ldrb	r3, [r7, #11]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2200      	movs	r2, #0
 80098be:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d04e      	beq.n	8009966 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	613b      	str	r3, [r7, #16]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80098d0:	e021      	b.n	8009916 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1a      	ldr	r2, [r3, #32]
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	1c59      	adds	r1, r3, #1
 80098da:	6179      	str	r1, [r7, #20]
 80098dc:	4413      	add	r3, r2
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
 80098e4:	2b20      	cmp	r3, #32
 80098e6:	d100      	bne.n	80098ea <get_fileinfo+0x3a>
 80098e8:	e015      	b.n	8009916 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	2b05      	cmp	r3, #5
 80098ee:	d101      	bne.n	80098f4 <get_fileinfo+0x44>
 80098f0:	23e5      	movs	r3, #229	; 0xe5
 80098f2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2b09      	cmp	r3, #9
 80098f8:	d106      	bne.n	8009908 <get_fileinfo+0x58>
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	613a      	str	r2, [r7, #16]
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	4413      	add	r3, r2
 8009904:	222e      	movs	r2, #46	; 0x2e
 8009906:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	613a      	str	r2, [r7, #16]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	4413      	add	r3, r2
 8009912:	7bfa      	ldrb	r2, [r7, #15]
 8009914:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	2b0a      	cmp	r3, #10
 800991a:	d9da      	bls.n	80098d2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	4413      	add	r3, r2
 8009922:	3309      	adds	r3, #9
 8009924:	2200      	movs	r2, #0
 8009926:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a1b      	ldr	r3, [r3, #32]
 800992c:	7ada      	ldrb	r2, [r3, #11]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	331c      	adds	r3, #28
 8009938:	4618      	mov	r0, r3
 800993a:	f7fe fed9 	bl	80086f0 <ld_dword>
 800993e:	4602      	mov	r2, r0
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	3316      	adds	r3, #22
 800994a:	4618      	mov	r0, r3
 800994c:	f7fe fed0 	bl	80086f0 <ld_dword>
 8009950:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	b29a      	uxth	r2, r3
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	80da      	strh	r2, [r3, #6]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	0c1b      	lsrs	r3, r3, #16
 800995e:	b29a      	uxth	r2, r3
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	809a      	strh	r2, [r3, #4]
 8009964:	e000      	b.n	8009968 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009966:	bf00      	nop
}
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3324      	adds	r3, #36	; 0x24
 8009984:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009986:	220b      	movs	r2, #11
 8009988:	2120      	movs	r1, #32
 800998a:	68b8      	ldr	r0, [r7, #8]
 800998c:	f7fe ff3b 	bl	8008806 <mem_set>
	si = i = 0; ni = 8;
 8009990:	2300      	movs	r3, #0
 8009992:	613b      	str	r3, [r7, #16]
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	61fb      	str	r3, [r7, #28]
 8009998:	2308      	movs	r3, #8
 800999a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	61fa      	str	r2, [r7, #28]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	4413      	add	r3, r2
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80099aa:	7efb      	ldrb	r3, [r7, #27]
 80099ac:	2b20      	cmp	r3, #32
 80099ae:	d94e      	bls.n	8009a4e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80099b0:	7efb      	ldrb	r3, [r7, #27]
 80099b2:	2b2f      	cmp	r3, #47	; 0x2f
 80099b4:	d006      	beq.n	80099c4 <create_name+0x54>
 80099b6:	7efb      	ldrb	r3, [r7, #27]
 80099b8:	2b5c      	cmp	r3, #92	; 0x5c
 80099ba:	d110      	bne.n	80099de <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80099bc:	e002      	b.n	80099c4 <create_name+0x54>
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	3301      	adds	r3, #1
 80099c2:	61fb      	str	r3, [r7, #28]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	4413      	add	r3, r2
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b2f      	cmp	r3, #47	; 0x2f
 80099ce:	d0f6      	beq.n	80099be <create_name+0x4e>
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	4413      	add	r3, r2
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b5c      	cmp	r3, #92	; 0x5c
 80099da:	d0f0      	beq.n	80099be <create_name+0x4e>
			break;
 80099dc:	e038      	b.n	8009a50 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80099de:	7efb      	ldrb	r3, [r7, #27]
 80099e0:	2b2e      	cmp	r3, #46	; 0x2e
 80099e2:	d003      	beq.n	80099ec <create_name+0x7c>
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d30c      	bcc.n	8009a06 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	2b0b      	cmp	r3, #11
 80099f0:	d002      	beq.n	80099f8 <create_name+0x88>
 80099f2:	7efb      	ldrb	r3, [r7, #27]
 80099f4:	2b2e      	cmp	r3, #46	; 0x2e
 80099f6:	d001      	beq.n	80099fc <create_name+0x8c>
 80099f8:	2306      	movs	r3, #6
 80099fa:	e044      	b.n	8009a86 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80099fc:	2308      	movs	r3, #8
 80099fe:	613b      	str	r3, [r7, #16]
 8009a00:	230b      	movs	r3, #11
 8009a02:	617b      	str	r3, [r7, #20]
			continue;
 8009a04:	e022      	b.n	8009a4c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009a06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	da04      	bge.n	8009a18 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009a0e:	7efb      	ldrb	r3, [r7, #27]
 8009a10:	3b80      	subs	r3, #128	; 0x80
 8009a12:	4a1f      	ldr	r2, [pc, #124]	; (8009a90 <create_name+0x120>)
 8009a14:	5cd3      	ldrb	r3, [r2, r3]
 8009a16:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009a18:	7efb      	ldrb	r3, [r7, #27]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	481d      	ldr	r0, [pc, #116]	; (8009a94 <create_name+0x124>)
 8009a1e:	f7fe ff34 	bl	800888a <chk_chr>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <create_name+0xbc>
 8009a28:	2306      	movs	r3, #6
 8009a2a:	e02c      	b.n	8009a86 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009a2c:	7efb      	ldrb	r3, [r7, #27]
 8009a2e:	2b60      	cmp	r3, #96	; 0x60
 8009a30:	d905      	bls.n	8009a3e <create_name+0xce>
 8009a32:	7efb      	ldrb	r3, [r7, #27]
 8009a34:	2b7a      	cmp	r3, #122	; 0x7a
 8009a36:	d802      	bhi.n	8009a3e <create_name+0xce>
 8009a38:	7efb      	ldrb	r3, [r7, #27]
 8009a3a:	3b20      	subs	r3, #32
 8009a3c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	613a      	str	r2, [r7, #16]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	4413      	add	r3, r2
 8009a48:	7efa      	ldrb	r2, [r7, #27]
 8009a4a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009a4c:	e7a6      	b.n	800999c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a4e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	441a      	add	r2, r3
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <create_name+0xf4>
 8009a60:	2306      	movs	r3, #6
 8009a62:	e010      	b.n	8009a86 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	2be5      	cmp	r3, #229	; 0xe5
 8009a6a:	d102      	bne.n	8009a72 <create_name+0x102>
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2205      	movs	r2, #5
 8009a70:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009a72:	7efb      	ldrb	r3, [r7, #27]
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d801      	bhi.n	8009a7c <create_name+0x10c>
 8009a78:	2204      	movs	r2, #4
 8009a7a:	e000      	b.n	8009a7e <create_name+0x10e>
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	330b      	adds	r3, #11
 8009a82:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009a84:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3720      	adds	r7, #32
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	0800bc08 	.word	0x0800bc08
 8009a94:	0800bb90 	.word	0x0800bb90

08009a98 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009aac:	e002      	b.n	8009ab4 <follow_path+0x1c>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	603b      	str	r3, [r7, #0]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	2b2f      	cmp	r3, #47	; 0x2f
 8009aba:	d0f8      	beq.n	8009aae <follow_path+0x16>
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	2b5c      	cmp	r3, #92	; 0x5c
 8009ac2:	d0f4      	beq.n	8009aae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b1f      	cmp	r3, #31
 8009ad0:	d80a      	bhi.n	8009ae8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2280      	movs	r2, #128	; 0x80
 8009ad6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009ada:	2100      	movs	r1, #0
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff fc1f 	bl	8009320 <dir_sdi>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	75fb      	strb	r3, [r7, #23]
 8009ae6:	e043      	b.n	8009b70 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ae8:	463b      	mov	r3, r7
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7ff ff3f 	bl	8009970 <create_name>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d134      	bne.n	8009b66 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff fe32 	bl	8009766 <dir_find>
 8009b02:	4603      	mov	r3, r0
 8009b04:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b0c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00a      	beq.n	8009b2a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d127      	bne.n	8009b6a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009b1a:	7afb      	ldrb	r3, [r7, #11]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d122      	bne.n	8009b6a <follow_path+0xd2>
 8009b24:	2305      	movs	r3, #5
 8009b26:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009b28:	e01f      	b.n	8009b6a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b2a:	7afb      	ldrb	r3, [r7, #11]
 8009b2c:	f003 0304 	and.w	r3, r3, #4
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d11c      	bne.n	8009b6e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	799b      	ldrb	r3, [r3, #6]
 8009b38:	f003 0310 	and.w	r3, r3, #16
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d102      	bne.n	8009b46 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009b40:	2305      	movs	r3, #5
 8009b42:	75fb      	strb	r3, [r7, #23]
 8009b44:	e014      	b.n	8009b70 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b54:	4413      	add	r3, r2
 8009b56:	4619      	mov	r1, r3
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7ff fd68 	bl	800962e <ld_clust>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b64:	e7c0      	b.n	8009ae8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009b66:	bf00      	nop
 8009b68:	e002      	b.n	8009b70 <follow_path+0xd8>
				break;
 8009b6a:	bf00      	nop
 8009b6c:	e000      	b.n	8009b70 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b6e:	bf00      	nop
			}
		}
	}

	return res;
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b087      	sub	sp, #28
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b86:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d031      	beq.n	8009bf4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	617b      	str	r3, [r7, #20]
 8009b96:	e002      	b.n	8009b9e <get_ldnumber+0x24>
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	617b      	str	r3, [r7, #20]
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b20      	cmp	r3, #32
 8009ba4:	d903      	bls.n	8009bae <get_ldnumber+0x34>
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b3a      	cmp	r3, #58	; 0x3a
 8009bac:	d1f4      	bne.n	8009b98 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2b3a      	cmp	r3, #58	; 0x3a
 8009bb4:	d11c      	bne.n	8009bf0 <get_ldnumber+0x76>
			tp = *path;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	60fa      	str	r2, [r7, #12]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	3b30      	subs	r3, #48	; 0x30
 8009bc6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b09      	cmp	r3, #9
 8009bcc:	d80e      	bhi.n	8009bec <get_ldnumber+0x72>
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d10a      	bne.n	8009bec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d107      	bne.n	8009bec <get_ldnumber+0x72>
					vol = (int)i;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	3301      	adds	r3, #1
 8009be4:	617b      	str	r3, [r7, #20]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	e002      	b.n	8009bf6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009bf4:	693b      	ldr	r3, [r7, #16]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	371c      	adds	r7, #28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
	...

08009c04 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	70da      	strb	r2, [r3, #3]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c1a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7fe fffe 	bl	8008c20 <move_window>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <check_fs+0x2a>
 8009c2a:	2304      	movs	r3, #4
 8009c2c:	e038      	b.n	8009ca0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	3330      	adds	r3, #48	; 0x30
 8009c32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe fd42 	bl	80086c0 <ld_word>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d001      	beq.n	8009c4c <check_fs+0x48>
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e029      	b.n	8009ca0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c52:	2be9      	cmp	r3, #233	; 0xe9
 8009c54:	d009      	beq.n	8009c6a <check_fs+0x66>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c5c:	2beb      	cmp	r3, #235	; 0xeb
 8009c5e:	d11e      	bne.n	8009c9e <check_fs+0x9a>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009c66:	2b90      	cmp	r3, #144	; 0x90
 8009c68:	d119      	bne.n	8009c9e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	3330      	adds	r3, #48	; 0x30
 8009c6e:	3336      	adds	r3, #54	; 0x36
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe fd3d 	bl	80086f0 <ld_dword>
 8009c76:	4603      	mov	r3, r0
 8009c78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c7c:	4a0a      	ldr	r2, [pc, #40]	; (8009ca8 <check_fs+0xa4>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d101      	bne.n	8009c86 <check_fs+0x82>
 8009c82:	2300      	movs	r3, #0
 8009c84:	e00c      	b.n	8009ca0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3330      	adds	r3, #48	; 0x30
 8009c8a:	3352      	adds	r3, #82	; 0x52
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe fd2f 	bl	80086f0 <ld_dword>
 8009c92:	4603      	mov	r3, r0
 8009c94:	4a05      	ldr	r2, [pc, #20]	; (8009cac <check_fs+0xa8>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d101      	bne.n	8009c9e <check_fs+0x9a>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e000      	b.n	8009ca0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009c9e:	2302      	movs	r3, #2
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	00544146 	.word	0x00544146
 8009cac:	33544146 	.word	0x33544146

08009cb0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b096      	sub	sp, #88	; 0x58
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7ff ff58 	bl	8009b7a <get_ldnumber>
 8009cca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	da01      	bge.n	8009cd6 <find_volume+0x26>
 8009cd2:	230b      	movs	r3, #11
 8009cd4:	e22d      	b.n	800a132 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009cd6:	4aa1      	ldr	r2, [pc, #644]	; (8009f5c <find_volume+0x2ac>)
 8009cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cde:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <find_volume+0x3a>
 8009ce6:	230c      	movs	r3, #12
 8009ce8:	e223      	b.n	800a132 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009cf0:	79fb      	ldrb	r3, [r7, #7]
 8009cf2:	f023 0301 	bic.w	r3, r3, #1
 8009cf6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01a      	beq.n	8009d36 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d02:	785b      	ldrb	r3, [r3, #1]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fe fc3d 	bl	8008584 <disk_status>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009d10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10c      	bne.n	8009d36 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009d1c:	79fb      	ldrb	r3, [r7, #7]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d007      	beq.n	8009d32 <find_volume+0x82>
 8009d22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009d2e:	230a      	movs	r3, #10
 8009d30:	e1ff      	b.n	800a132 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009d32:	2300      	movs	r3, #0
 8009d34:	e1fd      	b.n	800a132 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d38:	2200      	movs	r2, #0
 8009d3a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	785b      	ldrb	r3, [r3, #1]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe fc35 	bl	80085b8 <disk_initialize>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009d54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d58:	f003 0301 	and.w	r3, r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009d60:	2303      	movs	r3, #3
 8009d62:	e1e6      	b.n	800a132 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009d64:	79fb      	ldrb	r3, [r7, #7]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d007      	beq.n	8009d7a <find_volume+0xca>
 8009d6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d6e:	f003 0304 	and.w	r3, r3, #4
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009d76:	230a      	movs	r3, #10
 8009d78:	e1db      	b.n	800a132 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009d7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d82:	f7ff ff3f 	bl	8009c04 <check_fs>
 8009d86:	4603      	mov	r3, r0
 8009d88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009d8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d149      	bne.n	8009e28 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009d94:	2300      	movs	r3, #0
 8009d96:	643b      	str	r3, [r7, #64]	; 0x40
 8009d98:	e01e      	b.n	8009dd8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009da8:	4413      	add	r3, r2
 8009daa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	3304      	adds	r3, #4
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d006      	beq.n	8009dc4 <find_volume+0x114>
 8009db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db8:	3308      	adds	r3, #8
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fc98 	bl	80086f0 <ld_dword>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	e000      	b.n	8009dc6 <find_volume+0x116>
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	3358      	adds	r3, #88	; 0x58
 8009dcc:	443b      	add	r3, r7
 8009dce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8009dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d9dd      	bls.n	8009d9a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009dde:	2300      	movs	r3, #0
 8009de0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <find_volume+0x13e>
 8009de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dea:	3b01      	subs	r3, #1
 8009dec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	3358      	adds	r3, #88	; 0x58
 8009df4:	443b      	add	r3, r7
 8009df6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009dfa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d005      	beq.n	8009e0e <find_volume+0x15e>
 8009e02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e06:	f7ff fefd 	bl	8009c04 <check_fs>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	e000      	b.n	8009e10 <find_volume+0x160>
 8009e0e:	2303      	movs	r3, #3
 8009e10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009e14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d905      	bls.n	8009e28 <find_volume+0x178>
 8009e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e1e:	3301      	adds	r3, #1
 8009e20:	643b      	str	r3, [r7, #64]	; 0x40
 8009e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e24:	2b03      	cmp	r3, #3
 8009e26:	d9e2      	bls.n	8009dee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e2c:	2b04      	cmp	r3, #4
 8009e2e:	d101      	bne.n	8009e34 <find_volume+0x184>
 8009e30:	2301      	movs	r3, #1
 8009e32:	e17e      	b.n	800a132 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d901      	bls.n	8009e40 <find_volume+0x190>
 8009e3c:	230d      	movs	r3, #13
 8009e3e:	e178      	b.n	800a132 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	3330      	adds	r3, #48	; 0x30
 8009e44:	330b      	adds	r3, #11
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe fc3a 	bl	80086c0 <ld_word>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e52:	d001      	beq.n	8009e58 <find_volume+0x1a8>
 8009e54:	230d      	movs	r3, #13
 8009e56:	e16c      	b.n	800a132 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5a:	3330      	adds	r3, #48	; 0x30
 8009e5c:	3316      	adds	r3, #22
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fc2e 	bl	80086c0 <ld_word>
 8009e64:	4603      	mov	r3, r0
 8009e66:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d106      	bne.n	8009e7c <find_volume+0x1cc>
 8009e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e70:	3330      	adds	r3, #48	; 0x30
 8009e72:	3324      	adds	r3, #36	; 0x24
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fe fc3b 	bl	80086f0 <ld_dword>
 8009e7a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e80:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e84:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	789b      	ldrb	r3, [r3, #2]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d005      	beq.n	8009ea0 <find_volume+0x1f0>
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	789b      	ldrb	r3, [r3, #2]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d001      	beq.n	8009ea0 <find_volume+0x1f0>
 8009e9c:	230d      	movs	r3, #13
 8009e9e:	e148      	b.n	800a132 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	789b      	ldrb	r3, [r3, #2]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ea8:	fb02 f303 	mul.w	r3, r2, r3
 8009eac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebc:	895b      	ldrh	r3, [r3, #10]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d008      	beq.n	8009ed4 <find_volume+0x224>
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	895b      	ldrh	r3, [r3, #10]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	895b      	ldrh	r3, [r3, #10]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	4013      	ands	r3, r2
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <find_volume+0x228>
 8009ed4:	230d      	movs	r3, #13
 8009ed6:	e12c      	b.n	800a132 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eda:	3330      	adds	r3, #48	; 0x30
 8009edc:	3311      	adds	r3, #17
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fe fbee 	bl	80086c0 <ld_word>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	891b      	ldrh	r3, [r3, #8]
 8009ef0:	f003 030f 	and.w	r3, r3, #15
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <find_volume+0x24e>
 8009efa:	230d      	movs	r3, #13
 8009efc:	e119      	b.n	800a132 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	3330      	adds	r3, #48	; 0x30
 8009f02:	3313      	adds	r3, #19
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe fbdb 	bl	80086c0 <ld_word>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d106      	bne.n	8009f22 <find_volume+0x272>
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	3330      	adds	r3, #48	; 0x30
 8009f18:	3320      	adds	r3, #32
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fe fbe8 	bl	80086f0 <ld_dword>
 8009f20:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f24:	3330      	adds	r3, #48	; 0x30
 8009f26:	330e      	adds	r3, #14
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fe fbc9 	bl	80086c0 <ld_word>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009f32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <find_volume+0x28c>
 8009f38:	230d      	movs	r3, #13
 8009f3a:	e0fa      	b.n	800a132 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f40:	4413      	add	r3, r2
 8009f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f44:	8912      	ldrh	r2, [r2, #8]
 8009f46:	0912      	lsrs	r2, r2, #4
 8009f48:	b292      	uxth	r2, r2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d204      	bcs.n	8009f60 <find_volume+0x2b0>
 8009f56:	230d      	movs	r3, #13
 8009f58:	e0eb      	b.n	800a132 <find_volume+0x482>
 8009f5a:	bf00      	nop
 8009f5c:	20000d28 	.word	0x20000d28
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f68:	8952      	ldrh	r2, [r2, #10]
 8009f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f6e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <find_volume+0x2ca>
 8009f76:	230d      	movs	r3, #13
 8009f78:	e0db      	b.n	800a132 <find_volume+0x482>
		fmt = FS_FAT32;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d802      	bhi.n	8009f90 <find_volume+0x2e0>
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d802      	bhi.n	8009fa0 <find_volume+0x2f0>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	1c9a      	adds	r2, r3, #2
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009faa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fac:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009fae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fb2:	441a      	add	r2, r3
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009fb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbc:	441a      	add	r2, r3
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009fc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	d11e      	bne.n	800a008 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fcc:	3330      	adds	r3, #48	; 0x30
 8009fce:	332a      	adds	r3, #42	; 0x2a
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fe fb75 	bl	80086c0 <ld_word>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <find_volume+0x330>
 8009fdc:	230d      	movs	r3, #13
 8009fde:	e0a8      	b.n	800a132 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	891b      	ldrh	r3, [r3, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <find_volume+0x33c>
 8009fe8:	230d      	movs	r3, #13
 8009fea:	e0a2      	b.n	800a132 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	3330      	adds	r3, #48	; 0x30
 8009ff0:	332c      	adds	r3, #44	; 0x2c
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe fb7c 	bl	80086f0 <ld_dword>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	647b      	str	r3, [r7, #68]	; 0x44
 800a006:	e01f      	b.n	800a048 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	891b      	ldrh	r3, [r3, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <find_volume+0x364>
 800a010:	230d      	movs	r3, #13
 800a012:	e08e      	b.n	800a132 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	6a1a      	ldr	r2, [r3, #32]
 800a018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a01a:	441a      	add	r2, r3
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a024:	2b02      	cmp	r3, #2
 800a026:	d103      	bne.n	800a030 <find_volume+0x380>
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	e00a      	b.n	800a046 <find_volume+0x396>
 800a030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a032:	695a      	ldr	r2, [r3, #20]
 800a034:	4613      	mov	r3, r2
 800a036:	005b      	lsls	r3, r3, #1
 800a038:	4413      	add	r3, r2
 800a03a:	085a      	lsrs	r2, r3, #1
 800a03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a046:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04a:	699a      	ldr	r2, [r3, #24]
 800a04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a04e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a052:	0a5b      	lsrs	r3, r3, #9
 800a054:	429a      	cmp	r2, r3
 800a056:	d201      	bcs.n	800a05c <find_volume+0x3ac>
 800a058:	230d      	movs	r3, #13
 800a05a:	e06a      	b.n	800a132 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a062:	611a      	str	r2, [r3, #16]
 800a064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a066:	691a      	ldr	r2, [r3, #16]
 800a068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	2280      	movs	r2, #128	; 0x80
 800a070:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a072:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a076:	2b03      	cmp	r3, #3
 800a078:	d149      	bne.n	800a10e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	3330      	adds	r3, #48	; 0x30
 800a07e:	3330      	adds	r3, #48	; 0x30
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe fb1d 	bl	80086c0 <ld_word>
 800a086:	4603      	mov	r3, r0
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d140      	bne.n	800a10e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a08c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a08e:	3301      	adds	r3, #1
 800a090:	4619      	mov	r1, r3
 800a092:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a094:	f7fe fdc4 	bl	8008c20 <move_window>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d137      	bne.n	800a10e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a6:	3330      	adds	r3, #48	; 0x30
 800a0a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe fb07 	bl	80086c0 <ld_word>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d127      	bne.n	800a10e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c0:	3330      	adds	r3, #48	; 0x30
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe fb14 	bl	80086f0 <ld_dword>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	4a1c      	ldr	r2, [pc, #112]	; (800a13c <find_volume+0x48c>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d11e      	bne.n	800a10e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d2:	3330      	adds	r3, #48	; 0x30
 800a0d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fb09 	bl	80086f0 <ld_dword>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	4a17      	ldr	r2, [pc, #92]	; (800a140 <find_volume+0x490>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d113      	bne.n	800a10e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e8:	3330      	adds	r3, #48	; 0x30
 800a0ea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe fafe 	bl	80086f0 <ld_dword>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fc:	3330      	adds	r3, #48	; 0x30
 800a0fe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe faf4 	bl	80086f0 <ld_dword>
 800a108:	4602      	mov	r2, r0
 800a10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a110:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a114:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a116:	4b0b      	ldr	r3, [pc, #44]	; (800a144 <find_volume+0x494>)
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	3301      	adds	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	4b09      	ldr	r3, [pc, #36]	; (800a144 <find_volume+0x494>)
 800a120:	801a      	strh	r2, [r3, #0]
 800a122:	4b08      	ldr	r3, [pc, #32]	; (800a144 <find_volume+0x494>)
 800a124:	881a      	ldrh	r2, [r3, #0]
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a12a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a12c:	f7fe fd10 	bl	8008b50 <clear_lock>
#endif
	return FR_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3758      	adds	r7, #88	; 0x58
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	41615252 	.word	0x41615252
 800a140:	61417272 	.word	0x61417272
 800a144:	20000d2c 	.word	0x20000d2c

0800a148 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a152:	2309      	movs	r3, #9
 800a154:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d01c      	beq.n	800a196 <validate+0x4e>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d018      	beq.n	800a196 <validate+0x4e>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d013      	beq.n	800a196 <validate+0x4e>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	889a      	ldrh	r2, [r3, #4]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	88db      	ldrh	r3, [r3, #6]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d10c      	bne.n	800a196 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	785b      	ldrb	r3, [r3, #1]
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe f9fe 	bl	8008584 <disk_status>
 800a188:	4603      	mov	r3, r0
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <validate+0x4e>
			res = FR_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a196:	7bfb      	ldrb	r3, [r7, #15]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <validate+0x5a>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	e000      	b.n	800a1a4 <validate+0x5c>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	6013      	str	r3, [r2, #0]
	return res;
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a1c6:	f107 0310 	add.w	r3, r7, #16
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7ff fcd5 	bl	8009b7a <get_ldnumber>
 800a1d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	da01      	bge.n	800a1dc <f_mount+0x28>
 800a1d8:	230b      	movs	r3, #11
 800a1da:	e02b      	b.n	800a234 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a1dc:	4a17      	ldr	r2, [pc, #92]	; (800a23c <f_mount+0x88>)
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d005      	beq.n	800a1f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a1ec:	69b8      	ldr	r0, [r7, #24]
 800a1ee:	f7fe fcaf 	bl	8008b50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	490d      	ldr	r1, [pc, #52]	; (800a23c <f_mount+0x88>)
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <f_mount+0x66>
 800a214:	79fb      	ldrb	r3, [r7, #7]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d001      	beq.n	800a21e <f_mount+0x6a>
 800a21a:	2300      	movs	r3, #0
 800a21c:	e00a      	b.n	800a234 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a21e:	f107 010c 	add.w	r1, r7, #12
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	2200      	movs	r2, #0
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff fd41 	bl	8009cb0 <find_volume>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a232:	7dfb      	ldrb	r3, [r7, #23]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3720      	adds	r7, #32
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000d28 	.word	0x20000d28

0800a240 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b098      	sub	sp, #96	; 0x60
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	4613      	mov	r3, r2
 800a24c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <f_open+0x18>
 800a254:	2309      	movs	r3, #9
 800a256:	e1ad      	b.n	800a5b4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a258:	79fb      	ldrb	r3, [r7, #7]
 800a25a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a25e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a260:	79fa      	ldrb	r2, [r7, #7]
 800a262:	f107 0110 	add.w	r1, r7, #16
 800a266:	f107 0308 	add.w	r3, r7, #8
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7ff fd20 	bl	8009cb0 <find_volume>
 800a270:	4603      	mov	r3, r0
 800a272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f040 8191 	bne.w	800a5a2 <f_open+0x362>
		dj.obj.fs = fs;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	f107 0314 	add.w	r3, r7, #20
 800a28a:	4611      	mov	r1, r2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff fc03 	bl	8009a98 <follow_path>
 800a292:	4603      	mov	r3, r0
 800a294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d11a      	bne.n	800a2d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a2a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2a4:	b25b      	sxtb	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	da03      	bge.n	800a2b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a2aa:	2306      	movs	r3, #6
 800a2ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a2b0:	e011      	b.n	800a2d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2b2:	79fb      	ldrb	r3, [r7, #7]
 800a2b4:	f023 0301 	bic.w	r3, r3, #1
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bf14      	ite	ne
 800a2bc:	2301      	movne	r3, #1
 800a2be:	2300      	moveq	r3, #0
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f107 0314 	add.w	r3, r7, #20
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fe faf8 	bl	80088c0 <chk_lock>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a2d6:	79fb      	ldrb	r3, [r7, #7]
 800a2d8:	f003 031c 	and.w	r3, r3, #28
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d07f      	beq.n	800a3e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a2e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d017      	beq.n	800a318 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a2e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2ec:	2b04      	cmp	r3, #4
 800a2ee:	d10e      	bne.n	800a30e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a2f0:	f7fe fb42 	bl	8008978 <enq_lock>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d006      	beq.n	800a308 <f_open+0xc8>
 800a2fa:	f107 0314 	add.w	r3, r7, #20
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7ff fa86 	bl	8009810 <dir_register>
 800a304:	4603      	mov	r3, r0
 800a306:	e000      	b.n	800a30a <f_open+0xca>
 800a308:	2312      	movs	r3, #18
 800a30a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a30e:	79fb      	ldrb	r3, [r7, #7]
 800a310:	f043 0308 	orr.w	r3, r3, #8
 800a314:	71fb      	strb	r3, [r7, #7]
 800a316:	e010      	b.n	800a33a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a318:	7ebb      	ldrb	r3, [r7, #26]
 800a31a:	f003 0311 	and.w	r3, r3, #17
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <f_open+0xea>
					res = FR_DENIED;
 800a322:	2307      	movs	r3, #7
 800a324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a328:	e007      	b.n	800a33a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a32a:	79fb      	ldrb	r3, [r7, #7]
 800a32c:	f003 0304 	and.w	r3, r3, #4
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <f_open+0xfa>
 800a334:	2308      	movs	r3, #8
 800a336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a33a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d168      	bne.n	800a414 <f_open+0x1d4>
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	f003 0308 	and.w	r3, r3, #8
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d063      	beq.n	800a414 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a34c:	f7fd ff52 	bl	80081f4 <get_fattime>
 800a350:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a354:	330e      	adds	r3, #14
 800a356:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fe fa07 	bl	800876c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	3316      	adds	r3, #22
 800a362:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe fa01 	bl	800876c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36c:	330b      	adds	r3, #11
 800a36e:	2220      	movs	r2, #32
 800a370:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a376:	4611      	mov	r1, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff f958 	bl	800962e <ld_clust>
 800a37e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a384:	2200      	movs	r2, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f7ff f970 	bl	800966c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38e:	331c      	adds	r3, #28
 800a390:	2100      	movs	r1, #0
 800a392:	4618      	mov	r0, r3
 800a394:	f7fe f9ea 	bl	800876c <st_dword>
					fs->wflag = 1;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2201      	movs	r2, #1
 800a39c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a39e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d037      	beq.n	800a414 <f_open+0x1d4>
						dw = fs->winsect;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a3aa:	f107 0314 	add.w	r3, r7, #20
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe fe83 	bl	80090be <remove_chain>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a3be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d126      	bne.n	800a414 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fc28 	bl	8008c20 <move_window>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3da:	3a01      	subs	r2, #1
 800a3dc:	60da      	str	r2, [r3, #12]
 800a3de:	e019      	b.n	800a414 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a3e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d115      	bne.n	800a414 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a3e8:	7ebb      	ldrb	r3, [r7, #26]
 800a3ea:	f003 0310 	and.w	r3, r3, #16
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <f_open+0x1ba>
					res = FR_NO_FILE;
 800a3f2:	2304      	movs	r3, #4
 800a3f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a3f8:	e00c      	b.n	800a414 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d007      	beq.n	800a414 <f_open+0x1d4>
 800a404:	7ebb      	ldrb	r3, [r7, #26]
 800a406:	f003 0301 	and.w	r3, r3, #1
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <f_open+0x1d4>
						res = FR_DENIED;
 800a40e:	2307      	movs	r3, #7
 800a410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a414:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d128      	bne.n	800a46e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a41c:	79fb      	ldrb	r3, [r7, #7]
 800a41e:	f003 0308 	and.w	r3, r3, #8
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a426:	79fb      	ldrb	r3, [r7, #7]
 800a428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a42c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a43c:	79fb      	ldrb	r3, [r7, #7]
 800a43e:	f023 0301 	bic.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	bf14      	ite	ne
 800a446:	2301      	movne	r3, #1
 800a448:	2300      	moveq	r3, #0
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	461a      	mov	r2, r3
 800a44e:	f107 0314 	add.w	r3, r7, #20
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe fab1 	bl	80089bc <inc_lock>
 800a45a:	4602      	mov	r2, r0
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d102      	bne.n	800a46e <f_open+0x22e>
 800a468:	2302      	movs	r3, #2
 800a46a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a46e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a472:	2b00      	cmp	r3, #0
 800a474:	f040 8095 	bne.w	800a5a2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a47c:	4611      	mov	r1, r2
 800a47e:	4618      	mov	r0, r3
 800a480:	f7ff f8d5 	bl	800962e <ld_clust>
 800a484:	4602      	mov	r2, r0
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48c:	331c      	adds	r3, #28
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe f92e 	bl	80086f0 <ld_dword>
 800a494:	4602      	mov	r2, r0
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	88da      	ldrh	r2, [r3, #6]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	79fa      	ldrb	r2, [r7, #7]
 800a4b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3330      	adds	r3, #48	; 0x30
 800a4ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe f998 	bl	8008806 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	f003 0320 	and.w	r3, r3, #32
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d060      	beq.n	800a5a2 <f_open+0x362>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d05c      	beq.n	800a5a2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	895b      	ldrh	r3, [r3, #10]
 800a4f4:	025b      	lsls	r3, r3, #9
 800a4f6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	657b      	str	r3, [r7, #84]	; 0x54
 800a504:	e016      	b.n	800a534 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe fc43 	bl	8008d96 <get_fat>
 800a510:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a514:	2b01      	cmp	r3, #1
 800a516:	d802      	bhi.n	800a51e <f_open+0x2de>
 800a518:	2302      	movs	r3, #2
 800a51a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a51e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a524:	d102      	bne.n	800a52c <f_open+0x2ec>
 800a526:	2301      	movs	r3, #1
 800a528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a52c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a52e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	657b      	str	r3, [r7, #84]	; 0x54
 800a534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d103      	bne.n	800a544 <f_open+0x304>
 800a53c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a53e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a540:	429a      	cmp	r2, r3
 800a542:	d8e0      	bhi.n	800a506 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a548:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a54a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d127      	bne.n	800a5a2 <f_open+0x362>
 800a552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d022      	beq.n	800a5a2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a560:	4618      	mov	r0, r3
 800a562:	f7fe fbf9 	bl	8008d58 <clust2sect>
 800a566:	6478      	str	r0, [r7, #68]	; 0x44
 800a568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d103      	bne.n	800a576 <f_open+0x336>
						res = FR_INT_ERR;
 800a56e:	2302      	movs	r3, #2
 800a570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a574:	e015      	b.n	800a5a2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a578:	0a5a      	lsrs	r2, r3, #9
 800a57a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a57c:	441a      	add	r2, r3
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	7858      	ldrb	r0, [r3, #1]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a1a      	ldr	r2, [r3, #32]
 800a590:	2301      	movs	r3, #1
 800a592:	f7fe f837 	bl	8008604 <disk_read>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <f_open+0x362>
 800a59c:	2301      	movs	r3, #1
 800a59e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a5a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <f_open+0x370>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a5b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3760      	adds	r7, #96	; 0x60
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08c      	sub	sp, #48	; 0x30
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f107 0210 	add.w	r2, r7, #16
 800a5da:	4611      	mov	r1, r2
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff fdb3 	bl	800a148 <validate>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a5e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d107      	bne.n	800a600 <f_write+0x44>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	7d5b      	ldrb	r3, [r3, #21]
 800a5f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a5f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <f_write+0x4a>
 800a600:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a604:	e14b      	b.n	800a89e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	7d1b      	ldrb	r3, [r3, #20]
 800a60a:	f003 0302 	and.w	r3, r3, #2
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <f_write+0x5a>
 800a612:	2307      	movs	r3, #7
 800a614:	e143      	b.n	800a89e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	441a      	add	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	429a      	cmp	r2, r3
 800a624:	f080 812d 	bcs.w	800a882 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	43db      	mvns	r3, r3
 800a62e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a630:	e127      	b.n	800a882 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f040 80e3 	bne.w	800a806 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	0a5b      	lsrs	r3, r3, #9
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	8952      	ldrh	r2, [r2, #10]
 800a64a:	3a01      	subs	r2, #1
 800a64c:	4013      	ands	r3, r2
 800a64e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d143      	bne.n	800a6de <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10c      	bne.n	800a678 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	2b00      	cmp	r3, #0
 800a668:	d11a      	bne.n	800a6a0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2100      	movs	r1, #0
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fd8a 	bl	8009188 <create_chain>
 800a674:	62b8      	str	r0, [r7, #40]	; 0x28
 800a676:	e013      	b.n	800a6a0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d007      	beq.n	800a690 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	4619      	mov	r1, r3
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f7fe fe16 	bl	80092b8 <clmt_clust>
 800a68c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a68e:	e007      	b.n	800a6a0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	4619      	mov	r1, r3
 800a698:	4610      	mov	r0, r2
 800a69a:	f7fe fd75 	bl	8009188 <create_chain>
 800a69e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 80f2 	beq.w	800a88c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d104      	bne.n	800a6b8 <f_write+0xfc>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	755a      	strb	r2, [r3, #21]
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	e0f2      	b.n	800a89e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6be:	d104      	bne.n	800a6ca <f_write+0x10e>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	755a      	strb	r2, [r3, #21]
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e0e9      	b.n	800a89e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ce:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d102      	bne.n	800a6de <f_write+0x122>
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6dc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	7d1b      	ldrb	r3, [r3, #20]
 800a6e2:	b25b      	sxtb	r3, r3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	da18      	bge.n	800a71a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	7858      	ldrb	r0, [r3, #1]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6a1a      	ldr	r2, [r3, #32]
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	f7fd ffa4 	bl	8008644 <disk_write>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d004      	beq.n	800a70c <f_write+0x150>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2201      	movs	r2, #1
 800a706:	755a      	strb	r2, [r3, #21]
 800a708:	2301      	movs	r3, #1
 800a70a:	e0c8      	b.n	800a89e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	7d1b      	ldrb	r3, [r3, #20]
 800a710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a714:	b2da      	uxtb	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	4619      	mov	r1, r3
 800a722:	4610      	mov	r0, r2
 800a724:	f7fe fb18 	bl	8008d58 <clust2sect>
 800a728:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d104      	bne.n	800a73a <f_write+0x17e>
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2202      	movs	r2, #2
 800a734:	755a      	strb	r2, [r3, #21]
 800a736:	2302      	movs	r3, #2
 800a738:	e0b1      	b.n	800a89e <f_write+0x2e2>
			sect += csect;
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	4413      	add	r3, r2
 800a740:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	0a5b      	lsrs	r3, r3, #9
 800a746:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d03c      	beq.n	800a7c8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	4413      	add	r3, r2
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	8952      	ldrh	r2, [r2, #10]
 800a758:	4293      	cmp	r3, r2
 800a75a:	d905      	bls.n	800a768 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	895b      	ldrh	r3, [r3, #10]
 800a760:	461a      	mov	r2, r3
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	7858      	ldrb	r0, [r3, #1]
 800a76c:	6a3b      	ldr	r3, [r7, #32]
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	69f9      	ldr	r1, [r7, #28]
 800a772:	f7fd ff67 	bl	8008644 <disk_write>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d004      	beq.n	800a786 <f_write+0x1ca>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2201      	movs	r2, #1
 800a780:	755a      	strb	r2, [r3, #21]
 800a782:	2301      	movs	r3, #1
 800a784:	e08b      	b.n	800a89e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6a1a      	ldr	r2, [r3, #32]
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	6a3a      	ldr	r2, [r7, #32]
 800a790:	429a      	cmp	r2, r3
 800a792:	d915      	bls.n	800a7c0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6a1a      	ldr	r2, [r3, #32]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	025b      	lsls	r3, r3, #9
 800a7a4:	69fa      	ldr	r2, [r7, #28]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	f7fe f809 	bl	80087c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	7d1b      	ldrb	r3, [r3, #20]
 800a7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	025b      	lsls	r3, r3, #9
 800a7c4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a7c6:	e03f      	b.n	800a848 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d016      	beq.n	800a800 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	699a      	ldr	r2, [r3, #24]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d210      	bcs.n	800a800 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	7858      	ldrb	r0, [r3, #1]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	f7fd ff0a 	bl	8008604 <disk_read>
 800a7f0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d004      	beq.n	800a800 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	755a      	strb	r2, [r3, #21]
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e04e      	b.n	800a89e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a80e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a812:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d901      	bls.n	800a820 <f_write+0x264>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a82e:	4413      	add	r3, r2
 800a830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a832:	69f9      	ldr	r1, [r7, #28]
 800a834:	4618      	mov	r0, r3
 800a836:	f7fd ffc5 	bl	80087c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	7d1b      	ldrb	r3, [r3, #20]
 800a83e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a842:	b2da      	uxtb	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a848:	69fa      	ldr	r2, [r7, #28]
 800a84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84c:	4413      	add	r3, r2
 800a84e:	61fb      	str	r3, [r7, #28]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	699a      	ldr	r2, [r3, #24]
 800a854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a856:	441a      	add	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	619a      	str	r2, [r3, #24]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	429a      	cmp	r2, r3
 800a866:	bf38      	it	cc
 800a868:	461a      	movcc	r2, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	60da      	str	r2, [r3, #12]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	441a      	add	r2, r3
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	1ad3      	subs	r3, r2, r3
 800a880:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	f47f aed4 	bne.w	800a632 <f_write+0x76>
 800a88a:	e000      	b.n	800a88e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a88c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	7d1b      	ldrb	r3, [r3, #20]
 800a892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a896:	b2da      	uxtb	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3730      	adds	r7, #48	; 0x30
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b086      	sub	sp, #24
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f107 0208 	add.w	r2, r7, #8
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7ff fc46 	bl	800a148 <validate>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a8c0:	7dfb      	ldrb	r3, [r7, #23]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d168      	bne.n	800a998 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	7d1b      	ldrb	r3, [r3, #20]
 800a8ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d062      	beq.n	800a998 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	7d1b      	ldrb	r3, [r3, #20]
 800a8d6:	b25b      	sxtb	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	da15      	bge.n	800a908 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	7858      	ldrb	r0, [r3, #1]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1a      	ldr	r2, [r3, #32]
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	f7fd feaa 	bl	8008644 <disk_write>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <f_sync+0x54>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e04f      	b.n	800a99a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	7d1b      	ldrb	r3, [r3, #20]
 800a8fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a902:	b2da      	uxtb	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a908:	f7fd fc74 	bl	80081f4 <get_fattime>
 800a90c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	4619      	mov	r1, r3
 800a916:	4610      	mov	r0, r2
 800a918:	f7fe f982 	bl	8008c20 <move_window>
 800a91c:	4603      	mov	r3, r0
 800a91e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a920:	7dfb      	ldrb	r3, [r7, #23]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d138      	bne.n	800a998 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	330b      	adds	r3, #11
 800a930:	781a      	ldrb	r2, [r3, #0]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	330b      	adds	r3, #11
 800a936:	f042 0220 	orr.w	r2, r2, #32
 800a93a:	b2d2      	uxtb	r2, r2
 800a93c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6818      	ldr	r0, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	461a      	mov	r2, r3
 800a948:	68f9      	ldr	r1, [r7, #12]
 800a94a:	f7fe fe8f 	bl	800966c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f103 021c 	add.w	r2, r3, #28
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	4619      	mov	r1, r3
 800a95a:	4610      	mov	r0, r2
 800a95c:	f7fd ff06 	bl	800876c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3316      	adds	r3, #22
 800a964:	6939      	ldr	r1, [r7, #16]
 800a966:	4618      	mov	r0, r3
 800a968:	f7fd ff00 	bl	800876c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3312      	adds	r3, #18
 800a970:	2100      	movs	r1, #0
 800a972:	4618      	mov	r0, r3
 800a974:	f7fd fedf 	bl	8008736 <st_word>
					fs->wflag = 1;
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	2201      	movs	r2, #1
 800a97c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	4618      	mov	r0, r3
 800a982:	f7fe f97b 	bl	8008c7c <sync_fs>
 800a986:	4603      	mov	r3, r0
 800a988:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	7d1b      	ldrb	r3, [r3, #20]
 800a98e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a992:	b2da      	uxtb	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a998:	7dfb      	ldrb	r3, [r7, #23]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7ff ff7b 	bl	800a8a6 <f_sync>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d118      	bne.n	800a9ec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f107 0208 	add.w	r2, r7, #8
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff fbc0 	bl	800a148 <validate>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10c      	bne.n	800a9ec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe f87e 	bl	8008ad8 <dec_lock>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d102      	bne.n	800a9ec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b090      	sub	sp, #64	; 0x40
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f107 0208 	add.w	r2, r7, #8
 800aa06:	4611      	mov	r1, r2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff fb9d 	bl	800a148 <validate>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800aa14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d103      	bne.n	800aa24 <f_lseek+0x2e>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	7d5b      	ldrb	r3, [r3, #21]
 800aa20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800aa24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <f_lseek+0x3c>
 800aa2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa30:	e1e6      	b.n	800ae00 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 80d1 	beq.w	800abde <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa42:	d15a      	bne.n	800aafa <f_lseek+0x104>
			tbl = fp->cltbl;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa48:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	1d1a      	adds	r2, r3, #4
 800aa4e:	627a      	str	r2, [r7, #36]	; 0x24
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	2302      	movs	r3, #2
 800aa56:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d03a      	beq.n	800aada <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	613b      	str	r3, [r7, #16]
 800aa68:	2300      	movs	r3, #0
 800aa6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	3302      	adds	r3, #2
 800aa70:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa78:	3301      	adds	r3, #1
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fe f988 	bl	8008d96 <get_fat>
 800aa86:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d804      	bhi.n	800aa98 <f_lseek+0xa2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2202      	movs	r2, #2
 800aa92:	755a      	strb	r2, [r3, #21]
 800aa94:	2302      	movs	r3, #2
 800aa96:	e1b3      	b.n	800ae00 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa9e:	d104      	bne.n	800aaaa <f_lseek+0xb4>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	755a      	strb	r2, [r3, #21]
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e1aa      	b.n	800ae00 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	3301      	adds	r3, #1
 800aaae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d0de      	beq.n	800aa72 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800aab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d809      	bhi.n	800aad0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	1d1a      	adds	r2, r3, #4
 800aac0:	627a      	str	r2, [r7, #36]	; 0x24
 800aac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	1d1a      	adds	r2, r3, #4
 800aaca:	627a      	str	r2, [r7, #36]	; 0x24
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d3c4      	bcc.n	800aa64 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800aae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d803      	bhi.n	800aaf2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	2200      	movs	r2, #0
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	e184      	b.n	800adfc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800aaf2:	2311      	movs	r3, #17
 800aaf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800aaf8:	e180      	b.n	800adfc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d902      	bls.n	800ab0a <f_lseek+0x114>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 8172 	beq.w	800adfc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7fe fbca 	bl	80092b8 <clmt_clust>
 800ab24:	4602      	mov	r2, r0
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	4619      	mov	r1, r3
 800ab32:	4610      	mov	r0, r2
 800ab34:	f7fe f910 	bl	8008d58 <clust2sect>
 800ab38:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d104      	bne.n	800ab4a <f_lseek+0x154>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	755a      	strb	r2, [r3, #21]
 800ab46:	2302      	movs	r3, #2
 800ab48:	e15a      	b.n	800ae00 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	0a5b      	lsrs	r3, r3, #9
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	8952      	ldrh	r2, [r2, #10]
 800ab54:	3a01      	subs	r2, #1
 800ab56:	4013      	ands	r3, r2
 800ab58:	69ba      	ldr	r2, [r7, #24]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 8148 	beq.w	800adfc <f_lseek+0x406>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	f000 8142 	beq.w	800adfc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	7d1b      	ldrb	r3, [r3, #20]
 800ab7c:	b25b      	sxtb	r3, r3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	da18      	bge.n	800abb4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	7858      	ldrb	r0, [r3, #1]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a1a      	ldr	r2, [r3, #32]
 800ab90:	2301      	movs	r3, #1
 800ab92:	f7fd fd57 	bl	8008644 <disk_write>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d004      	beq.n	800aba6 <f_lseek+0x1b0>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	755a      	strb	r2, [r3, #21]
 800aba2:	2301      	movs	r3, #1
 800aba4:	e12c      	b.n	800ae00 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	7d1b      	ldrb	r3, [r3, #20]
 800abaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	7858      	ldrb	r0, [r3, #1]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abbe:	2301      	movs	r3, #1
 800abc0:	69ba      	ldr	r2, [r7, #24]
 800abc2:	f7fd fd1f 	bl	8008604 <disk_read>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d004      	beq.n	800abd6 <f_lseek+0x1e0>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	755a      	strb	r2, [r3, #21]
 800abd2:	2301      	movs	r3, #1
 800abd4:	e114      	b.n	800ae00 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	69ba      	ldr	r2, [r7, #24]
 800abda:	621a      	str	r2, [r3, #32]
 800abdc:	e10e      	b.n	800adfc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d908      	bls.n	800abfa <f_lseek+0x204>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	7d1b      	ldrb	r3, [r3, #20]
 800abec:	f003 0302 	and.w	r3, r3, #2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d102      	bne.n	800abfa <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	637b      	str	r3, [r7, #52]	; 0x34
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac08:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f000 80a7 	beq.w	800ad60 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	895b      	ldrh	r3, [r3, #10]
 800ac16:	025b      	lsls	r3, r3, #9
 800ac18:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d01b      	beq.n	800ac58 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	1e5a      	subs	r2, r3, #1
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	1e59      	subs	r1, r3, #1
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d30f      	bcc.n	800ac58 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	1e5a      	subs	r2, r3, #1
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	425b      	negs	r3, r3
 800ac40:	401a      	ands	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	683a      	ldr	r2, [r7, #0]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	69db      	ldr	r3, [r3, #28]
 800ac54:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac56:	e022      	b.n	800ac9e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ac5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d119      	bne.n	800ac98 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2100      	movs	r1, #0
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fe fa8d 	bl	8009188 <create_chain>
 800ac6e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ac70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d104      	bne.n	800ac80 <f_lseek+0x28a>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2202      	movs	r2, #2
 800ac7a:	755a      	strb	r2, [r3, #21]
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	e0bf      	b.n	800ae00 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac86:	d104      	bne.n	800ac92 <f_lseek+0x29c>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	755a      	strb	r2, [r3, #21]
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e0b6      	b.n	800ae00 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac96:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac9c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d05d      	beq.n	800ad60 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800aca4:	e03a      	b.n	800ad1c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	603b      	str	r3, [r7, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	699a      	ldr	r2, [r3, #24]
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	441a      	add	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	7d1b      	ldrb	r3, [r3, #20]
 800acbe:	f003 0302 	and.w	r3, r3, #2
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00b      	beq.n	800acde <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe fa5c 	bl	8009188 <create_chain>
 800acd0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800acd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d108      	bne.n	800acea <f_lseek+0x2f4>
							ofs = 0; break;
 800acd8:	2300      	movs	r3, #0
 800acda:	603b      	str	r3, [r7, #0]
 800acdc:	e022      	b.n	800ad24 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe f857 	bl	8008d96 <get_fat>
 800ace8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800acea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acf0:	d104      	bne.n	800acfc <f_lseek+0x306>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	755a      	strb	r2, [r3, #21]
 800acf8:	2301      	movs	r3, #1
 800acfa:	e081      	b.n	800ae00 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d904      	bls.n	800ad0c <f_lseek+0x316>
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	695b      	ldr	r3, [r3, #20]
 800ad06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d304      	bcc.n	800ad16 <f_lseek+0x320>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2202      	movs	r2, #2
 800ad10:	755a      	strb	r2, [r3, #21]
 800ad12:	2302      	movs	r3, #2
 800ad14:	e074      	b.n	800ae00 <f_lseek+0x40a>
					fp->clust = clst;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad1a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d8c0      	bhi.n	800aca6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	699a      	ldr	r2, [r3, #24]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	441a      	add	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d012      	beq.n	800ad60 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe f80a 	bl	8008d58 <clust2sect>
 800ad44:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ad46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d104      	bne.n	800ad56 <f_lseek+0x360>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	755a      	strb	r2, [r3, #21]
 800ad52:	2302      	movs	r3, #2
 800ad54:	e054      	b.n	800ae00 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	0a5b      	lsrs	r3, r3, #9
 800ad5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad5c:	4413      	add	r3, r2
 800ad5e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	699a      	ldr	r2, [r3, #24]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d90a      	bls.n	800ad82 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	699a      	ldr	r2, [r3, #24]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	7d1b      	ldrb	r3, [r3, #20]
 800ad78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad7c:	b2da      	uxtb	r2, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d036      	beq.n	800adfc <f_lseek+0x406>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d031      	beq.n	800adfc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	7d1b      	ldrb	r3, [r3, #20]
 800ad9c:	b25b      	sxtb	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	da18      	bge.n	800add4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	7858      	ldrb	r0, [r3, #1]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a1a      	ldr	r2, [r3, #32]
 800adb0:	2301      	movs	r3, #1
 800adb2:	f7fd fc47 	bl	8008644 <disk_write>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d004      	beq.n	800adc6 <f_lseek+0x3d0>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	755a      	strb	r2, [r3, #21]
 800adc2:	2301      	movs	r3, #1
 800adc4:	e01c      	b.n	800ae00 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	7d1b      	ldrb	r3, [r3, #20]
 800adca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adce:	b2da      	uxtb	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	7858      	ldrb	r0, [r3, #1]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adde:	2301      	movs	r3, #1
 800ade0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ade2:	f7fd fc0f 	bl	8008604 <disk_read>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d004      	beq.n	800adf6 <f_lseek+0x400>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	755a      	strb	r2, [r3, #21]
 800adf2:	2301      	movs	r3, #1
 800adf4:	e004      	b.n	800ae00 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adfa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800adfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3740      	adds	r7, #64	; 0x40
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <f_opendir+0x14>
 800ae18:	2309      	movs	r3, #9
 800ae1a:	e064      	b.n	800aee6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ae20:	f107 010c 	add.w	r1, r7, #12
 800ae24:	463b      	mov	r3, r7
 800ae26:	2200      	movs	r2, #0
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe ff41 	bl	8009cb0 <find_volume>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d14f      	bne.n	800aed8 <f_opendir+0xd0>
		obj->fs = fs;
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7fe fe28 	bl	8009a98 <follow_path>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d13d      	bne.n	800aece <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae58:	b25b      	sxtb	r3, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	db12      	blt.n	800ae84 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	799b      	ldrb	r3, [r3, #6]
 800ae62:	f003 0310 	and.w	r3, r3, #16
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
 800ae70:	4619      	mov	r1, r3
 800ae72:	4610      	mov	r0, r2
 800ae74:	f7fe fbdb 	bl	800962e <ld_clust>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	609a      	str	r2, [r3, #8]
 800ae7e:	e001      	b.n	800ae84 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ae80:	2305      	movs	r3, #5
 800ae82:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ae84:	7dfb      	ldrb	r3, [r7, #23]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d121      	bne.n	800aece <f_opendir+0xc6>
				obj->id = fs->id;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	88da      	ldrh	r2, [r3, #6]
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ae92:	2100      	movs	r1, #0
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7fe fa43 	bl	8009320 <dir_sdi>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d114      	bne.n	800aece <f_opendir+0xc6>
					if (obj->sclust) {
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00d      	beq.n	800aec8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800aeac:	2100      	movs	r1, #0
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7fd fd84 	bl	80089bc <inc_lock>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d105      	bne.n	800aece <f_opendir+0xc6>
 800aec2:	2312      	movs	r3, #18
 800aec4:	75fb      	strb	r3, [r7, #23]
 800aec6:	e002      	b.n	800aece <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	2200      	movs	r2, #0
 800aecc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	2b04      	cmp	r3, #4
 800aed2:	d101      	bne.n	800aed8 <f_opendir+0xd0>
 800aed4:	2305      	movs	r3, #5
 800aed6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d002      	beq.n	800aee4 <f_opendir+0xdc>
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3718      	adds	r7, #24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f107 0208 	add.w	r2, r7, #8
 800aefc:	4611      	mov	r1, r2
 800aefe:	4618      	mov	r0, r3
 800af00:	f7ff f922 	bl	800a148 <validate>
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d110      	bne.n	800af30 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d006      	beq.n	800af24 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fd fddc 	bl	8008ad8 <dec_lock>
 800af20:	4603      	mov	r3, r0
 800af22:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d102      	bne.n	800af30 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800af30:	7bfb      	ldrb	r3, [r7, #15]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b084      	sub	sp, #16
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f107 0208 	add.w	r2, r7, #8
 800af4a:	4611      	mov	r1, r2
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7ff f8fb 	bl	800a148 <validate>
 800af52:	4603      	mov	r3, r0
 800af54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d126      	bne.n	800afaa <f_readdir+0x70>
		if (!fno) {
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d106      	bne.n	800af70 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800af62:	2100      	movs	r1, #0
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7fe f9db 	bl	8009320 <dir_sdi>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73fb      	strb	r3, [r7, #15]
 800af6e:	e01c      	b.n	800afaa <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800af70:	2100      	movs	r1, #0
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7fe fb9a 	bl	80096ac <dir_read>
 800af78:	4603      	mov	r3, r0
 800af7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800af7c:	7bfb      	ldrb	r3, [r7, #15]
 800af7e:	2b04      	cmp	r3, #4
 800af80:	d101      	bne.n	800af86 <f_readdir+0x4c>
 800af82:	2300      	movs	r3, #0
 800af84:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800af86:	7bfb      	ldrb	r3, [r7, #15]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10e      	bne.n	800afaa <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7fe fc8e 	bl	80098b0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800af94:	2100      	movs	r1, #0
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7fe fa3d 	bl	8009416 <dir_next>
 800af9c:	4603      	mov	r3, r0
 800af9e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	d101      	bne.n	800afaa <f_readdir+0x70>
 800afa6:	2300      	movs	r3, #0
 800afa8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b09e      	sub	sp, #120	; 0x78
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800afc0:	f107 010c 	add.w	r1, r7, #12
 800afc4:	1d3b      	adds	r3, r7, #4
 800afc6:	2202      	movs	r2, #2
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fe fe71 	bl	8009cb0 <find_volume>
 800afce:	4603      	mov	r3, r0
 800afd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800afd8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f040 808e 	bne.w	800b0fe <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800afe8:	4611      	mov	r1, r2
 800afea:	4618      	mov	r0, r3
 800afec:	f7fe fd54 	bl	8009a98 <follow_path>
 800aff0:	4603      	mov	r3, r0
 800aff2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800aff6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800affa:	2b00      	cmp	r3, #0
 800affc:	d108      	bne.n	800b010 <f_unlink+0x5c>
 800affe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b002:	2102      	movs	r1, #2
 800b004:	4618      	mov	r0, r3
 800b006:	f7fd fc5b 	bl	80088c0 <chk_lock>
 800b00a:	4603      	mov	r3, r0
 800b00c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b010:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b014:	2b00      	cmp	r3, #0
 800b016:	d172      	bne.n	800b0fe <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b018:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b01c:	b25b      	sxtb	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	da03      	bge.n	800b02a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b022:	2306      	movs	r3, #6
 800b024:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b028:	e008      	b.n	800b03c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b02a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b036:	2307      	movs	r3, #7
 800b038:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b03c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b040:	2b00      	cmp	r3, #0
 800b042:	d134      	bne.n	800b0ae <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b048:	4611      	mov	r1, r2
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fe faef 	bl	800962e <ld_clust>
 800b050:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b052:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b056:	f003 0310 	and.w	r3, r3, #16
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d027      	beq.n	800b0ae <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b064:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b066:	f107 0310 	add.w	r3, r7, #16
 800b06a:	2100      	movs	r1, #0
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fe f957 	bl	8009320 <dir_sdi>
 800b072:	4603      	mov	r3, r0
 800b074:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b078:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d116      	bne.n	800b0ae <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b080:	f107 0310 	add.w	r3, r7, #16
 800b084:	2100      	movs	r1, #0
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fb10 	bl	80096ac <dir_read>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b092:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b096:	2b00      	cmp	r3, #0
 800b098:	d102      	bne.n	800b0a0 <f_unlink+0xec>
 800b09a:	2307      	movs	r3, #7
 800b09c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b0a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0a4:	2b04      	cmp	r3, #4
 800b0a6:	d102      	bne.n	800b0ae <f_unlink+0xfa>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b0ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d123      	bne.n	800b0fe <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b0b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe fbda 	bl	8009874 <dir_remove>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b0c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10c      	bne.n	800b0e8 <f_unlink+0x134>
 800b0ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d009      	beq.n	800b0e8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b0d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0d8:	2200      	movs	r2, #0
 800b0da:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fd ffee 	bl	80090be <remove_chain>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b0e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d106      	bne.n	800b0fe <f_unlink+0x14a>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fd fdc2 	bl	8008c7c <sync_fs>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b0fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b102:	4618      	mov	r0, r3
 800b104:	3778      	adds	r7, #120	; 0x78
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b087      	sub	sp, #28
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	4613      	mov	r3, r2
 800b118:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b11a:	2301      	movs	r3, #1
 800b11c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b122:	4b1f      	ldr	r3, [pc, #124]	; (800b1a0 <FATFS_LinkDriverEx+0x94>)
 800b124:	7a5b      	ldrb	r3, [r3, #9]
 800b126:	b2db      	uxtb	r3, r3
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d131      	bne.n	800b190 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b12c:	4b1c      	ldr	r3, [pc, #112]	; (800b1a0 <FATFS_LinkDriverEx+0x94>)
 800b12e:	7a5b      	ldrb	r3, [r3, #9]
 800b130:	b2db      	uxtb	r3, r3
 800b132:	461a      	mov	r2, r3
 800b134:	4b1a      	ldr	r3, [pc, #104]	; (800b1a0 <FATFS_LinkDriverEx+0x94>)
 800b136:	2100      	movs	r1, #0
 800b138:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b13a:	4b19      	ldr	r3, [pc, #100]	; (800b1a0 <FATFS_LinkDriverEx+0x94>)
 800b13c:	7a5b      	ldrb	r3, [r3, #9]
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	4a17      	ldr	r2, [pc, #92]	; (800b1a0 <FATFS_LinkDriverEx+0x94>)
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b14a:	4b15      	ldr	r3, [pc, #84]	; (800b1a0 <FATFS_LinkDriverEx+0x94>)
 800b14c:	7a5b      	ldrb	r3, [r3, #9]
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	461a      	mov	r2, r3
 800b152:	4b13      	ldr	r3, [pc, #76]	; (800b1a0 <FATFS_LinkDriverEx+0x94>)
 800b154:	4413      	add	r3, r2
 800b156:	79fa      	ldrb	r2, [r7, #7]
 800b158:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b15a:	4b11      	ldr	r3, [pc, #68]	; (800b1a0 <FATFS_LinkDriverEx+0x94>)
 800b15c:	7a5b      	ldrb	r3, [r3, #9]
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	1c5a      	adds	r2, r3, #1
 800b162:	b2d1      	uxtb	r1, r2
 800b164:	4a0e      	ldr	r2, [pc, #56]	; (800b1a0 <FATFS_LinkDriverEx+0x94>)
 800b166:	7251      	strb	r1, [r2, #9]
 800b168:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b16a:	7dbb      	ldrb	r3, [r7, #22]
 800b16c:	3330      	adds	r3, #48	; 0x30
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	3301      	adds	r3, #1
 800b178:	223a      	movs	r2, #58	; 0x3a
 800b17a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	3302      	adds	r3, #2
 800b180:	222f      	movs	r2, #47	; 0x2f
 800b182:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	3303      	adds	r3, #3
 800b188:	2200      	movs	r2, #0
 800b18a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b190:	7dfb      	ldrb	r3, [r7, #23]
}
 800b192:	4618      	mov	r0, r3
 800b194:	371c      	adds	r7, #28
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	20000d50 	.word	0x20000d50

0800b1a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	6839      	ldr	r1, [r7, #0]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7ff ffaa 	bl	800b10c <FATFS_LinkDriverEx>
 800b1b8:	4603      	mov	r3, r0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
	...

0800b1c4 <__errno>:
 800b1c4:	4b01      	ldr	r3, [pc, #4]	; (800b1cc <__errno+0x8>)
 800b1c6:	6818      	ldr	r0, [r3, #0]
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	20000010 	.word	0x20000010

0800b1d0 <exit>:
 800b1d0:	b508      	push	{r3, lr}
 800b1d2:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <exit+0x20>)
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	b113      	cbz	r3, 800b1de <exit+0xe>
 800b1d8:	2100      	movs	r1, #0
 800b1da:	f3af 8000 	nop.w
 800b1de:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <exit+0x24>)
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b1e4:	b103      	cbz	r3, 800b1e8 <exit+0x18>
 800b1e6:	4798      	blx	r3
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f7f6 fac3 	bl	8001774 <_exit>
 800b1ee:	bf00      	nop
 800b1f0:	00000000 	.word	0x00000000
 800b1f4:	0800bc88 	.word	0x0800bc88

0800b1f8 <__libc_init_array>:
 800b1f8:	b570      	push	{r4, r5, r6, lr}
 800b1fa:	4d0d      	ldr	r5, [pc, #52]	; (800b230 <__libc_init_array+0x38>)
 800b1fc:	4c0d      	ldr	r4, [pc, #52]	; (800b234 <__libc_init_array+0x3c>)
 800b1fe:	1b64      	subs	r4, r4, r5
 800b200:	10a4      	asrs	r4, r4, #2
 800b202:	2600      	movs	r6, #0
 800b204:	42a6      	cmp	r6, r4
 800b206:	d109      	bne.n	800b21c <__libc_init_array+0x24>
 800b208:	4d0b      	ldr	r5, [pc, #44]	; (800b238 <__libc_init_array+0x40>)
 800b20a:	4c0c      	ldr	r4, [pc, #48]	; (800b23c <__libc_init_array+0x44>)
 800b20c:	f000 fc9e 	bl	800bb4c <_init>
 800b210:	1b64      	subs	r4, r4, r5
 800b212:	10a4      	asrs	r4, r4, #2
 800b214:	2600      	movs	r6, #0
 800b216:	42a6      	cmp	r6, r4
 800b218:	d105      	bne.n	800b226 <__libc_init_array+0x2e>
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b220:	4798      	blx	r3
 800b222:	3601      	adds	r6, #1
 800b224:	e7ee      	b.n	800b204 <__libc_init_array+0xc>
 800b226:	f855 3b04 	ldr.w	r3, [r5], #4
 800b22a:	4798      	blx	r3
 800b22c:	3601      	adds	r6, #1
 800b22e:	e7f2      	b.n	800b216 <__libc_init_array+0x1e>
 800b230:	0800bcc8 	.word	0x0800bcc8
 800b234:	0800bcc8 	.word	0x0800bcc8
 800b238:	0800bcc8 	.word	0x0800bcc8
 800b23c:	0800bccc 	.word	0x0800bccc

0800b240 <malloc>:
 800b240:	4b02      	ldr	r3, [pc, #8]	; (800b24c <malloc+0xc>)
 800b242:	4601      	mov	r1, r0
 800b244:	6818      	ldr	r0, [r3, #0]
 800b246:	f000 b87f 	b.w	800b348 <_malloc_r>
 800b24a:	bf00      	nop
 800b24c:	20000010 	.word	0x20000010

0800b250 <free>:
 800b250:	4b02      	ldr	r3, [pc, #8]	; (800b25c <free+0xc>)
 800b252:	4601      	mov	r1, r0
 800b254:	6818      	ldr	r0, [r3, #0]
 800b256:	f000 b80b 	b.w	800b270 <_free_r>
 800b25a:	bf00      	nop
 800b25c:	20000010 	.word	0x20000010

0800b260 <memset>:
 800b260:	4402      	add	r2, r0
 800b262:	4603      	mov	r3, r0
 800b264:	4293      	cmp	r3, r2
 800b266:	d100      	bne.n	800b26a <memset+0xa>
 800b268:	4770      	bx	lr
 800b26a:	f803 1b01 	strb.w	r1, [r3], #1
 800b26e:	e7f9      	b.n	800b264 <memset+0x4>

0800b270 <_free_r>:
 800b270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b272:	2900      	cmp	r1, #0
 800b274:	d044      	beq.n	800b300 <_free_r+0x90>
 800b276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b27a:	9001      	str	r0, [sp, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f1a1 0404 	sub.w	r4, r1, #4
 800b282:	bfb8      	it	lt
 800b284:	18e4      	addlt	r4, r4, r3
 800b286:	f000 f903 	bl	800b490 <__malloc_lock>
 800b28a:	4a1e      	ldr	r2, [pc, #120]	; (800b304 <_free_r+0x94>)
 800b28c:	9801      	ldr	r0, [sp, #4]
 800b28e:	6813      	ldr	r3, [r2, #0]
 800b290:	b933      	cbnz	r3, 800b2a0 <_free_r+0x30>
 800b292:	6063      	str	r3, [r4, #4]
 800b294:	6014      	str	r4, [r2, #0]
 800b296:	b003      	add	sp, #12
 800b298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b29c:	f000 b8fe 	b.w	800b49c <__malloc_unlock>
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	d908      	bls.n	800b2b6 <_free_r+0x46>
 800b2a4:	6825      	ldr	r5, [r4, #0]
 800b2a6:	1961      	adds	r1, r4, r5
 800b2a8:	428b      	cmp	r3, r1
 800b2aa:	bf01      	itttt	eq
 800b2ac:	6819      	ldreq	r1, [r3, #0]
 800b2ae:	685b      	ldreq	r3, [r3, #4]
 800b2b0:	1949      	addeq	r1, r1, r5
 800b2b2:	6021      	streq	r1, [r4, #0]
 800b2b4:	e7ed      	b.n	800b292 <_free_r+0x22>
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	b10b      	cbz	r3, 800b2c0 <_free_r+0x50>
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	d9fa      	bls.n	800b2b6 <_free_r+0x46>
 800b2c0:	6811      	ldr	r1, [r2, #0]
 800b2c2:	1855      	adds	r5, r2, r1
 800b2c4:	42a5      	cmp	r5, r4
 800b2c6:	d10b      	bne.n	800b2e0 <_free_r+0x70>
 800b2c8:	6824      	ldr	r4, [r4, #0]
 800b2ca:	4421      	add	r1, r4
 800b2cc:	1854      	adds	r4, r2, r1
 800b2ce:	42a3      	cmp	r3, r4
 800b2d0:	6011      	str	r1, [r2, #0]
 800b2d2:	d1e0      	bne.n	800b296 <_free_r+0x26>
 800b2d4:	681c      	ldr	r4, [r3, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	6053      	str	r3, [r2, #4]
 800b2da:	4421      	add	r1, r4
 800b2dc:	6011      	str	r1, [r2, #0]
 800b2de:	e7da      	b.n	800b296 <_free_r+0x26>
 800b2e0:	d902      	bls.n	800b2e8 <_free_r+0x78>
 800b2e2:	230c      	movs	r3, #12
 800b2e4:	6003      	str	r3, [r0, #0]
 800b2e6:	e7d6      	b.n	800b296 <_free_r+0x26>
 800b2e8:	6825      	ldr	r5, [r4, #0]
 800b2ea:	1961      	adds	r1, r4, r5
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	bf04      	itt	eq
 800b2f0:	6819      	ldreq	r1, [r3, #0]
 800b2f2:	685b      	ldreq	r3, [r3, #4]
 800b2f4:	6063      	str	r3, [r4, #4]
 800b2f6:	bf04      	itt	eq
 800b2f8:	1949      	addeq	r1, r1, r5
 800b2fa:	6021      	streq	r1, [r4, #0]
 800b2fc:	6054      	str	r4, [r2, #4]
 800b2fe:	e7ca      	b.n	800b296 <_free_r+0x26>
 800b300:	b003      	add	sp, #12
 800b302:	bd30      	pop	{r4, r5, pc}
 800b304:	20000d5c 	.word	0x20000d5c

0800b308 <sbrk_aligned>:
 800b308:	b570      	push	{r4, r5, r6, lr}
 800b30a:	4e0e      	ldr	r6, [pc, #56]	; (800b344 <sbrk_aligned+0x3c>)
 800b30c:	460c      	mov	r4, r1
 800b30e:	6831      	ldr	r1, [r6, #0]
 800b310:	4605      	mov	r5, r0
 800b312:	b911      	cbnz	r1, 800b31a <sbrk_aligned+0x12>
 800b314:	f000 f88c 	bl	800b430 <_sbrk_r>
 800b318:	6030      	str	r0, [r6, #0]
 800b31a:	4621      	mov	r1, r4
 800b31c:	4628      	mov	r0, r5
 800b31e:	f000 f887 	bl	800b430 <_sbrk_r>
 800b322:	1c43      	adds	r3, r0, #1
 800b324:	d00a      	beq.n	800b33c <sbrk_aligned+0x34>
 800b326:	1cc4      	adds	r4, r0, #3
 800b328:	f024 0403 	bic.w	r4, r4, #3
 800b32c:	42a0      	cmp	r0, r4
 800b32e:	d007      	beq.n	800b340 <sbrk_aligned+0x38>
 800b330:	1a21      	subs	r1, r4, r0
 800b332:	4628      	mov	r0, r5
 800b334:	f000 f87c 	bl	800b430 <_sbrk_r>
 800b338:	3001      	adds	r0, #1
 800b33a:	d101      	bne.n	800b340 <sbrk_aligned+0x38>
 800b33c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b340:	4620      	mov	r0, r4
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	20000d60 	.word	0x20000d60

0800b348 <_malloc_r>:
 800b348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b34c:	1ccd      	adds	r5, r1, #3
 800b34e:	f025 0503 	bic.w	r5, r5, #3
 800b352:	3508      	adds	r5, #8
 800b354:	2d0c      	cmp	r5, #12
 800b356:	bf38      	it	cc
 800b358:	250c      	movcc	r5, #12
 800b35a:	2d00      	cmp	r5, #0
 800b35c:	4607      	mov	r7, r0
 800b35e:	db01      	blt.n	800b364 <_malloc_r+0x1c>
 800b360:	42a9      	cmp	r1, r5
 800b362:	d905      	bls.n	800b370 <_malloc_r+0x28>
 800b364:	230c      	movs	r3, #12
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	2600      	movs	r6, #0
 800b36a:	4630      	mov	r0, r6
 800b36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b370:	4e2e      	ldr	r6, [pc, #184]	; (800b42c <_malloc_r+0xe4>)
 800b372:	f000 f88d 	bl	800b490 <__malloc_lock>
 800b376:	6833      	ldr	r3, [r6, #0]
 800b378:	461c      	mov	r4, r3
 800b37a:	bb34      	cbnz	r4, 800b3ca <_malloc_r+0x82>
 800b37c:	4629      	mov	r1, r5
 800b37e:	4638      	mov	r0, r7
 800b380:	f7ff ffc2 	bl	800b308 <sbrk_aligned>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	4604      	mov	r4, r0
 800b388:	d14d      	bne.n	800b426 <_malloc_r+0xde>
 800b38a:	6834      	ldr	r4, [r6, #0]
 800b38c:	4626      	mov	r6, r4
 800b38e:	2e00      	cmp	r6, #0
 800b390:	d140      	bne.n	800b414 <_malloc_r+0xcc>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	4631      	mov	r1, r6
 800b396:	4638      	mov	r0, r7
 800b398:	eb04 0803 	add.w	r8, r4, r3
 800b39c:	f000 f848 	bl	800b430 <_sbrk_r>
 800b3a0:	4580      	cmp	r8, r0
 800b3a2:	d13a      	bne.n	800b41a <_malloc_r+0xd2>
 800b3a4:	6821      	ldr	r1, [r4, #0]
 800b3a6:	3503      	adds	r5, #3
 800b3a8:	1a6d      	subs	r5, r5, r1
 800b3aa:	f025 0503 	bic.w	r5, r5, #3
 800b3ae:	3508      	adds	r5, #8
 800b3b0:	2d0c      	cmp	r5, #12
 800b3b2:	bf38      	it	cc
 800b3b4:	250c      	movcc	r5, #12
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	f7ff ffa5 	bl	800b308 <sbrk_aligned>
 800b3be:	3001      	adds	r0, #1
 800b3c0:	d02b      	beq.n	800b41a <_malloc_r+0xd2>
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	442b      	add	r3, r5
 800b3c6:	6023      	str	r3, [r4, #0]
 800b3c8:	e00e      	b.n	800b3e8 <_malloc_r+0xa0>
 800b3ca:	6822      	ldr	r2, [r4, #0]
 800b3cc:	1b52      	subs	r2, r2, r5
 800b3ce:	d41e      	bmi.n	800b40e <_malloc_r+0xc6>
 800b3d0:	2a0b      	cmp	r2, #11
 800b3d2:	d916      	bls.n	800b402 <_malloc_r+0xba>
 800b3d4:	1961      	adds	r1, r4, r5
 800b3d6:	42a3      	cmp	r3, r4
 800b3d8:	6025      	str	r5, [r4, #0]
 800b3da:	bf18      	it	ne
 800b3dc:	6059      	strne	r1, [r3, #4]
 800b3de:	6863      	ldr	r3, [r4, #4]
 800b3e0:	bf08      	it	eq
 800b3e2:	6031      	streq	r1, [r6, #0]
 800b3e4:	5162      	str	r2, [r4, r5]
 800b3e6:	604b      	str	r3, [r1, #4]
 800b3e8:	4638      	mov	r0, r7
 800b3ea:	f104 060b 	add.w	r6, r4, #11
 800b3ee:	f000 f855 	bl	800b49c <__malloc_unlock>
 800b3f2:	f026 0607 	bic.w	r6, r6, #7
 800b3f6:	1d23      	adds	r3, r4, #4
 800b3f8:	1af2      	subs	r2, r6, r3
 800b3fa:	d0b6      	beq.n	800b36a <_malloc_r+0x22>
 800b3fc:	1b9b      	subs	r3, r3, r6
 800b3fe:	50a3      	str	r3, [r4, r2]
 800b400:	e7b3      	b.n	800b36a <_malloc_r+0x22>
 800b402:	6862      	ldr	r2, [r4, #4]
 800b404:	42a3      	cmp	r3, r4
 800b406:	bf0c      	ite	eq
 800b408:	6032      	streq	r2, [r6, #0]
 800b40a:	605a      	strne	r2, [r3, #4]
 800b40c:	e7ec      	b.n	800b3e8 <_malloc_r+0xa0>
 800b40e:	4623      	mov	r3, r4
 800b410:	6864      	ldr	r4, [r4, #4]
 800b412:	e7b2      	b.n	800b37a <_malloc_r+0x32>
 800b414:	4634      	mov	r4, r6
 800b416:	6876      	ldr	r6, [r6, #4]
 800b418:	e7b9      	b.n	800b38e <_malloc_r+0x46>
 800b41a:	230c      	movs	r3, #12
 800b41c:	603b      	str	r3, [r7, #0]
 800b41e:	4638      	mov	r0, r7
 800b420:	f000 f83c 	bl	800b49c <__malloc_unlock>
 800b424:	e7a1      	b.n	800b36a <_malloc_r+0x22>
 800b426:	6025      	str	r5, [r4, #0]
 800b428:	e7de      	b.n	800b3e8 <_malloc_r+0xa0>
 800b42a:	bf00      	nop
 800b42c:	20000d5c 	.word	0x20000d5c

0800b430 <_sbrk_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4d06      	ldr	r5, [pc, #24]	; (800b44c <_sbrk_r+0x1c>)
 800b434:	2300      	movs	r3, #0
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	602b      	str	r3, [r5, #0]
 800b43c:	f7f6 f9a4 	bl	8001788 <_sbrk>
 800b440:	1c43      	adds	r3, r0, #1
 800b442:	d102      	bne.n	800b44a <_sbrk_r+0x1a>
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	b103      	cbz	r3, 800b44a <_sbrk_r+0x1a>
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	bd38      	pop	{r3, r4, r5, pc}
 800b44c:	20000d64 	.word	0x20000d64

0800b450 <siprintf>:
 800b450:	b40e      	push	{r1, r2, r3}
 800b452:	b500      	push	{lr}
 800b454:	b09c      	sub	sp, #112	; 0x70
 800b456:	ab1d      	add	r3, sp, #116	; 0x74
 800b458:	9002      	str	r0, [sp, #8]
 800b45a:	9006      	str	r0, [sp, #24]
 800b45c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b460:	4809      	ldr	r0, [pc, #36]	; (800b488 <siprintf+0x38>)
 800b462:	9107      	str	r1, [sp, #28]
 800b464:	9104      	str	r1, [sp, #16]
 800b466:	4909      	ldr	r1, [pc, #36]	; (800b48c <siprintf+0x3c>)
 800b468:	f853 2b04 	ldr.w	r2, [r3], #4
 800b46c:	9105      	str	r1, [sp, #20]
 800b46e:	6800      	ldr	r0, [r0, #0]
 800b470:	9301      	str	r3, [sp, #4]
 800b472:	a902      	add	r1, sp, #8
 800b474:	f000 f874 	bl	800b560 <_svfiprintf_r>
 800b478:	9b02      	ldr	r3, [sp, #8]
 800b47a:	2200      	movs	r2, #0
 800b47c:	701a      	strb	r2, [r3, #0]
 800b47e:	b01c      	add	sp, #112	; 0x70
 800b480:	f85d eb04 	ldr.w	lr, [sp], #4
 800b484:	b003      	add	sp, #12
 800b486:	4770      	bx	lr
 800b488:	20000010 	.word	0x20000010
 800b48c:	ffff0208 	.word	0xffff0208

0800b490 <__malloc_lock>:
 800b490:	4801      	ldr	r0, [pc, #4]	; (800b498 <__malloc_lock+0x8>)
 800b492:	f000 baf9 	b.w	800ba88 <__retarget_lock_acquire_recursive>
 800b496:	bf00      	nop
 800b498:	20000d68 	.word	0x20000d68

0800b49c <__malloc_unlock>:
 800b49c:	4801      	ldr	r0, [pc, #4]	; (800b4a4 <__malloc_unlock+0x8>)
 800b49e:	f000 baf4 	b.w	800ba8a <__retarget_lock_release_recursive>
 800b4a2:	bf00      	nop
 800b4a4:	20000d68 	.word	0x20000d68

0800b4a8 <__ssputs_r>:
 800b4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ac:	688e      	ldr	r6, [r1, #8]
 800b4ae:	429e      	cmp	r6, r3
 800b4b0:	4682      	mov	sl, r0
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	4690      	mov	r8, r2
 800b4b6:	461f      	mov	r7, r3
 800b4b8:	d838      	bhi.n	800b52c <__ssputs_r+0x84>
 800b4ba:	898a      	ldrh	r2, [r1, #12]
 800b4bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4c0:	d032      	beq.n	800b528 <__ssputs_r+0x80>
 800b4c2:	6825      	ldr	r5, [r4, #0]
 800b4c4:	6909      	ldr	r1, [r1, #16]
 800b4c6:	eba5 0901 	sub.w	r9, r5, r1
 800b4ca:	6965      	ldr	r5, [r4, #20]
 800b4cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	444b      	add	r3, r9
 800b4d8:	106d      	asrs	r5, r5, #1
 800b4da:	429d      	cmp	r5, r3
 800b4dc:	bf38      	it	cc
 800b4de:	461d      	movcc	r5, r3
 800b4e0:	0553      	lsls	r3, r2, #21
 800b4e2:	d531      	bpl.n	800b548 <__ssputs_r+0xa0>
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	f7ff ff2f 	bl	800b348 <_malloc_r>
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	b950      	cbnz	r0, 800b504 <__ssputs_r+0x5c>
 800b4ee:	230c      	movs	r3, #12
 800b4f0:	f8ca 3000 	str.w	r3, [sl]
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4fa:	81a3      	strh	r3, [r4, #12]
 800b4fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b504:	6921      	ldr	r1, [r4, #16]
 800b506:	464a      	mov	r2, r9
 800b508:	f000 fac0 	bl	800ba8c <memcpy>
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b516:	81a3      	strh	r3, [r4, #12]
 800b518:	6126      	str	r6, [r4, #16]
 800b51a:	6165      	str	r5, [r4, #20]
 800b51c:	444e      	add	r6, r9
 800b51e:	eba5 0509 	sub.w	r5, r5, r9
 800b522:	6026      	str	r6, [r4, #0]
 800b524:	60a5      	str	r5, [r4, #8]
 800b526:	463e      	mov	r6, r7
 800b528:	42be      	cmp	r6, r7
 800b52a:	d900      	bls.n	800b52e <__ssputs_r+0x86>
 800b52c:	463e      	mov	r6, r7
 800b52e:	6820      	ldr	r0, [r4, #0]
 800b530:	4632      	mov	r2, r6
 800b532:	4641      	mov	r1, r8
 800b534:	f000 fab8 	bl	800baa8 <memmove>
 800b538:	68a3      	ldr	r3, [r4, #8]
 800b53a:	1b9b      	subs	r3, r3, r6
 800b53c:	60a3      	str	r3, [r4, #8]
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	4433      	add	r3, r6
 800b542:	6023      	str	r3, [r4, #0]
 800b544:	2000      	movs	r0, #0
 800b546:	e7db      	b.n	800b500 <__ssputs_r+0x58>
 800b548:	462a      	mov	r2, r5
 800b54a:	f000 fac7 	bl	800badc <_realloc_r>
 800b54e:	4606      	mov	r6, r0
 800b550:	2800      	cmp	r0, #0
 800b552:	d1e1      	bne.n	800b518 <__ssputs_r+0x70>
 800b554:	6921      	ldr	r1, [r4, #16]
 800b556:	4650      	mov	r0, sl
 800b558:	f7ff fe8a 	bl	800b270 <_free_r>
 800b55c:	e7c7      	b.n	800b4ee <__ssputs_r+0x46>
	...

0800b560 <_svfiprintf_r>:
 800b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	4698      	mov	r8, r3
 800b566:	898b      	ldrh	r3, [r1, #12]
 800b568:	061b      	lsls	r3, r3, #24
 800b56a:	b09d      	sub	sp, #116	; 0x74
 800b56c:	4607      	mov	r7, r0
 800b56e:	460d      	mov	r5, r1
 800b570:	4614      	mov	r4, r2
 800b572:	d50e      	bpl.n	800b592 <_svfiprintf_r+0x32>
 800b574:	690b      	ldr	r3, [r1, #16]
 800b576:	b963      	cbnz	r3, 800b592 <_svfiprintf_r+0x32>
 800b578:	2140      	movs	r1, #64	; 0x40
 800b57a:	f7ff fee5 	bl	800b348 <_malloc_r>
 800b57e:	6028      	str	r0, [r5, #0]
 800b580:	6128      	str	r0, [r5, #16]
 800b582:	b920      	cbnz	r0, 800b58e <_svfiprintf_r+0x2e>
 800b584:	230c      	movs	r3, #12
 800b586:	603b      	str	r3, [r7, #0]
 800b588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b58c:	e0d1      	b.n	800b732 <_svfiprintf_r+0x1d2>
 800b58e:	2340      	movs	r3, #64	; 0x40
 800b590:	616b      	str	r3, [r5, #20]
 800b592:	2300      	movs	r3, #0
 800b594:	9309      	str	r3, [sp, #36]	; 0x24
 800b596:	2320      	movs	r3, #32
 800b598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b59c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5a0:	2330      	movs	r3, #48	; 0x30
 800b5a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b74c <_svfiprintf_r+0x1ec>
 800b5a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5aa:	f04f 0901 	mov.w	r9, #1
 800b5ae:	4623      	mov	r3, r4
 800b5b0:	469a      	mov	sl, r3
 800b5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b6:	b10a      	cbz	r2, 800b5bc <_svfiprintf_r+0x5c>
 800b5b8:	2a25      	cmp	r2, #37	; 0x25
 800b5ba:	d1f9      	bne.n	800b5b0 <_svfiprintf_r+0x50>
 800b5bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b5c0:	d00b      	beq.n	800b5da <_svfiprintf_r+0x7a>
 800b5c2:	465b      	mov	r3, fp
 800b5c4:	4622      	mov	r2, r4
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	f7ff ff6d 	bl	800b4a8 <__ssputs_r>
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	f000 80aa 	beq.w	800b728 <_svfiprintf_r+0x1c8>
 800b5d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d6:	445a      	add	r2, fp
 800b5d8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5da:	f89a 3000 	ldrb.w	r3, [sl]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 80a2 	beq.w	800b728 <_svfiprintf_r+0x1c8>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ee:	f10a 0a01 	add.w	sl, sl, #1
 800b5f2:	9304      	str	r3, [sp, #16]
 800b5f4:	9307      	str	r3, [sp, #28]
 800b5f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5fa:	931a      	str	r3, [sp, #104]	; 0x68
 800b5fc:	4654      	mov	r4, sl
 800b5fe:	2205      	movs	r2, #5
 800b600:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b604:	4851      	ldr	r0, [pc, #324]	; (800b74c <_svfiprintf_r+0x1ec>)
 800b606:	f7f4 fe13 	bl	8000230 <memchr>
 800b60a:	9a04      	ldr	r2, [sp, #16]
 800b60c:	b9d8      	cbnz	r0, 800b646 <_svfiprintf_r+0xe6>
 800b60e:	06d0      	lsls	r0, r2, #27
 800b610:	bf44      	itt	mi
 800b612:	2320      	movmi	r3, #32
 800b614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b618:	0711      	lsls	r1, r2, #28
 800b61a:	bf44      	itt	mi
 800b61c:	232b      	movmi	r3, #43	; 0x2b
 800b61e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b622:	f89a 3000 	ldrb.w	r3, [sl]
 800b626:	2b2a      	cmp	r3, #42	; 0x2a
 800b628:	d015      	beq.n	800b656 <_svfiprintf_r+0xf6>
 800b62a:	9a07      	ldr	r2, [sp, #28]
 800b62c:	4654      	mov	r4, sl
 800b62e:	2000      	movs	r0, #0
 800b630:	f04f 0c0a 	mov.w	ip, #10
 800b634:	4621      	mov	r1, r4
 800b636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b63a:	3b30      	subs	r3, #48	; 0x30
 800b63c:	2b09      	cmp	r3, #9
 800b63e:	d94e      	bls.n	800b6de <_svfiprintf_r+0x17e>
 800b640:	b1b0      	cbz	r0, 800b670 <_svfiprintf_r+0x110>
 800b642:	9207      	str	r2, [sp, #28]
 800b644:	e014      	b.n	800b670 <_svfiprintf_r+0x110>
 800b646:	eba0 0308 	sub.w	r3, r0, r8
 800b64a:	fa09 f303 	lsl.w	r3, r9, r3
 800b64e:	4313      	orrs	r3, r2
 800b650:	9304      	str	r3, [sp, #16]
 800b652:	46a2      	mov	sl, r4
 800b654:	e7d2      	b.n	800b5fc <_svfiprintf_r+0x9c>
 800b656:	9b03      	ldr	r3, [sp, #12]
 800b658:	1d19      	adds	r1, r3, #4
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	9103      	str	r1, [sp, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	bfbb      	ittet	lt
 800b662:	425b      	neglt	r3, r3
 800b664:	f042 0202 	orrlt.w	r2, r2, #2
 800b668:	9307      	strge	r3, [sp, #28]
 800b66a:	9307      	strlt	r3, [sp, #28]
 800b66c:	bfb8      	it	lt
 800b66e:	9204      	strlt	r2, [sp, #16]
 800b670:	7823      	ldrb	r3, [r4, #0]
 800b672:	2b2e      	cmp	r3, #46	; 0x2e
 800b674:	d10c      	bne.n	800b690 <_svfiprintf_r+0x130>
 800b676:	7863      	ldrb	r3, [r4, #1]
 800b678:	2b2a      	cmp	r3, #42	; 0x2a
 800b67a:	d135      	bne.n	800b6e8 <_svfiprintf_r+0x188>
 800b67c:	9b03      	ldr	r3, [sp, #12]
 800b67e:	1d1a      	adds	r2, r3, #4
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	9203      	str	r2, [sp, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	bfb8      	it	lt
 800b688:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b68c:	3402      	adds	r4, #2
 800b68e:	9305      	str	r3, [sp, #20]
 800b690:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b75c <_svfiprintf_r+0x1fc>
 800b694:	7821      	ldrb	r1, [r4, #0]
 800b696:	2203      	movs	r2, #3
 800b698:	4650      	mov	r0, sl
 800b69a:	f7f4 fdc9 	bl	8000230 <memchr>
 800b69e:	b140      	cbz	r0, 800b6b2 <_svfiprintf_r+0x152>
 800b6a0:	2340      	movs	r3, #64	; 0x40
 800b6a2:	eba0 000a 	sub.w	r0, r0, sl
 800b6a6:	fa03 f000 	lsl.w	r0, r3, r0
 800b6aa:	9b04      	ldr	r3, [sp, #16]
 800b6ac:	4303      	orrs	r3, r0
 800b6ae:	3401      	adds	r4, #1
 800b6b0:	9304      	str	r3, [sp, #16]
 800b6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b6:	4826      	ldr	r0, [pc, #152]	; (800b750 <_svfiprintf_r+0x1f0>)
 800b6b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6bc:	2206      	movs	r2, #6
 800b6be:	f7f4 fdb7 	bl	8000230 <memchr>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d038      	beq.n	800b738 <_svfiprintf_r+0x1d8>
 800b6c6:	4b23      	ldr	r3, [pc, #140]	; (800b754 <_svfiprintf_r+0x1f4>)
 800b6c8:	bb1b      	cbnz	r3, 800b712 <_svfiprintf_r+0x1b2>
 800b6ca:	9b03      	ldr	r3, [sp, #12]
 800b6cc:	3307      	adds	r3, #7
 800b6ce:	f023 0307 	bic.w	r3, r3, #7
 800b6d2:	3308      	adds	r3, #8
 800b6d4:	9303      	str	r3, [sp, #12]
 800b6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d8:	4433      	add	r3, r6
 800b6da:	9309      	str	r3, [sp, #36]	; 0x24
 800b6dc:	e767      	b.n	800b5ae <_svfiprintf_r+0x4e>
 800b6de:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6e2:	460c      	mov	r4, r1
 800b6e4:	2001      	movs	r0, #1
 800b6e6:	e7a5      	b.n	800b634 <_svfiprintf_r+0xd4>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	3401      	adds	r4, #1
 800b6ec:	9305      	str	r3, [sp, #20]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	f04f 0c0a 	mov.w	ip, #10
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6fa:	3a30      	subs	r2, #48	; 0x30
 800b6fc:	2a09      	cmp	r2, #9
 800b6fe:	d903      	bls.n	800b708 <_svfiprintf_r+0x1a8>
 800b700:	2b00      	cmp	r3, #0
 800b702:	d0c5      	beq.n	800b690 <_svfiprintf_r+0x130>
 800b704:	9105      	str	r1, [sp, #20]
 800b706:	e7c3      	b.n	800b690 <_svfiprintf_r+0x130>
 800b708:	fb0c 2101 	mla	r1, ip, r1, r2
 800b70c:	4604      	mov	r4, r0
 800b70e:	2301      	movs	r3, #1
 800b710:	e7f0      	b.n	800b6f4 <_svfiprintf_r+0x194>
 800b712:	ab03      	add	r3, sp, #12
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	462a      	mov	r2, r5
 800b718:	4b0f      	ldr	r3, [pc, #60]	; (800b758 <_svfiprintf_r+0x1f8>)
 800b71a:	a904      	add	r1, sp, #16
 800b71c:	4638      	mov	r0, r7
 800b71e:	f3af 8000 	nop.w
 800b722:	1c42      	adds	r2, r0, #1
 800b724:	4606      	mov	r6, r0
 800b726:	d1d6      	bne.n	800b6d6 <_svfiprintf_r+0x176>
 800b728:	89ab      	ldrh	r3, [r5, #12]
 800b72a:	065b      	lsls	r3, r3, #25
 800b72c:	f53f af2c 	bmi.w	800b588 <_svfiprintf_r+0x28>
 800b730:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b732:	b01d      	add	sp, #116	; 0x74
 800b734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b738:	ab03      	add	r3, sp, #12
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	462a      	mov	r2, r5
 800b73e:	4b06      	ldr	r3, [pc, #24]	; (800b758 <_svfiprintf_r+0x1f8>)
 800b740:	a904      	add	r1, sp, #16
 800b742:	4638      	mov	r0, r7
 800b744:	f000 f87a 	bl	800b83c <_printf_i>
 800b748:	e7eb      	b.n	800b722 <_svfiprintf_r+0x1c2>
 800b74a:	bf00      	nop
 800b74c:	0800bc8c 	.word	0x0800bc8c
 800b750:	0800bc96 	.word	0x0800bc96
 800b754:	00000000 	.word	0x00000000
 800b758:	0800b4a9 	.word	0x0800b4a9
 800b75c:	0800bc92 	.word	0x0800bc92

0800b760 <_printf_common>:
 800b760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b764:	4616      	mov	r6, r2
 800b766:	4699      	mov	r9, r3
 800b768:	688a      	ldr	r2, [r1, #8]
 800b76a:	690b      	ldr	r3, [r1, #16]
 800b76c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b770:	4293      	cmp	r3, r2
 800b772:	bfb8      	it	lt
 800b774:	4613      	movlt	r3, r2
 800b776:	6033      	str	r3, [r6, #0]
 800b778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b77c:	4607      	mov	r7, r0
 800b77e:	460c      	mov	r4, r1
 800b780:	b10a      	cbz	r2, 800b786 <_printf_common+0x26>
 800b782:	3301      	adds	r3, #1
 800b784:	6033      	str	r3, [r6, #0]
 800b786:	6823      	ldr	r3, [r4, #0]
 800b788:	0699      	lsls	r1, r3, #26
 800b78a:	bf42      	ittt	mi
 800b78c:	6833      	ldrmi	r3, [r6, #0]
 800b78e:	3302      	addmi	r3, #2
 800b790:	6033      	strmi	r3, [r6, #0]
 800b792:	6825      	ldr	r5, [r4, #0]
 800b794:	f015 0506 	ands.w	r5, r5, #6
 800b798:	d106      	bne.n	800b7a8 <_printf_common+0x48>
 800b79a:	f104 0a19 	add.w	sl, r4, #25
 800b79e:	68e3      	ldr	r3, [r4, #12]
 800b7a0:	6832      	ldr	r2, [r6, #0]
 800b7a2:	1a9b      	subs	r3, r3, r2
 800b7a4:	42ab      	cmp	r3, r5
 800b7a6:	dc26      	bgt.n	800b7f6 <_printf_common+0x96>
 800b7a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7ac:	1e13      	subs	r3, r2, #0
 800b7ae:	6822      	ldr	r2, [r4, #0]
 800b7b0:	bf18      	it	ne
 800b7b2:	2301      	movne	r3, #1
 800b7b4:	0692      	lsls	r2, r2, #26
 800b7b6:	d42b      	bmi.n	800b810 <_printf_common+0xb0>
 800b7b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7bc:	4649      	mov	r1, r9
 800b7be:	4638      	mov	r0, r7
 800b7c0:	47c0      	blx	r8
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	d01e      	beq.n	800b804 <_printf_common+0xa4>
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	68e5      	ldr	r5, [r4, #12]
 800b7ca:	6832      	ldr	r2, [r6, #0]
 800b7cc:	f003 0306 	and.w	r3, r3, #6
 800b7d0:	2b04      	cmp	r3, #4
 800b7d2:	bf08      	it	eq
 800b7d4:	1aad      	subeq	r5, r5, r2
 800b7d6:	68a3      	ldr	r3, [r4, #8]
 800b7d8:	6922      	ldr	r2, [r4, #16]
 800b7da:	bf0c      	ite	eq
 800b7dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7e0:	2500      	movne	r5, #0
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	bfc4      	itt	gt
 800b7e6:	1a9b      	subgt	r3, r3, r2
 800b7e8:	18ed      	addgt	r5, r5, r3
 800b7ea:	2600      	movs	r6, #0
 800b7ec:	341a      	adds	r4, #26
 800b7ee:	42b5      	cmp	r5, r6
 800b7f0:	d11a      	bne.n	800b828 <_printf_common+0xc8>
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	e008      	b.n	800b808 <_printf_common+0xa8>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	4652      	mov	r2, sl
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	47c0      	blx	r8
 800b800:	3001      	adds	r0, #1
 800b802:	d103      	bne.n	800b80c <_printf_common+0xac>
 800b804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80c:	3501      	adds	r5, #1
 800b80e:	e7c6      	b.n	800b79e <_printf_common+0x3e>
 800b810:	18e1      	adds	r1, r4, r3
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	2030      	movs	r0, #48	; 0x30
 800b816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b81a:	4422      	add	r2, r4
 800b81c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b824:	3302      	adds	r3, #2
 800b826:	e7c7      	b.n	800b7b8 <_printf_common+0x58>
 800b828:	2301      	movs	r3, #1
 800b82a:	4622      	mov	r2, r4
 800b82c:	4649      	mov	r1, r9
 800b82e:	4638      	mov	r0, r7
 800b830:	47c0      	blx	r8
 800b832:	3001      	adds	r0, #1
 800b834:	d0e6      	beq.n	800b804 <_printf_common+0xa4>
 800b836:	3601      	adds	r6, #1
 800b838:	e7d9      	b.n	800b7ee <_printf_common+0x8e>
	...

0800b83c <_printf_i>:
 800b83c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b840:	7e0f      	ldrb	r7, [r1, #24]
 800b842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b844:	2f78      	cmp	r7, #120	; 0x78
 800b846:	4691      	mov	r9, r2
 800b848:	4680      	mov	r8, r0
 800b84a:	460c      	mov	r4, r1
 800b84c:	469a      	mov	sl, r3
 800b84e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b852:	d807      	bhi.n	800b864 <_printf_i+0x28>
 800b854:	2f62      	cmp	r7, #98	; 0x62
 800b856:	d80a      	bhi.n	800b86e <_printf_i+0x32>
 800b858:	2f00      	cmp	r7, #0
 800b85a:	f000 80d8 	beq.w	800ba0e <_printf_i+0x1d2>
 800b85e:	2f58      	cmp	r7, #88	; 0x58
 800b860:	f000 80a3 	beq.w	800b9aa <_printf_i+0x16e>
 800b864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b86c:	e03a      	b.n	800b8e4 <_printf_i+0xa8>
 800b86e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b872:	2b15      	cmp	r3, #21
 800b874:	d8f6      	bhi.n	800b864 <_printf_i+0x28>
 800b876:	a101      	add	r1, pc, #4	; (adr r1, 800b87c <_printf_i+0x40>)
 800b878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b87c:	0800b8d5 	.word	0x0800b8d5
 800b880:	0800b8e9 	.word	0x0800b8e9
 800b884:	0800b865 	.word	0x0800b865
 800b888:	0800b865 	.word	0x0800b865
 800b88c:	0800b865 	.word	0x0800b865
 800b890:	0800b865 	.word	0x0800b865
 800b894:	0800b8e9 	.word	0x0800b8e9
 800b898:	0800b865 	.word	0x0800b865
 800b89c:	0800b865 	.word	0x0800b865
 800b8a0:	0800b865 	.word	0x0800b865
 800b8a4:	0800b865 	.word	0x0800b865
 800b8a8:	0800b9f5 	.word	0x0800b9f5
 800b8ac:	0800b919 	.word	0x0800b919
 800b8b0:	0800b9d7 	.word	0x0800b9d7
 800b8b4:	0800b865 	.word	0x0800b865
 800b8b8:	0800b865 	.word	0x0800b865
 800b8bc:	0800ba17 	.word	0x0800ba17
 800b8c0:	0800b865 	.word	0x0800b865
 800b8c4:	0800b919 	.word	0x0800b919
 800b8c8:	0800b865 	.word	0x0800b865
 800b8cc:	0800b865 	.word	0x0800b865
 800b8d0:	0800b9df 	.word	0x0800b9df
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	1d1a      	adds	r2, r3, #4
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	602a      	str	r2, [r5, #0]
 800b8dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e0a3      	b.n	800ba30 <_printf_i+0x1f4>
 800b8e8:	6820      	ldr	r0, [r4, #0]
 800b8ea:	6829      	ldr	r1, [r5, #0]
 800b8ec:	0606      	lsls	r6, r0, #24
 800b8ee:	f101 0304 	add.w	r3, r1, #4
 800b8f2:	d50a      	bpl.n	800b90a <_printf_i+0xce>
 800b8f4:	680e      	ldr	r6, [r1, #0]
 800b8f6:	602b      	str	r3, [r5, #0]
 800b8f8:	2e00      	cmp	r6, #0
 800b8fa:	da03      	bge.n	800b904 <_printf_i+0xc8>
 800b8fc:	232d      	movs	r3, #45	; 0x2d
 800b8fe:	4276      	negs	r6, r6
 800b900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b904:	485e      	ldr	r0, [pc, #376]	; (800ba80 <_printf_i+0x244>)
 800b906:	230a      	movs	r3, #10
 800b908:	e019      	b.n	800b93e <_printf_i+0x102>
 800b90a:	680e      	ldr	r6, [r1, #0]
 800b90c:	602b      	str	r3, [r5, #0]
 800b90e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b912:	bf18      	it	ne
 800b914:	b236      	sxthne	r6, r6
 800b916:	e7ef      	b.n	800b8f8 <_printf_i+0xbc>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	6820      	ldr	r0, [r4, #0]
 800b91c:	1d19      	adds	r1, r3, #4
 800b91e:	6029      	str	r1, [r5, #0]
 800b920:	0601      	lsls	r1, r0, #24
 800b922:	d501      	bpl.n	800b928 <_printf_i+0xec>
 800b924:	681e      	ldr	r6, [r3, #0]
 800b926:	e002      	b.n	800b92e <_printf_i+0xf2>
 800b928:	0646      	lsls	r6, r0, #25
 800b92a:	d5fb      	bpl.n	800b924 <_printf_i+0xe8>
 800b92c:	881e      	ldrh	r6, [r3, #0]
 800b92e:	4854      	ldr	r0, [pc, #336]	; (800ba80 <_printf_i+0x244>)
 800b930:	2f6f      	cmp	r7, #111	; 0x6f
 800b932:	bf0c      	ite	eq
 800b934:	2308      	moveq	r3, #8
 800b936:	230a      	movne	r3, #10
 800b938:	2100      	movs	r1, #0
 800b93a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b93e:	6865      	ldr	r5, [r4, #4]
 800b940:	60a5      	str	r5, [r4, #8]
 800b942:	2d00      	cmp	r5, #0
 800b944:	bfa2      	ittt	ge
 800b946:	6821      	ldrge	r1, [r4, #0]
 800b948:	f021 0104 	bicge.w	r1, r1, #4
 800b94c:	6021      	strge	r1, [r4, #0]
 800b94e:	b90e      	cbnz	r6, 800b954 <_printf_i+0x118>
 800b950:	2d00      	cmp	r5, #0
 800b952:	d04d      	beq.n	800b9f0 <_printf_i+0x1b4>
 800b954:	4615      	mov	r5, r2
 800b956:	fbb6 f1f3 	udiv	r1, r6, r3
 800b95a:	fb03 6711 	mls	r7, r3, r1, r6
 800b95e:	5dc7      	ldrb	r7, [r0, r7]
 800b960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b964:	4637      	mov	r7, r6
 800b966:	42bb      	cmp	r3, r7
 800b968:	460e      	mov	r6, r1
 800b96a:	d9f4      	bls.n	800b956 <_printf_i+0x11a>
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d10b      	bne.n	800b988 <_printf_i+0x14c>
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	07de      	lsls	r6, r3, #31
 800b974:	d508      	bpl.n	800b988 <_printf_i+0x14c>
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	6861      	ldr	r1, [r4, #4]
 800b97a:	4299      	cmp	r1, r3
 800b97c:	bfde      	ittt	le
 800b97e:	2330      	movle	r3, #48	; 0x30
 800b980:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b984:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b988:	1b52      	subs	r2, r2, r5
 800b98a:	6122      	str	r2, [r4, #16]
 800b98c:	f8cd a000 	str.w	sl, [sp]
 800b990:	464b      	mov	r3, r9
 800b992:	aa03      	add	r2, sp, #12
 800b994:	4621      	mov	r1, r4
 800b996:	4640      	mov	r0, r8
 800b998:	f7ff fee2 	bl	800b760 <_printf_common>
 800b99c:	3001      	adds	r0, #1
 800b99e:	d14c      	bne.n	800ba3a <_printf_i+0x1fe>
 800b9a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9a4:	b004      	add	sp, #16
 800b9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9aa:	4835      	ldr	r0, [pc, #212]	; (800ba80 <_printf_i+0x244>)
 800b9ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b9b0:	6829      	ldr	r1, [r5, #0]
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9b8:	6029      	str	r1, [r5, #0]
 800b9ba:	061d      	lsls	r5, r3, #24
 800b9bc:	d514      	bpl.n	800b9e8 <_printf_i+0x1ac>
 800b9be:	07df      	lsls	r7, r3, #31
 800b9c0:	bf44      	itt	mi
 800b9c2:	f043 0320 	orrmi.w	r3, r3, #32
 800b9c6:	6023      	strmi	r3, [r4, #0]
 800b9c8:	b91e      	cbnz	r6, 800b9d2 <_printf_i+0x196>
 800b9ca:	6823      	ldr	r3, [r4, #0]
 800b9cc:	f023 0320 	bic.w	r3, r3, #32
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	2310      	movs	r3, #16
 800b9d4:	e7b0      	b.n	800b938 <_printf_i+0xfc>
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	f043 0320 	orr.w	r3, r3, #32
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	2378      	movs	r3, #120	; 0x78
 800b9e0:	4828      	ldr	r0, [pc, #160]	; (800ba84 <_printf_i+0x248>)
 800b9e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9e6:	e7e3      	b.n	800b9b0 <_printf_i+0x174>
 800b9e8:	0659      	lsls	r1, r3, #25
 800b9ea:	bf48      	it	mi
 800b9ec:	b2b6      	uxthmi	r6, r6
 800b9ee:	e7e6      	b.n	800b9be <_printf_i+0x182>
 800b9f0:	4615      	mov	r5, r2
 800b9f2:	e7bb      	b.n	800b96c <_printf_i+0x130>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	6826      	ldr	r6, [r4, #0]
 800b9f8:	6961      	ldr	r1, [r4, #20]
 800b9fa:	1d18      	adds	r0, r3, #4
 800b9fc:	6028      	str	r0, [r5, #0]
 800b9fe:	0635      	lsls	r5, r6, #24
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	d501      	bpl.n	800ba08 <_printf_i+0x1cc>
 800ba04:	6019      	str	r1, [r3, #0]
 800ba06:	e002      	b.n	800ba0e <_printf_i+0x1d2>
 800ba08:	0670      	lsls	r0, r6, #25
 800ba0a:	d5fb      	bpl.n	800ba04 <_printf_i+0x1c8>
 800ba0c:	8019      	strh	r1, [r3, #0]
 800ba0e:	2300      	movs	r3, #0
 800ba10:	6123      	str	r3, [r4, #16]
 800ba12:	4615      	mov	r5, r2
 800ba14:	e7ba      	b.n	800b98c <_printf_i+0x150>
 800ba16:	682b      	ldr	r3, [r5, #0]
 800ba18:	1d1a      	adds	r2, r3, #4
 800ba1a:	602a      	str	r2, [r5, #0]
 800ba1c:	681d      	ldr	r5, [r3, #0]
 800ba1e:	6862      	ldr	r2, [r4, #4]
 800ba20:	2100      	movs	r1, #0
 800ba22:	4628      	mov	r0, r5
 800ba24:	f7f4 fc04 	bl	8000230 <memchr>
 800ba28:	b108      	cbz	r0, 800ba2e <_printf_i+0x1f2>
 800ba2a:	1b40      	subs	r0, r0, r5
 800ba2c:	6060      	str	r0, [r4, #4]
 800ba2e:	6863      	ldr	r3, [r4, #4]
 800ba30:	6123      	str	r3, [r4, #16]
 800ba32:	2300      	movs	r3, #0
 800ba34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba38:	e7a8      	b.n	800b98c <_printf_i+0x150>
 800ba3a:	6923      	ldr	r3, [r4, #16]
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	4649      	mov	r1, r9
 800ba40:	4640      	mov	r0, r8
 800ba42:	47d0      	blx	sl
 800ba44:	3001      	adds	r0, #1
 800ba46:	d0ab      	beq.n	800b9a0 <_printf_i+0x164>
 800ba48:	6823      	ldr	r3, [r4, #0]
 800ba4a:	079b      	lsls	r3, r3, #30
 800ba4c:	d413      	bmi.n	800ba76 <_printf_i+0x23a>
 800ba4e:	68e0      	ldr	r0, [r4, #12]
 800ba50:	9b03      	ldr	r3, [sp, #12]
 800ba52:	4298      	cmp	r0, r3
 800ba54:	bfb8      	it	lt
 800ba56:	4618      	movlt	r0, r3
 800ba58:	e7a4      	b.n	800b9a4 <_printf_i+0x168>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4632      	mov	r2, r6
 800ba5e:	4649      	mov	r1, r9
 800ba60:	4640      	mov	r0, r8
 800ba62:	47d0      	blx	sl
 800ba64:	3001      	adds	r0, #1
 800ba66:	d09b      	beq.n	800b9a0 <_printf_i+0x164>
 800ba68:	3501      	adds	r5, #1
 800ba6a:	68e3      	ldr	r3, [r4, #12]
 800ba6c:	9903      	ldr	r1, [sp, #12]
 800ba6e:	1a5b      	subs	r3, r3, r1
 800ba70:	42ab      	cmp	r3, r5
 800ba72:	dcf2      	bgt.n	800ba5a <_printf_i+0x21e>
 800ba74:	e7eb      	b.n	800ba4e <_printf_i+0x212>
 800ba76:	2500      	movs	r5, #0
 800ba78:	f104 0619 	add.w	r6, r4, #25
 800ba7c:	e7f5      	b.n	800ba6a <_printf_i+0x22e>
 800ba7e:	bf00      	nop
 800ba80:	0800bc9d 	.word	0x0800bc9d
 800ba84:	0800bcae 	.word	0x0800bcae

0800ba88 <__retarget_lock_acquire_recursive>:
 800ba88:	4770      	bx	lr

0800ba8a <__retarget_lock_release_recursive>:
 800ba8a:	4770      	bx	lr

0800ba8c <memcpy>:
 800ba8c:	440a      	add	r2, r1
 800ba8e:	4291      	cmp	r1, r2
 800ba90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba94:	d100      	bne.n	800ba98 <memcpy+0xc>
 800ba96:	4770      	bx	lr
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baa2:	4291      	cmp	r1, r2
 800baa4:	d1f9      	bne.n	800ba9a <memcpy+0xe>
 800baa6:	bd10      	pop	{r4, pc}

0800baa8 <memmove>:
 800baa8:	4288      	cmp	r0, r1
 800baaa:	b510      	push	{r4, lr}
 800baac:	eb01 0402 	add.w	r4, r1, r2
 800bab0:	d902      	bls.n	800bab8 <memmove+0x10>
 800bab2:	4284      	cmp	r4, r0
 800bab4:	4623      	mov	r3, r4
 800bab6:	d807      	bhi.n	800bac8 <memmove+0x20>
 800bab8:	1e43      	subs	r3, r0, #1
 800baba:	42a1      	cmp	r1, r4
 800babc:	d008      	beq.n	800bad0 <memmove+0x28>
 800babe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bac6:	e7f8      	b.n	800baba <memmove+0x12>
 800bac8:	4402      	add	r2, r0
 800baca:	4601      	mov	r1, r0
 800bacc:	428a      	cmp	r2, r1
 800bace:	d100      	bne.n	800bad2 <memmove+0x2a>
 800bad0:	bd10      	pop	{r4, pc}
 800bad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bada:	e7f7      	b.n	800bacc <memmove+0x24>

0800badc <_realloc_r>:
 800badc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae0:	4680      	mov	r8, r0
 800bae2:	4614      	mov	r4, r2
 800bae4:	460e      	mov	r6, r1
 800bae6:	b921      	cbnz	r1, 800baf2 <_realloc_r+0x16>
 800bae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baec:	4611      	mov	r1, r2
 800baee:	f7ff bc2b 	b.w	800b348 <_malloc_r>
 800baf2:	b92a      	cbnz	r2, 800bb00 <_realloc_r+0x24>
 800baf4:	f7ff fbbc 	bl	800b270 <_free_r>
 800baf8:	4625      	mov	r5, r4
 800bafa:	4628      	mov	r0, r5
 800bafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb00:	f000 f81b 	bl	800bb3a <_malloc_usable_size_r>
 800bb04:	4284      	cmp	r4, r0
 800bb06:	4607      	mov	r7, r0
 800bb08:	d802      	bhi.n	800bb10 <_realloc_r+0x34>
 800bb0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb0e:	d812      	bhi.n	800bb36 <_realloc_r+0x5a>
 800bb10:	4621      	mov	r1, r4
 800bb12:	4640      	mov	r0, r8
 800bb14:	f7ff fc18 	bl	800b348 <_malloc_r>
 800bb18:	4605      	mov	r5, r0
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d0ed      	beq.n	800bafa <_realloc_r+0x1e>
 800bb1e:	42bc      	cmp	r4, r7
 800bb20:	4622      	mov	r2, r4
 800bb22:	4631      	mov	r1, r6
 800bb24:	bf28      	it	cs
 800bb26:	463a      	movcs	r2, r7
 800bb28:	f7ff ffb0 	bl	800ba8c <memcpy>
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	4640      	mov	r0, r8
 800bb30:	f7ff fb9e 	bl	800b270 <_free_r>
 800bb34:	e7e1      	b.n	800bafa <_realloc_r+0x1e>
 800bb36:	4635      	mov	r5, r6
 800bb38:	e7df      	b.n	800bafa <_realloc_r+0x1e>

0800bb3a <_malloc_usable_size_r>:
 800bb3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb3e:	1f18      	subs	r0, r3, #4
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	bfbc      	itt	lt
 800bb44:	580b      	ldrlt	r3, [r1, r0]
 800bb46:	18c0      	addlt	r0, r0, r3
 800bb48:	4770      	bx	lr
	...

0800bb4c <_init>:
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	bf00      	nop
 800bb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb52:	bc08      	pop	{r3}
 800bb54:	469e      	mov	lr, r3
 800bb56:	4770      	bx	lr

0800bb58 <_fini>:
 800bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5a:	bf00      	nop
 800bb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5e:	bc08      	pop	{r3}
 800bb60:	469e      	mov	lr, r3
 800bb62:	4770      	bx	lr
