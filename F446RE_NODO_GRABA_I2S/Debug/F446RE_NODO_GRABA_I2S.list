
F446RE_NODO_GRABA_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b48  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08009d18  08009d18  00019d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e60  08009e60  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009e60  08009e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e68  08009e68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e68  08009e68  00019e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cec  20000074  08009ee4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d60  08009ee4  00020d60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001326b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6a  00000000  00000000  0003330f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00036280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00037368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002527a  00000000  00000000  000382e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171b2  00000000  00000000  0005d55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2643  00000000  00000000  0007470c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146d4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004960  00000000  00000000  00146da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d00 	.word	0x08009d00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08009d00 	.word	0x08009d00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <AIC3254_Init>:

/*
 * INIZIALIZE
 */

uint8_t AIC3254_Init(AIC3254_t *dev, I2C_HandleTypeDef *i2cHandle) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]

	/* Init Struct */
	dev->i2cHandle = i2cHandle;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	601a      	str	r2, [r3, #0]
	 * Set Stereo ADC with 48ksps Sample Rate and High Performance
	 */

	/* Initialize to Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f91e 	bl	800080a <AIC3254_SendCommand>
 80005ce:	4603      	mov	r3, r0
 80005d0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <AIC3254_Init+0x2a>
 80005d8:	2001      	movs	r0, #1
 80005da:	f008 fee3 	bl	80093a4 <exit>

	/* S/W Reset to initialize all registers */

	status = AIC3254_SendCommand(dev, SW_RESET, 0x01);
 80005de:	2201      	movs	r2, #1
 80005e0:	2101      	movs	r1, #1
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 f911 	bl	800080a <AIC3254_SendCommand>
 80005e8:	4603      	mov	r3, r0
 80005ea:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <AIC3254_Init+0x44>
 80005f2:	2001      	movs	r0, #1
 80005f4:	f008 fed6 	bl	80093a4 <exit>

	/* Power up NADC divider with value 1 */

	status = AIC3254_SendCommand(dev, CSR_8, 0x81);
 80005f8:	2281      	movs	r2, #129	; 0x81
 80005fa:	2112      	movs	r1, #18
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f904 	bl	800080a <AIC3254_SendCommand>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <AIC3254_Init+0x5e>
 800060c:	2001      	movs	r0, #1
 800060e:	f008 fec9 	bl	80093a4 <exit>

	/* Power up MADC divider with value 2 */

	status = AIC3254_SendCommand(dev, CSR_9, 0x82);
 8000612:	2282      	movs	r2, #130	; 0x82
 8000614:	2113      	movs	r1, #19
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f8f7 	bl	800080a <AIC3254_SendCommand>
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <AIC3254_Init+0x78>
 8000626:	2001      	movs	r0, #1
 8000628:	f008 febc 	bl	80093a4 <exit>

	/* Program OSR for ADC to 128 */

	status = AIC3254_SendCommand(dev, AOSR, 0x80);
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	2114      	movs	r1, #20
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f8ea 	bl	800080a <AIC3254_SendCommand>
 8000636:	4603      	mov	r3, r0
 8000638:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <AIC3254_Init+0x92>
 8000640:	2001      	movs	r0, #1
 8000642:	f008 feaf 	bl	80093a4 <exit>

	/* Select ADC PRB_R1 */

	status = AIC3254_SendCommand(dev, PBCR, 0x01);
 8000646:	2201      	movs	r2, #1
 8000648:	213d      	movs	r1, #61	; 0x3d
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f8dd 	bl	800080a <AIC3254_SendCommand>
 8000650:	4603      	mov	r3, r0
 8000652:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <AIC3254_Init+0xac>
 800065a:	2001      	movs	r0, #1
 800065c:	f008 fea2 	bl	80093a4 <exit>

	/* Select Page 1 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_1);
 8000660:	2201      	movs	r2, #1
 8000662:	2100      	movs	r1, #0
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f8d0 	bl	800080a <AIC3254_SendCommand>
 800066a:	4603      	mov	r3, r0
 800066c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <AIC3254_Init+0xc6>
 8000674:	2001      	movs	r0, #1
 8000676:	f008 fe95 	bl	80093a4 <exit>

	/* Disable Internal Crude AVdd in presence of external AVdd supply or before
	 * powering up internal AVdd LDO
	 */

	status = AIC3254_SendCommand(dev, POW_CONF, 0x08);
 800067a:	2208      	movs	r2, #8
 800067c:	2101      	movs	r1, #1
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 f8c3 	bl	800080a <AIC3254_SendCommand>
 8000684:	4603      	mov	r3, r0
 8000686:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <AIC3254_Init+0xe0>
 800068e:	2001      	movs	r0, #1
 8000690:	f008 fe88 	bl	80093a4 <exit>

	/* Enable Master Analog Power Control */

	status = AIC3254_SendCommand(dev, LDO_CR, 0x00);
 8000694:	2200      	movs	r2, #0
 8000696:	2102      	movs	r1, #2
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 f8b6 	bl	800080a <AIC3254_SendCommand>
 800069e:	4603      	mov	r3, r0
 80006a0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <AIC3254_Init+0xfa>
 80006a8:	2001      	movs	r0, #1
 80006aa:	f008 fe7b 	bl	80093a4 <exit>

	/* Set the input common mode to 0.9V */

	status = AIC3254_SendCommand(dev, CMM_CR, 0x00);
 80006ae:	2200      	movs	r2, #0
 80006b0:	210a      	movs	r1, #10
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f8a9 	bl	800080a <AIC3254_SendCommand>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <AIC3254_Init+0x114>
 80006c2:	2001      	movs	r0, #1
 80006c4:	f008 fe6e 	bl	80093a4 <exit>

	/* Select ADC PTM_R4 */

	status = AIC3254_SendCommand(dev, POW_TUN, 0x00);
 80006c8:	2200      	movs	r2, #0
 80006ca:	213d      	movs	r1, #61	; 0x3d
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f89c 	bl	800080a <AIC3254_SendCommand>
 80006d2:	4603      	mov	r3, r0
 80006d4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <AIC3254_Init+0x12e>
 80006dc:	2001      	movs	r0, #1
 80006de:	f008 fe61 	bl	80093a4 <exit>

	/* Set MicPGA startup delay to 3.1ms */

	status = AIC3254_SendCommand(dev, AIQC_CR, 0x32);
 80006e2:	2232      	movs	r2, #50	; 0x32
 80006e4:	2147      	movs	r1, #71	; 0x47
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f88f 	bl	800080a <AIC3254_SendCommand>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <AIC3254_Init+0x148>
 80006f6:	2001      	movs	r0, #1
 80006f8:	f008 fe54 	bl	80093a4 <exit>

	/* Set the REF charging time to 40ms */

	status = AIC3254_SendCommand(dev, REF_POW_CR, 0x01);
 80006fc:	2201      	movs	r2, #1
 80006fe:	217b      	movs	r1, #123	; 0x7b
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f882 	bl	800080a <AIC3254_SendCommand>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <AIC3254_Init+0x162>
 8000710:	2001      	movs	r0, #1
 8000712:	f008 fe47 	bl	80093a4 <exit>

	/* Route IN1L to LEFT_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, LROUTE_PCR, 0x80);
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	2134      	movs	r1, #52	; 0x34
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f000 f875 	bl	800080a <AIC3254_SendCommand>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <AIC3254_Init+0x17c>
 800072a:	2001      	movs	r0, #1
 800072c:	f008 fe3a 	bl	80093a4 <exit>

	/* Route Common Mode to LEFT_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, LROUTE_NCR, 0x80);
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	2136      	movs	r1, #54	; 0x36
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 f868 	bl	800080a <AIC3254_SendCommand>
 800073a:	4603      	mov	r3, r0
 800073c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <AIC3254_Init+0x196>
 8000744:	2001      	movs	r0, #1
 8000746:	f008 fe2d 	bl	80093a4 <exit>

	/* Route IN1R to Right_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, RROUTE_PCR, 0x80);
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	2137      	movs	r1, #55	; 0x37
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 f85b 	bl	800080a <AIC3254_SendCommand>
 8000754:	4603      	mov	r3, r0
 8000756:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <AIC3254_Init+0x1b0>
 800075e:	2001      	movs	r0, #1
 8000760:	f008 fe20 	bl	80093a4 <exit>

	/* Route Common Mode to Right_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, RROUTE_NCR, 0x80);
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	2139      	movs	r1, #57	; 0x39
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f84e 	bl	800080a <AIC3254_SendCommand>
 800076e:	4603      	mov	r3, r0
 8000770:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d002      	beq.n	800077e <AIC3254_Init+0x1ca>
 8000778:	2001      	movs	r0, #1
 800077a:	f008 fe13 	bl	80093a4 <exit>

	/* Unmute Left MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, LVOLUME_CR, 0x0c);
 800077e:	220c      	movs	r2, #12
 8000780:	213b      	movs	r1, #59	; 0x3b
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f000 f841 	bl	800080a <AIC3254_SendCommand>
 8000788:	4603      	mov	r3, r0
 800078a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d002      	beq.n	8000798 <AIC3254_Init+0x1e4>
 8000792:	2001      	movs	r0, #1
 8000794:	f008 fe06 	bl	80093a4 <exit>

	/* Unmute Right MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, RVOLUME_CR, 0x0c);
 8000798:	220c      	movs	r2, #12
 800079a:	213c      	movs	r1, #60	; 0x3c
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 f834 	bl	800080a <AIC3254_SendCommand>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <AIC3254_Init+0x1fe>
 80007ac:	2001      	movs	r0, #1
 80007ae:	f008 fdf9 	bl	80093a4 <exit>

	/* Select Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f827 	bl	800080a <AIC3254_SendCommand>
 80007bc:	4603      	mov	r3, r0
 80007be:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <AIC3254_Init+0x218>
 80007c6:	2001      	movs	r0, #1
 80007c8:	f008 fdec 	bl	80093a4 <exit>

	/* Power up Left and Right ADC Channels */

	status = AIC3254_SendCommand(dev, CH_SETUP, 0xc0);
 80007cc:	22c0      	movs	r2, #192	; 0xc0
 80007ce:	2151      	movs	r1, #81	; 0x51
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 f81a 	bl	800080a <AIC3254_SendCommand>
 80007d6:	4603      	mov	r3, r0
 80007d8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d002      	beq.n	80007e6 <AIC3254_Init+0x232>
 80007e0:	2001      	movs	r0, #1
 80007e2:	f008 fddf 	bl	80093a4 <exit>

	/* Unmute Left and Right ADC Digital Volume Control */

	status = AIC3254_SendCommand(dev, CH_GAIN, 0x00);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2152      	movs	r1, #82	; 0x52
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f80d 	bl	800080a <AIC3254_SendCommand>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <AIC3254_Init+0x24c>
 80007fa:	2001      	movs	r0, #1
 80007fc:	f008 fdd2 	bl	80093a4 <exit>

	return status;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <AIC3254_SendCommand>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef AIC3254_SendCommand(AIC3254_t *dev, uint8_t Register, uint8_t Data) {
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af04      	add	r7, sp, #16
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	70fb      	strb	r3, [r7, #3]
 8000816:	4613      	mov	r3, r2
 8000818:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, AIC3254_I2C_ADDR , Register, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	78fb      	ldrb	r3, [r7, #3]
 8000820:	b29a      	uxth	r2, r3
 8000822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000826:	9302      	str	r3, [sp, #8]
 8000828:	2301      	movs	r3, #1
 800082a:	9301      	str	r3, [sp, #4]
 800082c:	1cbb      	adds	r3, r7, #2
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2301      	movs	r3, #1
 8000832:	2130      	movs	r1, #48	; 0x30
 8000834:	f001 ff6c 	bl	8002710 <HAL_I2C_Mem_Write>
 8000838:	4603      	mov	r3, r0

}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0c2      	sub	sp, #264	; 0x108
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f000 feb5 	bl	80015b8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f879 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 f99d 	bl	8000b90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000856:	f000 f95d 	bl	8000b14 <MX_DMA_Init>
  MX_I2C1_Init();
 800085a:	f000 f8df 	bl	8000a1c <MX_I2C1_Init>
  MX_I2S2_Init();
 800085e:	f000 f90b 	bl	8000a78 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8000862:	f000 f937 	bl	8000ad4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000866:	f006 f82d 	bl	80068c4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize CODEC */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000870:	482d      	ldr	r0, [pc, #180]	; (8000928 <main+0xe4>)
 8000872:	f001 fdd5 	bl	8002420 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000876:	2001      	movs	r0, #1
 8000878:	f000 ff10 	bl	800169c <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000882:	4829      	ldr	r0, [pc, #164]	; (8000928 <main+0xe4>)
 8000884:	f001 fdcc 	bl	8002420 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 ff07 	bl	800169c <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000894:	4824      	ldr	r0, [pc, #144]	; (8000928 <main+0xe4>)
 8000896:	f001 fdc3 	bl	8002420 <HAL_GPIO_WritePin>
  AIC3254_Init(&codec, &hi2c1);
 800089a:	4924      	ldr	r1, [pc, #144]	; (800092c <main+0xe8>)
 800089c:	4824      	ldr	r0, [pc, #144]	; (8000930 <main+0xec>)
 800089e:	f7ff fe89 	bl	80005b4 <AIC3254_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  FRESULT res;
  char filename[256];
  res = f_mount(&SDFatFS, SDPath, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	4923      	ldr	r1, [pc, #140]	; (8000934 <main+0xf0>)
 80008a6:	4824      	ldr	r0, [pc, #144]	; (8000938 <main+0xf4>)
 80008a8:	f007 fef0 	bl	800868c <f_mount>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

  uint16_t count;
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80008b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b6:	4821      	ldr	r0, [pc, #132]	; (800093c <main+0xf8>)
 80008b8:	f001 fdcb 	bl	8002452 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80008bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c0:	f000 feec 	bl	800169c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80008c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c8:	481c      	ldr	r0, [pc, #112]	; (800093c <main+0xf8>)
 80008ca:	f001 fdc2 	bl	8002452 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80008ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d2:	f000 fee3 	bl	800169c <HAL_Delay>

	  HAL_Delay(1);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f000 fee0 	bl	800169c <HAL_Delay>
	  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 80008dc:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	f8a7 2106 	strh.w	r2, [r7, #262]	; 0x106
 80008e6:	1d38      	adds	r0, r7, #4
 80008e8:	4a12      	ldr	r2, [pc, #72]	; (8000934 <main+0xf0>)
 80008ea:	4915      	ldr	r1, [pc, #84]	; (8000940 <main+0xfc>)
 80008ec:	f008 fe8a 	bl	8009604 <siprintf>
	  startRecord(filename);
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fa62 	bl	8000dbc <startRecord>

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80008f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fc:	480f      	ldr	r0, [pc, #60]	; (800093c <main+0xf8>)
 80008fe:	f001 fda8 	bl	8002452 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000906:	f000 fec9 	bl	800169c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800090a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090e:	480b      	ldr	r0, [pc, #44]	; (800093c <main+0xf8>)
 8000910:	f001 fd9f 	bl	8002452 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000918:	f000 fec0 	bl	800169c <HAL_Delay>

	  HAL_Delay(10000);
 800091c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000920:	f000 febc 	bl	800169c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000924:	e7c5      	b.n	80008b2 <main+0x6e>
 8000926:	bf00      	nop
 8000928:	40020400 	.word	0x40020400
 800092c:	20000090 	.word	0x20000090
 8000930:	200002d0 	.word	0x200002d0
 8000934:	20000ae8 	.word	0x20000ae8
 8000938:	20000aec 	.word	0x20000aec
 800093c:	40020000 	.word	0x40020000
 8000940:	08009d18 	.word	0x08009d18

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2234      	movs	r2, #52	; 0x34
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f008 fd5e 	bl	8009414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <SystemClock_Config+0xd0>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <SystemClock_Config+0xd0>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <SystemClock_Config+0xd0>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <SystemClock_Config+0xd4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000990:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <SystemClock_Config+0xd4>)
 8000992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <SystemClock_Config+0xd4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ac:	2310      	movs	r3, #16
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	2302      	movs	r3, #2
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009b8:	2308      	movs	r3, #8
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009bc:	2332      	movs	r3, #50	; 0x32
 80009be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009c4:	2305      	movs	r3, #5
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fddb 	bl	800458c <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009dc:	f000 fac8 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e0:	230f      	movs	r3, #15
 80009e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e4:	2302      	movs	r3, #2
 80009e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2101      	movs	r1, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fda3 	bl	8003548 <HAL_RCC_ClockConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a08:	f000 fab2 	bl	8000f70 <Error_Handler>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3750      	adds	r7, #80	; 0x50
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a22:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <MX_I2C1_Init+0x54>)
 8000a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a28:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_I2C1_Init+0x58>)
 8000a2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a5a:	f001 fd15 	bl	8002488 <HAL_I2C_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a64:	f000 fa84 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000090 	.word	0x20000090
 8000a70:	40005400 	.word	0x40005400
 8000a74:	000186a0 	.word	0x000186a0

08000a78 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_I2S2_Init+0x54>)
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <MX_I2S2_Init+0x58>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_I2S2_Init+0x54>)
 8000a84:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a88:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_I2S2_Init+0x54>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_I2S2_Init+0x54>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <MX_I2S2_Init+0x54>)
 8000a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_I2S2_Init+0x54>)
 8000aa0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000aa4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_I2S2_Init+0x54>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_I2S2_Init+0x54>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_I2S2_Init+0x54>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_I2S2_Init+0x54>)
 8000aba:	f002 f941 	bl	8002d40 <HAL_I2S_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000ac4:	f000 fa54 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200000e4 	.word	0x200000e4
 8000ad0:	40003800 	.word	0x40003800

08000ad4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_SDIO_SD_Init+0x38>)
 8000ada:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <MX_SDIO_SD_Init+0x3c>)
 8000adc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_SDIO_SD_Init+0x38>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_SDIO_SD_Init+0x38>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_SDIO_SD_Init+0x38>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_SDIO_SD_Init+0x38>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <MX_SDIO_SD_Init+0x38>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <MX_SDIO_SD_Init+0x38>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	2000018c 	.word	0x2000018c
 8000b10:	40012c00 	.word	0x40012c00

08000b14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_DMA_Init+0x78>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a1a      	ldr	r2, [pc, #104]	; (8000b8c <MX_DMA_Init+0x78>)
 8000b24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_DMA_Init+0x78>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_DMA_Init+0x78>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_DMA_Init+0x78>)
 8000b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_DMA_Init+0x78>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	200e      	movs	r0, #14
 8000b58:	f000 fe9f 	bl	800189a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b5c:	200e      	movs	r0, #14
 8000b5e:	f000 feb8 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	203b      	movs	r0, #59	; 0x3b
 8000b68:	f000 fe97 	bl	800189a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b6c:	203b      	movs	r0, #59	; 0x3b
 8000b6e:	f000 feb0 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2045      	movs	r0, #69	; 0x45
 8000b78:	f000 fe8f 	bl	800189a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b7c:	2045      	movs	r0, #69	; 0x45
 8000b7e:	f000 fea8 	bl	80018d2 <HAL_NVIC_EnableIRQ>

}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a3e      	ldr	r2, [pc, #248]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a37      	ldr	r2, [pc, #220]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a30      	ldr	r2, [pc, #192]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a29      	ldr	r2, [pc, #164]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <MX_GPIO_Init+0x118>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c38:	481c      	ldr	r0, [pc, #112]	; (8000cac <MX_GPIO_Init+0x11c>)
 8000c3a:	f001 fbf1 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000c44:	481a      	ldr	r0, [pc, #104]	; (8000cb0 <MX_GPIO_Init+0x120>)
 8000c46:	f001 fbeb 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4812      	ldr	r0, [pc, #72]	; (8000cac <MX_GPIO_Init+0x11c>)
 8000c64:	f001 fa30 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <MX_GPIO_Init+0x120>)
 8000c7e:	f001 fa23 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0x120>)
 8000c9c:	f001 fa14 	bl	80020c8 <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_I2S_RxCpltCallback>:
	f_close(&fout);
	f_close(&fin);
}


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	uint8_t rcvCplt = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
	uint16_t* rpt, *wpt, *temppt;

	rCount++;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_I2S_RxCpltCallback+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <HAL_I2S_RxCpltCallback+0x40>)
 8000cc8:	6013      	str	r3, [r2, #0]
	rpt = (rcvBuf)+(rCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_I2S_RxCpltCallback+0x40>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <HAL_I2S_RxCpltCallback+0x44>)
 8000cd4:	8812      	ldrh	r2, [r2, #0]
 8000cd6:	fb02 f303 	mul.w	r3, r2, r3
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_I2S_RxCpltCallback+0x48>)
 8000cde:	4413      	add	r3, r2
 8000ce0:	60bb      	str	r3, [r7, #8]
	HAL_I2S_Receive_DMA(hi2s, rpt, DMA_READ_SIZE);
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f002 f922 	bl	8002f30 <HAL_I2S_Receive_DMA>
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000ad4 	.word	0x20000ad4
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	200002d4 	.word	0x200002d4

08000d00 <fwrite_wav_header>:

FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	4608      	mov	r0, r1
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4603      	mov	r3, r0
 8000d10:	807b      	strh	r3, [r7, #2]
 8000d12:	460b      	mov	r3, r1
 8000d14:	707b      	strb	r3, [r7, #1]
 8000d16:	4613      	mov	r3, r2
 8000d18:	703b      	strb	r3, [r7, #0]
	UINT bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000d1a:	2352      	movs	r3, #82	; 0x52
 8000d1c:	723b      	strb	r3, [r7, #8]
 8000d1e:	2349      	movs	r3, #73	; 0x49
 8000d20:	727b      	strb	r3, [r7, #9]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000d22:	2346      	movs	r3, #70	; 0x46
 8000d24:	72bb      	strb	r3, [r7, #10]
 8000d26:	2346      	movs	r3, #70	; 0x46
 8000d28:	72fb      	strb	r3, [r7, #11]
	wave_header.size = (uint32_t)0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000d2e:	2357      	movs	r3, #87	; 0x57
 8000d30:	743b      	strb	r3, [r7, #16]
 8000d32:	2341      	movs	r3, #65	; 0x41
 8000d34:	747b      	strb	r3, [r7, #17]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000d36:	2356      	movs	r3, #86	; 0x56
 8000d38:	74bb      	strb	r3, [r7, #18]
 8000d3a:	2345      	movs	r3, #69	; 0x45
 8000d3c:	74fb      	strb	r3, [r7, #19]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000d3e:	2366      	movs	r3, #102	; 0x66
 8000d40:	753b      	strb	r3, [r7, #20]
 8000d42:	236d      	movs	r3, #109	; 0x6d
 8000d44:	757b      	strb	r3, [r7, #21]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000d46:	2374      	movs	r3, #116	; 0x74
 8000d48:	75bb      	strb	r3, [r7, #22]
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt_size = 16;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	61bb      	str	r3, [r7, #24]
	wave_header.format = 1; // PCM
 8000d52:	2301      	movs	r3, #1
 8000d54:	83bb      	strh	r3, [r7, #28]
	wave_header.channels = channels; // channels
 8000d56:	783b      	ldrb	r3, [r7, #0]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	83fb      	strh	r3, [r7, #30]
	wave_header.sampleRate=sampleRate;  // sample rate
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	623b      	str	r3, [r7, #32]
	wave_header.rbc = sampleRate*bitsPerSample*2/8;
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	787a      	ldrb	r2, [r7, #1]
 8000d64:	fb02 f303 	mul.w	r3, r2, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da00      	bge.n	8000d6e <fwrite_wav_header+0x6e>
 8000d6c:	3303      	adds	r3, #3
 8000d6e:	109b      	asrs	r3, r3, #2
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.bc =  bitsPerSample*2/8;
 8000d72:	787b      	ldrb	r3, [r7, #1]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	da00      	bge.n	8000d7a <fwrite_wav_header+0x7a>
 8000d78:	3303      	adds	r3, #3
 8000d7a:	109b      	asrs	r3, r3, #2
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	853b      	strh	r3, [r7, #40]	; 0x28
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000d80:	787b      	ldrb	r3, [r7, #1]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	857b      	strh	r3, [r7, #42]	; 0x2a
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000d86:	2364      	movs	r3, #100	; 0x64
 8000d88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000d8c:	2361      	movs	r3, #97	; 0x61
 8000d8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000d92:	2374      	movs	r3, #116	; 0x74
 8000d94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000d98:	2361      	movs	r3, #97	; 0x61
 8000d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	wave_header.data_size = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), &bw);
 8000da2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000da6:	f107 0108 	add.w	r1, r7, #8
 8000daa:	222c      	movs	r2, #44	; 0x2c
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f007 fe71 	bl	8008a94 <f_write>
 8000db2:	4603      	mov	r3, r0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3738      	adds	r7, #56	; 0x38
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <startRecord>:

void startRecord(char *filename) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000dc8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000dcc:	6018      	str	r0, [r3, #0]
	uint16_t* rpt, *wpt, *temppt;
	UINT bw;
	UINT writeBytes;
	UINT skipCount=125;// skip 0.5 second
 8000dce:	237d      	movs	r3, #125	; 0x7d
 8000dd0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	FIL fp;
	FRESULT res;

	writeBytes = DMA_TxRx_SIZE*2;
 8000dd4:	4b5f      	ldr	r3, [pc, #380]	; (8000f54 <startRecord+0x198>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	while(res != FR_EXIST) res = f_open(&fp, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000dde:	e00c      	b.n	8000dfa <startRecord+0x3e>
 8000de0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000de4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000de8:	f107 0010 	add.w	r0, r7, #16
 8000dec:	220a      	movs	r2, #10
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	f007 fc92 	bl	8008718 <f_open>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
 8000dfa:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d1ee      	bne.n	8000de0 <startRecord+0x24>
	res = fwrite_wav_header(&fp, 16000, 32, 2);
 8000e02:	f107 0010 	add.w	r0, r7, #16
 8000e06:	2302      	movs	r3, #2
 8000e08:	2220      	movs	r2, #32
 8000e0a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000e0e:	f7ff ff77 	bl	8000d00 <fwrite_wav_header>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1e:	484e      	ldr	r0, [pc, #312]	; (8000f58 <startRecord+0x19c>)
 8000e20:	f001 fafe 	bl	8002420 <HAL_GPIO_WritePin>
	audio_state = STATE_RECORDING;
 8000e24:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <startRecord+0x1a0>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	701a      	strb	r2, [r3, #0]
	rpt = rcvBuf;
 8000e2a:	4b4d      	ldr	r3, [pc, #308]	; (8000f60 <startRecord+0x1a4>)
 8000e2c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	wpt = rpt;
 8000e30:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000e34:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	rCount=0; wCount=0;
 8000e38:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <startRecord+0x1a8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <startRecord+0x1ac>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
	HAL_I2S_Receive_DMA(&hi2s2, rpt, DMA_READ_SIZE);
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8000e4a:	4848      	ldr	r0, [pc, #288]	; (8000f6c <startRecord+0x1b0>)
 8000e4c:	f002 f870 	bl	8002f30 <HAL_I2S_Receive_DMA>

	while (1)
	{
		if (wCount < rCount ) {
 8000e50:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <startRecord+0x1ac>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <startRecord+0x1a8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d224      	bcs.n	8000ea6 <startRecord+0xea>
			if (rCount > skipCount)
 8000e5c:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <startRecord+0x1a8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d20c      	bcs.n	8000e82 <startRecord+0xc6>
			{
				res = f_write(&fp, wpt, writeBytes, &bw);
 8000e68:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000e6c:	f107 0010 	add.w	r0, r7, #16
 8000e70:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8000e74:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8000e78:	f007 fe0c 	bl	8008a94 <f_write>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
			}
			 wCount++;
 8000e82:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <startRecord+0x1ac>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a37      	ldr	r2, [pc, #220]	; (8000f68 <startRecord+0x1ac>)
 8000e8a:	6013      	str	r3, [r2, #0]
			 wpt = (rcvBuf)+(wCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000e8c:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <startRecord+0x1ac>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	4a2f      	ldr	r2, [pc, #188]	; (8000f54 <startRecord+0x198>)
 8000e96:	8812      	ldrh	r2, [r2, #0]
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <startRecord+0x1a4>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		  }

		  if (audio_state == STATE_STOP || rCount > MAX_DMA_ACCESS_COUNT)
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <startRecord+0x1a0>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d004      	beq.n	8000eb8 <startRecord+0xfc>
 8000eae:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <startRecord+0x1a8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000eb6:	d9cb      	bls.n	8000e50 <startRecord+0x94>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 8000eb8:	482c      	ldr	r0, [pc, #176]	; (8000f6c <startRecord+0x1b0>)
 8000eba:	f002 f8f5 	bl	80030a8 <HAL_I2S_DMAStop>
			  break;
 8000ebe:	bf00      	nop
		  }
	}
	uint32_t data_len = (wCount-1) * writeBytes;
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <startRecord+0x1ac>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8000eca:	fb03 f202 	mul.w	r2, r3, r2
 8000ece:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000ed2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000ed6:	601a      	str	r2, [r3, #0]
	uint32_t total_len = data_len+36;
 8000ed8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000edc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000ee6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000eea:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8000eee:	601a      	str	r2, [r3, #0]
	f_lseek(&fp, 4);
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f007 ffe9 	bl	8008ece <f_lseek>
	f_write(&fp, (uint8_t*)&total_len, 4, &bw);
 8000efc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000f00:	f107 0108 	add.w	r1, r7, #8
 8000f04:	f107 0010 	add.w	r0, r7, #16
 8000f08:	2204      	movs	r2, #4
 8000f0a:	f007 fdc3 	bl	8008a94 <f_write>
	f_lseek(&fp, 40);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	2128      	movs	r1, #40	; 0x28
 8000f14:	4618      	mov	r0, r3
 8000f16:	f007 ffda 	bl	8008ece <f_lseek>
	f_write(&fp, (uint8_t*)&data_len, 4, &bw);
 8000f1a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000f1e:	f107 010c 	add.w	r1, r7, #12
 8000f22:	f107 0010 	add.w	r0, r7, #16
 8000f26:	2204      	movs	r2, #4
 8000f28:	f007 fdb4 	bl	8008a94 <f_write>
	f_close(&fp);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4618      	mov	r0, r3
 8000f32:	f007 ffa2 	bl	8008e7a <f_close>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <startRecord+0x19c>)
 8000f3e:	f001 fa6f 	bl	8002420 <HAL_GPIO_WritePin>
	audio_state = STATE_STOP;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <startRecord+0x1a0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000000 	.word	0x20000000
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	20000002 	.word	0x20000002
 8000f60:	200002d4 	.word	0x200002d4
 8000f64:	20000ad4 	.word	0x20000ad4
 8000f68:	20000ad8 	.word	0x20000ad8
 8000f6c:	200000e4 	.word	0x200000e4

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_I2C_MspInit+0x84>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12b      	bne.n	8001046 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_I2C_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_I2C_MspInit+0x88>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_I2C_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800100a:	23c0      	movs	r3, #192	; 0xc0
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100e:	2312      	movs	r3, #18
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800101a:	2304      	movs	r3, #4
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <HAL_I2C_MspInit+0x8c>)
 8001026:	f001 f84f 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_I2C_MspInit+0x88>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_I2C_MspInit+0x88>)
 8001034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_I2C_MspInit+0x88>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40005400 	.word	0x40005400
 8001054:	40023800 	.word	0x40023800
 8001058:	40020400 	.word	0x40020400

0800105c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0a2      	sub	sp, #136	; 0x88
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	225c      	movs	r2, #92	; 0x5c
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f008 f9c9 	bl	8009414 <memset>
  if(hi2s->Instance==SPI2)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a50      	ldr	r2, [pc, #320]	; (80011c8 <HAL_I2S_MspInit+0x16c>)
 8001088:	4293      	cmp	r3, r2
 800108a:	f040 8098 	bne.w	80011be <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001092:	2332      	movs	r3, #50	; 0x32
 8001094:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 800109a:	2308      	movs	r3, #8
 800109c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80010aa:	2300      	movs	r3, #0
 80010ac:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fb4e 	bl	8003754 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 80010be:	f7ff ff57 	bl	8000f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	4b41      	ldr	r3, [pc, #260]	; (80011cc <HAL_I2S_MspInit+0x170>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a40      	ldr	r2, [pc, #256]	; (80011cc <HAL_I2S_MspInit+0x170>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b3e      	ldr	r3, [pc, #248]	; (80011cc <HAL_I2S_MspInit+0x170>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <HAL_I2S_MspInit+0x170>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a39      	ldr	r2, [pc, #228]	; (80011cc <HAL_I2S_MspInit+0x170>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <HAL_I2S_MspInit+0x170>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_I2S_MspInit+0x170>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_I2S_MspInit+0x170>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_I2S_MspInit+0x170>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001116:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800111a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800112a:	2305      	movs	r3, #5
 800112c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001134:	4619      	mov	r1, r3
 8001136:	4826      	ldr	r0, [pc, #152]	; (80011d0 <HAL_I2S_MspInit+0x174>)
 8001138:	f000 ffc6 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800114e:	2305      	movs	r3, #5
 8001150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001158:	4619      	mov	r1, r3
 800115a:	481e      	ldr	r0, [pc, #120]	; (80011d4 <HAL_I2S_MspInit+0x178>)
 800115c:	f000 ffb4 	bl	80020c8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 8001162:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <HAL_I2S_MspInit+0x180>)
 8001164:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 8001168:	2200      	movs	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 800117a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 8001182:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001186:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 800118a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 80011a4:	f000 fbb0 	bl	8001908 <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 80011ae:	f7ff fedf 	bl	8000f70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 80011b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_I2S_MspInit+0x17c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3788      	adds	r7, #136	; 0x88
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40003800 	.word	0x40003800
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40020800 	.word	0x40020800
 80011d8:	2000012c 	.word	0x2000012c
 80011dc:	40026058 	.word	0x40026058

080011e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0a2      	sub	sp, #136	; 0x88
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	225c      	movs	r2, #92	; 0x5c
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f008 f907 	bl	8009414 <memset>
  if(hsd->Instance==SDIO)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a79      	ldr	r2, [pc, #484]	; (80013f0 <HAL_SD_MspInit+0x210>)
 800120c:	4293      	cmp	r3, r2
 800120e:	f040 80eb 	bne.w	80013e8 <HAL_SD_MspInit+0x208>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001212:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001216:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001218:	2300      	movs	r3, #0
 800121a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800121c:	2300      	movs	r3, #0
 800121e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fa95 	bl	8003754 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001230:	f7ff fe9e 	bl	8000f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	4b6e      	ldr	r3, [pc, #440]	; (80013f4 <HAL_SD_MspInit+0x214>)
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	4a6d      	ldr	r2, [pc, #436]	; (80013f4 <HAL_SD_MspInit+0x214>)
 800123e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001242:	6453      	str	r3, [r2, #68]	; 0x44
 8001244:	4b6b      	ldr	r3, [pc, #428]	; (80013f4 <HAL_SD_MspInit+0x214>)
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <HAL_SD_MspInit+0x214>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a66      	ldr	r2, [pc, #408]	; (80013f4 <HAL_SD_MspInit+0x214>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
 8001260:	4b64      	ldr	r3, [pc, #400]	; (80013f4 <HAL_SD_MspInit+0x214>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4b60      	ldr	r3, [pc, #384]	; (80013f4 <HAL_SD_MspInit+0x214>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4a5f      	ldr	r2, [pc, #380]	; (80013f4 <HAL_SD_MspInit+0x214>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6313      	str	r3, [r2, #48]	; 0x30
 800127c:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <HAL_SD_MspInit+0x214>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001288:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800128c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001292:	2301      	movs	r3, #1
 8001294:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800129c:	230c      	movs	r3, #12
 800129e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012a6:	4619      	mov	r1, r3
 80012a8:	4853      	ldr	r0, [pc, #332]	; (80013f8 <HAL_SD_MspInit+0x218>)
 80012aa:	f000 ff0d 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012c2:	230c      	movs	r3, #12
 80012c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012cc:	4619      	mov	r1, r3
 80012ce:	484a      	ldr	r0, [pc, #296]	; (80013f8 <HAL_SD_MspInit+0x218>)
 80012d0:	f000 fefa 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012d4:	2304      	movs	r3, #4
 80012d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012dc:	2301      	movs	r3, #1
 80012de:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012e6:	230c      	movs	r3, #12
 80012e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012f0:	4619      	mov	r1, r3
 80012f2:	4842      	ldr	r0, [pc, #264]	; (80013fc <HAL_SD_MspInit+0x21c>)
 80012f4:	f000 fee8 	bl	80020c8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80012f8:	4b41      	ldr	r3, [pc, #260]	; (8001400 <HAL_SD_MspInit+0x220>)
 80012fa:	4a42      	ldr	r2, [pc, #264]	; (8001404 <HAL_SD_MspInit+0x224>)
 80012fc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <HAL_SD_MspInit+0x220>)
 8001300:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001304:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001306:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <HAL_SD_MspInit+0x220>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <HAL_SD_MspInit+0x220>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <HAL_SD_MspInit+0x220>)
 8001314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001318:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800131a:	4b39      	ldr	r3, [pc, #228]	; (8001400 <HAL_SD_MspInit+0x220>)
 800131c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001320:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001322:	4b37      	ldr	r3, [pc, #220]	; (8001400 <HAL_SD_MspInit+0x220>)
 8001324:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001328:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800132a:	4b35      	ldr	r3, [pc, #212]	; (8001400 <HAL_SD_MspInit+0x220>)
 800132c:	2220      	movs	r2, #32
 800132e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001330:	4b33      	ldr	r3, [pc, #204]	; (8001400 <HAL_SD_MspInit+0x220>)
 8001332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001336:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001338:	4b31      	ldr	r3, [pc, #196]	; (8001400 <HAL_SD_MspInit+0x220>)
 800133a:	2204      	movs	r2, #4
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800133e:	4b30      	ldr	r3, [pc, #192]	; (8001400 <HAL_SD_MspInit+0x220>)
 8001340:	2203      	movs	r2, #3
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_SD_MspInit+0x220>)
 8001346:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <HAL_SD_MspInit+0x220>)
 800134e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001354:	482a      	ldr	r0, [pc, #168]	; (8001400 <HAL_SD_MspInit+0x220>)
 8001356:	f000 fad7 	bl	8001908 <HAL_DMA_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_SD_MspInit+0x184>
    {
      Error_Handler();
 8001360:	f7ff fe06 	bl	8000f70 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a26      	ldr	r2, [pc, #152]	; (8001400 <HAL_SD_MspInit+0x220>)
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <HAL_SD_MspInit+0x220>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <HAL_SD_MspInit+0x228>)
 8001372:	4a26      	ldr	r2, [pc, #152]	; (800140c <HAL_SD_MspInit+0x22c>)
 8001374:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_SD_MspInit+0x228>)
 8001378:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800137c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_SD_MspInit+0x228>)
 8001380:	2240      	movs	r2, #64	; 0x40
 8001382:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001384:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_SD_MspInit+0x228>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_SD_MspInit+0x228>)
 800138c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001390:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_SD_MspInit+0x228>)
 8001394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001398:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_SD_MspInit+0x228>)
 800139c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a0:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_SD_MspInit+0x228>)
 80013a4:	2220      	movs	r2, #32
 80013a6:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_SD_MspInit+0x228>)
 80013aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ae:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_SD_MspInit+0x228>)
 80013b2:	2204      	movs	r2, #4
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_SD_MspInit+0x228>)
 80013b8:	2203      	movs	r2, #3
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_SD_MspInit+0x228>)
 80013be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_SD_MspInit+0x228>)
 80013c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80013cc:	480e      	ldr	r0, [pc, #56]	; (8001408 <HAL_SD_MspInit+0x228>)
 80013ce:	f000 fa9b 	bl	8001908 <HAL_DMA_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_SD_MspInit+0x1fc>
    {
      Error_Handler();
 80013d8:	f7ff fdca 	bl	8000f70 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_SD_MspInit+0x228>)
 80013e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <HAL_SD_MspInit+0x228>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3788      	adds	r7, #136	; 0x88
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40012c00 	.word	0x40012c00
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	20000210 	.word	0x20000210
 8001404:	40026458 	.word	0x40026458
 8001408:	20000270 	.word	0x20000270
 800140c:	400264a0 	.word	0x400264a0

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145c:	f000 f8fe 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <DMA1_Stream3_IRQHandler+0x10>)
 800146a:	f000 fbc3 	bl	8001bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000012c 	.word	0x2000012c

08001478 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <DMA2_Stream3_IRQHandler+0x10>)
 800147e:	f000 fbb9 	bl	8001bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000210 	.word	0x20000210

0800148c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <DMA2_Stream6_IRQHandler+0x10>)
 8001492:	f000 fbaf 	bl	8001bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000270 	.word	0x20000270

080014a0 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014aa:	f007 ff75 	bl	8009398 <__errno>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2216      	movs	r2, #22
 80014b2:	601a      	str	r2, [r3, #0]
	return -1;
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_exit>:

void _exit (int status)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014d2:	e7fe      	b.n	80014d2 <_exit+0x12>

080014d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <_sbrk+0x5c>)
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <_sbrk+0x60>)
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <_sbrk+0x64>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <_sbrk+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001504:	f007 ff48 	bl	8009398 <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	220c      	movs	r2, #12
 800150c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001512:	e009      	b.n	8001528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <_sbrk+0x64>)
 8001524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20020000 	.word	0x20020000
 8001534:	00000400 	.word	0x00000400
 8001538:	20000adc 	.word	0x20000adc
 800153c:	20000d60 	.word	0x20000d60

08001540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <SystemInit+0x20>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <SystemInit+0x20>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158e:	f7ff ffd7 	bl	8001540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f007 ff1b 	bl	80093cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff f955 	bl	8000844 <main>
  bx  lr    
 800159a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800159c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80015a8:	08009e70 	.word	0x08009e70
  ldr r2, =_sbss
 80015ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80015b0:	20000d60 	.word	0x20000d60

080015b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f94f 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	200f      	movs	r0, #15
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fcc6 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f967 	bl	80018ee <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001638:	f000 f92f 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000004 	.word	0x20000004
 8001654:	2000000c 	.word	0x2000000c
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000000c 	.word	0x2000000c
 8001680:	20000ae0 	.word	0x20000ae0

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000ae0 	.word	0x20000ae0

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000000c 	.word	0x2000000c

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff29 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff3e 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff31 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff feb6 	bl	8001684 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e099      	b.n	8001a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001944:	e00f      	b.n	8001966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001946:	f7ff fe9d 	bl	8001684 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b05      	cmp	r3, #5
 8001952:	d908      	bls.n	8001966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2220      	movs	r2, #32
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2203      	movs	r2, #3
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e078      	b.n	8001a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e8      	bne.n	8001946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_DMA_Init+0x158>)
 8001980:	4013      	ands	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d107      	bne.n	80019d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	4313      	orrs	r3, r2
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d117      	bne.n	8001a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00e      	beq.n	8001a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fadf 	bl	8001fd0 <DMA_CheckFifoParam>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a26:	2301      	movs	r3, #1
 8001a28:	e016      	b.n	8001a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fa96 	bl	8001f64 <DMA_CalcBaseAndBitshift>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	223f      	movs	r2, #63	; 0x3f
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	f010803f 	.word	0xf010803f

08001a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_DMA_Start_IT+0x26>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e040      	b.n	8001b0c <HAL_DMA_Start_IT+0xa8>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d12f      	bne.n	8001afe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fa28 	bl	8001f08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	223f      	movs	r2, #63	; 0x3f
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0216 	orr.w	r2, r2, #22
 8001ad2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0208 	orr.w	r2, r2, #8
 8001aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e005      	b.n	8001b0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b06:	2302      	movs	r3, #2
 8001b08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b22:	f7ff fdaf 	bl	8001684 <HAL_GetTick>
 8001b26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d008      	beq.n	8001b46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e052      	b.n	8001bec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0216 	bic.w	r2, r2, #22
 8001b54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d103      	bne.n	8001b76 <HAL_DMA_Abort+0x62>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0208 	bic.w	r2, r2, #8
 8001b84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b96:	e013      	b.n	8001bc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b98:	f7ff fd74 	bl	8001684 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d90c      	bls.n	8001bc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2203      	movs	r2, #3
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e015      	b.n	8001bec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1e4      	bne.n	8001b98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	223f      	movs	r2, #63	; 0x3f
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c00:	4b8e      	ldr	r3, [pc, #568]	; (8001e3c <HAL_DMA_IRQHandler+0x248>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a8e      	ldr	r2, [pc, #568]	; (8001e40 <HAL_DMA_IRQHandler+0x24c>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0a9b      	lsrs	r3, r3, #10
 8001c0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1e:	2208      	movs	r2, #8
 8001c20:	409a      	lsls	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01a      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0204 	bic.w	r2, r2, #4
 8001c46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c64:	2201      	movs	r2, #1
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d012      	beq.n	8001c96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	2201      	movs	r2, #1
 8001c84:	409a      	lsls	r2, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d012      	beq.n	8001ccc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00b      	beq.n	8001ccc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	2204      	movs	r2, #4
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f043 0204 	orr.w	r2, r3, #4
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d043      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d03c      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2210      	movs	r2, #16
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d018      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d108      	bne.n	8001d24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d024      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
 8001d22:	e01f      	b.n	8001d64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01b      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	4798      	blx	r3
 8001d34:	e016      	b.n	8001d64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0208 	bic.w	r2, r2, #8
 8001d52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	2220      	movs	r2, #32
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 808f 	beq.w	8001e94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 8087 	beq.w	8001e94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	d136      	bne.n	8001e0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0216 	bic.w	r2, r2, #22
 8001dac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d103      	bne.n	8001dce <HAL_DMA_IRQHandler+0x1da>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d007      	beq.n	8001dde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0208 	bic.w	r2, r2, #8
 8001ddc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	223f      	movs	r2, #63	; 0x3f
 8001de4:	409a      	lsls	r2, r3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d07e      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	4798      	blx	r3
        }
        return;
 8001e0a:	e079      	b.n	8001f00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01d      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d031      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	4798      	blx	r3
 8001e38:	e02c      	b.n	8001e94 <HAL_DMA_IRQHandler+0x2a0>
 8001e3a:	bf00      	nop
 8001e3c:	20000004 	.word	0x20000004
 8001e40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d023      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
 8001e54:	e01e      	b.n	8001e94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10f      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0210 	bic.w	r2, r2, #16
 8001e72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d032      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d022      	beq.n	8001eee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2205      	movs	r2, #5
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d307      	bcc.n	8001edc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f2      	bne.n	8001ec0 <HAL_DMA_IRQHandler+0x2cc>
 8001eda:	e000      	b.n	8001ede <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001edc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	4798      	blx	r3
 8001efe:	e000      	b.n	8001f02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f00:	bf00      	nop
    }
  }
}
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d108      	bne.n	8001f48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f46:	e007      	b.n	8001f58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	60da      	str	r2, [r3, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3b10      	subs	r3, #16
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <DMA_CalcBaseAndBitshift+0x64>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f7e:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <DMA_CalcBaseAndBitshift+0x68>)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d909      	bls.n	8001fa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	1d1a      	adds	r2, r3, #4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	659a      	str	r2, [r3, #88]	; 0x58
 8001fa4:	e007      	b.n	8001fb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fae:	f023 0303 	bic.w	r3, r3, #3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	aaaaaaab 	.word	0xaaaaaaab
 8001fcc:	08009d8c 	.word	0x08009d8c

08001fd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d11f      	bne.n	800202a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d856      	bhi.n	800209e <DMA_CheckFifoParam+0xce>
 8001ff0:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <DMA_CheckFifoParam+0x28>)
 8001ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff6:	bf00      	nop
 8001ff8:	08002009 	.word	0x08002009
 8001ffc:	0800201b 	.word	0x0800201b
 8002000:	08002009 	.word	0x08002009
 8002004:	0800209f 	.word	0x0800209f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d046      	beq.n	80020a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002018:	e043      	b.n	80020a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002022:	d140      	bne.n	80020a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002028:	e03d      	b.n	80020a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002032:	d121      	bne.n	8002078 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d837      	bhi.n	80020aa <DMA_CheckFifoParam+0xda>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <DMA_CheckFifoParam+0x70>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002051 	.word	0x08002051
 8002044:	08002057 	.word	0x08002057
 8002048:	08002051 	.word	0x08002051
 800204c:	08002069 	.word	0x08002069
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
      break;
 8002054:	e030      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d025      	beq.n	80020ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002066:	e022      	b.n	80020ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002070:	d11f      	bne.n	80020b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002076:	e01c      	b.n	80020b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d903      	bls.n	8002086 <DMA_CheckFifoParam+0xb6>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d003      	beq.n	800208c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002084:	e018      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
      break;
 800208a:	e015      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00e      	beq.n	80020b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
      break;
 800209c:	e00b      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
      break;
 800209e:	bf00      	nop
 80020a0:	e00a      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;
 80020a2:	bf00      	nop
 80020a4:	e008      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;
 80020a6:	bf00      	nop
 80020a8:	e006      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;
 80020aa:	bf00      	nop
 80020ac:	e004      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;
 80020ae:	bf00      	nop
 80020b0:	e002      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80020b2:	bf00      	nop
 80020b4:	e000      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;
 80020b6:	bf00      	nop
    }
  } 
  
  return status; 
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e165      	b.n	80023b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 8154 	bne.w	80023aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d005      	beq.n	800211a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002116:	2b02      	cmp	r3, #2
 8002118:	d130      	bne.n	800217c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0201 	and.w	r2, r3, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b03      	cmp	r3, #3
 8002186:	d017      	beq.n	80021b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d123      	bne.n	800220c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	08da      	lsrs	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80ae 	beq.w	80023aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <HAL_GPIO_Init+0x300>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a5c      	ldr	r2, [pc, #368]	; (80023c8 <HAL_GPIO_Init+0x300>)
 8002258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <HAL_GPIO_Init+0x300>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226a:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_GPIO_Init+0x304>)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	220f      	movs	r2, #15
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4f      	ldr	r2, [pc, #316]	; (80023d0 <HAL_GPIO_Init+0x308>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d025      	beq.n	80022e2 <HAL_GPIO_Init+0x21a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4e      	ldr	r2, [pc, #312]	; (80023d4 <HAL_GPIO_Init+0x30c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01f      	beq.n	80022de <HAL_GPIO_Init+0x216>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4d      	ldr	r2, [pc, #308]	; (80023d8 <HAL_GPIO_Init+0x310>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d019      	beq.n	80022da <HAL_GPIO_Init+0x212>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4c      	ldr	r2, [pc, #304]	; (80023dc <HAL_GPIO_Init+0x314>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4b      	ldr	r2, [pc, #300]	; (80023e0 <HAL_GPIO_Init+0x318>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00d      	beq.n	80022d2 <HAL_GPIO_Init+0x20a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4a      	ldr	r2, [pc, #296]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <HAL_GPIO_Init+0x206>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a49      	ldr	r2, [pc, #292]	; (80023e8 <HAL_GPIO_Init+0x320>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_GPIO_Init+0x202>
 80022c6:	2306      	movs	r3, #6
 80022c8:	e00c      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022ca:	2307      	movs	r3, #7
 80022cc:	e00a      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022ce:	2305      	movs	r3, #5
 80022d0:	e008      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022d2:	2304      	movs	r3, #4
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022d6:	2303      	movs	r3, #3
 80022d8:	e004      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022da:	2302      	movs	r3, #2
 80022dc:	e002      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x21c>
 80022e2:	2300      	movs	r3, #0
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	f002 0203 	and.w	r2, r2, #3
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	4093      	lsls	r3, r2
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f4:	4935      	ldr	r1, [pc, #212]	; (80023cc <HAL_GPIO_Init+0x304>)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002302:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <HAL_GPIO_Init+0x324>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002326:	4a31      	ldr	r2, [pc, #196]	; (80023ec <HAL_GPIO_Init+0x324>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800232c:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <HAL_GPIO_Init+0x324>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002350:	4a26      	ldr	r2, [pc, #152]	; (80023ec <HAL_GPIO_Init+0x324>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002356:	4b25      	ldr	r3, [pc, #148]	; (80023ec <HAL_GPIO_Init+0x324>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237a:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <HAL_GPIO_Init+0x324>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_GPIO_Init+0x324>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a4:	4a11      	ldr	r2, [pc, #68]	; (80023ec <HAL_GPIO_Init+0x324>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3301      	adds	r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	f67f ae96 	bls.w	80020e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40013800 	.word	0x40013800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40020800 	.word	0x40020800
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40021400 	.word	0x40021400
 80023e8:	40021800 	.word	0x40021800
 80023ec:	40013c00 	.word	0x40013c00

080023f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	887b      	ldrh	r3, [r7, #2]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e001      	b.n	8002412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
 800242c:	4613      	mov	r3, r2
 800242e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800243c:	e003      	b.n	8002446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800243e:	887b      	ldrh	r3, [r7, #2]
 8002440:	041a      	lsls	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	619a      	str	r2, [r3, #24]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002464:	887a      	ldrh	r2, [r7, #2]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	041a      	lsls	r2, r3, #16
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43d9      	mvns	r1, r3
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	400b      	ands	r3, r1
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	619a      	str	r2, [r3, #24]
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e12b      	b.n	80026f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fd8c 	bl	8000fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024ec:	f001 f91e 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a81      	ldr	r2, [pc, #516]	; (80026fc <HAL_I2C_Init+0x274>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d807      	bhi.n	800250c <HAL_I2C_Init+0x84>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a80      	ldr	r2, [pc, #512]	; (8002700 <HAL_I2C_Init+0x278>)
 8002500:	4293      	cmp	r3, r2
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e006      	b.n	800251a <HAL_I2C_Init+0x92>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a7d      	ldr	r2, [pc, #500]	; (8002704 <HAL_I2C_Init+0x27c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0e7      	b.n	80026f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a78      	ldr	r2, [pc, #480]	; (8002708 <HAL_I2C_Init+0x280>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	0c9b      	lsrs	r3, r3, #18
 800252c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a6a      	ldr	r2, [pc, #424]	; (80026fc <HAL_I2C_Init+0x274>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d802      	bhi.n	800255c <HAL_I2C_Init+0xd4>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3301      	adds	r3, #1
 800255a:	e009      	b.n	8002570 <HAL_I2C_Init+0xe8>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	4a69      	ldr	r2, [pc, #420]	; (800270c <HAL_I2C_Init+0x284>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	3301      	adds	r3, #1
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	430b      	orrs	r3, r1
 8002576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002582:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	495c      	ldr	r1, [pc, #368]	; (80026fc <HAL_I2C_Init+0x274>)
 800258c:	428b      	cmp	r3, r1
 800258e:	d819      	bhi.n	80025c4 <HAL_I2C_Init+0x13c>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e59      	subs	r1, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fbb1 f3f3 	udiv	r3, r1, r3
 800259e:	1c59      	adds	r1, r3, #1
 80025a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025a4:	400b      	ands	r3, r1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_I2C_Init+0x138>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e59      	subs	r1, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025be:	e051      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 80025c0:	2304      	movs	r3, #4
 80025c2:	e04f      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d111      	bne.n	80025f0 <HAL_I2C_Init+0x168>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e58      	subs	r0, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e012      	b.n	8002616 <HAL_I2C_Init+0x18e>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e58      	subs	r0, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	0099      	lsls	r1, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	fbb0 f3f3 	udiv	r3, r0, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Init+0x196>
 800261a:	2301      	movs	r3, #1
 800261c:	e022      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10e      	bne.n	8002644 <HAL_I2C_Init+0x1bc>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1e58      	subs	r0, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	440b      	add	r3, r1
 8002634:	fbb0 f3f3 	udiv	r3, r0, r3
 8002638:	3301      	adds	r3, #1
 800263a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002642:	e00f      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e58      	subs	r0, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	0099      	lsls	r1, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	fbb0 f3f3 	udiv	r3, r0, r3
 800265a:	3301      	adds	r3, #1
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	6809      	ldr	r1, [r1, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6911      	ldr	r1, [r2, #16]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68d2      	ldr	r2, [r2, #12]
 800269e:	4311      	orrs	r1, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	000186a0 	.word	0x000186a0
 8002700:	001e847f 	.word	0x001e847f
 8002704:	003d08ff 	.word	0x003d08ff
 8002708:	431bde83 	.word	0x431bde83
 800270c:	10624dd3 	.word	0x10624dd3

08002710 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	817b      	strh	r3, [r7, #10]
 8002722:	460b      	mov	r3, r1
 8002724:	813b      	strh	r3, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800272a:	f7fe ffab 	bl	8001684 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b20      	cmp	r3, #32
 800273a:	f040 80d9 	bne.w	80028f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2319      	movs	r3, #25
 8002744:	2201      	movs	r2, #1
 8002746:	496d      	ldr	r1, [pc, #436]	; (80028fc <HAL_I2C_Mem_Write+0x1ec>)
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f971 	bl	8002a30 <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
 8002756:	e0cc      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_I2C_Mem_Write+0x56>
 8002762:	2302      	movs	r3, #2
 8002764:	e0c5      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d007      	beq.n	800278c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2221      	movs	r2, #33	; 0x21
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2240      	movs	r2, #64	; 0x40
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a4d      	ldr	r2, [pc, #308]	; (8002900 <HAL_I2C_Mem_Write+0x1f0>)
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ce:	88f8      	ldrh	r0, [r7, #6]
 80027d0:	893a      	ldrh	r2, [r7, #8]
 80027d2:	8979      	ldrh	r1, [r7, #10]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4603      	mov	r3, r0
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f890 	bl	8002904 <I2C_RequestMemoryWrite>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d052      	beq.n	8002890 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e081      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f9f2 	bl	8002bdc <I2C_WaitOnTXEFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00d      	beq.n	800281a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	2b04      	cmp	r3, #4
 8002804:	d107      	bne.n	8002816 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002814:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e06b      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b04      	cmp	r3, #4
 8002856:	d11b      	bne.n	8002890 <HAL_I2C_Mem_Write+0x180>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d017      	beq.n	8002890 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1aa      	bne.n	80027ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f9de 	bl	8002c5e <I2C_WaitOnBTFFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e016      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	00100002 	.word	0x00100002
 8002900:	ffff0000 	.word	0xffff0000

08002904 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	4608      	mov	r0, r1
 800290e:	4611      	mov	r1, r2
 8002910:	461a      	mov	r2, r3
 8002912:	4603      	mov	r3, r0
 8002914:	817b      	strh	r3, [r7, #10]
 8002916:	460b      	mov	r3, r1
 8002918:	813b      	strh	r3, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800292c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	2200      	movs	r2, #0
 8002936:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f878 	bl	8002a30 <I2C_WaitOnFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002954:	d103      	bne.n	800295e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e05f      	b.n	8002a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002962:	897b      	ldrh	r3, [r7, #10]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002970:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	6a3a      	ldr	r2, [r7, #32]
 8002976:	492d      	ldr	r1, [pc, #180]	; (8002a2c <I2C_RequestMemoryWrite+0x128>)
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f8b0 	bl	8002ade <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e04c      	b.n	8002a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	6a39      	ldr	r1, [r7, #32]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f91a 	bl	8002bdc <I2C_WaitOnTXEFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d107      	bne.n	80029c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e02b      	b.n	8002a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029d0:	893b      	ldrh	r3, [r7, #8]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	611a      	str	r2, [r3, #16]
 80029da:	e021      	b.n	8002a20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029dc:	893b      	ldrh	r3, [r7, #8]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	6a39      	ldr	r1, [r7, #32]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f8f4 	bl	8002bdc <I2C_WaitOnTXEFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d107      	bne.n	8002a12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e005      	b.n	8002a22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a16:	893b      	ldrh	r3, [r7, #8]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	00010002 	.word	0x00010002

08002a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a40:	e025      	b.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a48:	d021      	beq.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4a:	f7fe fe1b 	bl	8001684 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d302      	bcc.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d116      	bne.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f043 0220 	orr.w	r2, r3, #32
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e023      	b.n	8002ad6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d10d      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	e00c      	b.n	8002ace <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d0b6      	beq.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aec:	e051      	b.n	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afc:	d123      	bne.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f043 0204 	orr.w	r2, r3, #4
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e046      	b.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b4c:	d021      	beq.n	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7fe fd99 	bl	8001684 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d116      	bne.n	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e020      	b.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d10c      	bne.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e00b      	b.n	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d18d      	bne.n	8002aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be8:	e02d      	b.n	8002c46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f878 	bl	8002ce0 <I2C_IsAcknowledgeFailed>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e02d      	b.n	8002c56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c00:	d021      	beq.n	8002c46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fe fd3f 	bl	8001684 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d116      	bne.n	8002c46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f043 0220 	orr.w	r2, r3, #32
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e007      	b.n	8002c56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	d1ca      	bne.n	8002bea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c6a:	e02d      	b.n	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f837 	bl	8002ce0 <I2C_IsAcknowledgeFailed>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e02d      	b.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c82:	d021      	beq.n	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c84:	f7fe fcfe 	bl	8001684 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d302      	bcc.n	8002c9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d116      	bne.n	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e007      	b.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d1ca      	bne.n	8002c6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	d11b      	bne.n	8002d30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f043 0204 	orr.w	r2, r3, #4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0e1      	b.n	8002f16 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a6d      	ldr	r2, [pc, #436]	; (8002f20 <HAL_I2S_Init+0x1e0>)
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7fe f975 	bl	800105c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d88:	f023 030f 	bic.w	r3, r3, #15
 8002d8c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2202      	movs	r2, #2
 8002d94:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d06f      	beq.n	8002e7e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002da6:	2310      	movs	r3, #16
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e001      	b.n	8002db0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d802      	bhi.n	8002dbe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_I2S_Init+0x1e4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_I2S_Init+0x92>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <HAL_I2S_Init+0x1e8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d104      	bne.n	8002ddc <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 ffe8 	bl	8003da8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	e003      	b.n	8002de4 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002ddc:	2002      	movs	r0, #2
 8002dde:	f000 ffe3 	bl	8003da8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002de2:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dec:	d125      	bne.n	8002e3a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d010      	beq.n	8002e18 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	461a      	mov	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	3305      	adds	r3, #5
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	e01f      	b.n	8002e58 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	3305      	adds	r3, #5
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	e00e      	b.n	8002e58 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	3305      	adds	r3, #5
 8002e56:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4a34      	ldr	r2, [pc, #208]	; (8002f2c <HAL_I2S_Init+0x1ec>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	e003      	b.n	8002e86 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d902      	bls.n	8002e92 <HAL_I2S_Init+0x152>
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2bff      	cmp	r3, #255	; 0xff
 8002e90:	d907      	bls.n	8002ea2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f043 0210 	orr.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e039      	b.n	8002f16 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	ea42 0103 	orr.w	r1, r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ec0:	f023 030f 	bic.w	r3, r3, #15
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6851      	ldr	r1, [r2, #4]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	4311      	orrs	r1, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6992      	ldr	r2, [r2, #24]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee4:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b30      	cmp	r3, #48	; 0x30
 8002eec:	d003      	beq.n	8002ef6 <HAL_I2S_Init+0x1b6>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2bb0      	cmp	r3, #176	; 0xb0
 8002ef4:	d107      	bne.n	8002f06 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f04:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	080033c1 	.word	0x080033c1
 8002f24:	40003800 	.word	0x40003800
 8002f28:	40003c00 	.word	0x40003c00
 8002f2c:	cccccccd 	.word	0xcccccccd

08002f30 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_I2S_Receive_DMA+0x1a>
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0a1      	b.n	8003092 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_I2S_Receive_DMA+0x2e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e099      	b.n	8003092 <HAL_I2S_Receive_DMA+0x162>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e089      	b.n	8003092 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2204      	movs	r2, #4
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d002      	beq.n	8002faa <HAL_I2S_Receive_DMA+0x7a>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	865a      	strh	r2, [r3, #50]	; 0x32
 8002fbe:	e005      	b.n	8002fcc <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd0:	4a32      	ldr	r2, [pc, #200]	; (800309c <HAL_I2S_Receive_DMA+0x16c>)
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	4a31      	ldr	r2, [pc, #196]	; (80030a0 <HAL_I2S_Receive_DMA+0x170>)
 8002fda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	4a30      	ldr	r2, [pc, #192]	; (80030a4 <HAL_I2S_Receive_DMA+0x174>)
 8002fe2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff2:	d10a      	bne.n	800300a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	4619      	mov	r1, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003020:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003022:	f7fe fd1f 	bl	8001a64 <HAL_DMA_Start_IT>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00f      	beq.n	800304c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f043 0208 	orr.w	r2, r3, #8
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e022      	b.n	8003092 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	2b00      	cmp	r3, #0
 8003058:	d107      	bne.n	800306a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003068:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d107      	bne.n	8003088 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	0800329f 	.word	0x0800329f
 80030a0:	0800325d 	.word	0x0800325d
 80030a4:	080032bb 	.word	0x080032bb

080030a8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030bc:	d003      	beq.n	80030c6 <HAL_I2S_DMAStop+0x1e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d155      	bne.n	8003172 <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00f      	beq.n	80030ee <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fd1e 	bl	8001b14 <HAL_DMA_Abort>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f043 0208 	orr.w	r2, r3, #8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80030ee:	2364      	movs	r3, #100	; 0x64
 80030f0:	2201      	movs	r2, #1
 80030f2:	2102      	movs	r1, #2
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f9ed 	bl	80034d4 <I2S_WaitFlagStateUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003118:	2364      	movs	r3, #100	; 0x64
 800311a:	2200      	movs	r2, #0
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f9d8 	bl	80034d4 <I2S_WaitFlagStateUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f043 0201 	orr.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003150:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0202 	bic.w	r2, r2, #2
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	e04d      	b.n	800320e <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317a:	d004      	beq.n	8003186 <HAL_I2S_DMAStop+0xde>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003184:	d143      	bne.n	800320e <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00f      	beq.n	80031ae <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fcbe 	bl	8001b14 <HAL_DMA_Abort>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0208 	orr.w	r2, r3, #8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ec:	d10c      	bne.n	8003208 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
 8003206:	e002      	b.n	800320e <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8003216:	7dfb      	ldrb	r3, [r7, #23]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10e      	bne.n	8003290 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0201 	bic.w	r2, r2, #1
 8003280:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7fd fd0f 	bl	8000cb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7ff ffc1 	bl	8003234 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0203 	bic.w	r2, r2, #3
 80032d6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	f043 0208 	orr.w	r2, r3, #8
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f7ff ffa5 	bl	8003248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	881a      	ldrh	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	1c9a      	adds	r2, r3, #2
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10e      	bne.n	800335a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800334a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff63 	bl	8003220 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	b292      	uxth	r2, r2
 8003376:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	1c9a      	adds	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10e      	bne.n	80033b8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd fc7e 	bl	8000cb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d13a      	bne.n	8003452 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d109      	bne.n	80033fa <I2S_IRQHandler+0x3a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d102      	bne.n	80033fa <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ffb4 	bl	8003362 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d126      	bne.n	8003452 <I2S_IRQHandler+0x92>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b20      	cmp	r3, #32
 8003410:	d11f      	bne.n	8003452 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003420:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f043 0202 	orr.w	r2, r3, #2
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fefb 	bl	8003248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b03      	cmp	r3, #3
 800345c:	d136      	bne.n	80034cc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b02      	cmp	r3, #2
 8003466:	d109      	bne.n	800347c <I2S_IRQHandler+0xbc>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b80      	cmp	r3, #128	; 0x80
 8003474:	d102      	bne.n	800347c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ff45 	bl	8003306 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b08      	cmp	r3, #8
 8003484:	d122      	bne.n	80034cc <I2S_IRQHandler+0x10c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b20      	cmp	r3, #32
 8003492:	d11b      	bne.n	80034cc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034a2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f043 0204 	orr.w	r2, r3, #4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff febe 	bl	8003248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034cc:	bf00      	nop
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80034e4:	f7fe f8ce 	bl	8001684 <HAL_GetTick>
 80034e8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80034ea:	e018      	b.n	800351e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f2:	d014      	beq.n	800351e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80034f4:	f7fe f8c6 	bl	8001684 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d902      	bls.n	800350a <I2S_WaitFlagStateUntilTimeout+0x36>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e00f      	b.n	800353e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4013      	ands	r3, r2
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	bf0c      	ite	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	2300      	movne	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	429a      	cmp	r2, r3
 800353a:	d1d7      	bne.n	80034ec <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0cc      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b68      	ldr	r3, [pc, #416]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d90c      	bls.n	8003584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0b8      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d020      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800359c:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c0:	4b50      	ldr	r3, [pc, #320]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	494d      	ldr	r1, [pc, #308]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d044      	beq.n	8003668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d119      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e07f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003602:	2b03      	cmp	r3, #3
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e067      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b37      	ldr	r3, [pc, #220]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4934      	ldr	r1, [pc, #208]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003638:	f7fe f824 	bl	8001684 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fe f820 	bl	8001684 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e04f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b25      	ldr	r3, [pc, #148]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d20c      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e032      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4916      	ldr	r1, [pc, #88]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	490e      	ldr	r1, [pc, #56]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ce:	f000 fdb3 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	490a      	ldr	r1, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	5ccb      	ldrb	r3, [r1, r3]
 80036e2:	fa22 f303 	lsr.w	r3, r2, r3
 80036e6:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1c8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd ff84 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023c00 	.word	0x40023c00
 8003704:	40023800 	.word	0x40023800
 8003708:	08009d74 	.word	0x08009d74
 800370c:	20000004 	.word	0x20000004
 8003710:	20000008 	.word	0x20000008

08003714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <HAL_RCC_GetHCLKFreq+0x14>)
 800371a:	681b      	ldr	r3, [r3, #0]
}
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000004 	.word	0x20000004

0800372c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003730:	f7ff fff0 	bl	8003714 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	0a9b      	lsrs	r3, r3, #10
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	08009d84 	.word	0x08009d84

08003754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d010      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800378c:	4b6f      	ldr	r3, [pc, #444]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800378e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003792:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	496c      	ldr	r1, [pc, #432]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80037aa:	2301      	movs	r3, #1
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d010      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80037ba:	4b64      	ldr	r3, [pc, #400]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	4960      	ldr	r1, [pc, #384]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80037d8:	2301      	movs	r3, #1
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d017      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037e8:	4b58      	ldr	r3, [pc, #352]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4955      	ldr	r1, [pc, #340]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003806:	d101      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003808:	2301      	movs	r3, #1
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003814:	2301      	movs	r3, #1
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d017      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003824:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	4946      	ldr	r1, [pc, #280]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003842:	d101      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003844:	2301      	movs	r3, #1
 8003846:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003850:	2301      	movs	r3, #1
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 808a 	beq.w	8003976 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800386c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003870:	6413      	str	r3, [r2, #64]	; 0x40
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800387e:	4b34      	ldr	r3, [pc, #208]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a33      	ldr	r2, [pc, #204]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800388a:	f7fd fefb 	bl	8001684 <HAL_GetTick>
 800388e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003892:	f7fd fef7 	bl	8001684 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e278      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038a4:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038b0:	4b26      	ldr	r3, [pc, #152]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d02f      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d028      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ce:	4b1f      	ldr	r3, [pc, #124]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038d8:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038ea:	4b18      	ldr	r3, [pc, #96]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d114      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80038f6:	f7fd fec5 	bl	8001684 <HAL_GetTick>
 80038fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fd fec1 	bl	8001684 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e240      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ee      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800392c:	d114      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003942:	4902      	ldr	r1, [pc, #8]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003944:	4313      	orrs	r3, r2
 8003946:	608b      	str	r3, [r1, #8]
 8003948:	e00c      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000
 8003954:	42470e40 	.word	0x42470e40
 8003958:	4b4a      	ldr	r3, [pc, #296]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a49      	ldr	r2, [pc, #292]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800395e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003962:	6093      	str	r3, [r2, #8]
 8003964:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003966:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	4944      	ldr	r1, [pc, #272]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003972:	4313      	orrs	r3, r2
 8003974:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003988:	4b3f      	ldr	r3, [pc, #252]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800398a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003998:	4b3a      	ldr	r3, [pc, #232]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a6:	4937      	ldr	r1, [pc, #220]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039ba:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c8:	492e      	ldr	r1, [pc, #184]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d011      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039dc:	4b29      	ldr	r3, [pc, #164]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	4926      	ldr	r1, [pc, #152]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fa:	d101      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80039fc:	2301      	movs	r3, #1
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	491a      	ldr	r1, [pc, #104]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d011      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a34:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3c:	4911      	ldr	r1, [pc, #68]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d005      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a60:	f040 80ff 	bne.w	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a6a:	f7fd fe0b 	bl	8001684 <HAL_GetTick>
 8003a6e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a70:	e00e      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a72:	f7fd fe07 	bl	8001684 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d907      	bls.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e188      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a84:	40023800 	.word	0x40023800
 8003a88:	424711e0 	.word	0x424711e0
 8003a8c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a90:	4b7e      	ldr	r3, [pc, #504]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ea      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d028      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d124      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ac4:	4b71      	ldr	r3, [pc, #452]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad6:	4b6d      	ldr	r3, [pc, #436]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	431a      	orrs	r2, r3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	3b01      	subs	r3, #1
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	431a      	orrs	r2, r3
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	071b      	lsls	r3, r3, #28
 8003b06:	4961      	ldr	r1, [pc, #388]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d035      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b38:	d130      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b3a:	4b54      	ldr	r3, [pc, #336]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	3301      	adds	r3, #1
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b4c:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b52:	0f1b      	lsrs	r3, r3, #28
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	019b      	lsls	r3, r3, #6
 8003b64:	431a      	orrs	r2, r3
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	431a      	orrs	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	071b      	lsls	r3, r3, #28
 8003b7c:	4943      	ldr	r1, [pc, #268]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b84:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8a:	f023 021f 	bic.w	r2, r3, #31
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	493d      	ldr	r1, [pc, #244]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d029      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb0:	d124      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bb2:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bc4:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bca:	0f1b      	lsrs	r3, r3, #28
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	019b      	lsls	r3, r3, #6
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	3b01      	subs	r3, #1
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	431a      	orrs	r2, r3
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	071b      	lsls	r3, r3, #28
 8003bf4:	4925      	ldr	r1, [pc, #148]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d016      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	071b      	lsls	r3, r3, #28
 8003c2e:	4917      	ldr	r1, [pc, #92]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c3c:	f7fd fd22 	bl	8001684 <HAL_GetTick>
 8003c40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c44:	f7fd fd1e 	bl	8001684 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e09f      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	f040 8095 	bne.w	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fd fd08 	bl	8001684 <HAL_GetTick>
 8003c74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c76:	e00f      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c78:	f7fd fd04 	bl	8001684 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d908      	bls.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e085      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	42470068 	.word	0x42470068
 8003c94:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c98:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca4:	d0e8      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d02b      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d127      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003cce:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699a      	ldr	r2, [r3, #24]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	019b      	lsls	r3, r3, #6
 8003cea:	431a      	orrs	r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	4928      	ldr	r1, [pc, #160]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d04:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	3b01      	subs	r3, #1
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	4922      	ldr	r1, [pc, #136]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01d      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d32:	d118      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	0e1b      	lsrs	r3, r3, #24
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	019b      	lsls	r3, r3, #6
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	3b01      	subs	r3, #1
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	4910      	ldr	r1, [pc, #64]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d66:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6c:	f7fd fc8a 	bl	8001684 <HAL_GetTick>
 8003d70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d74:	f7fd fc86 	bl	8001684 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e007      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d92:	d1ef      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3730      	adds	r7, #48	; 0x30
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	42470070 	.word	0x42470070

08003da8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	2b07      	cmp	r3, #7
 8003dce:	f200 8224 	bhi.w	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003dd2:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003fdb 	.word	0x08003fdb
 8003ddc:	08004105 	.word	0x08004105
 8003de0:	0800421b 	.word	0x0800421b
 8003de4:	08003df9 	.word	0x08003df9
 8003de8:	0800421b 	.word	0x0800421b
 8003dec:	0800421b 	.word	0x0800421b
 8003df0:	0800421b 	.word	0x0800421b
 8003df4:	08003df9 	.word	0x08003df9
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003df8:	4ba8      	ldr	r3, [pc, #672]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dfe:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e0e:	f000 80d6 	beq.w	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e18:	f200 80dd 	bhi.w	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e22:	f000 809f 	beq.w	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e2c:	f200 80d3 	bhi.w	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e36:	d05b      	beq.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3e:	f200 80ca 	bhi.w	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e48:	f000 80b6 	beq.w	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e52:	f200 80c0 	bhi.w	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e5c:	f000 8082 	beq.w	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e66:	f200 80b6 	bhi.w	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e76:	d03b      	beq.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003e78:	e0ad      	b.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003e7a:	4b88      	ldr	r3, [pc, #544]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003e86:	4b85      	ldr	r3, [pc, #532]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e90:	4a83      	ldr	r2, [pc, #524]	; (80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	e008      	b.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003e9a:	4b80      	ldr	r3, [pc, #512]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea4:	4a7f      	ldr	r2, [pc, #508]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003eac:	4b7b      	ldr	r3, [pc, #492]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	0e1b      	lsrs	r3, r3, #24
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8003eba:	4b78      	ldr	r3, [pc, #480]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	fb03 f202 	mul.w	r2, r3, r2
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed2:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003ed4:	4b71      	ldr	r3, [pc, #452]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eda:	0a1b      	lsrs	r3, r3, #8
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	61fb      	str	r3, [r7, #28]
          break;
 8003eee:	e073      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003efc:	4b67      	ldr	r3, [pc, #412]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f06:	4a66      	ldr	r2, [pc, #408]	; (80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	e008      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003f10:	4b62      	ldr	r3, [pc, #392]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f1a:	4a62      	ldr	r2, [pc, #392]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003f22:	4b5e      	ldr	r3, [pc, #376]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f28:	0e1b      	lsrs	r3, r3, #24
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003f30:	4b5a      	ldr	r3, [pc, #360]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	fb03 f202 	mul.w	r2, r3, r2
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003f4a:	4b54      	ldr	r3, [pc, #336]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	3301      	adds	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	61fb      	str	r3, [r7, #28]
          break;
 8003f62:	e039      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003f64:	4b4d      	ldr	r3, [pc, #308]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d108      	bne.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f70:	4b4a      	ldr	r3, [pc, #296]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f78:	4a49      	ldr	r2, [pc, #292]	; (80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	e007      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f8a:	4a46      	ldr	r2, [pc, #280]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f90:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003f92:	4b42      	ldr	r3, [pc, #264]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	0f1b      	lsrs	r3, r3, #28
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003f9e:	4b3f      	ldr	r3, [pc, #252]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	099b      	lsrs	r3, r3, #6
 8003fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	fb03 f202 	mul.w	r2, r3, r2
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	61fb      	str	r3, [r7, #28]
          break;
 8003fb6:	e00f      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fb8:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003fba:	61fb      	str	r3, [r7, #28]
          break;
 8003fbc:	e00c      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003fbe:	4b37      	ldr	r3, [pc, #220]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003fca:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003fcc:	61fb      	str	r3, [r7, #28]
          break;
 8003fce:	e003      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003fd0:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003fd2:	61fb      	str	r3, [r7, #28]
          break;
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003fd6:	bf00      	nop
        }
      }
      break;
 8003fd8:	e11f      	b.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003fda:	4b30      	ldr	r3, [pc, #192]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003fec:	d079      	beq.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003ff4:	f200 8082 	bhi.w	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ffe:	d03c      	beq.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004006:	d879      	bhi.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d006      	beq.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004014:	d172      	bne.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004018:	61fb      	str	r3, [r7, #28]
          break;
 800401a:	e072      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800401c:	4b1f      	ldr	r3, [pc, #124]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004028:	d109      	bne.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800402a:	4b1c      	ldr	r3, [pc, #112]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800402c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004034:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	e008      	b.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406a:	0f1b      	lsrs	r3, r3, #28
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	61fb      	str	r3, [r7, #28]
          break;
 8004078:	e043      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004086:	d111      	bne.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004090:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e010      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800
 80040a0:	00f42400 	.word	0x00f42400
 80040a4:	017d7840 	.word	0x017d7840
 80040a8:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80040ac:	4b5e      	ldr	r3, [pc, #376]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b4:	4a5d      	ldr	r2, [pc, #372]	; (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80040b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ba:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80040bc:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	099b      	lsrs	r3, r3, #6
 80040c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80040ce:	4b56      	ldr	r3, [pc, #344]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	0f1b      	lsrs	r3, r3, #28
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	61fb      	str	r3, [r7, #28]
          break;
 80040e0:	e00f      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80040e2:	4b51      	ldr	r3, [pc, #324]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ee:	d102      	bne.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80040f0:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80040f2:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80040f4:	e005      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80040f6:	4b4d      	ldr	r3, [pc, #308]	; (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80040f8:	61fb      	str	r3, [r7, #28]
          break;
 80040fa:	e002      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61fb      	str	r3, [r7, #28]
          break;
 8004100:	bf00      	nop
        }
      }
      break;
 8004102:	e08a      	b.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004104:	4b48      	ldr	r3, [pc, #288]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800410a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004116:	d06f      	beq.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800411e:	d878      	bhi.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004126:	d03c      	beq.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800412e:	d870      	bhi.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d006      	beq.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800413c:	d169      	bne.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800413e:	4b3d      	ldr	r3, [pc, #244]	; (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004140:	61fb      	str	r3, [r7, #28]
          break;
 8004142:	e069      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004144:	4b38      	ldr	r3, [pc, #224]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004150:	d109      	bne.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004152:	4b35      	ldr	r3, [pc, #212]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800415c:	4a34      	ldr	r2, [pc, #208]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	e008      	b.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004166:	4b30      	ldr	r3, [pc, #192]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004170:	4a2e      	ldr	r2, [pc, #184]	; (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004172:	fbb2 f3f3 	udiv	r3, r2, r3
 8004176:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004178:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800417a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800418c:	4b26      	ldr	r3, [pc, #152]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800418e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004192:	0f1b      	lsrs	r3, r3, #28
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	fbb2 f3f3 	udiv	r3, r2, r3
 800419e:	61fb      	str	r3, [r7, #28]
          break;
 80041a0:	e03a      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ae:	d108      	bne.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041b0:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	e007      	b.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041c2:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041ca:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	0f1b      	lsrs	r3, r3, #28
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	61fb      	str	r3, [r7, #28]
          break;
 80041f6:	e00f      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004204:	d102      	bne.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004208:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800420a:	e005      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800420e:	61fb      	str	r3, [r7, #28]
          break;
 8004210:	e002      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
          break;
 8004216:	bf00      	nop
        }
      }
      break;
 8004218:	bf00      	nop
    }
  }
  return frequency;
 800421a:	69fb      	ldr	r3, [r7, #28]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3724      	adds	r7, #36	; 0x24
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40023800 	.word	0x40023800
 800422c:	00f42400 	.word	0x00f42400
 8004230:	017d7840 	.word	0x017d7840
 8004234:	00bb8000 	.word	0x00bb8000

08004238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800423c:	b0a6      	sub	sp, #152	; 0x98
 800423e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425e:	4bc8      	ldr	r3, [pc, #800]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b0c      	cmp	r3, #12
 8004268:	f200 817e 	bhi.w	8004568 <HAL_RCC_GetSysClockFreq+0x330>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <HAL_RCC_GetSysClockFreq+0x3c>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	080042a9 	.word	0x080042a9
 8004278:	08004569 	.word	0x08004569
 800427c:	08004569 	.word	0x08004569
 8004280:	08004569 	.word	0x08004569
 8004284:	080042b1 	.word	0x080042b1
 8004288:	08004569 	.word	0x08004569
 800428c:	08004569 	.word	0x08004569
 8004290:	08004569 	.word	0x08004569
 8004294:	080042b9 	.word	0x080042b9
 8004298:	08004569 	.word	0x08004569
 800429c:	08004569 	.word	0x08004569
 80042a0:	08004569 	.word	0x08004569
 80042a4:	08004423 	.word	0x08004423
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4bb6      	ldr	r3, [pc, #728]	; (8004584 <HAL_RCC_GetSysClockFreq+0x34c>)
 80042aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80042ae:	e15f      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042b0:	4bb5      	ldr	r3, [pc, #724]	; (8004588 <HAL_RCC_GetSysClockFreq+0x350>)
 80042b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80042b6:	e15b      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b8:	4bb1      	ldr	r3, [pc, #708]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042c4:	4bae      	ldr	r3, [pc, #696]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d031      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d0:	4bab      	ldr	r3, [pc, #684]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	2200      	movs	r2, #0
 80042d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80042da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e2:	663b      	str	r3, [r7, #96]	; 0x60
 80042e4:	2300      	movs	r3, #0
 80042e6:	667b      	str	r3, [r7, #100]	; 0x64
 80042e8:	4ba7      	ldr	r3, [pc, #668]	; (8004588 <HAL_RCC_GetSysClockFreq+0x350>)
 80042ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80042ee:	462a      	mov	r2, r5
 80042f0:	fb03 f202 	mul.w	r2, r3, r2
 80042f4:	2300      	movs	r3, #0
 80042f6:	4621      	mov	r1, r4
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	4413      	add	r3, r2
 80042fe:	4aa2      	ldr	r2, [pc, #648]	; (8004588 <HAL_RCC_GetSysClockFreq+0x350>)
 8004300:	4621      	mov	r1, r4
 8004302:	fba1 1202 	umull	r1, r2, r1, r2
 8004306:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004308:	460a      	mov	r2, r1
 800430a:	67ba      	str	r2, [r7, #120]	; 0x78
 800430c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800430e:	4413      	add	r3, r2
 8004310:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004316:	2200      	movs	r2, #0
 8004318:	65bb      	str	r3, [r7, #88]	; 0x58
 800431a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800431c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004320:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004324:	f7fb ffc4 	bl	80002b0 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4613      	mov	r3, r2
 800432e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004332:	e064      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004334:	4b92      	ldr	r3, [pc, #584]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	2200      	movs	r2, #0
 800433c:	653b      	str	r3, [r7, #80]	; 0x50
 800433e:	657a      	str	r2, [r7, #84]	; 0x54
 8004340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004346:	64bb      	str	r3, [r7, #72]	; 0x48
 8004348:	2300      	movs	r3, #0
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800434c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004350:	4622      	mov	r2, r4
 8004352:	462b      	mov	r3, r5
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	0159      	lsls	r1, r3, #5
 800435e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004362:	0150      	lsls	r0, r2, #5
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4621      	mov	r1, r4
 800436a:	1a51      	subs	r1, r2, r1
 800436c:	6139      	str	r1, [r7, #16]
 800436e:	4629      	mov	r1, r5
 8004370:	eb63 0301 	sbc.w	r3, r3, r1
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004382:	4659      	mov	r1, fp
 8004384:	018b      	lsls	r3, r1, #6
 8004386:	4651      	mov	r1, sl
 8004388:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800438c:	4651      	mov	r1, sl
 800438e:	018a      	lsls	r2, r1, #6
 8004390:	4651      	mov	r1, sl
 8004392:	ebb2 0801 	subs.w	r8, r2, r1
 8004396:	4659      	mov	r1, fp
 8004398:	eb63 0901 	sbc.w	r9, r3, r1
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b0:	4690      	mov	r8, r2
 80043b2:	4699      	mov	r9, r3
 80043b4:	4623      	mov	r3, r4
 80043b6:	eb18 0303 	adds.w	r3, r8, r3
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	462b      	mov	r3, r5
 80043be:	eb49 0303 	adc.w	r3, r9, r3
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043d0:	4629      	mov	r1, r5
 80043d2:	028b      	lsls	r3, r1, #10
 80043d4:	4621      	mov	r1, r4
 80043d6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043da:	4621      	mov	r1, r4
 80043dc:	028a      	lsls	r2, r1, #10
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043e6:	2200      	movs	r2, #0
 80043e8:	643b      	str	r3, [r7, #64]	; 0x40
 80043ea:	647a      	str	r2, [r7, #68]	; 0x44
 80043ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043f0:	f7fb ff5e 	bl	80002b0 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4613      	mov	r3, r2
 80043fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043fe:	4b60      	ldr	r3, [pc, #384]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	0c1b      	lsrs	r3, r3, #16
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	3301      	adds	r3, #1
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004410:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004420:	e0a6      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004422:	4b57      	ldr	r3, [pc, #348]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800442a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800442e:	4b54      	ldr	r3, [pc, #336]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d02a      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800443a:	4b51      	ldr	r3, [pc, #324]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	099b      	lsrs	r3, r3, #6
 8004440:	2200      	movs	r2, #0
 8004442:	63bb      	str	r3, [r7, #56]	; 0x38
 8004444:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800444c:	2100      	movs	r1, #0
 800444e:	4b4e      	ldr	r3, [pc, #312]	; (8004588 <HAL_RCC_GetSysClockFreq+0x350>)
 8004450:	fb03 f201 	mul.w	r2, r3, r1
 8004454:	2300      	movs	r3, #0
 8004456:	fb00 f303 	mul.w	r3, r0, r3
 800445a:	4413      	add	r3, r2
 800445c:	4a4a      	ldr	r2, [pc, #296]	; (8004588 <HAL_RCC_GetSysClockFreq+0x350>)
 800445e:	fba0 1202 	umull	r1, r2, r0, r2
 8004462:	677a      	str	r2, [r7, #116]	; 0x74
 8004464:	460a      	mov	r2, r1
 8004466:	673a      	str	r2, [r7, #112]	; 0x70
 8004468:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800446a:	4413      	add	r3, r2
 800446c:	677b      	str	r3, [r7, #116]	; 0x74
 800446e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004472:	2200      	movs	r2, #0
 8004474:	633b      	str	r3, [r7, #48]	; 0x30
 8004476:	637a      	str	r2, [r7, #52]	; 0x34
 8004478:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800447c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004480:	f7fb ff16 	bl	80002b0 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4613      	mov	r3, r2
 800448a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800448e:	e05b      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004490:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	099b      	lsrs	r3, r3, #6
 8004496:	2200      	movs	r2, #0
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
 800449a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	2300      	movs	r3, #0
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
 80044a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	f04f 0000 	mov.w	r0, #0
 80044b4:	f04f 0100 	mov.w	r1, #0
 80044b8:	0159      	lsls	r1, r3, #5
 80044ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044be:	0150      	lsls	r0, r2, #5
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4641      	mov	r1, r8
 80044c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ca:	4649      	mov	r1, r9
 80044cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044e4:	ebb2 040a 	subs.w	r4, r2, sl
 80044e8:	eb63 050b 	sbc.w	r5, r3, fp
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	00eb      	lsls	r3, r5, #3
 80044f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044fa:	00e2      	lsls	r2, r4, #3
 80044fc:	4614      	mov	r4, r2
 80044fe:	461d      	mov	r5, r3
 8004500:	4643      	mov	r3, r8
 8004502:	18e3      	adds	r3, r4, r3
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	464b      	mov	r3, r9
 8004508:	eb45 0303 	adc.w	r3, r5, r3
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800451a:	4629      	mov	r1, r5
 800451c:	028b      	lsls	r3, r1, #10
 800451e:	4621      	mov	r1, r4
 8004520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004524:	4621      	mov	r1, r4
 8004526:	028a      	lsls	r2, r1, #10
 8004528:	4610      	mov	r0, r2
 800452a:	4619      	mov	r1, r3
 800452c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004530:	2200      	movs	r2, #0
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	61fa      	str	r2, [r7, #28]
 8004536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800453a:	f7fb feb9 	bl	80002b0 <__aeabi_uldivmod>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4613      	mov	r3, r2
 8004544:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <HAL_RCC_GetSysClockFreq+0x348>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	0f1b      	lsrs	r3, r3, #28
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800455a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004566:	e003      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_GetSysClockFreq+0x34c>)
 800456a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800456e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004570:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004574:	4618      	mov	r0, r3
 8004576:	3798      	adds	r7, #152	; 0x98
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	00f42400 	.word	0x00f42400
 8004588:	017d7840 	.word	0x017d7840

0800458c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e28d      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8083 	beq.w	80046b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045ac:	4b94      	ldr	r3, [pc, #592]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d019      	beq.n	80045ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045b8:	4b91      	ldr	r3, [pc, #580]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d106      	bne.n	80045d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045c4:	4b8e      	ldr	r3, [pc, #568]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d0:	d00c      	beq.n	80045ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045d2:	4b8b      	ldr	r3, [pc, #556]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d112      	bne.n	8004604 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045de:	4b88      	ldr	r3, [pc, #544]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ea:	d10b      	bne.n	8004604 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	4b84      	ldr	r3, [pc, #528]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d05b      	beq.n	80046b0 <HAL_RCC_OscConfig+0x124>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d157      	bne.n	80046b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e25a      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460c:	d106      	bne.n	800461c <HAL_RCC_OscConfig+0x90>
 800460e:	4b7c      	ldr	r3, [pc, #496]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a7b      	ldr	r2, [pc, #492]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e01d      	b.n	8004658 <HAL_RCC_OscConfig+0xcc>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004624:	d10c      	bne.n	8004640 <HAL_RCC_OscConfig+0xb4>
 8004626:	4b76      	ldr	r3, [pc, #472]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a75      	ldr	r2, [pc, #468]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 800462c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	4b73      	ldr	r3, [pc, #460]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a72      	ldr	r2, [pc, #456]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e00b      	b.n	8004658 <HAL_RCC_OscConfig+0xcc>
 8004640:	4b6f      	ldr	r3, [pc, #444]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a6e      	ldr	r2, [pc, #440]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	4b6c      	ldr	r3, [pc, #432]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a6b      	ldr	r2, [pc, #428]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d013      	beq.n	8004688 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fd f810 	bl	8001684 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004668:	f7fd f80c 	bl	8001684 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	; 0x64
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e21f      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467a:	4b61      	ldr	r3, [pc, #388]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0xdc>
 8004686:	e014      	b.n	80046b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fc fffc 	bl	8001684 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004690:	f7fc fff8 	bl	8001684 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	; 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e20b      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a2:	4b57      	ldr	r3, [pc, #348]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x104>
 80046ae:	e000      	b.n	80046b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d06f      	beq.n	800479e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046be:	4b50      	ldr	r3, [pc, #320]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d017      	beq.n	80046fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046ca:	4b4d      	ldr	r3, [pc, #308]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d105      	bne.n	80046e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046d6:	4b4a      	ldr	r3, [pc, #296]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e2:	4b47      	ldr	r3, [pc, #284]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046ea:	2b0c      	cmp	r3, #12
 80046ec:	d11c      	bne.n	8004728 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ee:	4b44      	ldr	r3, [pc, #272]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d116      	bne.n	8004728 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_RCC_OscConfig+0x186>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d001      	beq.n	8004712 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e1d3      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004712:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4937      	ldr	r1, [pc, #220]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004726:	e03a      	b.n	800479e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d020      	beq.n	8004772 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004730:	4b34      	ldr	r3, [pc, #208]	; (8004804 <HAL_RCC_OscConfig+0x278>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fc ffa5 	bl	8001684 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800473e:	f7fc ffa1 	bl	8001684 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e1b4      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004750:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475c:	4b28      	ldr	r3, [pc, #160]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4925      	ldr	r1, [pc, #148]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]
 8004770:	e015      	b.n	800479e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004772:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCC_OscConfig+0x278>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fc ff84 	bl	8001684 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004780:	f7fc ff80 	bl	8001684 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e193      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004792:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d036      	beq.n	8004818 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d016      	beq.n	80047e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <HAL_RCC_OscConfig+0x27c>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fc ff64 	bl	8001684 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c0:	f7fc ff60 	bl	8001684 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e173      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x234>
 80047de:	e01b      	b.n	8004818 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <HAL_RCC_OscConfig+0x27c>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fc ff4d 	bl	8001684 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ec:	e00e      	b.n	800480c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ee:	f7fc ff49 	bl	8001684 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d907      	bls.n	800480c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e15c      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
 8004800:	40023800 	.word	0x40023800
 8004804:	42470000 	.word	0x42470000
 8004808:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480c:	4b8a      	ldr	r3, [pc, #552]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 800480e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ea      	bne.n	80047ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8097 	beq.w	8004954 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482a:	4b83      	ldr	r3, [pc, #524]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10f      	bne.n	8004856 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	4b7f      	ldr	r3, [pc, #508]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a7e      	ldr	r2, [pc, #504]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 8004840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
 8004846:	4b7c      	ldr	r3, [pc, #496]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004856:	4b79      	ldr	r3, [pc, #484]	; (8004a3c <HAL_RCC_OscConfig+0x4b0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d118      	bne.n	8004894 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004862:	4b76      	ldr	r3, [pc, #472]	; (8004a3c <HAL_RCC_OscConfig+0x4b0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a75      	ldr	r2, [pc, #468]	; (8004a3c <HAL_RCC_OscConfig+0x4b0>)
 8004868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800486e:	f7fc ff09 	bl	8001684 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004876:	f7fc ff05 	bl	8001684 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e118      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	4b6c      	ldr	r3, [pc, #432]	; (8004a3c <HAL_RCC_OscConfig+0x4b0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d106      	bne.n	80048aa <HAL_RCC_OscConfig+0x31e>
 800489c:	4b66      	ldr	r3, [pc, #408]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	4a65      	ldr	r2, [pc, #404]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6713      	str	r3, [r2, #112]	; 0x70
 80048a8:	e01c      	b.n	80048e4 <HAL_RCC_OscConfig+0x358>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d10c      	bne.n	80048cc <HAL_RCC_OscConfig+0x340>
 80048b2:	4b61      	ldr	r3, [pc, #388]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4a60      	ldr	r2, [pc, #384]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80048b8:	f043 0304 	orr.w	r3, r3, #4
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70
 80048be:	4b5e      	ldr	r3, [pc, #376]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a5d      	ldr	r2, [pc, #372]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ca:	e00b      	b.n	80048e4 <HAL_RCC_OscConfig+0x358>
 80048cc:	4b5a      	ldr	r3, [pc, #360]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4a59      	ldr	r2, [pc, #356]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	6713      	str	r3, [r2, #112]	; 0x70
 80048d8:	4b57      	ldr	r3, [pc, #348]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	4a56      	ldr	r2, [pc, #344]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80048de:	f023 0304 	bic.w	r3, r3, #4
 80048e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d015      	beq.n	8004918 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7fc feca 	bl	8001684 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f2:	e00a      	b.n	800490a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048f4:	f7fc fec6 	bl	8001684 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e0d7      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800490a:	4b4b      	ldr	r3, [pc, #300]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0ee      	beq.n	80048f4 <HAL_RCC_OscConfig+0x368>
 8004916:	e014      	b.n	8004942 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004918:	f7fc feb4 	bl	8001684 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800491e:	e00a      	b.n	8004936 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004920:	f7fc feb0 	bl	8001684 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f241 3288 	movw	r2, #5000	; 0x1388
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e0c1      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004936:	4b40      	ldr	r3, [pc, #256]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ee      	bne.n	8004920 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004942:	7dfb      	ldrb	r3, [r7, #23]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d105      	bne.n	8004954 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004948:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	4a3a      	ldr	r2, [pc, #232]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 800494e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004952:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80ad 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800495e:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b08      	cmp	r3, #8
 8004968:	d060      	beq.n	8004a2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d145      	bne.n	80049fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004972:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <HAL_RCC_OscConfig+0x4b4>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fc fe84 	bl	8001684 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004980:	f7fc fe80 	bl	8001684 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e093      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004992:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69da      	ldr	r2, [r3, #28]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	019b      	lsls	r3, r3, #6
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	3b01      	subs	r3, #1
 80049b8:	041b      	lsls	r3, r3, #16
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	061b      	lsls	r3, r3, #24
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	071b      	lsls	r3, r3, #28
 80049ca:	491b      	ldr	r1, [pc, #108]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <HAL_RCC_OscConfig+0x4b4>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fc fe55 	bl	8001684 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049de:	f7fc fe51 	bl	8001684 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e064      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f0:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x452>
 80049fc:	e05c      	b.n	8004ab8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <HAL_RCC_OscConfig+0x4b4>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fc fe3e 	bl	8001684 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fc fe3a 	bl	8001684 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e04d      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_RCC_OscConfig+0x4ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x480>
 8004a2a:	e045      	b.n	8004ab8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e040      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40007000 	.word	0x40007000
 8004a40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a44:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <HAL_RCC_OscConfig+0x538>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d030      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d129      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d122      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a74:	4013      	ands	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d119      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d10f      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800

08004ac8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e022      	b.n	8004b20 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d105      	bne.n	8004af2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7fc fb77 	bl	80011e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2203      	movs	r2, #3
 8004af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f814 	bl	8004b28 <HAL_SD_InitCard>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e00a      	b.n	8004b20 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b28:	b5b0      	push	{r4, r5, r7, lr}
 8004b2a:	b08e      	sub	sp, #56	; 0x38
 8004b2c:	af04      	add	r7, sp, #16
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004b44:	2376      	movs	r3, #118	; 0x76
 8004b46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681d      	ldr	r5, [r3, #0]
 8004b4c:	466c      	mov	r4, sp
 8004b4e:	f107 0314 	add.w	r3, r7, #20
 8004b52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b5a:	f107 0308 	add.w	r3, r7, #8
 8004b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b60:	4628      	mov	r0, r5
 8004b62:	f001 f93c 	bl	8005dde <SDIO_Init>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e04f      	b.n	8004c18 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004b78:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <HAL_SD_InitCard+0xf8>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 f974 	bl	8005e70 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <HAL_SD_InitCard+0xf8>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004b8e:	2002      	movs	r0, #2
 8004b90:	f7fc fd84 	bl	800169c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 ff03 	bl	80059a0 <SD_PowerON>
 8004b9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e02e      	b.n	8004c18 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fe22 	bl	8005804 <SD_InitCard>
 8004bc0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00b      	beq.n	8004be0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e01b      	b.n	8004c18 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 f9d3 	bl	8005f94 <SDMMC_CmdBlockLength>
 8004bee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00f      	beq.n	8004c16 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a0a      	ldr	r2, [pc, #40]	; (8004c24 <HAL_SD_InitCard+0xfc>)
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3728      	adds	r7, #40	; 0x28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c20:	422580a0 	.word	0x422580a0
 8004c24:	004005ff 	.word	0x004005ff

08004c28 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b092      	sub	sp, #72	; 0x48
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c36:	f7fc fd25 	bl	8001684 <HAL_GetTick>
 8004c3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d107      	bne.n	8004c5a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e1bd      	b.n	8004fd6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	f040 81b0 	bne.w	8004fc8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	441a      	add	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d907      	bls.n	8004c8c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e1a4      	b.n	8004fd6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2203      	movs	r2, #3
 8004c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d002      	beq.n	8004caa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	025b      	lsls	r3, r3, #9
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	025b      	lsls	r3, r3, #9
 8004cb4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004cb6:	2390      	movs	r3, #144	; 0x90
 8004cb8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f107 0214 	add.w	r2, r7, #20
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f001 f933 	bl	8005f3c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d90a      	bls.n	8004cf2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f001 f997 	bl	800601c <SDMMC_CmdReadMultiBlock>
 8004cee:	6478      	str	r0, [r7, #68]	; 0x44
 8004cf0:	e009      	b.n	8004d06 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 f96a 	bl	8005fd8 <SDMMC_CmdReadSingleBlock>
 8004d04:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d012      	beq.n	8004d32 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a7a      	ldr	r2, [pc, #488]	; (8004efc <HAL_SD_ReadBlocks+0x2d4>)
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e151      	b.n	8004fd6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004d36:	e061      	b.n	8004dfc <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d03c      	beq.n	8004dc0 <HAL_SD_ReadBlocks+0x198>
 8004d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d039      	beq.n	8004dc0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d50:	e033      	b.n	8004dba <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 f86c 	bl	8005e34 <SDIO_ReadFIFO>
 8004d5c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d68:	3301      	adds	r3, #1
 8004d6a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7e:	3301      	adds	r3, #1
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d84:	3b01      	subs	r3, #1
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	3301      	adds	r3, #1
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	0e1b      	lsrs	r3, r3, #24
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004daa:	3301      	adds	r3, #1
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db0:	3b01      	subs	r3, #1
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db6:	3301      	adds	r3, #1
 8004db8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dbc:	2b07      	cmp	r3, #7
 8004dbe:	d9c8      	bls.n	8004d52 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004dc0:	f7fc fc60 	bl	8001684 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d902      	bls.n	8004dd6 <HAL_SD_ReadBlocks+0x1ae>
 8004dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d112      	bne.n	8004dfc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a48      	ldr	r2, [pc, #288]	; (8004efc <HAL_SD_ReadBlocks+0x2d4>)
 8004ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e0ec      	b.n	8004fd6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e02:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d096      	beq.n	8004d38 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d022      	beq.n	8004e5e <HAL_SD_ReadBlocks+0x236>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d91f      	bls.n	8004e5e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d01b      	beq.n	8004e5e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 f95c 	bl	80060e8 <SDMMC_CmdStopTransfer>
 8004e30:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d012      	beq.n	8004e5e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2f      	ldr	r2, [pc, #188]	; (8004efc <HAL_SD_ReadBlocks+0x2d4>)
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e46:	431a      	orrs	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e0bb      	b.n	8004fd6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d012      	beq.n	8004e92 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a22      	ldr	r2, [pc, #136]	; (8004efc <HAL_SD_ReadBlocks+0x2d4>)
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	f043 0208 	orr.w	r2, r3, #8
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e0a1      	b.n	8004fd6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d012      	beq.n	8004ec6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <HAL_SD_ReadBlocks+0x2d4>)
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	f043 0202 	orr.w	r2, r3, #2
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e087      	b.n	8004fd6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d064      	beq.n	8004f9e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a08      	ldr	r2, [pc, #32]	; (8004efc <HAL_SD_ReadBlocks+0x2d4>)
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	f043 0220 	orr.w	r2, r3, #32
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e06d      	b.n	8004fd6 <HAL_SD_ReadBlocks+0x3ae>
 8004efa:	bf00      	nop
 8004efc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 ff95 	bl	8005e34 <SDIO_ReadFIFO>
 8004f0a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f16:	3301      	adds	r3, #1
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f28:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f32:	3b01      	subs	r3, #1
 8004f34:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f42:	3301      	adds	r3, #1
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	0e1b      	lsrs	r3, r3, #24
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f54:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	3301      	adds	r3, #1
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004f62:	f7fc fb8f 	bl	8001684 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d902      	bls.n	8004f78 <HAL_SD_ReadBlocks+0x350>
 8004f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d112      	bne.n	8004f9e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_SD_ReadBlocks+0x3b8>)
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e01b      	b.n	8004fd6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_SD_ReadBlocks+0x38a>
 8004fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1a6      	bne.n	8004f00 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f240 523a 	movw	r2, #1338	; 0x53a
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e006      	b.n	8004fd6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3748      	adds	r7, #72	; 0x48
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	004005ff 	.word	0x004005ff

08004fe4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b092      	sub	sp, #72	; 0x48
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004ff2:	f7fc fb47 	bl	8001684 <HAL_GetTick>
 8004ff6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d107      	bne.n	8005016 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e165      	b.n	80052e2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b01      	cmp	r3, #1
 8005020:	f040 8158 	bne.w	80052d4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800502a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	441a      	add	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005034:	429a      	cmp	r2, r3
 8005036:	d907      	bls.n	8005048 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e14c      	b.n	80052e2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2203      	movs	r2, #3
 800504c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2200      	movs	r2, #0
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	2b01      	cmp	r3, #1
 800505e:	d002      	beq.n	8005066 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	025b      	lsls	r3, r3, #9
 8005064:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800506a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	025b      	lsls	r3, r3, #9
 8005070:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005072:	2390      	movs	r3, #144	; 0x90
 8005074:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005076:	2300      	movs	r3, #0
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800507a:	2300      	movs	r3, #0
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800507e:	2301      	movs	r3, #1
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f107 0218 	add.w	r2, r7, #24
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f000 ff55 	bl	8005f3c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d90a      	bls.n	80050ae <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fffd 	bl	80060a4 <SDMMC_CmdWriteMultiBlock>
 80050aa:	6478      	str	r0, [r7, #68]	; 0x44
 80050ac:	e009      	b.n	80050c2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2210      	movs	r2, #16
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 ffd0 	bl	8006060 <SDMMC_CmdWriteSingleBlock>
 80050c0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80050c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d012      	beq.n	80050ee <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a87      	ldr	r2, [pc, #540]	; (80052ec <HAL_SD_WriteBlocks+0x308>)
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d6:	431a      	orrs	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0f9      	b.n	80052e2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80050f2:	e065      	b.n	80051c0 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d040      	beq.n	8005184 <HAL_SD_WriteBlocks+0x1a0>
 8005102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d03d      	beq.n	8005184 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005108:	2300      	movs	r3, #0
 800510a:	643b      	str	r3, [r7, #64]	; 0x40
 800510c:	e037      	b.n	800517e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	3301      	adds	r3, #1
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800511a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511c:	3b01      	subs	r3, #1
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	021a      	lsls	r2, r3, #8
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512e:	3301      	adds	r3, #1
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005134:	3b01      	subs	r3, #1
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	041a      	lsls	r2, r3, #16
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005146:	3301      	adds	r3, #1
 8005148:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800514a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514c:	3b01      	subs	r3, #1
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	061a      	lsls	r2, r3, #24
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800515c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515e:	3301      	adds	r3, #1
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005164:	3b01      	subs	r3, #1
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f107 0214 	add.w	r2, r7, #20
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fe6b 	bl	8005e4e <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517a:	3301      	adds	r3, #1
 800517c:	643b      	str	r3, [r7, #64]	; 0x40
 800517e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005180:	2b07      	cmp	r3, #7
 8005182:	d9c4      	bls.n	800510e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005184:	f7fc fa7e 	bl	8001684 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005190:	429a      	cmp	r2, r3
 8005192:	d902      	bls.n	800519a <HAL_SD_WriteBlocks+0x1b6>
 8005194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005196:	2b00      	cmp	r3, #0
 8005198:	d112      	bne.n	80051c0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a53      	ldr	r2, [pc, #332]	; (80052ec <HAL_SD_WriteBlocks+0x308>)
 80051a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e090      	b.n	80052e2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d092      	beq.n	80050f4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d022      	beq.n	8005222 <HAL_SD_WriteBlocks+0x23e>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d91f      	bls.n	8005222 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d01b      	beq.n	8005222 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 ff7a 	bl	80060e8 <SDMMC_CmdStopTransfer>
 80051f4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80051f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a3a      	ldr	r2, [pc, #232]	; (80052ec <HAL_SD_WriteBlocks+0x308>)
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520a:	431a      	orrs	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e05f      	b.n	80052e2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2d      	ldr	r2, [pc, #180]	; (80052ec <HAL_SD_WriteBlocks+0x308>)
 8005236:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	f043 0208 	orr.w	r2, r3, #8
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e045      	b.n	80052e2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d012      	beq.n	800528a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a20      	ldr	r2, [pc, #128]	; (80052ec <HAL_SD_WriteBlocks+0x308>)
 800526a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	f043 0202 	orr.w	r2, r3, #2
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e02b      	b.n	80052e2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	d012      	beq.n	80052be <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a13      	ldr	r2, [pc, #76]	; (80052ec <HAL_SD_WriteBlocks+0x308>)
 800529e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	f043 0210 	orr.w	r2, r3, #16
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e011      	b.n	80052e2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e006      	b.n	80052e2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3748      	adds	r7, #72	; 0x48
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	004005ff 	.word	0x004005ff

080052f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052fe:	0f9b      	lsrs	r3, r3, #30
 8005300:	b2da      	uxtb	r2, r3
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530a:	0e9b      	lsrs	r3, r3, #26
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	b2da      	uxtb	r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531c:	0e1b      	lsrs	r3, r3, #24
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	b2da      	uxtb	r2, r3
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800532e:	0c1b      	lsrs	r3, r3, #16
 8005330:	b2da      	uxtb	r2, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	b2da      	uxtb	r2, r3
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005346:	b2da      	uxtb	r2, r3
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005350:	0d1b      	lsrs	r3, r3, #20
 8005352:	b29a      	uxth	r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	b2db      	uxtb	r3, r3
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	b2da      	uxtb	r2, r3
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800536e:	0bdb      	lsrs	r3, r3, #15
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	b2da      	uxtb	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005380:	0b9b      	lsrs	r3, r3, #14
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	b2da      	uxtb	r2, r3
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005392:	0b5b      	lsrs	r3, r3, #13
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a4:	0b1b      	lsrs	r3, r3, #12
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2200      	movs	r2, #0
 80053b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d163      	bne.n	8005488 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c4:	009a      	lsls	r2, r3, #2
 80053c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053ca:	4013      	ands	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80053d0:	0f92      	lsrs	r2, r2, #30
 80053d2:	431a      	orrs	r2, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053dc:	0edb      	lsrs	r3, r3, #27
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ee:	0e1b      	lsrs	r3, r3, #24
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005400:	0d5b      	lsrs	r3, r3, #21
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	b2da      	uxtb	r2, r3
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005412:	0c9b      	lsrs	r3, r3, #18
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	b2da      	uxtb	r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005424:	0bdb      	lsrs	r3, r3, #15
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	b2da      	uxtb	r2, r3
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	7e1b      	ldrb	r3, [r3, #24]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	3302      	adds	r3, #2
 8005448:	2201      	movs	r2, #1
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005452:	fb03 f202 	mul.w	r2, r3, r2
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	7a1b      	ldrb	r3, [r3, #8]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005474:	0a52      	lsrs	r2, r2, #9
 8005476:	fb03 f202 	mul.w	r2, r3, r2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005484:	661a      	str	r2, [r3, #96]	; 0x60
 8005486:	e031      	b.n	80054ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548c:	2b01      	cmp	r3, #1
 800548e:	d11d      	bne.n	80054cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549e:	0c1b      	lsrs	r3, r3, #16
 80054a0:	431a      	orrs	r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	3301      	adds	r3, #1
 80054ac:	029a      	lsls	r2, r3, #10
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	661a      	str	r2, [r3, #96]	; 0x60
 80054ca:	e00f      	b.n	80054ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a58      	ldr	r2, [pc, #352]	; (8005634 <HAL_SD_GetCardCSD+0x344>)
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e09d      	b.n	8005628 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f0:	0b9b      	lsrs	r3, r3, #14
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005502:	09db      	lsrs	r3, r3, #7
 8005504:	b2db      	uxtb	r3, r3
 8005506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550a:	b2da      	uxtb	r2, r3
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551a:	b2da      	uxtb	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	0fdb      	lsrs	r3, r3, #31
 8005526:	b2da      	uxtb	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005530:	0f5b      	lsrs	r3, r3, #29
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	b2da      	uxtb	r2, r3
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	0e9b      	lsrs	r3, r3, #26
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	b2da      	uxtb	r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	0d9b      	lsrs	r3, r3, #22
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	b2da      	uxtb	r2, r3
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	0d5b      	lsrs	r3, r3, #21
 8005568:	b2db      	uxtb	r3, r3
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	b2da      	uxtb	r2, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	0c1b      	lsrs	r3, r3, #16
 8005584:	b2db      	uxtb	r3, r3
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	b2da      	uxtb	r2, r3
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	0bdb      	lsrs	r3, r3, #15
 8005598:	b2db      	uxtb	r3, r3
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	0b9b      	lsrs	r3, r3, #14
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	0b5b      	lsrs	r3, r3, #13
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	0b1b      	lsrs	r3, r3, #12
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	0a9b      	lsrs	r3, r3, #10
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	0a1b      	lsrs	r3, r3, #8
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	b2da      	uxtb	r2, r3
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005616:	b2da      	uxtb	r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	004005ff 	.word	0x004005ff

08005638 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005690:	b5b0      	push	{r4, r5, r7, lr}
 8005692:	b08e      	sub	sp, #56	; 0x38
 8005694:	af04      	add	r7, sp, #16
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2203      	movs	r2, #3
 80056a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d02e      	beq.n	800570e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	d106      	bne.n	80056c6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
 80056c4:	e029      	b.n	800571a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056cc:	d10a      	bne.n	80056e4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fa1c 	bl	8005b0c <SD_WideBus_Enable>
 80056d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
 80056e2:	e01a      	b.n	800571a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa59 	bl	8005ba2 <SD_WideBus_Disable>
 80056f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
 80056fe:	e00c      	b.n	800571a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
 800570c:	e005      	b.n	800571a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00b      	beq.n	800573a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a26      	ldr	r2, [pc, #152]	; (80057c0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005738:	e01f      	b.n	800577a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681d      	ldr	r5, [r3, #0]
 8005760:	466c      	mov	r4, sp
 8005762:	f107 0314 	add.w	r3, r7, #20
 8005766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800576a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800576e:	f107 0308 	add.w	r3, r7, #8
 8005772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005774:	4628      	mov	r0, r5
 8005776:	f000 fb32 	bl	8005dde <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fc06 	bl	8005f94 <SDMMC_CmdBlockLength>
 8005788:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00c      	beq.n	80057aa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80057b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3728      	adds	r7, #40	; 0x28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bdb0      	pop	{r4, r5, r7, pc}
 80057be:	bf00      	nop
 80057c0:	004005ff 	.word	0x004005ff

080057c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80057d0:	f107 030c 	add.w	r3, r7, #12
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f970 	bl	8005abc <SD_SendStatus>
 80057dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	0a5b      	lsrs	r3, r3, #9
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80057fa:	693b      	ldr	r3, [r7, #16]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005804:	b5b0      	push	{r4, r5, r7, lr}
 8005806:	b094      	sub	sp, #80	; 0x50
 8005808:	af04      	add	r7, sp, #16
 800580a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800580c:	2301      	movs	r3, #1
 800580e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fb39 	bl	8005e8c <SDIO_GetPowerState>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005820:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005824:	e0b8      	b.n	8005998 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	2b03      	cmp	r3, #3
 800582c:	d02f      	beq.n	800588e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fd62 	bl	80062fc <SDMMC_CmdSendCID>
 8005838:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800583a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <SD_InitCard+0x40>
    {
      return errorstate;
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005842:	e0a9      	b.n	8005998 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fb63 	bl	8005f16 <SDIO_GetResponse>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2104      	movs	r1, #4
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fb5a 	bl	8005f16 <SDIO_GetResponse>
 8005862:	4602      	mov	r2, r0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2108      	movs	r1, #8
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fb51 	bl	8005f16 <SDIO_GetResponse>
 8005874:	4602      	mov	r2, r0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	210c      	movs	r1, #12
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fb48 	bl	8005f16 <SDIO_GetResponse>
 8005886:	4602      	mov	r2, r0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	2b03      	cmp	r3, #3
 8005894:	d00d      	beq.n	80058b2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f107 020e 	add.w	r2, r7, #14
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fd68 	bl	8006376 <SDMMC_CmdSetRelAdd>
 80058a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <SD_InitCard+0xae>
    {
      return errorstate;
 80058ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b0:	e072      	b.n	8005998 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d036      	beq.n	8005928 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80058ba:	89fb      	ldrh	r3, [r7, #14]
 80058bc:	461a      	mov	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 fd32 	bl	8006338 <SDMMC_CmdSendCSD>
 80058d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80058dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058de:	e05b      	b.n	8005998 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2100      	movs	r1, #0
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fb15 	bl	8005f16 <SDIO_GetResponse>
 80058ec:	4602      	mov	r2, r0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2104      	movs	r1, #4
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fb0c 	bl	8005f16 <SDIO_GetResponse>
 80058fe:	4602      	mov	r2, r0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2108      	movs	r1, #8
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fb03 	bl	8005f16 <SDIO_GetResponse>
 8005910:	4602      	mov	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	210c      	movs	r1, #12
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fafa 	bl	8005f16 <SDIO_GetResponse>
 8005922:	4602      	mov	r2, r0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2104      	movs	r1, #4
 800592e:	4618      	mov	r0, r3
 8005930:	f000 faf1 	bl	8005f16 <SDIO_GetResponse>
 8005934:	4603      	mov	r3, r0
 8005936:	0d1a      	lsrs	r2, r3, #20
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800593c:	f107 0310 	add.w	r3, r7, #16
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fcd4 	bl	80052f0 <HAL_SD_GetCardCSD>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800594e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005952:	e021      	b.n	8005998 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6819      	ldr	r1, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	2200      	movs	r2, #0
 8005960:	461c      	mov	r4, r3
 8005962:	4615      	mov	r5, r2
 8005964:	4622      	mov	r2, r4
 8005966:	462b      	mov	r3, r5
 8005968:	4608      	mov	r0, r1
 800596a:	f000 fbdf 	bl	800612c <SDMMC_CmdSelDesel>
 800596e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <SD_InitCard+0x176>
  {
    return errorstate;
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005978:	e00e      	b.n	8005998 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681d      	ldr	r5, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	466c      	mov	r4, sp
 8005982:	f103 0210 	add.w	r2, r3, #16
 8005986:	ca07      	ldmia	r2, {r0, r1, r2}
 8005988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800598c:	3304      	adds	r3, #4
 800598e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005990:	4628      	mov	r0, r5
 8005992:	f000 fa24 	bl	8005dde <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3740      	adds	r7, #64	; 0x40
 800599c:	46bd      	mov	sp, r7
 800599e:	bdb0      	pop	{r4, r5, r7, pc}

080059a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fbda 	bl	8006172 <SDMMC_CmdGoIdleState>
 80059be:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <SD_PowerON+0x2a>
  {
    return errorstate;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	e072      	b.n	8005ab0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fbed 	bl	80061ae <SDMMC_CmdOperCond>
 80059d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00d      	beq.n	80059f8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fbc3 	bl	8006172 <SDMMC_CmdGoIdleState>
 80059ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <SD_PowerON+0x5e>
    {
      return errorstate;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	e05b      	b.n	8005ab0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d137      	bne.n	8005a76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fbed 	bl	80061ec <SDMMC_CmdAppCommand>
 8005a12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d02d      	beq.n	8005a76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a1e:	e047      	b.n	8005ab0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2100      	movs	r1, #0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fbe0 	bl	80061ec <SDMMC_CmdAppCommand>
 8005a2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <SD_PowerON+0x98>
    {
      return errorstate;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	e03b      	b.n	8005ab0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	491e      	ldr	r1, [pc, #120]	; (8005ab8 <SD_PowerON+0x118>)
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fbf6 	bl	8006230 <SDMMC_CmdAppOperCommand>
 8005a44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a50:	e02e      	b.n	8005ab0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2100      	movs	r1, #0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fa5c 	bl	8005f16 <SDIO_GetResponse>
 8005a5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	0fdb      	lsrs	r3, r3, #31
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <SD_PowerON+0xcc>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <SD_PowerON+0xce>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]

    count++;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d802      	bhi.n	8005a86 <SD_PowerON+0xe6>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0cc      	beq.n	8005a20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d902      	bls.n	8005a96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a94:	e00c      	b.n	8005ab0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44
 8005aa6:	e002      	b.n	8005aae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	c1100000 	.word	0xc1100000

08005abc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005acc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ad0:	e018      	b.n	8005b04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ada:	041b      	lsls	r3, r3, #16
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f000 fc6a 	bl	80063b8 <SDMMC_CmdSendStatus>
 8005ae4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	e009      	b.n	8005b04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2100      	movs	r1, #0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fa0d 	bl	8005f16 <SDIO_GetResponse>
 8005afc:	4602      	mov	r2, r0
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2100      	movs	r1, #0
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f9f7 	bl	8005f16 <SDIO_GetResponse>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b32:	d102      	bne.n	8005b3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b38:	e02f      	b.n	8005b9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f879 	bl	8005c38 <SD_FindSCR>
 8005b46:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	e023      	b.n	8005b9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01c      	beq.n	8005b96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f000 fb3f 	bl	80061ec <SDMMC_CmdAppCommand>
 8005b6e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	e00f      	b.n	8005b9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2102      	movs	r1, #2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fb78 	bl	8006276 <SDMMC_CmdBusWidth>
 8005b86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	e003      	b.n	8005b9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e001      	b.n	8005b9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b086      	sub	sp, #24
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 f9ac 	bl	8005f16 <SDIO_GetResponse>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bc8:	d102      	bne.n	8005bd0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bce:	e02f      	b.n	8005c30 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005bd0:	f107 030c 	add.w	r3, r7, #12
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f82e 	bl	8005c38 <SD_FindSCR>
 8005bdc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	e023      	b.n	8005c30 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01c      	beq.n	8005c2c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfa:	041b      	lsls	r3, r3, #16
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	f000 faf4 	bl	80061ec <SDMMC_CmdAppCommand>
 8005c04:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	e00f      	b.n	8005c30 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2100      	movs	r1, #0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fb2d 	bl	8006276 <SDMMC_CmdBusWidth>
 8005c1c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	e003      	b.n	8005c30 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e001      	b.n	8005c30 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b08f      	sub	sp, #60	; 0x3c
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c42:	f7fb fd1f 	bl	8001684 <HAL_GetTick>
 8005c46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2108      	movs	r1, #8
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f998 	bl	8005f94 <SDMMC_CmdBlockLength>
 8005c64:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	e0b2      	b.n	8005dd6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	f000 fab5 	bl	80061ec <SDMMC_CmdAppCommand>
 8005c82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <SD_FindSCR+0x56>
  {
    return errorstate;
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	e0a3      	b.n	8005dd6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c92:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005c94:	2308      	movs	r3, #8
 8005c96:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005c98:	2330      	movs	r3, #48	; 0x30
 8005c9a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f107 0210 	add.w	r2, r7, #16
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f942 	bl	8005f3c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fafc 	bl	80062ba <SDMMC_CmdSendSCR>
 8005cc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d02a      	beq.n	8005d20 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	e083      	b.n	8005dd6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00f      	beq.n	8005cfc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6819      	ldr	r1, [r3, #0]
 8005ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	f107 0208 	add.w	r2, r7, #8
 8005ce8:	18d4      	adds	r4, r2, r3
 8005cea:	4608      	mov	r0, r1
 8005cec:	f000 f8a2 	bl	8005e34 <SDIO_ReadFIFO>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	6023      	str	r3, [r4, #0]
      index++;
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfa:	e006      	b.n	8005d0a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d012      	beq.n	8005d30 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005d0a:	f7fb fcbb 	bl	8001684 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d18:	d102      	bne.n	8005d20 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005d1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d1e:	e05a      	b.n	8005dd6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0cf      	beq.n	8005cce <SD_FindSCR+0x96>
 8005d2e:	e000      	b.n	8005d32 <SD_FindSCR+0xfa>
      break;
 8005d30:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2208      	movs	r2, #8
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d48:	2308      	movs	r3, #8
 8005d4a:	e044      	b.n	8005dd6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d62:	2302      	movs	r3, #2
 8005d64:	e037      	b.n	8005dd6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	e02a      	b.n	8005dd6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	061a      	lsls	r2, r3, #24
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d96:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005da0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	0e1b      	lsrs	r3, r3, #24
 8005da6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005daa:	601a      	str	r2, [r3, #0]
    scr++;
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	3304      	adds	r3, #4
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	061a      	lsls	r2, r3, #24
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005dbe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	0a1b      	lsrs	r3, r3, #8
 8005dc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005dc8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	0e1b      	lsrs	r3, r3, #24
 8005dce:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	373c      	adds	r7, #60	; 0x3c
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd90      	pop	{r4, r7, pc}

08005dde <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005dde:	b084      	sub	sp, #16
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	f107 001c 	add.w	r0, r7, #28
 8005dec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005df4:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005df6:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005df8:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005dfc:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005e00:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005e04:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005e08:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005e18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	b004      	add	sp, #16
 8005e32:	4770      	bx	lr

08005e34 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0303 	and.w	r3, r3, #3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ec6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005ecc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005ed2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005ee2:	f023 030f 	bic.w	r3, r3, #15
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	b2db      	uxtb	r3, r3
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3314      	adds	r3, #20
 8005f24:	461a      	mov	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	4413      	add	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
}  
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f62:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005f68:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005f6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0

}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fa6:	2340      	movs	r3, #64	; 0x40
 8005fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fb4:	f107 0308 	add.w	r3, r7, #8
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff ff74 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc4:	2110      	movs	r1, #16
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa18 	bl	80063fc <SDMMC_GetCmdResp1>
 8005fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fce:	69fb      	ldr	r3, [r7, #28]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005fe6:	2311      	movs	r3, #17
 8005fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fea:	2340      	movs	r3, #64	; 0x40
 8005fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ff8:	f107 0308 	add.w	r3, r7, #8
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff ff52 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006004:	f241 3288 	movw	r2, #5000	; 0x1388
 8006008:	2111      	movs	r1, #17
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f9f6 	bl	80063fc <SDMMC_GetCmdResp1>
 8006010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006012:	69fb      	ldr	r3, [r7, #28]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800602a:	2312      	movs	r3, #18
 800602c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800602e:	2340      	movs	r3, #64	; 0x40
 8006030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800603a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800603c:	f107 0308 	add.w	r3, r7, #8
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff ff30 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006048:	f241 3288 	movw	r2, #5000	; 0x1388
 800604c:	2112      	movs	r1, #18
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f9d4 	bl	80063fc <SDMMC_GetCmdResp1>
 8006054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006056:	69fb      	ldr	r3, [r7, #28]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3720      	adds	r7, #32
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800606e:	2318      	movs	r3, #24
 8006070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006072:	2340      	movs	r3, #64	; 0x40
 8006074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800607a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800607e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006080:	f107 0308 	add.w	r3, r7, #8
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff ff0e 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800608c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006090:	2118      	movs	r1, #24
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9b2 	bl	80063fc <SDMMC_GetCmdResp1>
 8006098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800609a:	69fb      	ldr	r3, [r7, #28]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80060b2:	2319      	movs	r3, #25
 80060b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060b6:	2340      	movs	r3, #64	; 0x40
 80060b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060c4:	f107 0308 	add.w	r3, r7, #8
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff feec 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80060d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d4:	2119      	movs	r1, #25
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f990 	bl	80063fc <SDMMC_GetCmdResp1>
 80060dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060de:	69fb      	ldr	r3, [r7, #28]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3720      	adds	r7, #32
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b088      	sub	sp, #32
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80060f4:	230c      	movs	r3, #12
 80060f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060f8:	2340      	movs	r3, #64	; 0x40
 80060fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006104:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006106:	f107 0308 	add.w	r3, r7, #8
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff fecb 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006112:	4a05      	ldr	r2, [pc, #20]	; (8006128 <SDMMC_CmdStopTransfer+0x40>)
 8006114:	210c      	movs	r1, #12
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f970 	bl	80063fc <SDMMC_GetCmdResp1>
 800611c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800611e:	69fb      	ldr	r3, [r7, #28]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3720      	adds	r7, #32
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	05f5e100 	.word	0x05f5e100

0800612c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	; 0x28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800613c:	2307      	movs	r3, #7
 800613e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006140:	2340      	movs	r3, #64	; 0x40
 8006142:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800614c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800614e:	f107 0310 	add.w	r3, r7, #16
 8006152:	4619      	mov	r1, r3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff fea7 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800615a:	f241 3288 	movw	r2, #5000	; 0x1388
 800615e:	2107      	movs	r1, #7
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f94b 	bl	80063fc <SDMMC_GetCmdResp1>
 8006166:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800616a:	4618      	mov	r0, r3
 800616c:	3728      	adds	r7, #40	; 0x28
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b088      	sub	sp, #32
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006182:	2300      	movs	r3, #0
 8006184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800618a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800618e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006190:	f107 0308 	add.w	r3, r7, #8
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fe86 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fb65 	bl	800686c <SDMMC_GetCmdError>
 80061a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061a4:	69fb      	ldr	r3, [r7, #28]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80061b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80061ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80061bc:	2308      	movs	r3, #8
 80061be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061c0:	2340      	movs	r3, #64	; 0x40
 80061c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff fe67 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 faf8 	bl	80067d0 <SDMMC_GetCmdResp7>
 80061e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061e2:	69fb      	ldr	r3, [r7, #28]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80061fa:	2337      	movs	r3, #55	; 0x37
 80061fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061fe:	2340      	movs	r3, #64	; 0x40
 8006200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800620a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800620c:	f107 0308 	add.w	r3, r7, #8
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fe48 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006218:	f241 3288 	movw	r2, #5000	; 0x1388
 800621c:	2137      	movs	r1, #55	; 0x37
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f8ec 	bl	80063fc <SDMMC_GetCmdResp1>
 8006224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006226:	69fb      	ldr	r3, [r7, #28]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3720      	adds	r7, #32
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006246:	2329      	movs	r3, #41	; 0x29
 8006248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800624a:	2340      	movs	r3, #64	; 0x40
 800624c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006256:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006258:	f107 0308 	add.w	r3, r7, #8
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fe22 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f9ff 	bl	8006668 <SDMMC_GetCmdResp3>
 800626a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800626c:	69fb      	ldr	r3, [r7, #28]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3720      	adds	r7, #32
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b088      	sub	sp, #32
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006284:	2306      	movs	r3, #6
 8006286:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800628c:	2300      	movs	r3, #0
 800628e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006294:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006296:	f107 0308 	add.w	r3, r7, #8
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff fe03 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80062a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a6:	2106      	movs	r1, #6
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f8a7 	bl	80063fc <SDMMC_GetCmdResp1>
 80062ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062b0:	69fb      	ldr	r3, [r7, #28]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b088      	sub	sp, #32
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80062c6:	2333      	movs	r3, #51	; 0x33
 80062c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062ca:	2340      	movs	r3, #64	; 0x40
 80062cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062d8:	f107 0308 	add.w	r3, r7, #8
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff fde2 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80062e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e8:	2133      	movs	r1, #51	; 0x33
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f886 	bl	80063fc <SDMMC_GetCmdResp1>
 80062f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062f2:	69fb      	ldr	r3, [r7, #28]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3720      	adds	r7, #32
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006308:	2302      	movs	r3, #2
 800630a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800630c:	23c0      	movs	r3, #192	; 0xc0
 800630e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006318:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800631a:	f107 0308 	add.w	r3, r7, #8
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7ff fdc1 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f956 	bl	80065d8 <SDMMC_GetCmdResp2>
 800632c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800632e:	69fb      	ldr	r3, [r7, #28]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006346:	2309      	movs	r3, #9
 8006348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800634a:	23c0      	movs	r3, #192	; 0xc0
 800634c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006356:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006358:	f107 0308 	add.w	r3, r7, #8
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fda2 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f937 	bl	80065d8 <SDMMC_GetCmdResp2>
 800636a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800636c:	69fb      	ldr	r3, [r7, #28]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b088      	sub	sp, #32
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006384:	2303      	movs	r3, #3
 8006386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006388:	2340      	movs	r3, #64	; 0x40
 800638a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006394:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006396:	f107 0308 	add.w	r3, r7, #8
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff fd83 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	2103      	movs	r1, #3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f99c 	bl	80066e4 <SDMMC_GetCmdResp6>
 80063ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063ae:	69fb      	ldr	r3, [r7, #28]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80063c6:	230d      	movs	r3, #13
 80063c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063ca:	2340      	movs	r3, #64	; 0x40
 80063cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063d8:	f107 0308 	add.w	r3, r7, #8
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fd62 	bl	8005ea8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80063e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e8:	210d      	movs	r1, #13
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f806 	bl	80063fc <SDMMC_GetCmdResp1>
 80063f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063f2:	69fb      	ldr	r3, [r7, #28]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	460b      	mov	r3, r1
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800640a:	4b70      	ldr	r3, [pc, #448]	; (80065cc <SDMMC_GetCmdResp1+0x1d0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a70      	ldr	r2, [pc, #448]	; (80065d0 <SDMMC_GetCmdResp1+0x1d4>)
 8006410:	fba2 2303 	umull	r2, r3, r2, r3
 8006414:	0a5a      	lsrs	r2, r3, #9
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	fb02 f303 	mul.w	r3, r2, r3
 800641c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	1e5a      	subs	r2, r3, #1
 8006422:	61fa      	str	r2, [r7, #28]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d102      	bne.n	800642e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006428:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800642c:	e0c9      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006432:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0ef      	beq.n	800641e <SDMMC_GetCmdResp1+0x22>
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1ea      	bne.n	800641e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d004      	beq.n	800645e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2204      	movs	r2, #4
 8006458:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800645a:	2304      	movs	r3, #4
 800645c:	e0b1      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006470:	2301      	movs	r3, #1
 8006472:	e0a6      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	22c5      	movs	r2, #197	; 0xc5
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff fd3e 	bl	8005efc <SDIO_GetCommandResponse>
 8006480:	4603      	mov	r3, r0
 8006482:	461a      	mov	r2, r3
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	4293      	cmp	r3, r2
 8006488:	d001      	beq.n	800648e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800648a:	2301      	movs	r3, #1
 800648c:	e099      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800648e:	2100      	movs	r1, #0
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff fd40 	bl	8005f16 <SDIO_GetResponse>
 8006496:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4b4e      	ldr	r3, [pc, #312]	; (80065d4 <SDMMC_GetCmdResp1+0x1d8>)
 800649c:	4013      	ands	r3, r2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e08d      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	da02      	bge.n	80064b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80064ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064b0:	e087      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80064bc:	2340      	movs	r3, #64	; 0x40
 80064be:	e080      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80064ca:	2380      	movs	r3, #128	; 0x80
 80064cc:	e079      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80064d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064dc:	e071      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80064e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064ec:	e069      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80064f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064fc:	e061      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800650c:	e059      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800651c:	e051      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800652c:	e049      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800653c:	e041      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654c:	e039      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800655c:	e031      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006568:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800656c:	e029      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006578:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800657c:	e021      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006588:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800658c:	e019      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800659c:	e011      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80065a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065ac:	e009      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80065b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80065bc:	e001      	b.n	80065c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000004 	.word	0x20000004
 80065d0:	10624dd3 	.word	0x10624dd3
 80065d4:	fdffe008 	.word	0xfdffe008

080065d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065e0:	4b1f      	ldr	r3, [pc, #124]	; (8006660 <SDMMC_GetCmdResp2+0x88>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1f      	ldr	r2, [pc, #124]	; (8006664 <SDMMC_GetCmdResp2+0x8c>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	0a5b      	lsrs	r3, r3, #9
 80065ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f0:	fb02 f303 	mul.w	r3, r2, r3
 80065f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1e5a      	subs	r2, r3, #1
 80065fa:	60fa      	str	r2, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006604:	e026      	b.n	8006654 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0ef      	beq.n	80065f6 <SDMMC_GetCmdResp2+0x1e>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1ea      	bne.n	80065f6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d004      	beq.n	8006636 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2204      	movs	r2, #4
 8006630:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006632:	2304      	movs	r3, #4
 8006634:	e00e      	b.n	8006654 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d004      	beq.n	800664c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006648:	2301      	movs	r3, #1
 800664a:	e003      	b.n	8006654 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	22c5      	movs	r2, #197	; 0xc5
 8006650:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	20000004 	.word	0x20000004
 8006664:	10624dd3 	.word	0x10624dd3

08006668 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006670:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <SDMMC_GetCmdResp3+0x74>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <SDMMC_GetCmdResp3+0x78>)
 8006676:	fba2 2303 	umull	r2, r3, r2, r3
 800667a:	0a5b      	lsrs	r3, r3, #9
 800667c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006680:	fb02 f303 	mul.w	r3, r2, r3
 8006684:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	1e5a      	subs	r2, r3, #1
 800668a:	60fa      	str	r2, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d102      	bne.n	8006696 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006694:	e01b      	b.n	80066ce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0ef      	beq.n	8006686 <SDMMC_GetCmdResp3+0x1e>
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1ea      	bne.n	8006686 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2204      	movs	r2, #4
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066c2:	2304      	movs	r3, #4
 80066c4:	e003      	b.n	80066ce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	22c5      	movs	r2, #197	; 0xc5
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000004 	.word	0x20000004
 80066e0:	10624dd3 	.word	0x10624dd3

080066e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	460b      	mov	r3, r1
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066f2:	4b35      	ldr	r3, [pc, #212]	; (80067c8 <SDMMC_GetCmdResp6+0xe4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a35      	ldr	r2, [pc, #212]	; (80067cc <SDMMC_GetCmdResp6+0xe8>)
 80066f8:	fba2 2303 	umull	r2, r3, r2, r3
 80066fc:	0a5b      	lsrs	r3, r3, #9
 80066fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	1e5a      	subs	r2, r3, #1
 800670c:	61fa      	str	r2, [r7, #28]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006712:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006716:	e052      	b.n	80067be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0ef      	beq.n	8006708 <SDMMC_GetCmdResp6+0x24>
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1ea      	bne.n	8006708 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2204      	movs	r2, #4
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006744:	2304      	movs	r3, #4
 8006746:	e03a      	b.n	80067be <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800675a:	2301      	movs	r3, #1
 800675c:	e02f      	b.n	80067be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff fbcc 	bl	8005efc <SDIO_GetCommandResponse>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	4293      	cmp	r3, r2
 800676c:	d001      	beq.n	8006772 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800676e:	2301      	movs	r3, #1
 8006770:	e025      	b.n	80067be <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	22c5      	movs	r2, #197	; 0xc5
 8006776:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006778:	2100      	movs	r1, #0
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff fbcb 	bl	8005f16 <SDIO_GetResponse>
 8006780:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	0c1b      	lsrs	r3, r3, #16
 8006790:	b29a      	uxth	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006796:	2300      	movs	r3, #0
 8006798:	e011      	b.n	80067be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80067a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067a8:	e009      	b.n	80067be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80067b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067b8:	e001      	b.n	80067be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3720      	adds	r7, #32
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20000004 	.word	0x20000004
 80067cc:	10624dd3 	.word	0x10624dd3

080067d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067d8:	4b22      	ldr	r3, [pc, #136]	; (8006864 <SDMMC_GetCmdResp7+0x94>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a22      	ldr	r2, [pc, #136]	; (8006868 <SDMMC_GetCmdResp7+0x98>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	0a5b      	lsrs	r3, r3, #9
 80067e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e8:	fb02 f303 	mul.w	r3, r2, r3
 80067ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1e5a      	subs	r2, r3, #1
 80067f2:	60fa      	str	r2, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067fc:	e02c      	b.n	8006858 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006802:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0ef      	beq.n	80067ee <SDMMC_GetCmdResp7+0x1e>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1ea      	bne.n	80067ee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d004      	beq.n	800682e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2204      	movs	r2, #4
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800682a:	2304      	movs	r3, #4
 800682c:	e014      	b.n	8006858 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006840:	2301      	movs	r3, #1
 8006842:	e009      	b.n	8006858 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2240      	movs	r2, #64	; 0x40
 8006854:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006856:	2300      	movs	r3, #0
  
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	20000004 	.word	0x20000004
 8006868:	10624dd3 	.word	0x10624dd3

0800686c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006874:	4b11      	ldr	r3, [pc, #68]	; (80068bc <SDMMC_GetCmdError+0x50>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a11      	ldr	r2, [pc, #68]	; (80068c0 <SDMMC_GetCmdError+0x54>)
 800687a:	fba2 2303 	umull	r2, r3, r2, r3
 800687e:	0a5b      	lsrs	r3, r3, #9
 8006880:	f241 3288 	movw	r2, #5000	; 0x1388
 8006884:	fb02 f303 	mul.w	r3, r2, r3
 8006888:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1e5a      	subs	r2, r3, #1
 800688e:	60fa      	str	r2, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d102      	bne.n	800689a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006898:	e009      	b.n	80068ae <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f1      	beq.n	800688a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	22c5      	movs	r2, #197	; 0xc5
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	20000004 	.word	0x20000004
 80068c0:	10624dd3 	.word	0x10624dd3

080068c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80068c8:	4904      	ldr	r1, [pc, #16]	; (80068dc <MX_FATFS_Init+0x18>)
 80068ca:	4805      	ldr	r0, [pc, #20]	; (80068e0 <MX_FATFS_Init+0x1c>)
 80068cc:	f002 fd54 	bl	8009378 <FATFS_LinkDriver>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <MX_FATFS_Init+0x20>)
 80068d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80068d8:	bf00      	nop
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000ae8 	.word	0x20000ae8
 80068e0:	08009d94 	.word	0x08009d94
 80068e4:	20000ae4 	.word	0x20000ae4

080068e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80068ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006902:	f000 f879 	bl	80069f8 <BSP_SD_IsDetected>
 8006906:	4603      	mov	r3, r0
 8006908:	2b01      	cmp	r3, #1
 800690a:	d001      	beq.n	8006910 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e012      	b.n	8006936 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006910:	480b      	ldr	r0, [pc, #44]	; (8006940 <BSP_SD_Init+0x48>)
 8006912:	f7fe f8d9 	bl	8004ac8 <HAL_SD_Init>
 8006916:	4603      	mov	r3, r0
 8006918:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d109      	bne.n	8006934 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006920:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006924:	4806      	ldr	r0, [pc, #24]	; (8006940 <BSP_SD_Init+0x48>)
 8006926:	f7fe feb3 	bl	8005690 <HAL_SD_ConfigWideBusOperation>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006934:	79fb      	ldrb	r3, [r7, #7]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	2000018c 	.word	0x2000018c

08006944 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af02      	add	r7, sp, #8
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	4806      	ldr	r0, [pc, #24]	; (800697c <BSP_SD_ReadBlocks+0x38>)
 8006962:	f7fe f961 	bl	8004c28 <HAL_SD_ReadBlocks>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	2000018c 	.word	0x2000018c

08006980 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	68f9      	ldr	r1, [r7, #12]
 800699c:	4806      	ldr	r0, [pc, #24]	; (80069b8 <BSP_SD_WriteBlocks+0x38>)
 800699e:	f7fe fb21 	bl	8004fe4 <HAL_SD_WriteBlocks>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	2000018c 	.word	0x2000018c

080069bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80069c0:	4805      	ldr	r0, [pc, #20]	; (80069d8 <BSP_SD_GetCardState+0x1c>)
 80069c2:	f7fe feff 	bl	80057c4 <HAL_SD_GetCardState>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	2000018c 	.word	0x2000018c

080069dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4803      	ldr	r0, [pc, #12]	; (80069f4 <BSP_SD_GetCardInfo+0x18>)
 80069e8:	f7fe fe26 	bl	8005638 <HAL_SD_GetCardInfo>
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	2000018c 	.word	0x2000018c

080069f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80069fe:	2301      	movs	r3, #1
 8006a00:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006a02:	f000 f80b 	bl	8006a1c <BSP_PlatformIsDetected>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	b2db      	uxtb	r3, r3
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006a22:	2301      	movs	r3, #1
 8006a24:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a2a:	4806      	ldr	r0, [pc, #24]	; (8006a44 <BSP_PlatformIsDetected+0x28>)
 8006a2c:	f7fb fce0 	bl	80023f0 <HAL_GPIO_ReadPin>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006a36:	2300      	movs	r3, #0
 8006a38:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40020000 	.word	0x40020000

08006a48 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006a52:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <SD_CheckStatus+0x38>)
 8006a54:	2201      	movs	r2, #1
 8006a56:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006a58:	f7ff ffb0 	bl	80069bc <BSP_SD_GetCardState>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d107      	bne.n	8006a72 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <SD_CheckStatus+0x38>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <SD_CheckStatus+0x38>)
 8006a70:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006a72:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <SD_CheckStatus+0x38>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	b2db      	uxtb	r3, r3
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	2000000d 	.word	0x2000000d

08006a84 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <SD_initialize+0x38>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006a94:	f7ff ff30 	bl	80068f8 <BSP_SD_Init>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d107      	bne.n	8006aae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff ffd1 	bl	8006a48 <SD_CheckStatus>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4b04      	ldr	r3, [pc, #16]	; (8006abc <SD_initialize+0x38>)
 8006aac:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006aae:	4b03      	ldr	r3, [pc, #12]	; (8006abc <SD_initialize+0x38>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	b2db      	uxtb	r3, r3
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	2000000d 	.word	0x2000000d

08006ac0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7ff ffbb 	bl	8006a48 <SD_CheckStatus>
 8006ad2:	4603      	mov	r3, r0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	68b8      	ldr	r0, [r7, #8]
 8006afa:	f7ff ff23 	bl	8006944 <BSP_SD_ReadBlocks>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d107      	bne.n	8006b14 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006b04:	bf00      	nop
 8006b06:	f7ff ff59 	bl	80069bc <BSP_SD_GetCardState>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1fa      	bne.n	8006b06 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b086      	sub	sp, #24
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	68b8      	ldr	r0, [r7, #8]
 8006b3c:	f7ff ff20 	bl	8006980 <BSP_SD_WriteBlocks>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d107      	bne.n	8006b56 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006b46:	bf00      	nop
 8006b48:	f7ff ff38 	bl	80069bc <BSP_SD_GetCardState>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1fa      	bne.n	8006b48 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08c      	sub	sp, #48	; 0x30
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	603a      	str	r2, [r7, #0]
 8006b6a:	71fb      	strb	r3, [r7, #7]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006b76:	4b25      	ldr	r3, [pc, #148]	; (8006c0c <SD_ioctl+0xac>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <SD_ioctl+0x28>
 8006b84:	2303      	movs	r3, #3
 8006b86:	e03c      	b.n	8006c02 <SD_ioctl+0xa2>

  switch (cmd)
 8006b88:	79bb      	ldrb	r3, [r7, #6]
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d834      	bhi.n	8006bf8 <SD_ioctl+0x98>
 8006b8e:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <SD_ioctl+0x34>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006bad 	.word	0x08006bad
 8006b9c:	08006bc5 	.word	0x08006bc5
 8006ba0:	08006bdf 	.word	0x08006bdf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006baa:	e028      	b.n	8006bfe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006bac:	f107 030c 	add.w	r3, r7, #12
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff ff13 	bl	80069dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006bc2:	e01c      	b.n	8006bfe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006bc4:	f107 030c 	add.w	r3, r7, #12
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff ff07 	bl	80069dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006bdc:	e00f      	b.n	8006bfe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006bde:	f107 030c 	add.w	r3, r7, #12
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fefa 	bl	80069dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	0a5a      	lsrs	r2, r3, #9
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006bf6:	e002      	b.n	8006bfe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006bf8:	2304      	movs	r3, #4
 8006bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3730      	adds	r7, #48	; 0x30
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	2000000d 	.word	0x2000000d

08006c10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	4a08      	ldr	r2, [pc, #32]	; (8006c40 <disk_status+0x30>)
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	79fa      	ldrb	r2, [r7, #7]
 8006c28:	4905      	ldr	r1, [pc, #20]	; (8006c40 <disk_status+0x30>)
 8006c2a:	440a      	add	r2, r1
 8006c2c:	7a12      	ldrb	r2, [r2, #8]
 8006c2e:	4610      	mov	r0, r2
 8006c30:	4798      	blx	r3
 8006c32:	4603      	mov	r3, r0
 8006c34:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000d44 	.word	0x20000d44

08006c44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	4a0d      	ldr	r2, [pc, #52]	; (8006c8c <disk_initialize+0x48>)
 8006c56:	5cd3      	ldrb	r3, [r2, r3]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d111      	bne.n	8006c80 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	4a0b      	ldr	r2, [pc, #44]	; (8006c8c <disk_initialize+0x48>)
 8006c60:	2101      	movs	r1, #1
 8006c62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <disk_initialize+0x48>)
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	79fa      	ldrb	r2, [r7, #7]
 8006c72:	4906      	ldr	r1, [pc, #24]	; (8006c8c <disk_initialize+0x48>)
 8006c74:	440a      	add	r2, r1
 8006c76:	7a12      	ldrb	r2, [r2, #8]
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4798      	blx	r3
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000d44 	.word	0x20000d44

08006c90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006c90:	b590      	push	{r4, r7, lr}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <disk_read+0x3c>)
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	689c      	ldr	r4, [r3, #8]
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	4a07      	ldr	r2, [pc, #28]	; (8006ccc <disk_read+0x3c>)
 8006cb0:	4413      	add	r3, r2
 8006cb2:	7a18      	ldrb	r0, [r3, #8]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	47a0      	blx	r4
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	75fb      	strb	r3, [r7, #23]
  return res;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd90      	pop	{r4, r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000d44 	.word	0x20000d44

08006cd0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006cd0:	b590      	push	{r4, r7, lr}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	607a      	str	r2, [r7, #4]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	4a0a      	ldr	r2, [pc, #40]	; (8006d0c <disk_write+0x3c>)
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	68dc      	ldr	r4, [r3, #12]
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	4a07      	ldr	r2, [pc, #28]	; (8006d0c <disk_write+0x3c>)
 8006cf0:	4413      	add	r3, r2
 8006cf2:	7a18      	ldrb	r0, [r3, #8]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	47a0      	blx	r4
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd90      	pop	{r4, r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20000d44 	.word	0x20000d44

08006d10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	603a      	str	r2, [r7, #0]
 8006d1a:	71fb      	strb	r3, [r7, #7]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	4a09      	ldr	r2, [pc, #36]	; (8006d48 <disk_ioctl+0x38>)
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	79fa      	ldrb	r2, [r7, #7]
 8006d2e:	4906      	ldr	r1, [pc, #24]	; (8006d48 <disk_ioctl+0x38>)
 8006d30:	440a      	add	r2, r1
 8006d32:	7a10      	ldrb	r0, [r2, #8]
 8006d34:	79b9      	ldrb	r1, [r7, #6]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	4798      	blx	r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20000d44 	.word	0x20000d44

08006d4c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3301      	adds	r3, #1
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006d5c:	89fb      	ldrh	r3, [r7, #14]
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	b21a      	sxth	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b21b      	sxth	r3, r3
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	b21b      	sxth	r3, r3
 8006d6c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006d6e:	89fb      	ldrh	r3, [r7, #14]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3303      	adds	r3, #3
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	3202      	adds	r2, #2
 8006d94:	7812      	ldrb	r2, [r2, #0]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	3201      	adds	r2, #1
 8006da2:	7812      	ldrb	r2, [r2, #0]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	021b      	lsls	r3, r3, #8
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7812      	ldrb	r2, [r2, #0]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
	return rv;
 8006db4:	68fb      	ldr	r3, [r7, #12]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	887a      	ldrh	r2, [r7, #2]
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	887b      	ldrh	r3, [r7, #2]
 8006ddc:	0a1b      	lsrs	r3, r3, #8
 8006dde:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	887a      	ldrh	r2, [r7, #2]
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	0a1b      	lsrs	r3, r3, #8
 8006e12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	0a1b      	lsrs	r3, r3, #8
 8006e24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	0a1b      	lsrs	r3, r3, #8
 8006e36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	607a      	str	r2, [r7, #4]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	1c53      	adds	r3, r2, #1
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	1c59      	adds	r1, r3, #1
 8006e74:	6179      	str	r1, [r7, #20]
 8006e76:	7812      	ldrb	r2, [r2, #0]
 8006e78:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	607b      	str	r3, [r7, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f1      	bne.n	8006e6a <mem_cpy+0x1a>
	}
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006e92:	b480      	push	{r7}
 8006e94:	b087      	sub	sp, #28
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	60f8      	str	r0, [r7, #12]
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	617a      	str	r2, [r7, #20]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	607b      	str	r3, [r7, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f3      	bne.n	8006ea2 <mem_set+0x10>
}
 8006eba:	bf00      	nop
 8006ebc:	bf00      	nop
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ec8:	b480      	push	{r7}
 8006eca:	b089      	sub	sp, #36	; 0x24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	61fa      	str	r2, [r7, #28]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	61ba      	str	r2, [r7, #24]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	1acb      	subs	r3, r1, r3
 8006ef4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	607b      	str	r3, [r7, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <mem_cmp+0x40>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0eb      	beq.n	8006ee0 <mem_cmp+0x18>

	return r;
 8006f08:	697b      	ldr	r3, [r7, #20]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3724      	adds	r7, #36	; 0x24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006f20:	e002      	b.n	8006f28 <chk_chr+0x12>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3301      	adds	r3, #1
 8006f26:	607b      	str	r3, [r7, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <chk_chr+0x26>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d1f2      	bne.n	8006f22 <chk_chr+0xc>
	return *str;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f56:	2300      	movs	r3, #0
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	e029      	b.n	8006fb4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006f60:	4a27      	ldr	r2, [pc, #156]	; (8007000 <chk_lock+0xb4>)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	4413      	add	r3, r2
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d01d      	beq.n	8006faa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f6e:	4a24      	ldr	r2, [pc, #144]	; (8007000 <chk_lock+0xb4>)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	4413      	add	r3, r2
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d116      	bne.n	8006fae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006f80:	4a1f      	ldr	r2, [pc, #124]	; (8007000 <chk_lock+0xb4>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	4413      	add	r3, r2
 8006f88:	3304      	adds	r3, #4
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d10c      	bne.n	8006fae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f94:	4a1a      	ldr	r2, [pc, #104]	; (8007000 <chk_lock+0xb4>)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	4413      	add	r3, r2
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d102      	bne.n	8006fae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006fa8:	e007      	b.n	8006fba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006faa:	2301      	movs	r3, #1
 8006fac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d9d2      	bls.n	8006f60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d109      	bne.n	8006fd4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <chk_lock+0x80>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d101      	bne.n	8006fd0 <chk_lock+0x84>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e010      	b.n	8006ff2 <chk_lock+0xa6>
 8006fd0:	2312      	movs	r3, #18
 8006fd2:	e00e      	b.n	8006ff2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d108      	bne.n	8006fec <chk_lock+0xa0>
 8006fda:	4a09      	ldr	r2, [pc, #36]	; (8007000 <chk_lock+0xb4>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	4413      	add	r3, r2
 8006fe2:	330c      	adds	r3, #12
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fea:	d101      	bne.n	8006ff0 <chk_lock+0xa4>
 8006fec:	2310      	movs	r3, #16
 8006fee:	e000      	b.n	8006ff2 <chk_lock+0xa6>
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	20000d24 	.word	0x20000d24

08007004 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800700a:	2300      	movs	r3, #0
 800700c:	607b      	str	r3, [r7, #4]
 800700e:	e002      	b.n	8007016 <enq_lock+0x12>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3301      	adds	r3, #1
 8007014:	607b      	str	r3, [r7, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d806      	bhi.n	800702a <enq_lock+0x26>
 800701c:	4a09      	ldr	r2, [pc, #36]	; (8007044 <enq_lock+0x40>)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	4413      	add	r3, r2
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f2      	bne.n	8007010 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b02      	cmp	r3, #2
 800702e:	bf14      	ite	ne
 8007030:	2301      	movne	r3, #1
 8007032:	2300      	moveq	r3, #0
 8007034:	b2db      	uxtb	r3, r3
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000d24 	.word	0x20000d24

08007048 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	e01f      	b.n	8007098 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007058:	4a41      	ldr	r2, [pc, #260]	; (8007160 <inc_lock+0x118>)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	4413      	add	r3, r2
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d113      	bne.n	8007092 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800706a:	4a3d      	ldr	r2, [pc, #244]	; (8007160 <inc_lock+0x118>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	4413      	add	r3, r2
 8007072:	3304      	adds	r3, #4
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800707a:	429a      	cmp	r2, r3
 800707c:	d109      	bne.n	8007092 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800707e:	4a38      	ldr	r2, [pc, #224]	; (8007160 <inc_lock+0x118>)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	4413      	add	r3, r2
 8007086:	3308      	adds	r3, #8
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800708e:	429a      	cmp	r2, r3
 8007090:	d006      	beq.n	80070a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d9dc      	bls.n	8007058 <inc_lock+0x10>
 800709e:	e000      	b.n	80070a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80070a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d132      	bne.n	800710e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	e002      	b.n	80070b4 <inc_lock+0x6c>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3301      	adds	r3, #1
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d806      	bhi.n	80070c8 <inc_lock+0x80>
 80070ba:	4a29      	ldr	r2, [pc, #164]	; (8007160 <inc_lock+0x118>)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	4413      	add	r3, r2
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1f2      	bne.n	80070ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d101      	bne.n	80070d2 <inc_lock+0x8a>
 80070ce:	2300      	movs	r3, #0
 80070d0:	e040      	b.n	8007154 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	4922      	ldr	r1, [pc, #136]	; (8007160 <inc_lock+0x118>)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	011b      	lsls	r3, r3, #4
 80070dc:	440b      	add	r3, r1
 80070de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	491e      	ldr	r1, [pc, #120]	; (8007160 <inc_lock+0x118>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	440b      	add	r3, r1
 80070ec:	3304      	adds	r3, #4
 80070ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	695a      	ldr	r2, [r3, #20]
 80070f4:	491a      	ldr	r1, [pc, #104]	; (8007160 <inc_lock+0x118>)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	440b      	add	r3, r1
 80070fc:	3308      	adds	r3, #8
 80070fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007100:	4a17      	ldr	r2, [pc, #92]	; (8007160 <inc_lock+0x118>)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	4413      	add	r3, r2
 8007108:	330c      	adds	r3, #12
 800710a:	2200      	movs	r2, #0
 800710c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <inc_lock+0xe0>
 8007114:	4a12      	ldr	r2, [pc, #72]	; (8007160 <inc_lock+0x118>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	011b      	lsls	r3, r3, #4
 800711a:	4413      	add	r3, r2
 800711c:	330c      	adds	r3, #12
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <inc_lock+0xe0>
 8007124:	2300      	movs	r3, #0
 8007126:	e015      	b.n	8007154 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d108      	bne.n	8007140 <inc_lock+0xf8>
 800712e:	4a0c      	ldr	r2, [pc, #48]	; (8007160 <inc_lock+0x118>)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	4413      	add	r3, r2
 8007136:	330c      	adds	r3, #12
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	e001      	b.n	8007144 <inc_lock+0xfc>
 8007140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007144:	4906      	ldr	r1, [pc, #24]	; (8007160 <inc_lock+0x118>)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	440b      	add	r3, r1
 800714c:	330c      	adds	r3, #12
 800714e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3301      	adds	r3, #1
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	20000d24 	.word	0x20000d24

08007164 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3b01      	subs	r3, #1
 8007170:	607b      	str	r3, [r7, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d825      	bhi.n	80071c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8007178:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <dec_lock+0x74>)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	4413      	add	r3, r2
 8007180:	330c      	adds	r3, #12
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007186:	89fb      	ldrh	r3, [r7, #14]
 8007188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800718c:	d101      	bne.n	8007192 <dec_lock+0x2e>
 800718e:	2300      	movs	r3, #0
 8007190:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007192:	89fb      	ldrh	r3, [r7, #14]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <dec_lock+0x3a>
 8007198:	89fb      	ldrh	r3, [r7, #14]
 800719a:	3b01      	subs	r3, #1
 800719c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800719e:	4a0e      	ldr	r2, [pc, #56]	; (80071d8 <dec_lock+0x74>)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	4413      	add	r3, r2
 80071a6:	330c      	adds	r3, #12
 80071a8:	89fa      	ldrh	r2, [r7, #14]
 80071aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80071ac:	89fb      	ldrh	r3, [r7, #14]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d105      	bne.n	80071be <dec_lock+0x5a>
 80071b2:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <dec_lock+0x74>)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	4413      	add	r3, r2
 80071ba:	2200      	movs	r2, #0
 80071bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	737b      	strb	r3, [r7, #13]
 80071c2:	e001      	b.n	80071c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80071c4:	2302      	movs	r3, #2
 80071c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80071c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000d24 	.word	0x20000d24

080071dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	e010      	b.n	800720c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80071ea:	4a0d      	ldr	r2, [pc, #52]	; (8007220 <clear_lock+0x44>)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	4413      	add	r3, r2
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d105      	bne.n	8007206 <clear_lock+0x2a>
 80071fa:	4a09      	ldr	r2, [pc, #36]	; (8007220 <clear_lock+0x44>)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	4413      	add	r3, r2
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d9eb      	bls.n	80071ea <clear_lock+0xe>
	}
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	20000d24 	.word	0x20000d24

08007224 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	78db      	ldrb	r3, [r3, #3]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d034      	beq.n	80072a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7858      	ldrb	r0, [r3, #1]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007248:	2301      	movs	r3, #1
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	f7ff fd40 	bl	8006cd0 <disk_write>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007256:	2301      	movs	r3, #1
 8007258:	73fb      	strb	r3, [r7, #15]
 800725a:	e022      	b.n	80072a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	1ad2      	subs	r2, r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	429a      	cmp	r2, r3
 8007270:	d217      	bcs.n	80072a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	789b      	ldrb	r3, [r3, #2]
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	e010      	b.n	800729c <sync_window+0x78>
					wsect += fs->fsize;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4413      	add	r3, r2
 8007282:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	7858      	ldrb	r0, [r3, #1]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800728e:	2301      	movs	r3, #1
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	f7ff fd1d 	bl	8006cd0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	3b01      	subs	r3, #1
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d8eb      	bhi.n	800727a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d01b      	beq.n	80072fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff ffad 	bl	8007224 <sync_window>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d113      	bne.n	80072fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	7858      	ldrb	r0, [r3, #1]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072de:	2301      	movs	r3, #1
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	f7ff fcd5 	bl	8006c90 <disk_read>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80072ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff ff87 	bl	8007224 <sync_window>
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d158      	bne.n	80073d2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b03      	cmp	r3, #3
 8007326:	d148      	bne.n	80073ba <sync_fs+0xb2>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	791b      	ldrb	r3, [r3, #4]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d144      	bne.n	80073ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3330      	adds	r3, #48	; 0x30
 8007334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007338:	2100      	movs	r1, #0
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff fda9 	bl	8006e92 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3330      	adds	r3, #48	; 0x30
 8007344:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007348:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fd38 	bl	8006dc2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3330      	adds	r3, #48	; 0x30
 8007356:	4921      	ldr	r1, [pc, #132]	; (80073dc <sync_fs+0xd4>)
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff fd4d 	bl	8006df8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3330      	adds	r3, #48	; 0x30
 8007362:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007366:	491e      	ldr	r1, [pc, #120]	; (80073e0 <sync_fs+0xd8>)
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff fd45 	bl	8006df8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3330      	adds	r3, #48	; 0x30
 8007372:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f7ff fd3b 	bl	8006df8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3330      	adds	r3, #48	; 0x30
 8007386:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	4619      	mov	r1, r3
 8007390:	4610      	mov	r0, r2
 8007392:	f7ff fd31 	bl	8006df8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	7858      	ldrb	r0, [r3, #1]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ae:	2301      	movs	r3, #1
 80073b0:	f7ff fc8e 	bl	8006cd0 <disk_write>
			fs->fsi_flag = 0;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	785b      	ldrb	r3, [r3, #1]
 80073be:	2200      	movs	r2, #0
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fca4 	bl	8006d10 <disk_ioctl>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <sync_fs+0xca>
 80073ce:	2301      	movs	r3, #1
 80073d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	41615252 	.word	0x41615252
 80073e0:	61417272 	.word	0x61417272

080073e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	3b02      	subs	r3, #2
 80073f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	3b02      	subs	r3, #2
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d301      	bcc.n	8007404 <clust2sect+0x20>
 8007400:	2300      	movs	r3, #0
 8007402:	e008      	b.n	8007416 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	895b      	ldrh	r3, [r3, #10]
 8007408:	461a      	mov	r2, r3
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	fb03 f202 	mul.w	r2, r3, r2
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	4413      	add	r3, r2
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b086      	sub	sp, #24
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d904      	bls.n	8007442 <get_fat+0x20>
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007442:	2301      	movs	r3, #1
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	e08f      	b.n	8007568 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800744c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b03      	cmp	r3, #3
 8007454:	d062      	beq.n	800751c <get_fat+0xfa>
 8007456:	2b03      	cmp	r3, #3
 8007458:	dc7c      	bgt.n	8007554 <get_fat+0x132>
 800745a:	2b01      	cmp	r3, #1
 800745c:	d002      	beq.n	8007464 <get_fat+0x42>
 800745e:	2b02      	cmp	r3, #2
 8007460:	d042      	beq.n	80074e8 <get_fat+0xc6>
 8007462:	e077      	b.n	8007554 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	085b      	lsrs	r3, r3, #1
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	6a1a      	ldr	r2, [r3, #32]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	0a5b      	lsrs	r3, r3, #9
 800747a:	4413      	add	r3, r2
 800747c:	4619      	mov	r1, r3
 800747e:	6938      	ldr	r0, [r7, #16]
 8007480:	f7ff ff14 	bl	80072ac <move_window>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d167      	bne.n	800755a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	60fa      	str	r2, [r7, #12]
 8007490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4413      	add	r3, r2
 8007498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800749c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	6a1a      	ldr	r2, [r3, #32]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	0a5b      	lsrs	r3, r3, #9
 80074a6:	4413      	add	r3, r2
 80074a8:	4619      	mov	r1, r3
 80074aa:	6938      	ldr	r0, [r7, #16]
 80074ac:	f7ff fefe 	bl	80072ac <move_window>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d153      	bne.n	800755e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4413      	add	r3, r2
 80074c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	461a      	mov	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <get_fat+0xbc>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	091b      	lsrs	r3, r3, #4
 80074dc:	e002      	b.n	80074e4 <get_fat+0xc2>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e4:	617b      	str	r3, [r7, #20]
			break;
 80074e6:	e03f      	b.n	8007568 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	6a1a      	ldr	r2, [r3, #32]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	4413      	add	r3, r2
 80074f2:	4619      	mov	r1, r3
 80074f4:	6938      	ldr	r0, [r7, #16]
 80074f6:	f7ff fed9 	bl	80072ac <move_window>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d130      	bne.n	8007562 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800750e:	4413      	add	r3, r2
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff fc1b 	bl	8006d4c <ld_word>
 8007516:	4603      	mov	r3, r0
 8007518:	617b      	str	r3, [r7, #20]
			break;
 800751a:	e025      	b.n	8007568 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	6a1a      	ldr	r2, [r3, #32]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	09db      	lsrs	r3, r3, #7
 8007524:	4413      	add	r3, r2
 8007526:	4619      	mov	r1, r3
 8007528:	6938      	ldr	r0, [r7, #16]
 800752a:	f7ff febf 	bl	80072ac <move_window>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d118      	bne.n	8007566 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007542:	4413      	add	r3, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff fc19 	bl	8006d7c <ld_dword>
 800754a:	4603      	mov	r3, r0
 800754c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007550:	617b      	str	r3, [r7, #20]
			break;
 8007552:	e009      	b.n	8007568 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007554:	2301      	movs	r3, #1
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	e006      	b.n	8007568 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800755a:	bf00      	nop
 800755c:	e004      	b.n	8007568 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800755e:	bf00      	nop
 8007560:	e002      	b.n	8007568 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007562:	bf00      	nop
 8007564:	e000      	b.n	8007568 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007566:	bf00      	nop
		}
	}

	return val;
 8007568:	697b      	ldr	r3, [r7, #20]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007572:	b590      	push	{r4, r7, lr}
 8007574:	b089      	sub	sp, #36	; 0x24
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800757e:	2302      	movs	r3, #2
 8007580:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b01      	cmp	r3, #1
 8007586:	f240 80d2 	bls.w	800772e <put_fat+0x1bc>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	429a      	cmp	r2, r3
 8007592:	f080 80cc 	bcs.w	800772e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b03      	cmp	r3, #3
 800759c:	f000 8096 	beq.w	80076cc <put_fat+0x15a>
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	f300 80cd 	bgt.w	8007740 <put_fat+0x1ce>
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d002      	beq.n	80075b0 <put_fat+0x3e>
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d06e      	beq.n	800768c <put_fat+0x11a>
 80075ae:	e0c7      	b.n	8007740 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	4413      	add	r3, r2
 80075bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1a      	ldr	r2, [r3, #32]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	0a5b      	lsrs	r3, r3, #9
 80075c6:	4413      	add	r3, r2
 80075c8:	4619      	mov	r1, r3
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7ff fe6e 	bl	80072ac <move_window>
 80075d0:	4603      	mov	r3, r0
 80075d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075d4:	7ffb      	ldrb	r3, [r7, #31]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f040 80ab 	bne.w	8007732 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	1c59      	adds	r1, r3, #1
 80075e6:	61b9      	str	r1, [r7, #24]
 80075e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ec:	4413      	add	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00d      	beq.n	8007616 <put_fat+0xa4>
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b25b      	sxtb	r3, r3
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	b25a      	sxtb	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	b25b      	sxtb	r3, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	b25b      	sxtb	r3, r3
 8007612:	b2db      	uxtb	r3, r3
 8007614:	e001      	b.n	800761a <put_fat+0xa8>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1a      	ldr	r2, [r3, #32]
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	0a5b      	lsrs	r3, r3, #9
 800762c:	4413      	add	r3, r2
 800762e:	4619      	mov	r1, r3
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff fe3b 	bl	80072ac <move_window>
 8007636:	4603      	mov	r3, r0
 8007638:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800763a:	7ffb      	ldrb	r3, [r7, #31]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d17a      	bne.n	8007736 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764c:	4413      	add	r3, r2
 800764e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <put_fat+0xf0>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	091b      	lsrs	r3, r3, #4
 800765e:	b2db      	uxtb	r3, r3
 8007660:	e00e      	b.n	8007680 <put_fat+0x10e>
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	b25b      	sxtb	r3, r3
 8007668:	f023 030f 	bic.w	r3, r3, #15
 800766c:	b25a      	sxtb	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	0a1b      	lsrs	r3, r3, #8
 8007672:	b25b      	sxtb	r3, r3
 8007674:	f003 030f 	and.w	r3, r3, #15
 8007678:	b25b      	sxtb	r3, r3
 800767a:	4313      	orrs	r3, r2
 800767c:	b25b      	sxtb	r3, r3
 800767e:	b2db      	uxtb	r3, r3
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	70da      	strb	r2, [r3, #3]
			break;
 800768a:	e059      	b.n	8007740 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a1a      	ldr	r2, [r3, #32]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	0a1b      	lsrs	r3, r3, #8
 8007694:	4413      	add	r3, r2
 8007696:	4619      	mov	r1, r3
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7ff fe07 	bl	80072ac <move_window>
 800769e:	4603      	mov	r3, r0
 80076a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076a2:	7ffb      	ldrb	r3, [r7, #31]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d148      	bne.n	800773a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80076b6:	4413      	add	r3, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	b292      	uxth	r2, r2
 80076bc:	4611      	mov	r1, r2
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff fb7f 	bl	8006dc2 <st_word>
			fs->wflag = 1;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	70da      	strb	r2, [r3, #3]
			break;
 80076ca:	e039      	b.n	8007740 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a1a      	ldr	r2, [r3, #32]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	09db      	lsrs	r3, r3, #7
 80076d4:	4413      	add	r3, r2
 80076d6:	4619      	mov	r1, r3
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7ff fde7 	bl	80072ac <move_window>
 80076de:	4603      	mov	r3, r0
 80076e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076e2:	7ffb      	ldrb	r3, [r7, #31]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d12a      	bne.n	800773e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076fc:	4413      	add	r3, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff fb3c 	bl	8006d7c <ld_dword>
 8007704:	4603      	mov	r3, r0
 8007706:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800770a:	4323      	orrs	r3, r4
 800770c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800771c:	4413      	add	r3, r2
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fb69 	bl	8006df8 <st_dword>
			fs->wflag = 1;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	70da      	strb	r2, [r3, #3]
			break;
 800772c:	e008      	b.n	8007740 <put_fat+0x1ce>
		}
	}
 800772e:	bf00      	nop
 8007730:	e006      	b.n	8007740 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007732:	bf00      	nop
 8007734:	e004      	b.n	8007740 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007736:	bf00      	nop
 8007738:	e002      	b.n	8007740 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800773a:	bf00      	nop
 800773c:	e000      	b.n	8007740 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800773e:	bf00      	nop
	return res;
 8007740:	7ffb      	ldrb	r3, [r7, #31]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3724      	adds	r7, #36	; 0x24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd90      	pop	{r4, r7, pc}

0800774a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b088      	sub	sp, #32
 800774e:	af00      	add	r7, sp, #0
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d904      	bls.n	8007770 <remove_chain+0x26>
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	429a      	cmp	r2, r3
 800776e:	d301      	bcc.n	8007774 <remove_chain+0x2a>
 8007770:	2302      	movs	r3, #2
 8007772:	e04b      	b.n	800780c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00c      	beq.n	8007794 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800777a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	69b8      	ldr	r0, [r7, #24]
 8007782:	f7ff fef6 	bl	8007572 <put_fat>
 8007786:	4603      	mov	r3, r0
 8007788:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800778a:	7ffb      	ldrb	r3, [r7, #31]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <remove_chain+0x4a>
 8007790:	7ffb      	ldrb	r3, [r7, #31]
 8007792:	e03b      	b.n	800780c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff fe43 	bl	8007422 <get_fat>
 800779c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d031      	beq.n	8007808 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <remove_chain+0x64>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e02e      	b.n	800780c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077b4:	d101      	bne.n	80077ba <remove_chain+0x70>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e028      	b.n	800780c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80077ba:	2200      	movs	r2, #0
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	69b8      	ldr	r0, [r7, #24]
 80077c0:	f7ff fed7 	bl	8007572 <put_fat>
 80077c4:	4603      	mov	r3, r0
 80077c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80077c8:	7ffb      	ldrb	r3, [r7, #31]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <remove_chain+0x88>
 80077ce:	7ffb      	ldrb	r3, [r7, #31]
 80077d0:	e01c      	b.n	800780c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	3b02      	subs	r3, #2
 80077dc:	429a      	cmp	r2, r3
 80077de:	d20b      	bcs.n	80077f8 <remove_chain+0xae>
			fs->free_clst++;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	791b      	ldrb	r3, [r3, #4]
 80077ee:	f043 0301 	orr.w	r3, r3, #1
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	429a      	cmp	r2, r3
 8007804:	d3c6      	bcc.n	8007794 <remove_chain+0x4a>
 8007806:	e000      	b.n	800780a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007808:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3720      	adds	r7, #32
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10d      	bne.n	8007846 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <create_chain+0x2c>
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	429a      	cmp	r2, r3
 800783e:	d31b      	bcc.n	8007878 <create_chain+0x64>
 8007840:	2301      	movs	r3, #1
 8007842:	61bb      	str	r3, [r7, #24]
 8007844:	e018      	b.n	8007878 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fdea 	bl	8007422 <get_fat>
 800784e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d801      	bhi.n	800785a <create_chain+0x46>
 8007856:	2301      	movs	r3, #1
 8007858:	e070      	b.n	800793c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007860:	d101      	bne.n	8007866 <create_chain+0x52>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	e06a      	b.n	800793c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	429a      	cmp	r2, r3
 800786e:	d201      	bcs.n	8007874 <create_chain+0x60>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	e063      	b.n	800793c <create_chain+0x128>
		scl = clst;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	3301      	adds	r3, #1
 8007880:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	429a      	cmp	r2, r3
 800788a:	d307      	bcc.n	800789c <create_chain+0x88>
				ncl = 2;
 800788c:	2302      	movs	r3, #2
 800788e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	429a      	cmp	r2, r3
 8007896:	d901      	bls.n	800789c <create_chain+0x88>
 8007898:	2300      	movs	r3, #0
 800789a:	e04f      	b.n	800793c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800789c:	69f9      	ldr	r1, [r7, #28]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff fdbf 	bl	8007422 <get_fat>
 80078a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00e      	beq.n	80078ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d003      	beq.n	80078ba <create_chain+0xa6>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078b8:	d101      	bne.n	80078be <create_chain+0xaa>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	e03e      	b.n	800793c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d1da      	bne.n	800787c <create_chain+0x68>
 80078c6:	2300      	movs	r3, #0
 80078c8:	e038      	b.n	800793c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80078ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80078cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078d0:	69f9      	ldr	r1, [r7, #28]
 80078d2:	6938      	ldr	r0, [r7, #16]
 80078d4:	f7ff fe4d 	bl	8007572 <put_fat>
 80078d8:	4603      	mov	r3, r0
 80078da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d109      	bne.n	80078f6 <create_chain+0xe2>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d006      	beq.n	80078f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6938      	ldr	r0, [r7, #16]
 80078ee:	f7ff fe40 	bl	8007572 <put_fat>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d116      	bne.n	800792a <create_chain+0x116>
		fs->last_clst = ncl;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	691a      	ldr	r2, [r3, #16]
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	3b02      	subs	r3, #2
 800790c:	429a      	cmp	r2, r3
 800790e:	d804      	bhi.n	800791a <create_chain+0x106>
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	1e5a      	subs	r2, r3, #1
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	791b      	ldrb	r3, [r3, #4]
 800791e:	f043 0301 	orr.w	r3, r3, #1
 8007922:	b2da      	uxtb	r2, r3
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	711a      	strb	r2, [r3, #4]
 8007928:	e007      	b.n	800793a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d102      	bne.n	8007936 <create_chain+0x122>
 8007930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007934:	e000      	b.n	8007938 <create_chain+0x124>
 8007936:	2301      	movs	r3, #1
 8007938:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800793a:	69fb      	ldr	r3, [r7, #28]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3720      	adds	r7, #32
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	3304      	adds	r3, #4
 800795a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	0a5b      	lsrs	r3, r3, #9
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	8952      	ldrh	r2, [r2, #10]
 8007964:	fbb3 f3f2 	udiv	r3, r3, r2
 8007968:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1d1a      	adds	r2, r3, #4
 800796e:	613a      	str	r2, [r7, #16]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <clmt_clust+0x3a>
 800797a:	2300      	movs	r3, #0
 800797c:	e010      	b.n	80079a0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	429a      	cmp	r2, r3
 8007984:	d307      	bcc.n	8007996 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	3304      	adds	r3, #4
 8007992:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007994:	e7e9      	b.n	800796a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007996:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	4413      	add	r3, r2
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	371c      	adds	r7, #28
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079c2:	d204      	bcs.n	80079ce <dir_sdi+0x22>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80079ce:	2302      	movs	r3, #2
 80079d0:	e063      	b.n	8007a9a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d106      	bne.n	80079f2 <dir_sdi+0x46>
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d902      	bls.n	80079f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10c      	bne.n	8007a12 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	8912      	ldrh	r2, [r2, #8]
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d301      	bcc.n	8007a08 <dir_sdi+0x5c>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e048      	b.n	8007a9a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	61da      	str	r2, [r3, #28]
 8007a10:	e029      	b.n	8007a66 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	895b      	ldrh	r3, [r3, #10]
 8007a16:	025b      	lsls	r3, r3, #9
 8007a18:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a1a:	e019      	b.n	8007a50 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6979      	ldr	r1, [r7, #20]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff fcfe 	bl	8007422 <get_fat>
 8007a26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a2e:	d101      	bne.n	8007a34 <dir_sdi+0x88>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e032      	b.n	8007a9a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d904      	bls.n	8007a44 <dir_sdi+0x98>
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d301      	bcc.n	8007a48 <dir_sdi+0x9c>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e028      	b.n	8007a9a <dir_sdi+0xee>
			ofs -= csz;
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d2e1      	bcs.n	8007a1c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007a58:	6979      	ldr	r1, [r7, #20]
 8007a5a:	6938      	ldr	r0, [r7, #16]
 8007a5c:	f7ff fcc2 	bl	80073e4 <clust2sect>
 8007a60:	4602      	mov	r2, r0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <dir_sdi+0xcc>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e010      	b.n	8007a9a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	69da      	ldr	r2, [r3, #28]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	0a5b      	lsrs	r3, r3, #9
 8007a80:	441a      	add	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a92:	441a      	add	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b086      	sub	sp, #24
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	3320      	adds	r3, #32
 8007ab8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <dir_next+0x28>
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ac8:	d301      	bcc.n	8007ace <dir_next+0x2c>
 8007aca:	2304      	movs	r3, #4
 8007acc:	e0aa      	b.n	8007c24 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f040 8098 	bne.w	8007c0a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10b      	bne.n	8007b04 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	095b      	lsrs	r3, r3, #5
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	8912      	ldrh	r2, [r2, #8]
 8007af4:	4293      	cmp	r3, r2
 8007af6:	f0c0 8088 	bcc.w	8007c0a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	61da      	str	r2, [r3, #28]
 8007b00:	2304      	movs	r3, #4
 8007b02:	e08f      	b.n	8007c24 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	0a5b      	lsrs	r3, r3, #9
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	8952      	ldrh	r2, [r2, #10]
 8007b0c:	3a01      	subs	r2, #1
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d17a      	bne.n	8007c0a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f7ff fc80 	bl	8007422 <get_fat>
 8007b22:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d801      	bhi.n	8007b2e <dir_next+0x8c>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e07a      	b.n	8007c24 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b34:	d101      	bne.n	8007b3a <dir_next+0x98>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e074      	b.n	8007c24 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d358      	bcc.n	8007bf6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d104      	bne.n	8007b54 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	61da      	str	r2, [r3, #28]
 8007b50:	2304      	movs	r3, #4
 8007b52:	e067      	b.n	8007c24 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	f7ff fe59 	bl	8007814 <create_chain>
 8007b62:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <dir_next+0xcc>
 8007b6a:	2307      	movs	r3, #7
 8007b6c:	e05a      	b.n	8007c24 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d101      	bne.n	8007b78 <dir_next+0xd6>
 8007b74:	2302      	movs	r3, #2
 8007b76:	e055      	b.n	8007c24 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b7e:	d101      	bne.n	8007b84 <dir_next+0xe2>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e04f      	b.n	8007c24 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f7ff fb4d 	bl	8007224 <sync_window>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <dir_next+0xf2>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e047      	b.n	8007c24 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3330      	adds	r3, #48	; 0x30
 8007b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff f977 	bl	8006e92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	613b      	str	r3, [r7, #16]
 8007ba8:	6979      	ldr	r1, [r7, #20]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f7ff fc1a 	bl	80073e4 <clust2sect>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8007bb6:	e012      	b.n	8007bde <dir_next+0x13c>
						fs->wflag = 1;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7ff fb30 	bl	8007224 <sync_window>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <dir_next+0x12c>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e02a      	b.n	8007c24 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	895b      	ldrh	r3, [r3, #10]
 8007be2:	461a      	mov	r2, r3
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d3e6      	bcc.n	8007bb8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad2      	subs	r2, r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007bfc:	6979      	ldr	r1, [r7, #20]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fbf0 	bl	80073e4 <clust2sect>
 8007c04:	4602      	mov	r2, r0
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1c:	441a      	add	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff feb4 	bl	80079ac <dir_sdi>
 8007c44:	4603      	mov	r3, r0
 8007c46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d12b      	bne.n	8007ca6 <dir_alloc+0x7a>
		n = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	4619      	mov	r1, r3
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7ff fb27 	bl	80072ac <move_window>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11d      	bne.n	8007ca4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2be5      	cmp	r3, #229	; 0xe5
 8007c70:	d004      	beq.n	8007c7c <dir_alloc+0x50>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d107      	bne.n	8007c8c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	613b      	str	r3, [r7, #16]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d102      	bne.n	8007c90 <dir_alloc+0x64>
 8007c8a:	e00c      	b.n	8007ca6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007c90:	2101      	movs	r1, #1
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff ff05 	bl	8007aa2 <dir_next>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0d7      	beq.n	8007c52 <dir_alloc+0x26>
 8007ca2:	e000      	b.n	8007ca6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007ca4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d101      	bne.n	8007cb0 <dir_alloc+0x84>
 8007cac:	2307      	movs	r3, #7
 8007cae:	75fb      	strb	r3, [r7, #23]
	return res;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	331a      	adds	r3, #26
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff f83f 	bl	8006d4c <ld_word>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d109      	bne.n	8007cee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	3314      	adds	r3, #20
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff f834 	bl	8006d4c <ld_word>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	041b      	lsls	r3, r3, #16
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007cee:	68fb      	ldr	r3, [r7, #12]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	331a      	adds	r3, #26
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	b292      	uxth	r2, r2
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff f857 	bl	8006dc2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d109      	bne.n	8007d30 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f103 0214 	add.w	r2, r3, #20
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	0c1b      	lsrs	r3, r3, #16
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f7ff f849 	bl	8006dc2 <st_word>
	}
}
 8007d30:	bf00      	nop
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d46:	2100      	movs	r1, #0
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7ff fe2f 	bl	80079ac <dir_sdi>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <dir_find+0x24>
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	e03e      	b.n	8007dda <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	4619      	mov	r1, r3
 8007d62:	6938      	ldr	r0, [r7, #16]
 8007d64:	f7ff faa2 	bl	80072ac <move_window>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d12f      	bne.n	8007dd2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <dir_find+0x4e>
 8007d80:	2304      	movs	r3, #4
 8007d82:	75fb      	strb	r3, [r7, #23]
 8007d84:	e028      	b.n	8007dd8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	330b      	adds	r3, #11
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	330b      	adds	r3, #11
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <dir_find+0x86>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a18      	ldr	r0, [r3, #32]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3324      	adds	r3, #36	; 0x24
 8007db0:	220b      	movs	r2, #11
 8007db2:	4619      	mov	r1, r3
 8007db4:	f7ff f888 	bl	8006ec8 <mem_cmp>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff fe6e 	bl	8007aa2 <dir_next>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0c5      	beq.n	8007d5c <dir_find+0x24>
 8007dd0:	e002      	b.n	8007dd8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007dd2:	bf00      	nop
 8007dd4:	e000      	b.n	8007dd8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007dd6:	bf00      	nop

	return res;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007df0:	2101      	movs	r1, #1
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff ff1a 	bl	8007c2c <dir_alloc>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d11c      	bne.n	8007e3c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	4619      	mov	r1, r3
 8007e08:	68b8      	ldr	r0, [r7, #8]
 8007e0a:	f7ff fa4f 	bl	80072ac <move_window>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d111      	bne.n	8007e3c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	2100      	movs	r1, #0
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff f836 	bl	8006e92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a18      	ldr	r0, [r3, #32]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3324      	adds	r3, #36	; 0x24
 8007e2e:	220b      	movs	r2, #11
 8007e30:	4619      	mov	r1, r3
 8007e32:	f7ff f80d 	bl	8006e50 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3324      	adds	r3, #36	; 0x24
 8007e5c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007e5e:	220b      	movs	r2, #11
 8007e60:	2120      	movs	r1, #32
 8007e62:	68b8      	ldr	r0, [r7, #8]
 8007e64:	f7ff f815 	bl	8006e92 <mem_set>
	si = i = 0; ni = 8;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	2308      	movs	r3, #8
 8007e72:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	61fa      	str	r2, [r7, #28]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007e82:	7efb      	ldrb	r3, [r7, #27]
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	d94e      	bls.n	8007f26 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007e88:	7efb      	ldrb	r3, [r7, #27]
 8007e8a:	2b2f      	cmp	r3, #47	; 0x2f
 8007e8c:	d006      	beq.n	8007e9c <create_name+0x54>
 8007e8e:	7efb      	ldrb	r3, [r7, #27]
 8007e90:	2b5c      	cmp	r3, #92	; 0x5c
 8007e92:	d110      	bne.n	8007eb6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007e94:	e002      	b.n	8007e9c <create_name+0x54>
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	61fb      	str	r3, [r7, #28]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b2f      	cmp	r3, #47	; 0x2f
 8007ea6:	d0f6      	beq.n	8007e96 <create_name+0x4e>
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	4413      	add	r3, r2
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b5c      	cmp	r3, #92	; 0x5c
 8007eb2:	d0f0      	beq.n	8007e96 <create_name+0x4e>
			break;
 8007eb4:	e038      	b.n	8007f28 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007eb6:	7efb      	ldrb	r3, [r7, #27]
 8007eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007eba:	d003      	beq.n	8007ec4 <create_name+0x7c>
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d30c      	bcc.n	8007ede <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2b0b      	cmp	r3, #11
 8007ec8:	d002      	beq.n	8007ed0 <create_name+0x88>
 8007eca:	7efb      	ldrb	r3, [r7, #27]
 8007ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ece:	d001      	beq.n	8007ed4 <create_name+0x8c>
 8007ed0:	2306      	movs	r3, #6
 8007ed2:	e044      	b.n	8007f5e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007ed4:	2308      	movs	r3, #8
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	230b      	movs	r3, #11
 8007eda:	617b      	str	r3, [r7, #20]
			continue;
 8007edc:	e022      	b.n	8007f24 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007ede:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da04      	bge.n	8007ef0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007ee6:	7efb      	ldrb	r3, [r7, #27]
 8007ee8:	3b80      	subs	r3, #128	; 0x80
 8007eea:	4a1f      	ldr	r2, [pc, #124]	; (8007f68 <create_name+0x120>)
 8007eec:	5cd3      	ldrb	r3, [r2, r3]
 8007eee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007ef0:	7efb      	ldrb	r3, [r7, #27]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	481d      	ldr	r0, [pc, #116]	; (8007f6c <create_name+0x124>)
 8007ef6:	f7ff f80e 	bl	8006f16 <chk_chr>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <create_name+0xbc>
 8007f00:	2306      	movs	r3, #6
 8007f02:	e02c      	b.n	8007f5e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007f04:	7efb      	ldrb	r3, [r7, #27]
 8007f06:	2b60      	cmp	r3, #96	; 0x60
 8007f08:	d905      	bls.n	8007f16 <create_name+0xce>
 8007f0a:	7efb      	ldrb	r3, [r7, #27]
 8007f0c:	2b7a      	cmp	r3, #122	; 0x7a
 8007f0e:	d802      	bhi.n	8007f16 <create_name+0xce>
 8007f10:	7efb      	ldrb	r3, [r7, #27]
 8007f12:	3b20      	subs	r3, #32
 8007f14:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	613a      	str	r2, [r7, #16]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	4413      	add	r3, r2
 8007f20:	7efa      	ldrb	r2, [r7, #27]
 8007f22:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007f24:	e7a6      	b.n	8007e74 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f26:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	441a      	add	r2, r3
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <create_name+0xf4>
 8007f38:	2306      	movs	r3, #6
 8007f3a:	e010      	b.n	8007f5e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2be5      	cmp	r3, #229	; 0xe5
 8007f42:	d102      	bne.n	8007f4a <create_name+0x102>
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2205      	movs	r2, #5
 8007f48:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007f4a:	7efb      	ldrb	r3, [r7, #27]
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	d801      	bhi.n	8007f54 <create_name+0x10c>
 8007f50:	2204      	movs	r2, #4
 8007f52:	e000      	b.n	8007f56 <create_name+0x10e>
 8007f54:	2200      	movs	r2, #0
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	330b      	adds	r3, #11
 8007f5a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007f5c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	08009da8 	.word	0x08009da8
 8007f6c:	08009d30 	.word	0x08009d30

08007f70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007f84:	e002      	b.n	8007f8c <follow_path+0x1c>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b2f      	cmp	r3, #47	; 0x2f
 8007f92:	d0f8      	beq.n	8007f86 <follow_path+0x16>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b5c      	cmp	r3, #92	; 0x5c
 8007f9a:	d0f4      	beq.n	8007f86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b1f      	cmp	r3, #31
 8007fa8:	d80a      	bhi.n	8007fc0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2280      	movs	r2, #128	; 0x80
 8007fae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fcf9 	bl	80079ac <dir_sdi>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]
 8007fbe:	e043      	b.n	8008048 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fc0:	463b      	mov	r3, r7
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7ff ff3f 	bl	8007e48 <create_name>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d134      	bne.n	800803e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff feaf 	bl	8007d38 <dir_find>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007fe4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d127      	bne.n	8008042 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ff2:	7afb      	ldrb	r3, [r7, #11]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d122      	bne.n	8008042 <follow_path+0xd2>
 8007ffc:	2305      	movs	r3, #5
 8007ffe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008000:	e01f      	b.n	8008042 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11c      	bne.n	8008046 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	799b      	ldrb	r3, [r3, #6]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008018:	2305      	movs	r3, #5
 800801a:	75fb      	strb	r3, [r7, #23]
 800801c:	e014      	b.n	8008048 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802c:	4413      	add	r3, r2
 800802e:	4619      	mov	r1, r3
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f7ff fe42 	bl	8007cba <ld_clust>
 8008036:	4602      	mov	r2, r0
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800803c:	e7c0      	b.n	8007fc0 <follow_path+0x50>
			if (res != FR_OK) break;
 800803e:	bf00      	nop
 8008040:	e002      	b.n	8008048 <follow_path+0xd8>
				break;
 8008042:	bf00      	nop
 8008044:	e000      	b.n	8008048 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008046:	bf00      	nop
			}
		}
	}

	return res;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008052:	b480      	push	{r7}
 8008054:	b087      	sub	sp, #28
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800805a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800805e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d031      	beq.n	80080cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	617b      	str	r3, [r7, #20]
 800806e:	e002      	b.n	8008076 <get_ldnumber+0x24>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	3301      	adds	r3, #1
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b20      	cmp	r3, #32
 800807c:	d903      	bls.n	8008086 <get_ldnumber+0x34>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b3a      	cmp	r3, #58	; 0x3a
 8008084:	d1f4      	bne.n	8008070 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b3a      	cmp	r3, #58	; 0x3a
 800808c:	d11c      	bne.n	80080c8 <get_ldnumber+0x76>
			tp = *path;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	60fa      	str	r2, [r7, #12]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	3b30      	subs	r3, #48	; 0x30
 800809e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b09      	cmp	r3, #9
 80080a4:	d80e      	bhi.n	80080c4 <get_ldnumber+0x72>
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d10a      	bne.n	80080c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d107      	bne.n	80080c4 <get_ldnumber+0x72>
					vol = (int)i;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	3301      	adds	r3, #1
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	e002      	b.n	80080ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80080c8:	2300      	movs	r3, #0
 80080ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80080cc:	693b      	ldr	r3, [r7, #16]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
	...

080080dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	70da      	strb	r2, [r3, #3]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff f8d8 	bl	80072ac <move_window>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <check_fs+0x2a>
 8008102:	2304      	movs	r3, #4
 8008104:	e038      	b.n	8008178 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	3330      	adds	r3, #48	; 0x30
 800810a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe fe1c 	bl	8006d4c <ld_word>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800811c:	429a      	cmp	r2, r3
 800811e:	d001      	beq.n	8008124 <check_fs+0x48>
 8008120:	2303      	movs	r3, #3
 8008122:	e029      	b.n	8008178 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800812a:	2be9      	cmp	r3, #233	; 0xe9
 800812c:	d009      	beq.n	8008142 <check_fs+0x66>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008134:	2beb      	cmp	r3, #235	; 0xeb
 8008136:	d11e      	bne.n	8008176 <check_fs+0x9a>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800813e:	2b90      	cmp	r3, #144	; 0x90
 8008140:	d119      	bne.n	8008176 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	3330      	adds	r3, #48	; 0x30
 8008146:	3336      	adds	r3, #54	; 0x36
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fe17 	bl	8006d7c <ld_dword>
 800814e:	4603      	mov	r3, r0
 8008150:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008154:	4a0a      	ldr	r2, [pc, #40]	; (8008180 <check_fs+0xa4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d101      	bne.n	800815e <check_fs+0x82>
 800815a:	2300      	movs	r3, #0
 800815c:	e00c      	b.n	8008178 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3330      	adds	r3, #48	; 0x30
 8008162:	3352      	adds	r3, #82	; 0x52
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe fe09 	bl	8006d7c <ld_dword>
 800816a:	4603      	mov	r3, r0
 800816c:	4a05      	ldr	r2, [pc, #20]	; (8008184 <check_fs+0xa8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d101      	bne.n	8008176 <check_fs+0x9a>
 8008172:	2300      	movs	r3, #0
 8008174:	e000      	b.n	8008178 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008176:	2302      	movs	r3, #2
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	00544146 	.word	0x00544146
 8008184:	33544146 	.word	0x33544146

08008188 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b096      	sub	sp, #88	; 0x58
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f7ff ff58 	bl	8008052 <get_ldnumber>
 80081a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80081a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	da01      	bge.n	80081ae <find_volume+0x26>
 80081aa:	230b      	movs	r3, #11
 80081ac:	e22d      	b.n	800860a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80081ae:	4aa1      	ldr	r2, [pc, #644]	; (8008434 <find_volume+0x2ac>)
 80081b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <find_volume+0x3a>
 80081be:	230c      	movs	r3, #12
 80081c0:	e223      	b.n	800860a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01a      	beq.n	800820e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	785b      	ldrb	r3, [r3, #1]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fd17 	bl	8006c10 <disk_status>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80081e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10c      	bne.n	800820e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <find_volume+0x82>
 80081fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081fe:	f003 0304 	and.w	r3, r3, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008206:	230a      	movs	r3, #10
 8008208:	e1ff      	b.n	800860a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800820a:	2300      	movs	r3, #0
 800820c:	e1fd      	b.n	800860a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008210:	2200      	movs	r2, #0
 8008212:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008216:	b2da      	uxtb	r2, r3
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	785b      	ldrb	r3, [r3, #1]
 8008220:	4618      	mov	r0, r3
 8008222:	f7fe fd0f 	bl	8006c44 <disk_initialize>
 8008226:	4603      	mov	r3, r0
 8008228:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800822c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008238:	2303      	movs	r3, #3
 800823a:	e1e6      	b.n	800860a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <find_volume+0xca>
 8008242:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800824e:	230a      	movs	r3, #10
 8008250:	e1db      	b.n	800860a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008256:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008258:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800825a:	f7ff ff3f 	bl	80080dc <check_fs>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008268:	2b02      	cmp	r3, #2
 800826a:	d149      	bne.n	8008300 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800826c:	2300      	movs	r3, #0
 800826e:	643b      	str	r3, [r7, #64]	; 0x40
 8008270:	e01e      	b.n	80082b0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008280:	4413      	add	r3, r2
 8008282:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	3304      	adds	r3, #4
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d006      	beq.n	800829c <find_volume+0x114>
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	3308      	adds	r3, #8
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fd72 	bl	8006d7c <ld_dword>
 8008298:	4602      	mov	r2, r0
 800829a:	e000      	b.n	800829e <find_volume+0x116>
 800829c:	2200      	movs	r2, #0
 800829e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	3358      	adds	r3, #88	; 0x58
 80082a4:	443b      	add	r3, r7
 80082a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80082aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ac:	3301      	adds	r3, #1
 80082ae:	643b      	str	r3, [r7, #64]	; 0x40
 80082b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d9dd      	bls.n	8008272 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80082b6:	2300      	movs	r3, #0
 80082b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80082ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <find_volume+0x13e>
 80082c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c2:	3b01      	subs	r3, #1
 80082c4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80082c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	3358      	adds	r3, #88	; 0x58
 80082cc:	443b      	add	r3, r7
 80082ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80082d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80082d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d005      	beq.n	80082e6 <find_volume+0x15e>
 80082da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082de:	f7ff fefd 	bl	80080dc <check_fs>
 80082e2:	4603      	mov	r3, r0
 80082e4:	e000      	b.n	80082e8 <find_volume+0x160>
 80082e6:	2303      	movs	r3, #3
 80082e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80082ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d905      	bls.n	8008300 <find_volume+0x178>
 80082f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f6:	3301      	adds	r3, #1
 80082f8:	643b      	str	r3, [r7, #64]	; 0x40
 80082fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d9e2      	bls.n	80082c6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008300:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008304:	2b04      	cmp	r3, #4
 8008306:	d101      	bne.n	800830c <find_volume+0x184>
 8008308:	2301      	movs	r3, #1
 800830a:	e17e      	b.n	800860a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800830c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008310:	2b01      	cmp	r3, #1
 8008312:	d901      	bls.n	8008318 <find_volume+0x190>
 8008314:	230d      	movs	r3, #13
 8008316:	e178      	b.n	800860a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	3330      	adds	r3, #48	; 0x30
 800831c:	330b      	adds	r3, #11
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fd14 	bl	8006d4c <ld_word>
 8008324:	4603      	mov	r3, r0
 8008326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800832a:	d001      	beq.n	8008330 <find_volume+0x1a8>
 800832c:	230d      	movs	r3, #13
 800832e:	e16c      	b.n	800860a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	3330      	adds	r3, #48	; 0x30
 8008334:	3316      	adds	r3, #22
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fd08 	bl	8006d4c <ld_word>
 800833c:	4603      	mov	r3, r0
 800833e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d106      	bne.n	8008354 <find_volume+0x1cc>
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	3330      	adds	r3, #48	; 0x30
 800834a:	3324      	adds	r3, #36	; 0x24
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe fd15 	bl	8006d7c <ld_dword>
 8008352:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008358:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	789b      	ldrb	r3, [r3, #2]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d005      	beq.n	8008378 <find_volume+0x1f0>
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	789b      	ldrb	r3, [r3, #2]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d001      	beq.n	8008378 <find_volume+0x1f0>
 8008374:	230d      	movs	r3, #13
 8008376:	e148      	b.n	800860a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	789b      	ldrb	r3, [r3, #2]
 800837c:	461a      	mov	r2, r3
 800837e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008380:	fb02 f303 	mul.w	r3, r2, r3
 8008384:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838c:	b29a      	uxth	r2, r3
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	895b      	ldrh	r3, [r3, #10]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d008      	beq.n	80083ac <find_volume+0x224>
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	895b      	ldrh	r3, [r3, #10]
 800839e:	461a      	mov	r2, r3
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	895b      	ldrh	r3, [r3, #10]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	4013      	ands	r3, r2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <find_volume+0x228>
 80083ac:	230d      	movs	r3, #13
 80083ae:	e12c      	b.n	800860a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	3330      	adds	r3, #48	; 0x30
 80083b4:	3311      	adds	r3, #17
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fcc8 	bl	8006d4c <ld_word>
 80083bc:	4603      	mov	r3, r0
 80083be:	461a      	mov	r2, r3
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80083c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c6:	891b      	ldrh	r3, [r3, #8]
 80083c8:	f003 030f 	and.w	r3, r3, #15
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <find_volume+0x24e>
 80083d2:	230d      	movs	r3, #13
 80083d4:	e119      	b.n	800860a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	3330      	adds	r3, #48	; 0x30
 80083da:	3313      	adds	r3, #19
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe fcb5 	bl	8006d4c <ld_word>
 80083e2:	4603      	mov	r3, r0
 80083e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80083e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <find_volume+0x272>
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	3330      	adds	r3, #48	; 0x30
 80083f0:	3320      	adds	r3, #32
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fcc2 	bl	8006d7c <ld_dword>
 80083f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	3330      	adds	r3, #48	; 0x30
 80083fe:	330e      	adds	r3, #14
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe fca3 	bl	8006d4c <ld_word>
 8008406:	4603      	mov	r3, r0
 8008408:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800840a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <find_volume+0x28c>
 8008410:	230d      	movs	r3, #13
 8008412:	e0fa      	b.n	800860a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008414:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008418:	4413      	add	r3, r2
 800841a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800841c:	8912      	ldrh	r2, [r2, #8]
 800841e:	0912      	lsrs	r2, r2, #4
 8008420:	b292      	uxth	r2, r2
 8008422:	4413      	add	r3, r2
 8008424:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	429a      	cmp	r2, r3
 800842c:	d204      	bcs.n	8008438 <find_volume+0x2b0>
 800842e:	230d      	movs	r3, #13
 8008430:	e0eb      	b.n	800860a <find_volume+0x482>
 8008432:	bf00      	nop
 8008434:	20000d1c 	.word	0x20000d1c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008440:	8952      	ldrh	r2, [r2, #10]
 8008442:	fbb3 f3f2 	udiv	r3, r3, r2
 8008446:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <find_volume+0x2ca>
 800844e:	230d      	movs	r3, #13
 8008450:	e0db      	b.n	800860a <find_volume+0x482>
		fmt = FS_FAT32;
 8008452:	2303      	movs	r3, #3
 8008454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800845e:	4293      	cmp	r3, r2
 8008460:	d802      	bhi.n	8008468 <find_volume+0x2e0>
 8008462:	2302      	movs	r3, #2
 8008464:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800846e:	4293      	cmp	r3, r2
 8008470:	d802      	bhi.n	8008478 <find_volume+0x2f0>
 8008472:	2301      	movs	r3, #1
 8008474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	1c9a      	adds	r2, r3, #2
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008484:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008486:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800848a:	441a      	add	r2, r3
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008490:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	441a      	add	r2, r3
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800849a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d11e      	bne.n	80084e0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	3330      	adds	r3, #48	; 0x30
 80084a6:	332a      	adds	r3, #42	; 0x2a
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fe fc4f 	bl	8006d4c <ld_word>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <find_volume+0x330>
 80084b4:	230d      	movs	r3, #13
 80084b6:	e0a8      	b.n	800860a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	891b      	ldrh	r3, [r3, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <find_volume+0x33c>
 80084c0:	230d      	movs	r3, #13
 80084c2:	e0a2      	b.n	800860a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	3330      	adds	r3, #48	; 0x30
 80084c8:	332c      	adds	r3, #44	; 0x2c
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fc56 	bl	8006d7c <ld_dword>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	647b      	str	r3, [r7, #68]	; 0x44
 80084de:	e01f      	b.n	8008520 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80084e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e2:	891b      	ldrh	r3, [r3, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <find_volume+0x364>
 80084e8:	230d      	movs	r3, #13
 80084ea:	e08e      	b.n	800860a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	6a1a      	ldr	r2, [r3, #32]
 80084f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f2:	441a      	add	r2, r3
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80084f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d103      	bne.n	8008508 <find_volume+0x380>
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	e00a      	b.n	800851e <find_volume+0x396>
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	695a      	ldr	r2, [r3, #20]
 800850c:	4613      	mov	r3, r2
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	4413      	add	r3, r2
 8008512:	085a      	lsrs	r2, r3, #1
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800851e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008526:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800852a:	0a5b      	lsrs	r3, r3, #9
 800852c:	429a      	cmp	r2, r3
 800852e:	d201      	bcs.n	8008534 <find_volume+0x3ac>
 8008530:	230d      	movs	r3, #13
 8008532:	e06a      	b.n	800860a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800853a:	611a      	str	r2, [r3, #16]
 800853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	2280      	movs	r2, #128	; 0x80
 8008548:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800854a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800854e:	2b03      	cmp	r3, #3
 8008550:	d149      	bne.n	80085e6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	3330      	adds	r3, #48	; 0x30
 8008556:	3330      	adds	r3, #48	; 0x30
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fbf7 	bl	8006d4c <ld_word>
 800855e:	4603      	mov	r3, r0
 8008560:	2b01      	cmp	r3, #1
 8008562:	d140      	bne.n	80085e6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008566:	3301      	adds	r3, #1
 8008568:	4619      	mov	r1, r3
 800856a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800856c:	f7fe fe9e 	bl	80072ac <move_window>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d137      	bne.n	80085e6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	2200      	movs	r2, #0
 800857a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	3330      	adds	r3, #48	; 0x30
 8008580:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fbe1 	bl	8006d4c <ld_word>
 800858a:	4603      	mov	r3, r0
 800858c:	461a      	mov	r2, r3
 800858e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008592:	429a      	cmp	r2, r3
 8008594:	d127      	bne.n	80085e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	3330      	adds	r3, #48	; 0x30
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe fbee 	bl	8006d7c <ld_dword>
 80085a0:	4603      	mov	r3, r0
 80085a2:	4a1c      	ldr	r2, [pc, #112]	; (8008614 <find_volume+0x48c>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d11e      	bne.n	80085e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	3330      	adds	r3, #48	; 0x30
 80085ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe fbe3 	bl	8006d7c <ld_dword>
 80085b6:	4603      	mov	r3, r0
 80085b8:	4a17      	ldr	r2, [pc, #92]	; (8008618 <find_volume+0x490>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d113      	bne.n	80085e6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80085be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c0:	3330      	adds	r3, #48	; 0x30
 80085c2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fbd8 	bl	8006d7c <ld_dword>
 80085cc:	4602      	mov	r2, r0
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	3330      	adds	r3, #48	; 0x30
 80085d6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fbce 	bl	8006d7c <ld_dword>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80085ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <find_volume+0x494>)
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <find_volume+0x494>)
 80085f8:	801a      	strh	r2, [r3, #0]
 80085fa:	4b08      	ldr	r3, [pc, #32]	; (800861c <find_volume+0x494>)
 80085fc:	881a      	ldrh	r2, [r3, #0]
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008602:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008604:	f7fe fdea 	bl	80071dc <clear_lock>
#endif
	return FR_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3758      	adds	r7, #88	; 0x58
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	41615252 	.word	0x41615252
 8008618:	61417272 	.word	0x61417272
 800861c:	20000d20 	.word	0x20000d20

08008620 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800862a:	2309      	movs	r3, #9
 800862c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01c      	beq.n	800866e <validate+0x4e>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d018      	beq.n	800866e <validate+0x4e>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d013      	beq.n	800866e <validate+0x4e>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	889a      	ldrh	r2, [r3, #4]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	88db      	ldrh	r3, [r3, #6]
 8008650:	429a      	cmp	r2, r3
 8008652:	d10c      	bne.n	800866e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe fad8 	bl	8006c10 <disk_status>
 8008660:	4603      	mov	r3, r0
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <validate+0x4e>
			res = FR_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d102      	bne.n	800867a <validate+0x5a>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	e000      	b.n	800867c <validate+0x5c>
 800867a:	2300      	movs	r3, #0
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	6013      	str	r3, [r2, #0]
	return res;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800869e:	f107 0310 	add.w	r3, r7, #16
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff fcd5 	bl	8008052 <get_ldnumber>
 80086a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da01      	bge.n	80086b4 <f_mount+0x28>
 80086b0:	230b      	movs	r3, #11
 80086b2:	e02b      	b.n	800870c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80086b4:	4a17      	ldr	r2, [pc, #92]	; (8008714 <f_mount+0x88>)
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80086c4:	69b8      	ldr	r0, [r7, #24]
 80086c6:	f7fe fd89 	bl	80071dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	2200      	movs	r2, #0
 80086ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	490d      	ldr	r1, [pc, #52]	; (8008714 <f_mount+0x88>)
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <f_mount+0x66>
 80086ec:	79fb      	ldrb	r3, [r7, #7]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d001      	beq.n	80086f6 <f_mount+0x6a>
 80086f2:	2300      	movs	r3, #0
 80086f4:	e00a      	b.n	800870c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80086f6:	f107 010c 	add.w	r1, r7, #12
 80086fa:	f107 0308 	add.w	r3, r7, #8
 80086fe:	2200      	movs	r2, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f7ff fd41 	bl	8008188 <find_volume>
 8008706:	4603      	mov	r3, r0
 8008708:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800870a:	7dfb      	ldrb	r3, [r7, #23]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3720      	adds	r7, #32
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	20000d1c 	.word	0x20000d1c

08008718 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b098      	sub	sp, #96	; 0x60
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <f_open+0x18>
 800872c:	2309      	movs	r3, #9
 800872e:	e1ad      	b.n	8008a8c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008736:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008738:	79fa      	ldrb	r2, [r7, #7]
 800873a:	f107 0110 	add.w	r1, r7, #16
 800873e:	f107 0308 	add.w	r3, r7, #8
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fd20 	bl	8008188 <find_volume>
 8008748:	4603      	mov	r3, r0
 800874a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800874e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008752:	2b00      	cmp	r3, #0
 8008754:	f040 8191 	bne.w	8008a7a <f_open+0x362>
		dj.obj.fs = fs;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	f107 0314 	add.w	r3, r7, #20
 8008762:	4611      	mov	r1, r2
 8008764:	4618      	mov	r0, r3
 8008766:	f7ff fc03 	bl	8007f70 <follow_path>
 800876a:	4603      	mov	r3, r0
 800876c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008770:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008774:	2b00      	cmp	r3, #0
 8008776:	d11a      	bne.n	80087ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008778:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800877c:	b25b      	sxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	da03      	bge.n	800878a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008782:	2306      	movs	r3, #6
 8008784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008788:	e011      	b.n	80087ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	f023 0301 	bic.w	r3, r3, #1
 8008790:	2b00      	cmp	r3, #0
 8008792:	bf14      	ite	ne
 8008794:	2301      	movne	r3, #1
 8008796:	2300      	moveq	r3, #0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	461a      	mov	r2, r3
 800879c:	f107 0314 	add.w	r3, r7, #20
 80087a0:	4611      	mov	r1, r2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fbd2 	bl	8006f4c <chk_lock>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	f003 031c 	and.w	r3, r3, #28
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d07f      	beq.n	80088b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80087b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d017      	beq.n	80087f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80087c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d10e      	bne.n	80087e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80087c8:	f7fe fc1c 	bl	8007004 <enq_lock>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d006      	beq.n	80087e0 <f_open+0xc8>
 80087d2:	f107 0314 	add.w	r3, r7, #20
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fb03 	bl	8007de2 <dir_register>
 80087dc:	4603      	mov	r3, r0
 80087de:	e000      	b.n	80087e2 <f_open+0xca>
 80087e0:	2312      	movs	r3, #18
 80087e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	f043 0308 	orr.w	r3, r3, #8
 80087ec:	71fb      	strb	r3, [r7, #7]
 80087ee:	e010      	b.n	8008812 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80087f0:	7ebb      	ldrb	r3, [r7, #26]
 80087f2:	f003 0311 	and.w	r3, r3, #17
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <f_open+0xea>
					res = FR_DENIED;
 80087fa:	2307      	movs	r3, #7
 80087fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008800:	e007      	b.n	8008812 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	f003 0304 	and.w	r3, r3, #4
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <f_open+0xfa>
 800880c:	2308      	movs	r3, #8
 800880e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008816:	2b00      	cmp	r3, #0
 8008818:	d168      	bne.n	80088ec <f_open+0x1d4>
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	f003 0308 	and.w	r3, r3, #8
 8008820:	2b00      	cmp	r3, #0
 8008822:	d063      	beq.n	80088ec <f_open+0x1d4>
				dw = GET_FATTIME();
 8008824:	f7fe f860 	bl	80068e8 <get_fattime>
 8008828:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800882a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882c:	330e      	adds	r3, #14
 800882e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fae1 	bl	8006df8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008838:	3316      	adds	r3, #22
 800883a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800883c:	4618      	mov	r0, r3
 800883e:	f7fe fadb 	bl	8006df8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	330b      	adds	r3, #11
 8008846:	2220      	movs	r2, #32
 8008848:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800884e:	4611      	mov	r1, r2
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff fa32 	bl	8007cba <ld_clust>
 8008856:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800885c:	2200      	movs	r2, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff fa4a 	bl	8007cf8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008866:	331c      	adds	r3, #28
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fac4 	bl	8006df8 <st_dword>
					fs->wflag = 1;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2201      	movs	r2, #1
 8008874:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d037      	beq.n	80088ec <f_open+0x1d4>
						dw = fs->winsect;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008882:	f107 0314 	add.w	r3, r7, #20
 8008886:	2200      	movs	r2, #0
 8008888:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe ff5d 	bl	800774a <remove_chain>
 8008890:	4603      	mov	r3, r0
 8008892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008896:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800889a:	2b00      	cmp	r3, #0
 800889c:	d126      	bne.n	80088ec <f_open+0x1d4>
							res = move_window(fs, dw);
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fd02 	bl	80072ac <move_window>
 80088a8:	4603      	mov	r3, r0
 80088aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088b2:	3a01      	subs	r2, #1
 80088b4:	60da      	str	r2, [r3, #12]
 80088b6:	e019      	b.n	80088ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80088b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d115      	bne.n	80088ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80088c0:	7ebb      	ldrb	r3, [r7, #26]
 80088c2:	f003 0310 	and.w	r3, r3, #16
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80088ca:	2304      	movs	r3, #4
 80088cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088d0:	e00c      	b.n	80088ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	f003 0302 	and.w	r3, r3, #2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d007      	beq.n	80088ec <f_open+0x1d4>
 80088dc:	7ebb      	ldrb	r3, [r7, #26]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <f_open+0x1d4>
						res = FR_DENIED;
 80088e6:	2307      	movs	r3, #7
 80088e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80088ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d128      	bne.n	8008946 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008904:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800890e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	bf14      	ite	ne
 800891e:	2301      	movne	r3, #1
 8008920:	2300      	moveq	r3, #0
 8008922:	b2db      	uxtb	r3, r3
 8008924:	461a      	mov	r2, r3
 8008926:	f107 0314 	add.w	r3, r7, #20
 800892a:	4611      	mov	r1, r2
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fb8b 	bl	8007048 <inc_lock>
 8008932:	4602      	mov	r2, r0
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <f_open+0x22e>
 8008940:	2302      	movs	r3, #2
 8008942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800894a:	2b00      	cmp	r3, #0
 800894c:	f040 8095 	bne.w	8008a7a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff f9af 	bl	8007cba <ld_clust>
 800895c:	4602      	mov	r2, r0
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008964:	331c      	adds	r3, #28
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fa08 	bl	8006d7c <ld_dword>
 800896c:	4602      	mov	r2, r0
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	88da      	ldrh	r2, [r3, #6]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	79fa      	ldrb	r2, [r7, #7]
 800898a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3330      	adds	r3, #48	; 0x30
 80089a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089a6:	2100      	movs	r1, #0
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fe fa72 	bl	8006e92 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	f003 0320 	and.w	r3, r3, #32
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d060      	beq.n	8008a7a <f_open+0x362>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d05c      	beq.n	8008a7a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	895b      	ldrh	r3, [r3, #10]
 80089cc:	025b      	lsls	r3, r3, #9
 80089ce:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	657b      	str	r3, [r7, #84]	; 0x54
 80089dc:	e016      	b.n	8008a0c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe fd1d 	bl	8007422 <get_fat>
 80089e8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80089ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d802      	bhi.n	80089f6 <f_open+0x2de>
 80089f0:	2302      	movs	r3, #2
 80089f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80089f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089fc:	d102      	bne.n	8008a04 <f_open+0x2ec>
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d103      	bne.n	8008a1c <f_open+0x304>
 8008a14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d8e0      	bhi.n	80089de <f_open+0x2c6>
				}
				fp->clust = clst;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008a22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d127      	bne.n	8008a7a <f_open+0x362>
 8008a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d022      	beq.n	8008a7a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fcd3 	bl	80073e4 <clust2sect>
 8008a3e:	6478      	str	r0, [r7, #68]	; 0x44
 8008a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d103      	bne.n	8008a4e <f_open+0x336>
						res = FR_INT_ERR;
 8008a46:	2302      	movs	r3, #2
 8008a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a4c:	e015      	b.n	8008a7a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a50:	0a5a      	lsrs	r2, r3, #9
 8008a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a54:	441a      	add	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	7858      	ldrb	r0, [r3, #1]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6a1a      	ldr	r2, [r3, #32]
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f7fe f911 	bl	8006c90 <disk_read>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <f_open+0x362>
 8008a74:	2301      	movs	r3, #1
 8008a76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <f_open+0x370>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3760      	adds	r7, #96	; 0x60
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08c      	sub	sp, #48	; 0x30
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f107 0210 	add.w	r2, r7, #16
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff fdb3 	bl	8008620 <validate>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d107      	bne.n	8008ad8 <f_write+0x44>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	7d5b      	ldrb	r3, [r3, #21]
 8008acc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <f_write+0x4a>
 8008ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008adc:	e14b      	b.n	8008d76 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	7d1b      	ldrb	r3, [r3, #20]
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <f_write+0x5a>
 8008aea:	2307      	movs	r3, #7
 8008aec:	e143      	b.n	8008d76 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	441a      	add	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	f080 812d 	bcs.w	8008d5a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	43db      	mvns	r3, r3
 8008b06:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008b08:	e127      	b.n	8008d5a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f040 80e3 	bne.w	8008cde <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	0a5b      	lsrs	r3, r3, #9
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	8952      	ldrh	r2, [r2, #10]
 8008b22:	3a01      	subs	r2, #1
 8008b24:	4013      	ands	r3, r2
 8008b26:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d143      	bne.n	8008bb6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10c      	bne.n	8008b50 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d11a      	bne.n	8008b78 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe fe64 	bl	8007814 <create_chain>
 8008b4c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b4e:	e013      	b.n	8008b78 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d007      	beq.n	8008b68 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f7fe fef0 	bl	8007944 <clmt_clust>
 8008b64:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b66:	e007      	b.n	8008b78 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4610      	mov	r0, r2
 8008b72:	f7fe fe4f 	bl	8007814 <create_chain>
 8008b76:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 80f2 	beq.w	8008d64 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d104      	bne.n	8008b90 <f_write+0xfc>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	755a      	strb	r2, [r3, #21]
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e0f2      	b.n	8008d76 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b96:	d104      	bne.n	8008ba2 <f_write+0x10e>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	755a      	strb	r2, [r3, #21]
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e0e9      	b.n	8008d76 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ba6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d102      	bne.n	8008bb6 <f_write+0x122>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	7d1b      	ldrb	r3, [r3, #20]
 8008bba:	b25b      	sxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	da18      	bge.n	8008bf2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	7858      	ldrb	r0, [r3, #1]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6a1a      	ldr	r2, [r3, #32]
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f7fe f87e 	bl	8006cd0 <disk_write>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <f_write+0x150>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	755a      	strb	r2, [r3, #21]
 8008be0:	2301      	movs	r3, #1
 8008be2:	e0c8      	b.n	8008d76 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	7d1b      	ldrb	r3, [r3, #20]
 8008be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fe fbf2 	bl	80073e4 <clust2sect>
 8008c00:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d104      	bne.n	8008c12 <f_write+0x17e>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	755a      	strb	r2, [r3, #21]
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e0b1      	b.n	8008d76 <f_write+0x2e2>
			sect += csect;
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	4413      	add	r3, r2
 8008c18:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	0a5b      	lsrs	r3, r3, #9
 8008c1e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d03c      	beq.n	8008ca0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	8952      	ldrh	r2, [r2, #10]
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d905      	bls.n	8008c40 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	895b      	ldrh	r3, [r3, #10]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	7858      	ldrb	r0, [r3, #1]
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	69f9      	ldr	r1, [r7, #28]
 8008c4a:	f7fe f841 	bl	8006cd0 <disk_write>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <f_write+0x1ca>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	755a      	strb	r2, [r3, #21]
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e08b      	b.n	8008d76 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6a1a      	ldr	r2, [r3, #32]
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	6a3a      	ldr	r2, [r7, #32]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d915      	bls.n	8008c98 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a1a      	ldr	r2, [r3, #32]
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	025b      	lsls	r3, r3, #9
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c84:	4619      	mov	r1, r3
 8008c86:	f7fe f8e3 	bl	8006e50 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	7d1b      	ldrb	r3, [r3, #20]
 8008c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	025b      	lsls	r3, r3, #9
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008c9e:	e03f      	b.n	8008d20 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d016      	beq.n	8008cd8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	699a      	ldr	r2, [r3, #24]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d210      	bcs.n	8008cd8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	7858      	ldrb	r0, [r3, #1]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	f7fd ffe4 	bl	8006c90 <disk_read>
 8008cc8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d004      	beq.n	8008cd8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	755a      	strb	r2, [r3, #21]
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e04e      	b.n	8008d76 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d901      	bls.n	8008cf8 <f_write+0x264>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d06:	4413      	add	r3, r2
 8008d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d0a:	69f9      	ldr	r1, [r7, #28]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe f89f 	bl	8006e50 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	7d1b      	ldrb	r3, [r3, #20]
 8008d16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d20:	69fa      	ldr	r2, [r7, #28]
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	4413      	add	r3, r2
 8008d26:	61fb      	str	r3, [r7, #28]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	699a      	ldr	r2, [r3, #24]
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	441a      	add	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	619a      	str	r2, [r3, #24]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	bf38      	it	cc
 8008d40:	461a      	movcc	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	60da      	str	r2, [r3, #12]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	441a      	add	r2, r3
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f47f aed4 	bne.w	8008b0a <f_write+0x76>
 8008d62:	e000      	b.n	8008d66 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d64:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	7d1b      	ldrb	r3, [r3, #20]
 8008d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3730      	adds	r7, #48	; 0x30
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b086      	sub	sp, #24
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f107 0208 	add.w	r2, r7, #8
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fc46 	bl	8008620 <validate>
 8008d94:	4603      	mov	r3, r0
 8008d96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d168      	bne.n	8008e70 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	7d1b      	ldrb	r3, [r3, #20]
 8008da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d062      	beq.n	8008e70 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	7d1b      	ldrb	r3, [r3, #20]
 8008dae:	b25b      	sxtb	r3, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da15      	bge.n	8008de0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	7858      	ldrb	r0, [r3, #1]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1a      	ldr	r2, [r3, #32]
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f7fd ff84 	bl	8006cd0 <disk_write>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <f_sync+0x54>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e04f      	b.n	8008e72 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	7d1b      	ldrb	r3, [r3, #20]
 8008dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008de0:	f7fd fd82 	bl	80068e8 <get_fattime>
 8008de4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7fe fa5c 	bl	80072ac <move_window>
 8008df4:	4603      	mov	r3, r0
 8008df6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008df8:	7dfb      	ldrb	r3, [r7, #23]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d138      	bne.n	8008e70 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	330b      	adds	r3, #11
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	330b      	adds	r3, #11
 8008e0e:	f042 0220 	orr.w	r2, r2, #32
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6818      	ldr	r0, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	68f9      	ldr	r1, [r7, #12]
 8008e22:	f7fe ff69 	bl	8007cf8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f103 021c 	add.w	r2, r3, #28
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f7fd ffe0 	bl	8006df8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3316      	adds	r3, #22
 8008e3c:	6939      	ldr	r1, [r7, #16]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fd ffda 	bl	8006df8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3312      	adds	r3, #18
 8008e48:	2100      	movs	r1, #0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fd ffb9 	bl	8006dc2 <st_word>
					fs->wflag = 1;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2201      	movs	r2, #1
 8008e54:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fe fa55 	bl	8007308 <sync_fs>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7d1b      	ldrb	r3, [r3, #20]
 8008e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff ff7b 	bl	8008d7e <f_sync>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d118      	bne.n	8008ec4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f107 0208 	add.w	r2, r7, #8
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff fbc0 	bl	8008620 <validate>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10c      	bne.n	8008ec4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe f958 	bl	8007164 <dec_lock>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d102      	bne.n	8008ec4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b090      	sub	sp, #64	; 0x40
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f107 0208 	add.w	r2, r7, #8
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff fb9d 	bl	8008620 <validate>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008eec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d103      	bne.n	8008efc <f_lseek+0x2e>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	7d5b      	ldrb	r3, [r3, #21]
 8008ef8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008efc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <f_lseek+0x3c>
 8008f04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f08:	e1e6      	b.n	80092d8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 80d1 	beq.w	80090b6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f1a:	d15a      	bne.n	8008fd2 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	1d1a      	adds	r2, r3, #4
 8008f26:	627a      	str	r2, [r7, #36]	; 0x24
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	617b      	str	r3, [r7, #20]
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d03a      	beq.n	8008fb2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	613b      	str	r3, [r7, #16]
 8008f40:	2300      	movs	r3, #0
 8008f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	3302      	adds	r3, #2
 8008f48:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	3301      	adds	r3, #1
 8008f52:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe fa62 	bl	8007422 <get_fat>
 8008f5e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d804      	bhi.n	8008f70 <f_lseek+0xa2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2202      	movs	r2, #2
 8008f6a:	755a      	strb	r2, [r3, #21]
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e1b3      	b.n	80092d8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f76:	d104      	bne.n	8008f82 <f_lseek+0xb4>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	755a      	strb	r2, [r3, #21]
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e1aa      	b.n	80092d8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d0de      	beq.n	8008f4a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d809      	bhi.n	8008fa8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	1d1a      	adds	r2, r3, #4
 8008f98:	627a      	str	r2, [r7, #36]	; 0x24
 8008f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	1d1a      	adds	r2, r3, #4
 8008fa2:	627a      	str	r2, [r7, #36]	; 0x24
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d3c4      	bcc.n	8008f3c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fb8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d803      	bhi.n	8008fca <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e184      	b.n	80092d4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008fca:	2311      	movs	r3, #17
 8008fcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008fd0:	e180      	b.n	80092d4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d902      	bls.n	8008fe2 <f_lseek+0x114>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 8172 	beq.w	80092d4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7fe fca4 	bl	8007944 <clmt_clust>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	4619      	mov	r1, r3
 800900a:	4610      	mov	r0, r2
 800900c:	f7fe f9ea 	bl	80073e4 <clust2sect>
 8009010:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d104      	bne.n	8009022 <f_lseek+0x154>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	755a      	strb	r2, [r3, #21]
 800901e:	2302      	movs	r3, #2
 8009020:	e15a      	b.n	80092d8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	3b01      	subs	r3, #1
 8009026:	0a5b      	lsrs	r3, r3, #9
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	8952      	ldrh	r2, [r2, #10]
 800902c:	3a01      	subs	r2, #1
 800902e:	4013      	ands	r3, r2
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	4413      	add	r3, r2
 8009034:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 8148 	beq.w	80092d4 <f_lseek+0x406>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	429a      	cmp	r2, r3
 800904c:	f000 8142 	beq.w	80092d4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	7d1b      	ldrb	r3, [r3, #20]
 8009054:	b25b      	sxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	da18      	bge.n	800908c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	7858      	ldrb	r0, [r3, #1]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1a      	ldr	r2, [r3, #32]
 8009068:	2301      	movs	r3, #1
 800906a:	f7fd fe31 	bl	8006cd0 <disk_write>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <f_lseek+0x1b0>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	755a      	strb	r2, [r3, #21]
 800907a:	2301      	movs	r3, #1
 800907c:	e12c      	b.n	80092d8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7d1b      	ldrb	r3, [r3, #20]
 8009082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009086:	b2da      	uxtb	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	7858      	ldrb	r0, [r3, #1]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009096:	2301      	movs	r3, #1
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	f7fd fdf9 	bl	8006c90 <disk_read>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d004      	beq.n	80090ae <f_lseek+0x1e0>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	755a      	strb	r2, [r3, #21]
 80090aa:	2301      	movs	r3, #1
 80090ac:	e114      	b.n	80092d8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	621a      	str	r2, [r3, #32]
 80090b4:	e10e      	b.n	80092d4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d908      	bls.n	80090d2 <f_lseek+0x204>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7d1b      	ldrb	r3, [r3, #20]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	637b      	str	r3, [r7, #52]	; 0x34
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090e0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 80a7 	beq.w	8009238 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	895b      	ldrh	r3, [r3, #10]
 80090ee:	025b      	lsls	r3, r3, #9
 80090f0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d01b      	beq.n	8009130 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	1e5a      	subs	r2, r3, #1
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	1e59      	subs	r1, r3, #1
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800910c:	429a      	cmp	r2, r3
 800910e:	d30f      	bcc.n	8009130 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	1e5a      	subs	r2, r3, #1
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	425b      	negs	r3, r3
 8009118:	401a      	ands	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	63bb      	str	r3, [r7, #56]	; 0x38
 800912e:	e022      	b.n	8009176 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d119      	bne.n	8009170 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2100      	movs	r1, #0
 8009140:	4618      	mov	r0, r3
 8009142:	f7fe fb67 	bl	8007814 <create_chain>
 8009146:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	2b01      	cmp	r3, #1
 800914c:	d104      	bne.n	8009158 <f_lseek+0x28a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	755a      	strb	r2, [r3, #21]
 8009154:	2302      	movs	r3, #2
 8009156:	e0bf      	b.n	80092d8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800915e:	d104      	bne.n	800916a <f_lseek+0x29c>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	755a      	strb	r2, [r3, #21]
 8009166:	2301      	movs	r3, #1
 8009168:	e0b6      	b.n	80092d8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800916e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009174:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	2b00      	cmp	r3, #0
 800917a:	d05d      	beq.n	8009238 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800917c:	e03a      	b.n	80091f4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	603b      	str	r3, [r7, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	699a      	ldr	r2, [r3, #24]
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	441a      	add	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	7d1b      	ldrb	r3, [r3, #20]
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00b      	beq.n	80091b6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fe fb36 	bl	8007814 <create_chain>
 80091a8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d108      	bne.n	80091c2 <f_lseek+0x2f4>
							ofs = 0; break;
 80091b0:	2300      	movs	r3, #0
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	e022      	b.n	80091fc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fe f931 	bl	8007422 <get_fat>
 80091c0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c8:	d104      	bne.n	80091d4 <f_lseek+0x306>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	755a      	strb	r2, [r3, #21]
 80091d0:	2301      	movs	r3, #1
 80091d2:	e081      	b.n	80092d8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d904      	bls.n	80091e4 <f_lseek+0x316>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d304      	bcc.n	80091ee <f_lseek+0x320>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2202      	movs	r2, #2
 80091e8:	755a      	strb	r2, [r3, #21]
 80091ea:	2302      	movs	r3, #2
 80091ec:	e074      	b.n	80092d8 <f_lseek+0x40a>
					fp->clust = clst;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091f2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d8c0      	bhi.n	800917e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699a      	ldr	r2, [r3, #24]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	441a      	add	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920e:	2b00      	cmp	r3, #0
 8009210:	d012      	beq.n	8009238 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe f8e4 	bl	80073e4 <clust2sect>
 800921c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800921e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009220:	2b00      	cmp	r3, #0
 8009222:	d104      	bne.n	800922e <f_lseek+0x360>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2202      	movs	r2, #2
 8009228:	755a      	strb	r2, [r3, #21]
 800922a:	2302      	movs	r3, #2
 800922c:	e054      	b.n	80092d8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	0a5b      	lsrs	r3, r3, #9
 8009232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009234:	4413      	add	r3, r2
 8009236:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	429a      	cmp	r2, r3
 8009242:	d90a      	bls.n	800925a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	699a      	ldr	r2, [r3, #24]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	7d1b      	ldrb	r3, [r3, #20]
 8009250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009254:	b2da      	uxtb	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009262:	2b00      	cmp	r3, #0
 8009264:	d036      	beq.n	80092d4 <f_lseek+0x406>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800926c:	429a      	cmp	r2, r3
 800926e:	d031      	beq.n	80092d4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	7d1b      	ldrb	r3, [r3, #20]
 8009274:	b25b      	sxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	da18      	bge.n	80092ac <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	7858      	ldrb	r0, [r3, #1]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a1a      	ldr	r2, [r3, #32]
 8009288:	2301      	movs	r3, #1
 800928a:	f7fd fd21 	bl	8006cd0 <disk_write>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d004      	beq.n	800929e <f_lseek+0x3d0>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	755a      	strb	r2, [r3, #21]
 800929a:	2301      	movs	r3, #1
 800929c:	e01c      	b.n	80092d8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	7d1b      	ldrb	r3, [r3, #20]
 80092a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	7858      	ldrb	r0, [r3, #1]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092b6:	2301      	movs	r3, #1
 80092b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092ba:	f7fd fce9 	bl	8006c90 <disk_read>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <f_lseek+0x400>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	755a      	strb	r2, [r3, #21]
 80092ca:	2301      	movs	r3, #1
 80092cc:	e004      	b.n	80092d8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092d2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80092d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3740      	adds	r7, #64	; 0x40
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	4613      	mov	r3, r2
 80092ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80092ee:	2301      	movs	r3, #1
 80092f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80092f6:	4b1f      	ldr	r3, [pc, #124]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 80092f8:	7a5b      	ldrb	r3, [r3, #9]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d131      	bne.n	8009364 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009300:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009302:	7a5b      	ldrb	r3, [r3, #9]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	461a      	mov	r2, r3
 8009308:	4b1a      	ldr	r3, [pc, #104]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 800930a:	2100      	movs	r1, #0
 800930c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800930e:	4b19      	ldr	r3, [pc, #100]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009310:	7a5b      	ldrb	r3, [r3, #9]
 8009312:	b2db      	uxtb	r3, r3
 8009314:	4a17      	ldr	r2, [pc, #92]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800931e:	4b15      	ldr	r3, [pc, #84]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009320:	7a5b      	ldrb	r3, [r3, #9]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	461a      	mov	r2, r3
 8009326:	4b13      	ldr	r3, [pc, #76]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009328:	4413      	add	r3, r2
 800932a:	79fa      	ldrb	r2, [r7, #7]
 800932c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800932e:	4b11      	ldr	r3, [pc, #68]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 8009330:	7a5b      	ldrb	r3, [r3, #9]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	b2d1      	uxtb	r1, r2
 8009338:	4a0e      	ldr	r2, [pc, #56]	; (8009374 <FATFS_LinkDriverEx+0x94>)
 800933a:	7251      	strb	r1, [r2, #9]
 800933c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800933e:	7dbb      	ldrb	r3, [r7, #22]
 8009340:	3330      	adds	r3, #48	; 0x30
 8009342:	b2da      	uxtb	r2, r3
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	3301      	adds	r3, #1
 800934c:	223a      	movs	r2, #58	; 0x3a
 800934e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	3302      	adds	r3, #2
 8009354:	222f      	movs	r2, #47	; 0x2f
 8009356:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	3303      	adds	r3, #3
 800935c:	2200      	movs	r2, #0
 800935e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009364:	7dfb      	ldrb	r3, [r7, #23]
}
 8009366:	4618      	mov	r0, r3
 8009368:	371c      	adds	r7, #28
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	20000d44 	.word	0x20000d44

08009378 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009382:	2200      	movs	r2, #0
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff ffaa 	bl	80092e0 <FATFS_LinkDriverEx>
 800938c:	4603      	mov	r3, r0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <__errno>:
 8009398:	4b01      	ldr	r3, [pc, #4]	; (80093a0 <__errno+0x8>)
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	20000010 	.word	0x20000010

080093a4 <exit>:
 80093a4:	b508      	push	{r3, lr}
 80093a6:	4b07      	ldr	r3, [pc, #28]	; (80093c4 <exit+0x20>)
 80093a8:	4604      	mov	r4, r0
 80093aa:	b113      	cbz	r3, 80093b2 <exit+0xe>
 80093ac:	2100      	movs	r1, #0
 80093ae:	f3af 8000 	nop.w
 80093b2:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <exit+0x24>)
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80093b8:	b103      	cbz	r3, 80093bc <exit+0x18>
 80093ba:	4798      	blx	r3
 80093bc:	4620      	mov	r0, r4
 80093be:	f7f8 f87f 	bl	80014c0 <_exit>
 80093c2:	bf00      	nop
 80093c4:	00000000 	.word	0x00000000
 80093c8:	08009e28 	.word	0x08009e28

080093cc <__libc_init_array>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	4d0d      	ldr	r5, [pc, #52]	; (8009404 <__libc_init_array+0x38>)
 80093d0:	4c0d      	ldr	r4, [pc, #52]	; (8009408 <__libc_init_array+0x3c>)
 80093d2:	1b64      	subs	r4, r4, r5
 80093d4:	10a4      	asrs	r4, r4, #2
 80093d6:	2600      	movs	r6, #0
 80093d8:	42a6      	cmp	r6, r4
 80093da:	d109      	bne.n	80093f0 <__libc_init_array+0x24>
 80093dc:	4d0b      	ldr	r5, [pc, #44]	; (800940c <__libc_init_array+0x40>)
 80093de:	4c0c      	ldr	r4, [pc, #48]	; (8009410 <__libc_init_array+0x44>)
 80093e0:	f000 fc8e 	bl	8009d00 <_init>
 80093e4:	1b64      	subs	r4, r4, r5
 80093e6:	10a4      	asrs	r4, r4, #2
 80093e8:	2600      	movs	r6, #0
 80093ea:	42a6      	cmp	r6, r4
 80093ec:	d105      	bne.n	80093fa <__libc_init_array+0x2e>
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f4:	4798      	blx	r3
 80093f6:	3601      	adds	r6, #1
 80093f8:	e7ee      	b.n	80093d8 <__libc_init_array+0xc>
 80093fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fe:	4798      	blx	r3
 8009400:	3601      	adds	r6, #1
 8009402:	e7f2      	b.n	80093ea <__libc_init_array+0x1e>
 8009404:	08009e68 	.word	0x08009e68
 8009408:	08009e68 	.word	0x08009e68
 800940c:	08009e68 	.word	0x08009e68
 8009410:	08009e6c 	.word	0x08009e6c

08009414 <memset>:
 8009414:	4402      	add	r2, r0
 8009416:	4603      	mov	r3, r0
 8009418:	4293      	cmp	r3, r2
 800941a:	d100      	bne.n	800941e <memset+0xa>
 800941c:	4770      	bx	lr
 800941e:	f803 1b01 	strb.w	r1, [r3], #1
 8009422:	e7f9      	b.n	8009418 <memset+0x4>

08009424 <_free_r>:
 8009424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009426:	2900      	cmp	r1, #0
 8009428:	d044      	beq.n	80094b4 <_free_r+0x90>
 800942a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800942e:	9001      	str	r0, [sp, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f1a1 0404 	sub.w	r4, r1, #4
 8009436:	bfb8      	it	lt
 8009438:	18e4      	addlt	r4, r4, r3
 800943a:	f000 f903 	bl	8009644 <__malloc_lock>
 800943e:	4a1e      	ldr	r2, [pc, #120]	; (80094b8 <_free_r+0x94>)
 8009440:	9801      	ldr	r0, [sp, #4]
 8009442:	6813      	ldr	r3, [r2, #0]
 8009444:	b933      	cbnz	r3, 8009454 <_free_r+0x30>
 8009446:	6063      	str	r3, [r4, #4]
 8009448:	6014      	str	r4, [r2, #0]
 800944a:	b003      	add	sp, #12
 800944c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009450:	f000 b8fe 	b.w	8009650 <__malloc_unlock>
 8009454:	42a3      	cmp	r3, r4
 8009456:	d908      	bls.n	800946a <_free_r+0x46>
 8009458:	6825      	ldr	r5, [r4, #0]
 800945a:	1961      	adds	r1, r4, r5
 800945c:	428b      	cmp	r3, r1
 800945e:	bf01      	itttt	eq
 8009460:	6819      	ldreq	r1, [r3, #0]
 8009462:	685b      	ldreq	r3, [r3, #4]
 8009464:	1949      	addeq	r1, r1, r5
 8009466:	6021      	streq	r1, [r4, #0]
 8009468:	e7ed      	b.n	8009446 <_free_r+0x22>
 800946a:	461a      	mov	r2, r3
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	b10b      	cbz	r3, 8009474 <_free_r+0x50>
 8009470:	42a3      	cmp	r3, r4
 8009472:	d9fa      	bls.n	800946a <_free_r+0x46>
 8009474:	6811      	ldr	r1, [r2, #0]
 8009476:	1855      	adds	r5, r2, r1
 8009478:	42a5      	cmp	r5, r4
 800947a:	d10b      	bne.n	8009494 <_free_r+0x70>
 800947c:	6824      	ldr	r4, [r4, #0]
 800947e:	4421      	add	r1, r4
 8009480:	1854      	adds	r4, r2, r1
 8009482:	42a3      	cmp	r3, r4
 8009484:	6011      	str	r1, [r2, #0]
 8009486:	d1e0      	bne.n	800944a <_free_r+0x26>
 8009488:	681c      	ldr	r4, [r3, #0]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	6053      	str	r3, [r2, #4]
 800948e:	4421      	add	r1, r4
 8009490:	6011      	str	r1, [r2, #0]
 8009492:	e7da      	b.n	800944a <_free_r+0x26>
 8009494:	d902      	bls.n	800949c <_free_r+0x78>
 8009496:	230c      	movs	r3, #12
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	e7d6      	b.n	800944a <_free_r+0x26>
 800949c:	6825      	ldr	r5, [r4, #0]
 800949e:	1961      	adds	r1, r4, r5
 80094a0:	428b      	cmp	r3, r1
 80094a2:	bf04      	itt	eq
 80094a4:	6819      	ldreq	r1, [r3, #0]
 80094a6:	685b      	ldreq	r3, [r3, #4]
 80094a8:	6063      	str	r3, [r4, #4]
 80094aa:	bf04      	itt	eq
 80094ac:	1949      	addeq	r1, r1, r5
 80094ae:	6021      	streq	r1, [r4, #0]
 80094b0:	6054      	str	r4, [r2, #4]
 80094b2:	e7ca      	b.n	800944a <_free_r+0x26>
 80094b4:	b003      	add	sp, #12
 80094b6:	bd30      	pop	{r4, r5, pc}
 80094b8:	20000d50 	.word	0x20000d50

080094bc <sbrk_aligned>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	4e0e      	ldr	r6, [pc, #56]	; (80094f8 <sbrk_aligned+0x3c>)
 80094c0:	460c      	mov	r4, r1
 80094c2:	6831      	ldr	r1, [r6, #0]
 80094c4:	4605      	mov	r5, r0
 80094c6:	b911      	cbnz	r1, 80094ce <sbrk_aligned+0x12>
 80094c8:	f000 f88c 	bl	80095e4 <_sbrk_r>
 80094cc:	6030      	str	r0, [r6, #0]
 80094ce:	4621      	mov	r1, r4
 80094d0:	4628      	mov	r0, r5
 80094d2:	f000 f887 	bl	80095e4 <_sbrk_r>
 80094d6:	1c43      	adds	r3, r0, #1
 80094d8:	d00a      	beq.n	80094f0 <sbrk_aligned+0x34>
 80094da:	1cc4      	adds	r4, r0, #3
 80094dc:	f024 0403 	bic.w	r4, r4, #3
 80094e0:	42a0      	cmp	r0, r4
 80094e2:	d007      	beq.n	80094f4 <sbrk_aligned+0x38>
 80094e4:	1a21      	subs	r1, r4, r0
 80094e6:	4628      	mov	r0, r5
 80094e8:	f000 f87c 	bl	80095e4 <_sbrk_r>
 80094ec:	3001      	adds	r0, #1
 80094ee:	d101      	bne.n	80094f4 <sbrk_aligned+0x38>
 80094f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80094f4:	4620      	mov	r0, r4
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	20000d54 	.word	0x20000d54

080094fc <_malloc_r>:
 80094fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009500:	1ccd      	adds	r5, r1, #3
 8009502:	f025 0503 	bic.w	r5, r5, #3
 8009506:	3508      	adds	r5, #8
 8009508:	2d0c      	cmp	r5, #12
 800950a:	bf38      	it	cc
 800950c:	250c      	movcc	r5, #12
 800950e:	2d00      	cmp	r5, #0
 8009510:	4607      	mov	r7, r0
 8009512:	db01      	blt.n	8009518 <_malloc_r+0x1c>
 8009514:	42a9      	cmp	r1, r5
 8009516:	d905      	bls.n	8009524 <_malloc_r+0x28>
 8009518:	230c      	movs	r3, #12
 800951a:	603b      	str	r3, [r7, #0]
 800951c:	2600      	movs	r6, #0
 800951e:	4630      	mov	r0, r6
 8009520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009524:	4e2e      	ldr	r6, [pc, #184]	; (80095e0 <_malloc_r+0xe4>)
 8009526:	f000 f88d 	bl	8009644 <__malloc_lock>
 800952a:	6833      	ldr	r3, [r6, #0]
 800952c:	461c      	mov	r4, r3
 800952e:	bb34      	cbnz	r4, 800957e <_malloc_r+0x82>
 8009530:	4629      	mov	r1, r5
 8009532:	4638      	mov	r0, r7
 8009534:	f7ff ffc2 	bl	80094bc <sbrk_aligned>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	4604      	mov	r4, r0
 800953c:	d14d      	bne.n	80095da <_malloc_r+0xde>
 800953e:	6834      	ldr	r4, [r6, #0]
 8009540:	4626      	mov	r6, r4
 8009542:	2e00      	cmp	r6, #0
 8009544:	d140      	bne.n	80095c8 <_malloc_r+0xcc>
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	4631      	mov	r1, r6
 800954a:	4638      	mov	r0, r7
 800954c:	eb04 0803 	add.w	r8, r4, r3
 8009550:	f000 f848 	bl	80095e4 <_sbrk_r>
 8009554:	4580      	cmp	r8, r0
 8009556:	d13a      	bne.n	80095ce <_malloc_r+0xd2>
 8009558:	6821      	ldr	r1, [r4, #0]
 800955a:	3503      	adds	r5, #3
 800955c:	1a6d      	subs	r5, r5, r1
 800955e:	f025 0503 	bic.w	r5, r5, #3
 8009562:	3508      	adds	r5, #8
 8009564:	2d0c      	cmp	r5, #12
 8009566:	bf38      	it	cc
 8009568:	250c      	movcc	r5, #12
 800956a:	4629      	mov	r1, r5
 800956c:	4638      	mov	r0, r7
 800956e:	f7ff ffa5 	bl	80094bc <sbrk_aligned>
 8009572:	3001      	adds	r0, #1
 8009574:	d02b      	beq.n	80095ce <_malloc_r+0xd2>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	442b      	add	r3, r5
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	e00e      	b.n	800959c <_malloc_r+0xa0>
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	1b52      	subs	r2, r2, r5
 8009582:	d41e      	bmi.n	80095c2 <_malloc_r+0xc6>
 8009584:	2a0b      	cmp	r2, #11
 8009586:	d916      	bls.n	80095b6 <_malloc_r+0xba>
 8009588:	1961      	adds	r1, r4, r5
 800958a:	42a3      	cmp	r3, r4
 800958c:	6025      	str	r5, [r4, #0]
 800958e:	bf18      	it	ne
 8009590:	6059      	strne	r1, [r3, #4]
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	bf08      	it	eq
 8009596:	6031      	streq	r1, [r6, #0]
 8009598:	5162      	str	r2, [r4, r5]
 800959a:	604b      	str	r3, [r1, #4]
 800959c:	4638      	mov	r0, r7
 800959e:	f104 060b 	add.w	r6, r4, #11
 80095a2:	f000 f855 	bl	8009650 <__malloc_unlock>
 80095a6:	f026 0607 	bic.w	r6, r6, #7
 80095aa:	1d23      	adds	r3, r4, #4
 80095ac:	1af2      	subs	r2, r6, r3
 80095ae:	d0b6      	beq.n	800951e <_malloc_r+0x22>
 80095b0:	1b9b      	subs	r3, r3, r6
 80095b2:	50a3      	str	r3, [r4, r2]
 80095b4:	e7b3      	b.n	800951e <_malloc_r+0x22>
 80095b6:	6862      	ldr	r2, [r4, #4]
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	bf0c      	ite	eq
 80095bc:	6032      	streq	r2, [r6, #0]
 80095be:	605a      	strne	r2, [r3, #4]
 80095c0:	e7ec      	b.n	800959c <_malloc_r+0xa0>
 80095c2:	4623      	mov	r3, r4
 80095c4:	6864      	ldr	r4, [r4, #4]
 80095c6:	e7b2      	b.n	800952e <_malloc_r+0x32>
 80095c8:	4634      	mov	r4, r6
 80095ca:	6876      	ldr	r6, [r6, #4]
 80095cc:	e7b9      	b.n	8009542 <_malloc_r+0x46>
 80095ce:	230c      	movs	r3, #12
 80095d0:	603b      	str	r3, [r7, #0]
 80095d2:	4638      	mov	r0, r7
 80095d4:	f000 f83c 	bl	8009650 <__malloc_unlock>
 80095d8:	e7a1      	b.n	800951e <_malloc_r+0x22>
 80095da:	6025      	str	r5, [r4, #0]
 80095dc:	e7de      	b.n	800959c <_malloc_r+0xa0>
 80095de:	bf00      	nop
 80095e0:	20000d50 	.word	0x20000d50

080095e4 <_sbrk_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d06      	ldr	r5, [pc, #24]	; (8009600 <_sbrk_r+0x1c>)
 80095e8:	2300      	movs	r3, #0
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7f7 ff70 	bl	80014d4 <_sbrk>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_sbrk_r+0x1a>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_sbrk_r+0x1a>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	20000d58 	.word	0x20000d58

08009604 <siprintf>:
 8009604:	b40e      	push	{r1, r2, r3}
 8009606:	b500      	push	{lr}
 8009608:	b09c      	sub	sp, #112	; 0x70
 800960a:	ab1d      	add	r3, sp, #116	; 0x74
 800960c:	9002      	str	r0, [sp, #8]
 800960e:	9006      	str	r0, [sp, #24]
 8009610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009614:	4809      	ldr	r0, [pc, #36]	; (800963c <siprintf+0x38>)
 8009616:	9107      	str	r1, [sp, #28]
 8009618:	9104      	str	r1, [sp, #16]
 800961a:	4909      	ldr	r1, [pc, #36]	; (8009640 <siprintf+0x3c>)
 800961c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009620:	9105      	str	r1, [sp, #20]
 8009622:	6800      	ldr	r0, [r0, #0]
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	a902      	add	r1, sp, #8
 8009628:	f000 f874 	bl	8009714 <_svfiprintf_r>
 800962c:	9b02      	ldr	r3, [sp, #8]
 800962e:	2200      	movs	r2, #0
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	b01c      	add	sp, #112	; 0x70
 8009634:	f85d eb04 	ldr.w	lr, [sp], #4
 8009638:	b003      	add	sp, #12
 800963a:	4770      	bx	lr
 800963c:	20000010 	.word	0x20000010
 8009640:	ffff0208 	.word	0xffff0208

08009644 <__malloc_lock>:
 8009644:	4801      	ldr	r0, [pc, #4]	; (800964c <__malloc_lock+0x8>)
 8009646:	f000 baf9 	b.w	8009c3c <__retarget_lock_acquire_recursive>
 800964a:	bf00      	nop
 800964c:	20000d5c 	.word	0x20000d5c

08009650 <__malloc_unlock>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__malloc_unlock+0x8>)
 8009652:	f000 baf4 	b.w	8009c3e <__retarget_lock_release_recursive>
 8009656:	bf00      	nop
 8009658:	20000d5c 	.word	0x20000d5c

0800965c <__ssputs_r>:
 800965c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009660:	688e      	ldr	r6, [r1, #8]
 8009662:	429e      	cmp	r6, r3
 8009664:	4682      	mov	sl, r0
 8009666:	460c      	mov	r4, r1
 8009668:	4690      	mov	r8, r2
 800966a:	461f      	mov	r7, r3
 800966c:	d838      	bhi.n	80096e0 <__ssputs_r+0x84>
 800966e:	898a      	ldrh	r2, [r1, #12]
 8009670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009674:	d032      	beq.n	80096dc <__ssputs_r+0x80>
 8009676:	6825      	ldr	r5, [r4, #0]
 8009678:	6909      	ldr	r1, [r1, #16]
 800967a:	eba5 0901 	sub.w	r9, r5, r1
 800967e:	6965      	ldr	r5, [r4, #20]
 8009680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009688:	3301      	adds	r3, #1
 800968a:	444b      	add	r3, r9
 800968c:	106d      	asrs	r5, r5, #1
 800968e:	429d      	cmp	r5, r3
 8009690:	bf38      	it	cc
 8009692:	461d      	movcc	r5, r3
 8009694:	0553      	lsls	r3, r2, #21
 8009696:	d531      	bpl.n	80096fc <__ssputs_r+0xa0>
 8009698:	4629      	mov	r1, r5
 800969a:	f7ff ff2f 	bl	80094fc <_malloc_r>
 800969e:	4606      	mov	r6, r0
 80096a0:	b950      	cbnz	r0, 80096b8 <__ssputs_r+0x5c>
 80096a2:	230c      	movs	r3, #12
 80096a4:	f8ca 3000 	str.w	r3, [sl]
 80096a8:	89a3      	ldrh	r3, [r4, #12]
 80096aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ae:	81a3      	strh	r3, [r4, #12]
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b8:	6921      	ldr	r1, [r4, #16]
 80096ba:	464a      	mov	r2, r9
 80096bc:	f000 fac0 	bl	8009c40 <memcpy>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ca:	81a3      	strh	r3, [r4, #12]
 80096cc:	6126      	str	r6, [r4, #16]
 80096ce:	6165      	str	r5, [r4, #20]
 80096d0:	444e      	add	r6, r9
 80096d2:	eba5 0509 	sub.w	r5, r5, r9
 80096d6:	6026      	str	r6, [r4, #0]
 80096d8:	60a5      	str	r5, [r4, #8]
 80096da:	463e      	mov	r6, r7
 80096dc:	42be      	cmp	r6, r7
 80096de:	d900      	bls.n	80096e2 <__ssputs_r+0x86>
 80096e0:	463e      	mov	r6, r7
 80096e2:	6820      	ldr	r0, [r4, #0]
 80096e4:	4632      	mov	r2, r6
 80096e6:	4641      	mov	r1, r8
 80096e8:	f000 fab8 	bl	8009c5c <memmove>
 80096ec:	68a3      	ldr	r3, [r4, #8]
 80096ee:	1b9b      	subs	r3, r3, r6
 80096f0:	60a3      	str	r3, [r4, #8]
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	4433      	add	r3, r6
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	2000      	movs	r0, #0
 80096fa:	e7db      	b.n	80096b4 <__ssputs_r+0x58>
 80096fc:	462a      	mov	r2, r5
 80096fe:	f000 fac7 	bl	8009c90 <_realloc_r>
 8009702:	4606      	mov	r6, r0
 8009704:	2800      	cmp	r0, #0
 8009706:	d1e1      	bne.n	80096cc <__ssputs_r+0x70>
 8009708:	6921      	ldr	r1, [r4, #16]
 800970a:	4650      	mov	r0, sl
 800970c:	f7ff fe8a 	bl	8009424 <_free_r>
 8009710:	e7c7      	b.n	80096a2 <__ssputs_r+0x46>
	...

08009714 <_svfiprintf_r>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	4698      	mov	r8, r3
 800971a:	898b      	ldrh	r3, [r1, #12]
 800971c:	061b      	lsls	r3, r3, #24
 800971e:	b09d      	sub	sp, #116	; 0x74
 8009720:	4607      	mov	r7, r0
 8009722:	460d      	mov	r5, r1
 8009724:	4614      	mov	r4, r2
 8009726:	d50e      	bpl.n	8009746 <_svfiprintf_r+0x32>
 8009728:	690b      	ldr	r3, [r1, #16]
 800972a:	b963      	cbnz	r3, 8009746 <_svfiprintf_r+0x32>
 800972c:	2140      	movs	r1, #64	; 0x40
 800972e:	f7ff fee5 	bl	80094fc <_malloc_r>
 8009732:	6028      	str	r0, [r5, #0]
 8009734:	6128      	str	r0, [r5, #16]
 8009736:	b920      	cbnz	r0, 8009742 <_svfiprintf_r+0x2e>
 8009738:	230c      	movs	r3, #12
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009740:	e0d1      	b.n	80098e6 <_svfiprintf_r+0x1d2>
 8009742:	2340      	movs	r3, #64	; 0x40
 8009744:	616b      	str	r3, [r5, #20]
 8009746:	2300      	movs	r3, #0
 8009748:	9309      	str	r3, [sp, #36]	; 0x24
 800974a:	2320      	movs	r3, #32
 800974c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009750:	f8cd 800c 	str.w	r8, [sp, #12]
 8009754:	2330      	movs	r3, #48	; 0x30
 8009756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009900 <_svfiprintf_r+0x1ec>
 800975a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800975e:	f04f 0901 	mov.w	r9, #1
 8009762:	4623      	mov	r3, r4
 8009764:	469a      	mov	sl, r3
 8009766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800976a:	b10a      	cbz	r2, 8009770 <_svfiprintf_r+0x5c>
 800976c:	2a25      	cmp	r2, #37	; 0x25
 800976e:	d1f9      	bne.n	8009764 <_svfiprintf_r+0x50>
 8009770:	ebba 0b04 	subs.w	fp, sl, r4
 8009774:	d00b      	beq.n	800978e <_svfiprintf_r+0x7a>
 8009776:	465b      	mov	r3, fp
 8009778:	4622      	mov	r2, r4
 800977a:	4629      	mov	r1, r5
 800977c:	4638      	mov	r0, r7
 800977e:	f7ff ff6d 	bl	800965c <__ssputs_r>
 8009782:	3001      	adds	r0, #1
 8009784:	f000 80aa 	beq.w	80098dc <_svfiprintf_r+0x1c8>
 8009788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800978a:	445a      	add	r2, fp
 800978c:	9209      	str	r2, [sp, #36]	; 0x24
 800978e:	f89a 3000 	ldrb.w	r3, [sl]
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 80a2 	beq.w	80098dc <_svfiprintf_r+0x1c8>
 8009798:	2300      	movs	r3, #0
 800979a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800979e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097a2:	f10a 0a01 	add.w	sl, sl, #1
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	9307      	str	r3, [sp, #28]
 80097aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ae:	931a      	str	r3, [sp, #104]	; 0x68
 80097b0:	4654      	mov	r4, sl
 80097b2:	2205      	movs	r2, #5
 80097b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b8:	4851      	ldr	r0, [pc, #324]	; (8009900 <_svfiprintf_r+0x1ec>)
 80097ba:	f7f6 fd29 	bl	8000210 <memchr>
 80097be:	9a04      	ldr	r2, [sp, #16]
 80097c0:	b9d8      	cbnz	r0, 80097fa <_svfiprintf_r+0xe6>
 80097c2:	06d0      	lsls	r0, r2, #27
 80097c4:	bf44      	itt	mi
 80097c6:	2320      	movmi	r3, #32
 80097c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097cc:	0711      	lsls	r1, r2, #28
 80097ce:	bf44      	itt	mi
 80097d0:	232b      	movmi	r3, #43	; 0x2b
 80097d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097d6:	f89a 3000 	ldrb.w	r3, [sl]
 80097da:	2b2a      	cmp	r3, #42	; 0x2a
 80097dc:	d015      	beq.n	800980a <_svfiprintf_r+0xf6>
 80097de:	9a07      	ldr	r2, [sp, #28]
 80097e0:	4654      	mov	r4, sl
 80097e2:	2000      	movs	r0, #0
 80097e4:	f04f 0c0a 	mov.w	ip, #10
 80097e8:	4621      	mov	r1, r4
 80097ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ee:	3b30      	subs	r3, #48	; 0x30
 80097f0:	2b09      	cmp	r3, #9
 80097f2:	d94e      	bls.n	8009892 <_svfiprintf_r+0x17e>
 80097f4:	b1b0      	cbz	r0, 8009824 <_svfiprintf_r+0x110>
 80097f6:	9207      	str	r2, [sp, #28]
 80097f8:	e014      	b.n	8009824 <_svfiprintf_r+0x110>
 80097fa:	eba0 0308 	sub.w	r3, r0, r8
 80097fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009802:	4313      	orrs	r3, r2
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	46a2      	mov	sl, r4
 8009808:	e7d2      	b.n	80097b0 <_svfiprintf_r+0x9c>
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	1d19      	adds	r1, r3, #4
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	9103      	str	r1, [sp, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	bfbb      	ittet	lt
 8009816:	425b      	neglt	r3, r3
 8009818:	f042 0202 	orrlt.w	r2, r2, #2
 800981c:	9307      	strge	r3, [sp, #28]
 800981e:	9307      	strlt	r3, [sp, #28]
 8009820:	bfb8      	it	lt
 8009822:	9204      	strlt	r2, [sp, #16]
 8009824:	7823      	ldrb	r3, [r4, #0]
 8009826:	2b2e      	cmp	r3, #46	; 0x2e
 8009828:	d10c      	bne.n	8009844 <_svfiprintf_r+0x130>
 800982a:	7863      	ldrb	r3, [r4, #1]
 800982c:	2b2a      	cmp	r3, #42	; 0x2a
 800982e:	d135      	bne.n	800989c <_svfiprintf_r+0x188>
 8009830:	9b03      	ldr	r3, [sp, #12]
 8009832:	1d1a      	adds	r2, r3, #4
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	9203      	str	r2, [sp, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	bfb8      	it	lt
 800983c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009840:	3402      	adds	r4, #2
 8009842:	9305      	str	r3, [sp, #20]
 8009844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009910 <_svfiprintf_r+0x1fc>
 8009848:	7821      	ldrb	r1, [r4, #0]
 800984a:	2203      	movs	r2, #3
 800984c:	4650      	mov	r0, sl
 800984e:	f7f6 fcdf 	bl	8000210 <memchr>
 8009852:	b140      	cbz	r0, 8009866 <_svfiprintf_r+0x152>
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	eba0 000a 	sub.w	r0, r0, sl
 800985a:	fa03 f000 	lsl.w	r0, r3, r0
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	4303      	orrs	r3, r0
 8009862:	3401      	adds	r4, #1
 8009864:	9304      	str	r3, [sp, #16]
 8009866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800986a:	4826      	ldr	r0, [pc, #152]	; (8009904 <_svfiprintf_r+0x1f0>)
 800986c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009870:	2206      	movs	r2, #6
 8009872:	f7f6 fccd 	bl	8000210 <memchr>
 8009876:	2800      	cmp	r0, #0
 8009878:	d038      	beq.n	80098ec <_svfiprintf_r+0x1d8>
 800987a:	4b23      	ldr	r3, [pc, #140]	; (8009908 <_svfiprintf_r+0x1f4>)
 800987c:	bb1b      	cbnz	r3, 80098c6 <_svfiprintf_r+0x1b2>
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	3307      	adds	r3, #7
 8009882:	f023 0307 	bic.w	r3, r3, #7
 8009886:	3308      	adds	r3, #8
 8009888:	9303      	str	r3, [sp, #12]
 800988a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988c:	4433      	add	r3, r6
 800988e:	9309      	str	r3, [sp, #36]	; 0x24
 8009890:	e767      	b.n	8009762 <_svfiprintf_r+0x4e>
 8009892:	fb0c 3202 	mla	r2, ip, r2, r3
 8009896:	460c      	mov	r4, r1
 8009898:	2001      	movs	r0, #1
 800989a:	e7a5      	b.n	80097e8 <_svfiprintf_r+0xd4>
 800989c:	2300      	movs	r3, #0
 800989e:	3401      	adds	r4, #1
 80098a0:	9305      	str	r3, [sp, #20]
 80098a2:	4619      	mov	r1, r3
 80098a4:	f04f 0c0a 	mov.w	ip, #10
 80098a8:	4620      	mov	r0, r4
 80098aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ae:	3a30      	subs	r2, #48	; 0x30
 80098b0:	2a09      	cmp	r2, #9
 80098b2:	d903      	bls.n	80098bc <_svfiprintf_r+0x1a8>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0c5      	beq.n	8009844 <_svfiprintf_r+0x130>
 80098b8:	9105      	str	r1, [sp, #20]
 80098ba:	e7c3      	b.n	8009844 <_svfiprintf_r+0x130>
 80098bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80098c0:	4604      	mov	r4, r0
 80098c2:	2301      	movs	r3, #1
 80098c4:	e7f0      	b.n	80098a8 <_svfiprintf_r+0x194>
 80098c6:	ab03      	add	r3, sp, #12
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	462a      	mov	r2, r5
 80098cc:	4b0f      	ldr	r3, [pc, #60]	; (800990c <_svfiprintf_r+0x1f8>)
 80098ce:	a904      	add	r1, sp, #16
 80098d0:	4638      	mov	r0, r7
 80098d2:	f3af 8000 	nop.w
 80098d6:	1c42      	adds	r2, r0, #1
 80098d8:	4606      	mov	r6, r0
 80098da:	d1d6      	bne.n	800988a <_svfiprintf_r+0x176>
 80098dc:	89ab      	ldrh	r3, [r5, #12]
 80098de:	065b      	lsls	r3, r3, #25
 80098e0:	f53f af2c 	bmi.w	800973c <_svfiprintf_r+0x28>
 80098e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098e6:	b01d      	add	sp, #116	; 0x74
 80098e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	ab03      	add	r3, sp, #12
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	462a      	mov	r2, r5
 80098f2:	4b06      	ldr	r3, [pc, #24]	; (800990c <_svfiprintf_r+0x1f8>)
 80098f4:	a904      	add	r1, sp, #16
 80098f6:	4638      	mov	r0, r7
 80098f8:	f000 f87a 	bl	80099f0 <_printf_i>
 80098fc:	e7eb      	b.n	80098d6 <_svfiprintf_r+0x1c2>
 80098fe:	bf00      	nop
 8009900:	08009e2c 	.word	0x08009e2c
 8009904:	08009e36 	.word	0x08009e36
 8009908:	00000000 	.word	0x00000000
 800990c:	0800965d 	.word	0x0800965d
 8009910:	08009e32 	.word	0x08009e32

08009914 <_printf_common>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	4616      	mov	r6, r2
 800991a:	4699      	mov	r9, r3
 800991c:	688a      	ldr	r2, [r1, #8]
 800991e:	690b      	ldr	r3, [r1, #16]
 8009920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009924:	4293      	cmp	r3, r2
 8009926:	bfb8      	it	lt
 8009928:	4613      	movlt	r3, r2
 800992a:	6033      	str	r3, [r6, #0]
 800992c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009930:	4607      	mov	r7, r0
 8009932:	460c      	mov	r4, r1
 8009934:	b10a      	cbz	r2, 800993a <_printf_common+0x26>
 8009936:	3301      	adds	r3, #1
 8009938:	6033      	str	r3, [r6, #0]
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	0699      	lsls	r1, r3, #26
 800993e:	bf42      	ittt	mi
 8009940:	6833      	ldrmi	r3, [r6, #0]
 8009942:	3302      	addmi	r3, #2
 8009944:	6033      	strmi	r3, [r6, #0]
 8009946:	6825      	ldr	r5, [r4, #0]
 8009948:	f015 0506 	ands.w	r5, r5, #6
 800994c:	d106      	bne.n	800995c <_printf_common+0x48>
 800994e:	f104 0a19 	add.w	sl, r4, #25
 8009952:	68e3      	ldr	r3, [r4, #12]
 8009954:	6832      	ldr	r2, [r6, #0]
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	42ab      	cmp	r3, r5
 800995a:	dc26      	bgt.n	80099aa <_printf_common+0x96>
 800995c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009960:	1e13      	subs	r3, r2, #0
 8009962:	6822      	ldr	r2, [r4, #0]
 8009964:	bf18      	it	ne
 8009966:	2301      	movne	r3, #1
 8009968:	0692      	lsls	r2, r2, #26
 800996a:	d42b      	bmi.n	80099c4 <_printf_common+0xb0>
 800996c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009970:	4649      	mov	r1, r9
 8009972:	4638      	mov	r0, r7
 8009974:	47c0      	blx	r8
 8009976:	3001      	adds	r0, #1
 8009978:	d01e      	beq.n	80099b8 <_printf_common+0xa4>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	68e5      	ldr	r5, [r4, #12]
 800997e:	6832      	ldr	r2, [r6, #0]
 8009980:	f003 0306 	and.w	r3, r3, #6
 8009984:	2b04      	cmp	r3, #4
 8009986:	bf08      	it	eq
 8009988:	1aad      	subeq	r5, r5, r2
 800998a:	68a3      	ldr	r3, [r4, #8]
 800998c:	6922      	ldr	r2, [r4, #16]
 800998e:	bf0c      	ite	eq
 8009990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009994:	2500      	movne	r5, #0
 8009996:	4293      	cmp	r3, r2
 8009998:	bfc4      	itt	gt
 800999a:	1a9b      	subgt	r3, r3, r2
 800999c:	18ed      	addgt	r5, r5, r3
 800999e:	2600      	movs	r6, #0
 80099a0:	341a      	adds	r4, #26
 80099a2:	42b5      	cmp	r5, r6
 80099a4:	d11a      	bne.n	80099dc <_printf_common+0xc8>
 80099a6:	2000      	movs	r0, #0
 80099a8:	e008      	b.n	80099bc <_printf_common+0xa8>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4652      	mov	r2, sl
 80099ae:	4649      	mov	r1, r9
 80099b0:	4638      	mov	r0, r7
 80099b2:	47c0      	blx	r8
 80099b4:	3001      	adds	r0, #1
 80099b6:	d103      	bne.n	80099c0 <_printf_common+0xac>
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c0:	3501      	adds	r5, #1
 80099c2:	e7c6      	b.n	8009952 <_printf_common+0x3e>
 80099c4:	18e1      	adds	r1, r4, r3
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	2030      	movs	r0, #48	; 0x30
 80099ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099ce:	4422      	add	r2, r4
 80099d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099d8:	3302      	adds	r3, #2
 80099da:	e7c7      	b.n	800996c <_printf_common+0x58>
 80099dc:	2301      	movs	r3, #1
 80099de:	4622      	mov	r2, r4
 80099e0:	4649      	mov	r1, r9
 80099e2:	4638      	mov	r0, r7
 80099e4:	47c0      	blx	r8
 80099e6:	3001      	adds	r0, #1
 80099e8:	d0e6      	beq.n	80099b8 <_printf_common+0xa4>
 80099ea:	3601      	adds	r6, #1
 80099ec:	e7d9      	b.n	80099a2 <_printf_common+0x8e>
	...

080099f0 <_printf_i>:
 80099f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f4:	7e0f      	ldrb	r7, [r1, #24]
 80099f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099f8:	2f78      	cmp	r7, #120	; 0x78
 80099fa:	4691      	mov	r9, r2
 80099fc:	4680      	mov	r8, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	469a      	mov	sl, r3
 8009a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a06:	d807      	bhi.n	8009a18 <_printf_i+0x28>
 8009a08:	2f62      	cmp	r7, #98	; 0x62
 8009a0a:	d80a      	bhi.n	8009a22 <_printf_i+0x32>
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	f000 80d8 	beq.w	8009bc2 <_printf_i+0x1d2>
 8009a12:	2f58      	cmp	r7, #88	; 0x58
 8009a14:	f000 80a3 	beq.w	8009b5e <_printf_i+0x16e>
 8009a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a20:	e03a      	b.n	8009a98 <_printf_i+0xa8>
 8009a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a26:	2b15      	cmp	r3, #21
 8009a28:	d8f6      	bhi.n	8009a18 <_printf_i+0x28>
 8009a2a:	a101      	add	r1, pc, #4	; (adr r1, 8009a30 <_printf_i+0x40>)
 8009a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a30:	08009a89 	.word	0x08009a89
 8009a34:	08009a9d 	.word	0x08009a9d
 8009a38:	08009a19 	.word	0x08009a19
 8009a3c:	08009a19 	.word	0x08009a19
 8009a40:	08009a19 	.word	0x08009a19
 8009a44:	08009a19 	.word	0x08009a19
 8009a48:	08009a9d 	.word	0x08009a9d
 8009a4c:	08009a19 	.word	0x08009a19
 8009a50:	08009a19 	.word	0x08009a19
 8009a54:	08009a19 	.word	0x08009a19
 8009a58:	08009a19 	.word	0x08009a19
 8009a5c:	08009ba9 	.word	0x08009ba9
 8009a60:	08009acd 	.word	0x08009acd
 8009a64:	08009b8b 	.word	0x08009b8b
 8009a68:	08009a19 	.word	0x08009a19
 8009a6c:	08009a19 	.word	0x08009a19
 8009a70:	08009bcb 	.word	0x08009bcb
 8009a74:	08009a19 	.word	0x08009a19
 8009a78:	08009acd 	.word	0x08009acd
 8009a7c:	08009a19 	.word	0x08009a19
 8009a80:	08009a19 	.word	0x08009a19
 8009a84:	08009b93 	.word	0x08009b93
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	1d1a      	adds	r2, r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	602a      	str	r2, [r5, #0]
 8009a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e0a3      	b.n	8009be4 <_printf_i+0x1f4>
 8009a9c:	6820      	ldr	r0, [r4, #0]
 8009a9e:	6829      	ldr	r1, [r5, #0]
 8009aa0:	0606      	lsls	r6, r0, #24
 8009aa2:	f101 0304 	add.w	r3, r1, #4
 8009aa6:	d50a      	bpl.n	8009abe <_printf_i+0xce>
 8009aa8:	680e      	ldr	r6, [r1, #0]
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	2e00      	cmp	r6, #0
 8009aae:	da03      	bge.n	8009ab8 <_printf_i+0xc8>
 8009ab0:	232d      	movs	r3, #45	; 0x2d
 8009ab2:	4276      	negs	r6, r6
 8009ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab8:	485e      	ldr	r0, [pc, #376]	; (8009c34 <_printf_i+0x244>)
 8009aba:	230a      	movs	r3, #10
 8009abc:	e019      	b.n	8009af2 <_printf_i+0x102>
 8009abe:	680e      	ldr	r6, [r1, #0]
 8009ac0:	602b      	str	r3, [r5, #0]
 8009ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ac6:	bf18      	it	ne
 8009ac8:	b236      	sxthne	r6, r6
 8009aca:	e7ef      	b.n	8009aac <_printf_i+0xbc>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	6820      	ldr	r0, [r4, #0]
 8009ad0:	1d19      	adds	r1, r3, #4
 8009ad2:	6029      	str	r1, [r5, #0]
 8009ad4:	0601      	lsls	r1, r0, #24
 8009ad6:	d501      	bpl.n	8009adc <_printf_i+0xec>
 8009ad8:	681e      	ldr	r6, [r3, #0]
 8009ada:	e002      	b.n	8009ae2 <_printf_i+0xf2>
 8009adc:	0646      	lsls	r6, r0, #25
 8009ade:	d5fb      	bpl.n	8009ad8 <_printf_i+0xe8>
 8009ae0:	881e      	ldrh	r6, [r3, #0]
 8009ae2:	4854      	ldr	r0, [pc, #336]	; (8009c34 <_printf_i+0x244>)
 8009ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ae6:	bf0c      	ite	eq
 8009ae8:	2308      	moveq	r3, #8
 8009aea:	230a      	movne	r3, #10
 8009aec:	2100      	movs	r1, #0
 8009aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009af2:	6865      	ldr	r5, [r4, #4]
 8009af4:	60a5      	str	r5, [r4, #8]
 8009af6:	2d00      	cmp	r5, #0
 8009af8:	bfa2      	ittt	ge
 8009afa:	6821      	ldrge	r1, [r4, #0]
 8009afc:	f021 0104 	bicge.w	r1, r1, #4
 8009b00:	6021      	strge	r1, [r4, #0]
 8009b02:	b90e      	cbnz	r6, 8009b08 <_printf_i+0x118>
 8009b04:	2d00      	cmp	r5, #0
 8009b06:	d04d      	beq.n	8009ba4 <_printf_i+0x1b4>
 8009b08:	4615      	mov	r5, r2
 8009b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8009b12:	5dc7      	ldrb	r7, [r0, r7]
 8009b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b18:	4637      	mov	r7, r6
 8009b1a:	42bb      	cmp	r3, r7
 8009b1c:	460e      	mov	r6, r1
 8009b1e:	d9f4      	bls.n	8009b0a <_printf_i+0x11a>
 8009b20:	2b08      	cmp	r3, #8
 8009b22:	d10b      	bne.n	8009b3c <_printf_i+0x14c>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	07de      	lsls	r6, r3, #31
 8009b28:	d508      	bpl.n	8009b3c <_printf_i+0x14c>
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	6861      	ldr	r1, [r4, #4]
 8009b2e:	4299      	cmp	r1, r3
 8009b30:	bfde      	ittt	le
 8009b32:	2330      	movle	r3, #48	; 0x30
 8009b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009b3c:	1b52      	subs	r2, r2, r5
 8009b3e:	6122      	str	r2, [r4, #16]
 8009b40:	f8cd a000 	str.w	sl, [sp]
 8009b44:	464b      	mov	r3, r9
 8009b46:	aa03      	add	r2, sp, #12
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	f7ff fee2 	bl	8009914 <_printf_common>
 8009b50:	3001      	adds	r0, #1
 8009b52:	d14c      	bne.n	8009bee <_printf_i+0x1fe>
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b58:	b004      	add	sp, #16
 8009b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5e:	4835      	ldr	r0, [pc, #212]	; (8009c34 <_printf_i+0x244>)
 8009b60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b64:	6829      	ldr	r1, [r5, #0]
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b6c:	6029      	str	r1, [r5, #0]
 8009b6e:	061d      	lsls	r5, r3, #24
 8009b70:	d514      	bpl.n	8009b9c <_printf_i+0x1ac>
 8009b72:	07df      	lsls	r7, r3, #31
 8009b74:	bf44      	itt	mi
 8009b76:	f043 0320 	orrmi.w	r3, r3, #32
 8009b7a:	6023      	strmi	r3, [r4, #0]
 8009b7c:	b91e      	cbnz	r6, 8009b86 <_printf_i+0x196>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	f023 0320 	bic.w	r3, r3, #32
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	2310      	movs	r3, #16
 8009b88:	e7b0      	b.n	8009aec <_printf_i+0xfc>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	f043 0320 	orr.w	r3, r3, #32
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	2378      	movs	r3, #120	; 0x78
 8009b94:	4828      	ldr	r0, [pc, #160]	; (8009c38 <_printf_i+0x248>)
 8009b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b9a:	e7e3      	b.n	8009b64 <_printf_i+0x174>
 8009b9c:	0659      	lsls	r1, r3, #25
 8009b9e:	bf48      	it	mi
 8009ba0:	b2b6      	uxthmi	r6, r6
 8009ba2:	e7e6      	b.n	8009b72 <_printf_i+0x182>
 8009ba4:	4615      	mov	r5, r2
 8009ba6:	e7bb      	b.n	8009b20 <_printf_i+0x130>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	6826      	ldr	r6, [r4, #0]
 8009bac:	6961      	ldr	r1, [r4, #20]
 8009bae:	1d18      	adds	r0, r3, #4
 8009bb0:	6028      	str	r0, [r5, #0]
 8009bb2:	0635      	lsls	r5, r6, #24
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	d501      	bpl.n	8009bbc <_printf_i+0x1cc>
 8009bb8:	6019      	str	r1, [r3, #0]
 8009bba:	e002      	b.n	8009bc2 <_printf_i+0x1d2>
 8009bbc:	0670      	lsls	r0, r6, #25
 8009bbe:	d5fb      	bpl.n	8009bb8 <_printf_i+0x1c8>
 8009bc0:	8019      	strh	r1, [r3, #0]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	6123      	str	r3, [r4, #16]
 8009bc6:	4615      	mov	r5, r2
 8009bc8:	e7ba      	b.n	8009b40 <_printf_i+0x150>
 8009bca:	682b      	ldr	r3, [r5, #0]
 8009bcc:	1d1a      	adds	r2, r3, #4
 8009bce:	602a      	str	r2, [r5, #0]
 8009bd0:	681d      	ldr	r5, [r3, #0]
 8009bd2:	6862      	ldr	r2, [r4, #4]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f7f6 fb1a 	bl	8000210 <memchr>
 8009bdc:	b108      	cbz	r0, 8009be2 <_printf_i+0x1f2>
 8009bde:	1b40      	subs	r0, r0, r5
 8009be0:	6060      	str	r0, [r4, #4]
 8009be2:	6863      	ldr	r3, [r4, #4]
 8009be4:	6123      	str	r3, [r4, #16]
 8009be6:	2300      	movs	r3, #0
 8009be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bec:	e7a8      	b.n	8009b40 <_printf_i+0x150>
 8009bee:	6923      	ldr	r3, [r4, #16]
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	47d0      	blx	sl
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d0ab      	beq.n	8009b54 <_printf_i+0x164>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	079b      	lsls	r3, r3, #30
 8009c00:	d413      	bmi.n	8009c2a <_printf_i+0x23a>
 8009c02:	68e0      	ldr	r0, [r4, #12]
 8009c04:	9b03      	ldr	r3, [sp, #12]
 8009c06:	4298      	cmp	r0, r3
 8009c08:	bfb8      	it	lt
 8009c0a:	4618      	movlt	r0, r3
 8009c0c:	e7a4      	b.n	8009b58 <_printf_i+0x168>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	4632      	mov	r2, r6
 8009c12:	4649      	mov	r1, r9
 8009c14:	4640      	mov	r0, r8
 8009c16:	47d0      	blx	sl
 8009c18:	3001      	adds	r0, #1
 8009c1a:	d09b      	beq.n	8009b54 <_printf_i+0x164>
 8009c1c:	3501      	adds	r5, #1
 8009c1e:	68e3      	ldr	r3, [r4, #12]
 8009c20:	9903      	ldr	r1, [sp, #12]
 8009c22:	1a5b      	subs	r3, r3, r1
 8009c24:	42ab      	cmp	r3, r5
 8009c26:	dcf2      	bgt.n	8009c0e <_printf_i+0x21e>
 8009c28:	e7eb      	b.n	8009c02 <_printf_i+0x212>
 8009c2a:	2500      	movs	r5, #0
 8009c2c:	f104 0619 	add.w	r6, r4, #25
 8009c30:	e7f5      	b.n	8009c1e <_printf_i+0x22e>
 8009c32:	bf00      	nop
 8009c34:	08009e3d 	.word	0x08009e3d
 8009c38:	08009e4e 	.word	0x08009e4e

08009c3c <__retarget_lock_acquire_recursive>:
 8009c3c:	4770      	bx	lr

08009c3e <__retarget_lock_release_recursive>:
 8009c3e:	4770      	bx	lr

08009c40 <memcpy>:
 8009c40:	440a      	add	r2, r1
 8009c42:	4291      	cmp	r1, r2
 8009c44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c48:	d100      	bne.n	8009c4c <memcpy+0xc>
 8009c4a:	4770      	bx	lr
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c56:	4291      	cmp	r1, r2
 8009c58:	d1f9      	bne.n	8009c4e <memcpy+0xe>
 8009c5a:	bd10      	pop	{r4, pc}

08009c5c <memmove>:
 8009c5c:	4288      	cmp	r0, r1
 8009c5e:	b510      	push	{r4, lr}
 8009c60:	eb01 0402 	add.w	r4, r1, r2
 8009c64:	d902      	bls.n	8009c6c <memmove+0x10>
 8009c66:	4284      	cmp	r4, r0
 8009c68:	4623      	mov	r3, r4
 8009c6a:	d807      	bhi.n	8009c7c <memmove+0x20>
 8009c6c:	1e43      	subs	r3, r0, #1
 8009c6e:	42a1      	cmp	r1, r4
 8009c70:	d008      	beq.n	8009c84 <memmove+0x28>
 8009c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c7a:	e7f8      	b.n	8009c6e <memmove+0x12>
 8009c7c:	4402      	add	r2, r0
 8009c7e:	4601      	mov	r1, r0
 8009c80:	428a      	cmp	r2, r1
 8009c82:	d100      	bne.n	8009c86 <memmove+0x2a>
 8009c84:	bd10      	pop	{r4, pc}
 8009c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c8e:	e7f7      	b.n	8009c80 <memmove+0x24>

08009c90 <_realloc_r>:
 8009c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c94:	4680      	mov	r8, r0
 8009c96:	4614      	mov	r4, r2
 8009c98:	460e      	mov	r6, r1
 8009c9a:	b921      	cbnz	r1, 8009ca6 <_realloc_r+0x16>
 8009c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	f7ff bc2b 	b.w	80094fc <_malloc_r>
 8009ca6:	b92a      	cbnz	r2, 8009cb4 <_realloc_r+0x24>
 8009ca8:	f7ff fbbc 	bl	8009424 <_free_r>
 8009cac:	4625      	mov	r5, r4
 8009cae:	4628      	mov	r0, r5
 8009cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb4:	f000 f81b 	bl	8009cee <_malloc_usable_size_r>
 8009cb8:	4284      	cmp	r4, r0
 8009cba:	4607      	mov	r7, r0
 8009cbc:	d802      	bhi.n	8009cc4 <_realloc_r+0x34>
 8009cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cc2:	d812      	bhi.n	8009cea <_realloc_r+0x5a>
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	f7ff fc18 	bl	80094fc <_malloc_r>
 8009ccc:	4605      	mov	r5, r0
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d0ed      	beq.n	8009cae <_realloc_r+0x1e>
 8009cd2:	42bc      	cmp	r4, r7
 8009cd4:	4622      	mov	r2, r4
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	bf28      	it	cs
 8009cda:	463a      	movcs	r2, r7
 8009cdc:	f7ff ffb0 	bl	8009c40 <memcpy>
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	f7ff fb9e 	bl	8009424 <_free_r>
 8009ce8:	e7e1      	b.n	8009cae <_realloc_r+0x1e>
 8009cea:	4635      	mov	r5, r6
 8009cec:	e7df      	b.n	8009cae <_realloc_r+0x1e>

08009cee <_malloc_usable_size_r>:
 8009cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf2:	1f18      	subs	r0, r3, #4
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bfbc      	itt	lt
 8009cf8:	580b      	ldrlt	r3, [r1, r0]
 8009cfa:	18c0      	addlt	r0, r0, r3
 8009cfc:	4770      	bx	lr
	...

08009d00 <_init>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	bf00      	nop
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr

08009d0c <_fini>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	bf00      	nop
 8009d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d12:	bc08      	pop	{r3}
 8009d14:	469e      	mov	lr, r3
 8009d16:	4770      	bx	lr
