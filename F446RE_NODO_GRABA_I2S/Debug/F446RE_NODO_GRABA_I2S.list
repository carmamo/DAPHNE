
F446RE_NODO_GRABA_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baa4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800bc74  0800bc74  0001bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdc8  0800bdc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdc8  0800bdc8  0001bdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdd0  0800bdd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdd0  0800bdd0  0001bdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdd4  0800bdd4  0001bdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800bdd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d58  20000074  0800be4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800be4c  00020dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fd0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003613  00000000  00000000  00038074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003b688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003ca68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d62  00000000  00000000  0003dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b28c  00000000  00000000  00063a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4fb7  00000000  00000000  0007ecc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153c7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005670  00000000  00000000  00153cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc5c 	.word	0x0800bc5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800bc5c 	.word	0x0800bc5c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AIC3254_Init>:

/*
 * INIZIALIZE
 */

uint8_t AIC3254_Init(AIC3254_t *dev, I2C_HandleTypeDef *i2cHandle) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]

	/* Init Struct */
	dev->i2cHandle = i2cHandle;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	601a      	str	r2, [r3, #0]
	 * Set Stereo ADC with 48ksps Sample Rate and High Performance
	 */

	/* Initialize to Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f938 	bl	800085e <AIC3254_SendCommand>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <AIC3254_Init+0x2a>
 80005f8:	2001      	movs	r0, #1
 80005fa:	f00a fe71 	bl	800b2e0 <exit>

	/* S/W Reset to initialize all registers */

	status = AIC3254_SendCommand(dev, SW_RESET, 0x01);
 80005fe:	2201      	movs	r2, #1
 8000600:	2101      	movs	r1, #1
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f92b 	bl	800085e <AIC3254_SendCommand>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <AIC3254_Init+0x44>
 8000612:	2001      	movs	r0, #1
 8000614:	f00a fe64 	bl	800b2e0 <exit>

	/* Power up NADC divider with value 1 */

	status = AIC3254_SendCommand(dev, CSR_8, 0x81);
 8000618:	2281      	movs	r2, #129	; 0x81
 800061a:	2112      	movs	r1, #18
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f91e 	bl	800085e <AIC3254_SendCommand>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <AIC3254_Init+0x5e>
 800062c:	2001      	movs	r0, #1
 800062e:	f00a fe57 	bl	800b2e0 <exit>

	/* Power up MADC divider with value 2 */

	status = AIC3254_SendCommand(dev, CSR_9, 0x82);
 8000632:	2282      	movs	r2, #130	; 0x82
 8000634:	2113      	movs	r1, #19
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f911 	bl	800085e <AIC3254_SendCommand>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <AIC3254_Init+0x78>
 8000646:	2001      	movs	r0, #1
 8000648:	f00a fe4a 	bl	800b2e0 <exit>

	/* Program OSR for ADC to 128 */

	status = AIC3254_SendCommand(dev, AOSR, 0x80);
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	2114      	movs	r1, #20
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f904 	bl	800085e <AIC3254_SendCommand>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <AIC3254_Init+0x92>
 8000660:	2001      	movs	r0, #1
 8000662:	f00a fe3d 	bl	800b2e0 <exit>

	/* Disable DIN Pin */

	status = AIC3254_SendCommand(dev, DIN_CR, 0x02);
 8000666:	2202      	movs	r2, #2
 8000668:	2136      	movs	r1, #54	; 0x36
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f000 f8f7 	bl	800085e <AIC3254_SendCommand>
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <AIC3254_Init+0xac>
 800067a:	2001      	movs	r0, #1
 800067c:	f00a fe30 	bl	800b2e0 <exit>

	/* Select ADC PRB_R1 */

	status = AIC3254_SendCommand(dev, PBCR, 0x01);
 8000680:	2201      	movs	r2, #1
 8000682:	213d      	movs	r1, #61	; 0x3d
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f8ea 	bl	800085e <AIC3254_SendCommand>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <AIC3254_Init+0xc6>
 8000694:	2001      	movs	r0, #1
 8000696:	f00a fe23 	bl	800b2e0 <exit>

	/* Select Page 1 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_1);
 800069a:	2201      	movs	r2, #1
 800069c:	2100      	movs	r1, #0
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f8dd 	bl	800085e <AIC3254_SendCommand>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <AIC3254_Init+0xe0>
 80006ae:	2001      	movs	r0, #1
 80006b0:	f00a fe16 	bl	800b2e0 <exit>

	/* Disable Internal Crude AVdd in presence of external AVdd supply or before
	 * powering up internal AVdd LDO
	 */

	status = AIC3254_SendCommand(dev, POW_CONF, 0x08);
 80006b4:	2208      	movs	r2, #8
 80006b6:	2101      	movs	r1, #1
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f8d0 	bl	800085e <AIC3254_SendCommand>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <AIC3254_Init+0xfa>
 80006c8:	2001      	movs	r0, #1
 80006ca:	f00a fe09 	bl	800b2e0 <exit>

	/* Enable Master Analog Power Control */

	status = AIC3254_SendCommand(dev, LDO_CR, 0x00);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2102      	movs	r1, #2
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f8c3 	bl	800085e <AIC3254_SendCommand>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <AIC3254_Init+0x114>
 80006e2:	2001      	movs	r0, #1
 80006e4:	f00a fdfc 	bl	800b2e0 <exit>

	/* Set the input common mode to 0.9V */

	status = AIC3254_SendCommand(dev, CMM_CR, 0x00);
 80006e8:	2200      	movs	r2, #0
 80006ea:	210a      	movs	r1, #10
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f8b6 	bl	800085e <AIC3254_SendCommand>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <AIC3254_Init+0x12e>
 80006fc:	2001      	movs	r0, #1
 80006fe:	f00a fdef 	bl	800b2e0 <exit>

	/* Select ADC PTM_R4 */

	status = AIC3254_SendCommand(dev, POW_TUN, 0x00);
 8000702:	2200      	movs	r2, #0
 8000704:	213d      	movs	r1, #61	; 0x3d
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f8a9 	bl	800085e <AIC3254_SendCommand>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <AIC3254_Init+0x148>
 8000716:	2001      	movs	r0, #1
 8000718:	f00a fde2 	bl	800b2e0 <exit>

	/* Set MICBIAS to LDOIN - 3.3V */

	status = AIC3254_SendCommand(dev, MICBIAS_CR, 0x78);
 800071c:	2278      	movs	r2, #120	; 0x78
 800071e:	2133      	movs	r1, #51	; 0x33
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f89c 	bl	800085e <AIC3254_SendCommand>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <AIC3254_Init+0x162>
 8000730:	2001      	movs	r0, #1
 8000732:	f00a fdd5 	bl	800b2e0 <exit>

	/* Set MicPGA startup delay to 3.1ms */

	status = AIC3254_SendCommand(dev, AIQC_CR, 0x32);
 8000736:	2232      	movs	r2, #50	; 0x32
 8000738:	2147      	movs	r1, #71	; 0x47
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f88f 	bl	800085e <AIC3254_SendCommand>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <AIC3254_Init+0x17c>
 800074a:	2001      	movs	r0, #1
 800074c:	f00a fdc8 	bl	800b2e0 <exit>

	/* Set the REF charging time to 40ms */

	status = AIC3254_SendCommand(dev, REF_POW_CR, 0x01);
 8000750:	2201      	movs	r2, #1
 8000752:	217b      	movs	r1, #123	; 0x7b
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f882 	bl	800085e <AIC3254_SendCommand>
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <AIC3254_Init+0x196>
 8000764:	2001      	movs	r0, #1
 8000766:	f00a fdbb 	bl	800b2e0 <exit>

	/* Route IN2L to LEFT_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, LROUTE_PCR, 0x20);
 800076a:	2220      	movs	r2, #32
 800076c:	2134      	movs	r1, #52	; 0x34
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f875 	bl	800085e <AIC3254_SendCommand>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <AIC3254_Init+0x1b0>
 800077e:	2001      	movs	r0, #1
 8000780:	f00a fdae 	bl	800b2e0 <exit>

	/* Route Common Mode to LEFT_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, LROUTE_NCR, 0x20);
 8000784:	2220      	movs	r2, #32
 8000786:	2136      	movs	r1, #54	; 0x36
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f868 	bl	800085e <AIC3254_SendCommand>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <AIC3254_Init+0x1ca>
 8000798:	2001      	movs	r0, #1
 800079a:	f00a fda1 	bl	800b2e0 <exit>

	/* Route IN1R to Right_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, RROUTE_PCR, 0x80);
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	2137      	movs	r1, #55	; 0x37
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f85b 	bl	800085e <AIC3254_SendCommand>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <AIC3254_Init+0x1e4>
 80007b2:	2001      	movs	r0, #1
 80007b4:	f00a fd94 	bl	800b2e0 <exit>

	/* Route Common Mode to Right_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, RROUTE_NCR, 0x20);
 80007b8:	2220      	movs	r2, #32
 80007ba:	2139      	movs	r1, #57	; 0x39
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f84e 	bl	800085e <AIC3254_SendCommand>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <AIC3254_Init+0x1fe>
 80007cc:	2001      	movs	r0, #1
 80007ce:	f00a fd87 	bl	800b2e0 <exit>

	/* Unmute Left MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, LVOLUME_CR, 0x0c);
 80007d2:	220c      	movs	r2, #12
 80007d4:	213b      	movs	r1, #59	; 0x3b
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f841 	bl	800085e <AIC3254_SendCommand>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <AIC3254_Init+0x218>
 80007e6:	2001      	movs	r0, #1
 80007e8:	f00a fd7a 	bl	800b2e0 <exit>

	/* Unmute Right MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, RVOLUME_CR, 0x0c);
 80007ec:	220c      	movs	r2, #12
 80007ee:	213c      	movs	r1, #60	; 0x3c
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f834 	bl	800085e <AIC3254_SendCommand>
 80007f6:	4603      	mov	r3, r0
 80007f8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <AIC3254_Init+0x232>
 8000800:	2001      	movs	r0, #1
 8000802:	f00a fd6d 	bl	800b2e0 <exit>

	/* Select Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f827 	bl	800085e <AIC3254_SendCommand>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <AIC3254_Init+0x24c>
 800081a:	2001      	movs	r0, #1
 800081c:	f00a fd60 	bl	800b2e0 <exit>

	/* Power up Left and Right ADC Channels */

	status = AIC3254_SendCommand(dev, CH_SETUP, 0xc0);
 8000820:	22c0      	movs	r2, #192	; 0xc0
 8000822:	2151      	movs	r1, #81	; 0x51
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f81a 	bl	800085e <AIC3254_SendCommand>
 800082a:	4603      	mov	r3, r0
 800082c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <AIC3254_Init+0x266>
 8000834:	2001      	movs	r0, #1
 8000836:	f00a fd53 	bl	800b2e0 <exit>

	/* Unmute Left and Right ADC Digital Volume Control */

	status = AIC3254_SendCommand(dev, CH_GAIN, 0x00);
 800083a:	2200      	movs	r2, #0
 800083c:	2152      	movs	r1, #82	; 0x52
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f80d 	bl	800085e <AIC3254_SendCommand>
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <AIC3254_Init+0x280>
 800084e:	2001      	movs	r0, #1
 8000850:	f00a fd46 	bl	800b2e0 <exit>

	return status;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <AIC3254_SendCommand>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef AIC3254_SendCommand(AIC3254_t *dev, uint8_t Register, uint8_t Data) {
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af04      	add	r7, sp, #16
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	460b      	mov	r3, r1
 8000868:	70fb      	strb	r3, [r7, #3]
 800086a:	4613      	mov	r3, r2
 800086c:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, AIC3254_I2C_ADDR , Register, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	b29a      	uxth	r2, r3
 8000876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	2301      	movs	r3, #1
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	1cbb      	adds	r3, r7, #2
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2301      	movs	r3, #1
 8000886:	2130      	movs	r1, #48	; 0x30
 8000888:	f002 f962 	bl	8002b50 <HAL_I2C_Mem_Write>
 800088c:	4603      	mov	r3, r0

}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b0c2      	sub	sp, #264	; 0x108
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089e:	f001 f86d 	bl	800197c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a2:	f000 f8bf 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a6:	f000 fa2b 	bl	8000d00 <MX_GPIO_Init>
  MX_DMA_Init();
 80008aa:	f000 f9eb 	bl	8000c84 <MX_DMA_Init>
  MX_I2C1_Init();
 80008ae:	f000 f941 	bl	8000b34 <MX_I2C1_Init>
  MX_I2S2_Init();
 80008b2:	f000 f96d 	bl	8000b90 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 80008b6:	f000 f999 	bl	8000bec <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80008ba:	f007 fd11 	bl	80082e0 <MX_FATFS_Init>
  MX_CRC_Init();
 80008be:	f000 f925 	bl	8000b0c <MX_CRC_Init>
  MX_USART2_UART_Init();
 80008c2:	f000 f9b5 	bl	8000c30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize CODEC */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008cc:	484a      	ldr	r0, [pc, #296]	; (80009f8 <main+0x160>)
 80008ce:	f001 ffc7 	bl	8002860 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f001 f8c4 	bl	8001a60 <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008de:	4846      	ldr	r0, [pc, #280]	; (80009f8 <main+0x160>)
 80008e0:	f001 ffbe 	bl	8002860 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f001 f8bb 	bl	8001a60 <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f0:	4841      	ldr	r0, [pc, #260]	; (80009f8 <main+0x160>)
 80008f2:	f001 ffb5 	bl	8002860 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80008f6:	2002      	movs	r0, #2
 80008f8:	f001 f8b2 	bl	8001a60 <HAL_Delay>
  AIC3254_Init(&codec, &hi2c1);
 80008fc:	493f      	ldr	r1, [pc, #252]	; (80009fc <main+0x164>)
 80008fe:	4840      	ldr	r0, [pc, #256]	; (8000a00 <main+0x168>)
 8000900:	f7ff fe68 	bl	80005d4 <AIC3254_Init>
  /* USER CODE BEGIN WHILE */
  char filename[256];

  do
  {
	  res = f_mount(&SDFatFS, SDPath, 1);
 8000904:	2201      	movs	r2, #1
 8000906:	493f      	ldr	r1, [pc, #252]	; (8000a04 <main+0x16c>)
 8000908:	483f      	ldr	r0, [pc, #252]	; (8000a08 <main+0x170>)
 800090a:	f009 fcdb 	bl	800a2c4 <f_mount>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <main+0x174>)
 8000914:	701a      	strb	r2, [r3, #0]
  }
  while( res != FR_OK);
 8000916:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <main+0x174>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1f2      	bne.n	8000904 <main+0x6c>

  do
  {
	  res = Format_SD();
 800091e:	f000 fbe1 	bl	80010e4 <Format_SD>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	4b39      	ldr	r3, [pc, #228]	; (8000a0c <main+0x174>)
 8000928:	701a      	strb	r2, [r3, #0]
  }
  while (res != FR_OK);
 800092a:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <main+0x174>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1f5      	bne.n	800091e <main+0x86>

  HAL_UART_Receive_IT(&huart2, (uint8_t *) RX_data, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	4936      	ldr	r1, [pc, #216]	; (8000a10 <main+0x178>)
 8000936:	4837      	ldr	r0, [pc, #220]	; (8000a14 <main+0x17c>)
 8000938:	f006 f834 	bl	80069a4 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000942:	4835      	ldr	r0, [pc, #212]	; (8000a18 <main+0x180>)
 8000944:	f001 ff8c 	bl	8002860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094e:	4832      	ldr	r0, [pc, #200]	; (8000a18 <main+0x180>)
 8000950:	f001 ff86 	bl	8002860 <HAL_GPIO_WritePin>
  do
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	482f      	ldr	r0, [pc, #188]	; (8000a18 <main+0x180>)
 800095a:	f001 ff9a 	bl	8002892 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	482d      	ldr	r0, [pc, #180]	; (8000a18 <main+0x180>)
 8000964:	f001 ff95 	bl	8002892 <HAL_GPIO_TogglePin>
	  HAL_Delay(150);
 8000968:	2096      	movs	r0, #150	; 0x96
 800096a:	f001 f879 	bl	8001a60 <HAL_Delay>
  }
  while(audio_state == CONNECTING);
 800096e:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <main+0x184>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b04      	cmp	r3, #4
 8000974:	d0ee      	beq.n	8000954 <main+0xbc>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097c:	4826      	ldr	r0, [pc, #152]	; (8000a18 <main+0x180>)
 800097e:	f001 ff6f 	bl	8002860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000988:	4823      	ldr	r0, [pc, #140]	; (8000a18 <main+0x180>)
 800098a:	f001 ff69 	bl	8002860 <HAL_GPIO_WritePin>

  for (int i = 0; i < 4; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000994:	e012      	b.n	80009bc <main+0x124>
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000996:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099a:	481f      	ldr	r0, [pc, #124]	; (8000a18 <main+0x180>)
 800099c:	f001 ff79 	bl	8002892 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80009a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a4:	481c      	ldr	r0, [pc, #112]	; (8000a18 <main+0x180>)
 80009a6:	f001 ff74 	bl	8002892 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80009aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ae:	f001 f857 	bl	8001a60 <HAL_Delay>
  for (int i = 0; i < 4; i++)
 80009b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80009b6:	3301      	adds	r3, #1
 80009b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80009bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	dde8      	ble.n	8000996 <main+0xfe>
  }


  uint16_t count = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
  while (1)
  {
	  if(audio_state == STATE_START_RECORDING)
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <main+0x184>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d1fb      	bne.n	80009ca <main+0x132>
	  {
		  HAL_Delay(1);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f001 f844 	bl	8001a60 <HAL_Delay>
		  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 80009d8:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	f8a7 2102 	strh.w	r2, [r7, #258]	; 0x102
 80009e2:	4638      	mov	r0, r7
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <main+0x16c>)
 80009e6:	490e      	ldr	r1, [pc, #56]	; (8000a20 <main+0x188>)
 80009e8:	f00a fdba 	bl	800b560 <siprintf>
		  startRecord(filename);
 80009ec:	463b      	mov	r3, r7
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 faa0 	bl	8000f34 <startRecord>
	  if(audio_state == STATE_START_RECORDING)
 80009f4:	e7e9      	b.n	80009ca <main+0x132>
 80009f6:	bf00      	nop
 80009f8:	40020400 	.word	0x40020400
 80009fc:	20000098 	.word	0x20000098
 8000a00:	2000031c 	.word	0x2000031c
 8000a04:	20000b54 	.word	0x20000b54
 8000a08:	20000b58 	.word	0x20000b58
 8000a0c:	20000b28 	.word	0x20000b28
 8000a10:	20000b2c 	.word	0x20000b2c
 8000a14:	200002d8 	.word	0x200002d8
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	20000002 	.word	0x20000002
 8000a20:	0800bc74 	.word	0x0800bc74

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2234      	movs	r2, #52	; 0x34
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00a fc9c 	bl	800b370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <SystemClock_Config+0xe0>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a2c      	ldr	r2, [pc, #176]	; (8000b04 <SystemClock_Config+0xe0>)
 8000a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <SystemClock_Config+0xe0>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a64:	2300      	movs	r3, #0
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <SystemClock_Config+0xe4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a70:	4a25      	ldr	r2, [pc, #148]	; (8000b08 <SystemClock_Config+0xe4>)
 8000a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <SystemClock_Config+0xe4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a90:	2302      	movs	r3, #2
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a9c:	23a8      	movs	r3, #168	; 0xa8
 8000a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 f86d 	bl	8004b90 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000abc:	f000 fbac 	bl	8001218 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ac0:	f002 ff62 	bl	8003988 <HAL_PWREx_EnableOverDrive>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000aca:	f000 fba5 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ace:	230f      	movs	r3, #15
 8000ad0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ada:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	2105      	movs	r1, #5
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 ff9b 	bl	8003a28 <HAL_RCC_ClockConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000af8:	f000 fb8e 	bl	8001218 <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3750      	adds	r7, #80	; 0x50
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40007000 	.word	0x40007000

08000b0c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_CRC_Init+0x20>)
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <MX_CRC_Init+0x24>)
 8000b14:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_CRC_Init+0x20>)
 8000b18:	f001 f8d7 	bl	8001cca <HAL_CRC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b22:	f000 fb79 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000090 	.word	0x20000090
 8000b30:	40023000 	.word	0x40023000

08000b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b3a:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <MX_I2C1_Init+0x54>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b40:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <MX_I2C1_Init+0x58>)
 8000b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_I2C1_Init+0x50>)
 8000b72:	f001 fea9 	bl	80028c8 <HAL_I2C_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b7c:	f000 fb4c 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000098 	.word	0x20000098
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	000186a0 	.word	0x000186a0

08000b90 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000b96:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <MX_I2S2_Init+0x58>)
 8000b98:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000b9c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ba0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000bb8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bbc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000bd2:	f002 fad5 	bl	8003180 <HAL_I2S_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000bdc:	f000 fb1c 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000ec 	.word	0x200000ec
 8000be8:	40003800 	.word	0x40003800

08000bec <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_SDIO_SD_Init+0x3c>)
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <MX_SDIO_SD_Init+0x40>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_SDIO_SD_Init+0x3c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MX_SDIO_SD_Init+0x3c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_SDIO_SD_Init+0x3c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MX_SDIO_SD_Init+0x3c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_SDIO_SD_Init+0x3c>)
 8000c10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c14:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <MX_SDIO_SD_Init+0x3c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000194 	.word	0x20000194
 8000c2c:	40012c00 	.word	0x40012c00

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_USART2_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c68:	f005 fe4f 	bl	800690a <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f000 fad1 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200002d8 	.word	0x200002d8
 8000c80:	40004400 	.word	0x40004400

08000c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_DMA_Init+0x78>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a1a      	ldr	r2, [pc, #104]	; (8000cfc <MX_DMA_Init+0x78>)
 8000c94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_DMA_Init+0x78>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_DMA_Init+0x78>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <MX_DMA_Init+0x78>)
 8000cb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_DMA_Init+0x78>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	200e      	movs	r0, #14
 8000cc8:	f000 ffc9 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ccc:	200e      	movs	r0, #14
 8000cce:	f000 ffe2 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	203b      	movs	r0, #59	; 0x3b
 8000cd8:	f000 ffc1 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000cdc:	203b      	movs	r0, #59	; 0x3b
 8000cde:	f000 ffda 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2045      	movs	r0, #69	; 0x45
 8000ce8:	f000 ffb9 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cec:	2045      	movs	r0, #69	; 0x45
 8000cee:	f000 ffd2 	bl	8001c96 <HAL_NVIC_EnableIRQ>

}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a3e      	ldr	r2, [pc, #248]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a37      	ldr	r2, [pc, #220]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a30      	ldr	r2, [pc, #192]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a29      	ldr	r2, [pc, #164]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <MX_GPIO_Init+0x118>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da8:	481c      	ldr	r0, [pc, #112]	; (8000e1c <MX_GPIO_Init+0x11c>)
 8000daa:	f001 fd59 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000db4:	481a      	ldr	r0, [pc, #104]	; (8000e20 <MX_GPIO_Init+0x120>)
 8000db6:	f001 fd53 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4812      	ldr	r0, [pc, #72]	; (8000e1c <MX_GPIO_Init+0x11c>)
 8000dd4:	f001 fb98 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_SDIO_API_Pin */
  GPIO_InitStruct.Pin = BSP_SDIO_API_Pin;
 8000dd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_SDIO_API_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <MX_GPIO_Init+0x11c>)
 8000dee:	f001 fb8b 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000df2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_GPIO_Init+0x120>)
 8000e0c:	f001 fb7c 	bl	8002508 <HAL_GPIO_Init>

}
 8000e10:	bf00      	nop
 8000e12:	3728      	adds	r7, #40	; 0x28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40020000 	.word	0x40020000

08000e24 <HAL_I2S_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	uint16_t *rpt;

	rCount++;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_I2S_RxCpltCallback+0x3c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <HAL_I2S_RxCpltCallback+0x3c>)
 8000e34:	6013      	str	r3, [r2, #0]
	rpt = (rcvBuf)+(rCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_I2S_RxCpltCallback+0x3c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <HAL_I2S_RxCpltCallback+0x40>)
 8000e40:	8812      	ldrh	r2, [r2, #0]
 8000e42:	fb02 f303 	mul.w	r3, r2, r3
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_I2S_RxCpltCallback+0x44>)
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
	HAL_I2S_Receive_DMA(hi2s, rpt, DMA_READ_SIZE);
 8000e4e:	2280      	movs	r2, #128	; 0x80
 8000e50:	68f9      	ldr	r1, [r7, #12]
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f002 fa8c 	bl	8003370 <HAL_I2S_Receive_DMA>
}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000b20 	.word	0x20000b20
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000320 	.word	0x20000320

08000e6c <fwrite_wav_header>:

FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08e      	sub	sp, #56	; 0x38
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	4608      	mov	r0, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	807b      	strh	r3, [r7, #2]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	707b      	strb	r3, [r7, #1]
 8000e82:	4613      	mov	r3, r2
 8000e84:	703b      	strb	r3, [r7, #0]
	UINT bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000e86:	2352      	movs	r3, #82	; 0x52
 8000e88:	723b      	strb	r3, [r7, #8]
 8000e8a:	2349      	movs	r3, #73	; 0x49
 8000e8c:	727b      	strb	r3, [r7, #9]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000e8e:	2346      	movs	r3, #70	; 0x46
 8000e90:	72bb      	strb	r3, [r7, #10]
 8000e92:	2346      	movs	r3, #70	; 0x46
 8000e94:	72fb      	strb	r3, [r7, #11]
	wave_header.size = (uint32_t)0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000e9a:	2357      	movs	r3, #87	; 0x57
 8000e9c:	743b      	strb	r3, [r7, #16]
 8000e9e:	2341      	movs	r3, #65	; 0x41
 8000ea0:	747b      	strb	r3, [r7, #17]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000ea2:	2356      	movs	r3, #86	; 0x56
 8000ea4:	74bb      	strb	r3, [r7, #18]
 8000ea6:	2345      	movs	r3, #69	; 0x45
 8000ea8:	74fb      	strb	r3, [r7, #19]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000eaa:	2366      	movs	r3, #102	; 0x66
 8000eac:	753b      	strb	r3, [r7, #20]
 8000eae:	236d      	movs	r3, #109	; 0x6d
 8000eb0:	757b      	strb	r3, [r7, #21]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000eb2:	2374      	movs	r3, #116	; 0x74
 8000eb4:	75bb      	strb	r3, [r7, #22]
 8000eb6:	2320      	movs	r3, #32
 8000eb8:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt_size = 16;
 8000eba:	2310      	movs	r3, #16
 8000ebc:	61bb      	str	r3, [r7, #24]
	wave_header.format = 1; // PCM
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	83bb      	strh	r3, [r7, #28]
	wave_header.channels = channels; // channels
 8000ec2:	783b      	ldrb	r3, [r7, #0]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	83fb      	strh	r3, [r7, #30]
	wave_header.sampleRate=sampleRate;  // sample rate
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	623b      	str	r3, [r7, #32]
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	787a      	ldrb	r2, [r7, #1]
 8000ed0:	fb02 f303 	mul.w	r3, r2, r3
 8000ed4:	783a      	ldrb	r2, [r7, #0]
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da00      	bge.n	8000ee0 <fwrite_wav_header+0x74>
 8000ede:	3307      	adds	r3, #7
 8000ee0:	10db      	asrs	r3, r3, #3
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.bc =  bitsPerSample*channels/8;
 8000ee4:	787b      	ldrb	r3, [r7, #1]
 8000ee6:	783a      	ldrb	r2, [r7, #0]
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	da00      	bge.n	8000ef2 <fwrite_wav_header+0x86>
 8000ef0:	3307      	adds	r3, #7
 8000ef2:	10db      	asrs	r3, r3, #3
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	853b      	strh	r3, [r7, #40]	; 0x28
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	857b      	strh	r3, [r7, #42]	; 0x2a
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000efe:	2364      	movs	r3, #100	; 0x64
 8000f00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000f04:	2361      	movs	r3, #97	; 0x61
 8000f06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000f0a:	2374      	movs	r3, #116	; 0x74
 8000f0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000f10:	2361      	movs	r3, #97	; 0x61
 8000f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	wave_header.data_size = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), &bw);
 8000f1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f1e:	f107 0108 	add.w	r1, r7, #8
 8000f22:	222c      	movs	r2, #44	; 0x2c
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f009 fbd1 	bl	800a6cc <f_write>
 8000f2a:	4603      	mov	r3, r0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3738      	adds	r7, #56	; 0x38
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <startRecord>:

void startRecord(char *filename) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000f40:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000f44:	6018      	str	r0, [r3, #0]
	uint16_t *rpt, *wpt;
	UINT bw;
	UINT writeBytes;
	UINT skipCount=125;// skip 0.5 second
 8000f46:	237d      	movs	r3, #125	; 0x7d
 8000f48:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	FIL fp;
	FRESULT res;

	writeBytes = DMA_TxRx_SIZE*2;
 8000f4c:	4b5e      	ldr	r3, [pc, #376]	; (80010c8 <startRecord+0x194>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	do
	{
		res = f_open(&fp, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000f56:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000f5a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000f5e:	f107 0010 	add.w	r0, r7, #16
 8000f62:	220a      	movs	r2, #10
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	f009 f9f3 	bl	800a350 <f_open>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
	}
	while(res != FR_OK);
 8000f70:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ee      	bne.n	8000f56 <startRecord+0x22>
	res = fwrite_wav_header(&fp, 48000, 16, 2);
 8000f78:	f107 0010 	add.w	r0, r7, #16
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	2210      	movs	r2, #16
 8000f80:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000f84:	f7ff ff72 	bl	8000e6c <fwrite_wav_header>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f94:	484d      	ldr	r0, [pc, #308]	; (80010cc <startRecord+0x198>)
 8000f96:	f001 fc63 	bl	8002860 <HAL_GPIO_WritePin>
	audio_state = STATE_RECORDING;
 8000f9a:	4b4d      	ldr	r3, [pc, #308]	; (80010d0 <startRecord+0x19c>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	701a      	strb	r2, [r3, #0]
	rpt = rcvBuf;
 8000fa0:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <startRecord+0x1a0>)
 8000fa2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	wpt = rpt;
 8000fa6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000faa:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	rCount=0; wCount=0;
 8000fae:	4b4a      	ldr	r3, [pc, #296]	; (80010d8 <startRecord+0x1a4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	4b49      	ldr	r3, [pc, #292]	; (80010dc <startRecord+0x1a8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
	HAL_I2S_Receive_DMA(&hi2s2, rpt, DMA_READ_SIZE);
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8000fc0:	4847      	ldr	r0, [pc, #284]	; (80010e0 <startRecord+0x1ac>)
 8000fc2:	f002 f9d5 	bl	8003370 <HAL_I2S_Receive_DMA>

	while (1)
	{
		if (wCount < rCount ) {
 8000fc6:	4b45      	ldr	r3, [pc, #276]	; (80010dc <startRecord+0x1a8>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <startRecord+0x1a4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d224      	bcs.n	800101c <startRecord+0xe8>
			if (rCount > skipCount)
 8000fd2:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <startRecord+0x1a4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d20c      	bcs.n	8000ff8 <startRecord+0xc4>
			{
				res = f_write(&fp, wpt, writeBytes, &bw);
 8000fde:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000fe2:	f107 0010 	add.w	r0, r7, #16
 8000fe6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000fea:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8000fee:	f009 fb6d 	bl	800a6cc <f_write>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
			}
			 wCount++;
 8000ff8:	4b38      	ldr	r3, [pc, #224]	; (80010dc <startRecord+0x1a8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a37      	ldr	r2, [pc, #220]	; (80010dc <startRecord+0x1a8>)
 8001000:	6013      	str	r3, [r2, #0]
			 wpt = (rcvBuf)+(wCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8001002:	4b36      	ldr	r3, [pc, #216]	; (80010dc <startRecord+0x1a8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <startRecord+0x194>)
 800100c:	8812      	ldrh	r2, [r2, #0]
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4a2f      	ldr	r2, [pc, #188]	; (80010d4 <startRecord+0x1a0>)
 8001016:	4413      	add	r3, r2
 8001018:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		  }

		  if (audio_state == STATE_STOP || rCount > MAX_DMA_ACCESS_COUNT)
 800101c:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <startRecord+0x19c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d004      	beq.n	800102e <startRecord+0xfa>
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <startRecord+0x1a4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800102c:	d9cb      	bls.n	8000fc6 <startRecord+0x92>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 800102e:	482c      	ldr	r0, [pc, #176]	; (80010e0 <startRecord+0x1ac>)
 8001030:	f002 fa5a 	bl	80034e8 <HAL_I2S_DMAStop>
			  break;
 8001034:	bf00      	nop
		  }
	}
	uint32_t data_len = (wCount-1) * writeBytes;
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <startRecord+0x1a8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3b01      	subs	r3, #1
 800103c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8001040:	fb03 f202 	mul.w	r2, r3, r2
 8001044:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001048:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800104c:	601a      	str	r2, [r3, #0]
	uint32_t total_len = data_len+36;
 800104e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001052:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800105c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001060:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001064:	601a      	str	r2, [r3, #0]
	f_lseek(&fp, 4);
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	2104      	movs	r1, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f009 fd4a 	bl	800ab06 <f_lseek>
	f_write(&fp, (uint8_t*)&total_len, 4, &bw);
 8001072:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001076:	f107 0108 	add.w	r1, r7, #8
 800107a:	f107 0010 	add.w	r0, r7, #16
 800107e:	2204      	movs	r2, #4
 8001080:	f009 fb24 	bl	800a6cc <f_write>
	f_lseek(&fp, 40);
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	2128      	movs	r1, #40	; 0x28
 800108a:	4618      	mov	r0, r3
 800108c:	f009 fd3b 	bl	800ab06 <f_lseek>
	f_write(&fp, (uint8_t*)&data_len, 4, &bw);
 8001090:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001094:	f107 010c 	add.w	r1, r7, #12
 8001098:	f107 0010 	add.w	r0, r7, #16
 800109c:	2204      	movs	r2, #4
 800109e:	f009 fb15 	bl	800a6cc <f_write>
	f_close(&fp);
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4618      	mov	r0, r3
 80010a8:	f009 fd03 	bl	800aab2 <f_close>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <startRecord+0x198>)
 80010b4:	f001 fbd4 	bl	8002860 <HAL_GPIO_WritePin>
	audio_state = STATE_STOP;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <startRecord+0x19c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
}
 80010be:	bf00      	nop
 80010c0:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000000 	.word	0x20000000
 80010cc:	40020000 	.word	0x40020000
 80010d0:	20000002 	.word	0x20000002
 80010d4:	20000320 	.word	0x20000320
 80010d8:	20000b20 	.word	0x20000b20
 80010dc:	20000b24 	.word	0x20000b24
 80010e0:	200000ec 	.word	0x200000ec

080010e4 <Format_SD>:

FRESULT Format_SD (void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08e      	sub	sp, #56	; 0x38
 80010e8:	af00      	add	r7, sp, #0
    DIR dir;
    static FILINFO fno;
    static FRESULT fresult;

    char *path = malloc(20*sizeof (char));
 80010ea:	2014      	movs	r0, #20
 80010ec:	f00a f930 	bl	800b350 <malloc>
 80010f0:	4603      	mov	r3, r0
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <Format_SD+0xb4>)
 80010f6:	4929      	ldr	r1, [pc, #164]	; (800119c <Format_SD+0xb8>)
 80010f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010fa:	f00a fa31 	bl	800b560 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001102:	4618      	mov	r0, r3
 8001104:	f009 ff08 	bl	800af18 <f_opendir>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <Format_SD+0xbc>)
 800110e:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <Format_SD+0xbc>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d136      	bne.n	8001186 <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4922      	ldr	r1, [pc, #136]	; (80011a4 <Format_SD+0xc0>)
 800111c:	4618      	mov	r0, r3
 800111e:	f009 ff94 	bl	800b04a <f_readdir>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <Format_SD+0xbc>)
 8001128:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <Format_SD+0xbc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d125      	bne.n	800117e <Format_SD+0x9a>
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <Format_SD+0xc0>)
 8001134:	7a5b      	ldrb	r3, [r3, #9]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d021      	beq.n	800117e <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <Format_SD+0xc0>)
 800113c:	7a1b      	ldrb	r3, [r3, #8]
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	d011      	beq.n	800116a <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001146:	4918      	ldr	r1, [pc, #96]	; (80011a8 <Format_SD+0xc4>)
 8001148:	4818      	ldr	r0, [pc, #96]	; (80011ac <Format_SD+0xc8>)
 800114a:	f7ff f861 	bl	8000210 <strcmp>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d012      	beq.n	800117a <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 8001154:	4814      	ldr	r0, [pc, #80]	; (80011a8 <Format_SD+0xc4>)
 8001156:	f009 ffb5 	bl	800b0c4 <f_unlink>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <Format_SD+0xbc>)
 8001160:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <Format_SD+0xbc>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b07      	cmp	r3, #7
 8001168:	e7d6      	b.n	8001118 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 800116a:	480f      	ldr	r0, [pc, #60]	; (80011a8 <Format_SD+0xc4>)
 800116c:	f009 ffaa 	bl	800b0c4 <f_unlink>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <Format_SD+0xbc>)
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e7ce      	b.n	8001118 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800117a:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800117c:	e7cc      	b.n	8001118 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4618      	mov	r0, r3
 8001182:	f009 ff3c 	bl	800affe <f_closedir>
    }
    free(path);
 8001186:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001188:	f00a f8ea 	bl	800b360 <free>
    return fresult;
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <Format_SD+0xbc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3738      	adds	r7, #56	; 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	0800bc84 	.word	0x0800bc84
 800119c:	0800bc88 	.word	0x0800bc88
 80011a0:	20000b2d 	.word	0x20000b2d
 80011a4:	20000b30 	.word	0x20000b30
 80011a8:	20000b39 	.word	0x20000b39
 80011ac:	0800bc8c 	.word	0x0800bc8c

080011b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

	switch (RX_data[0])
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_UART_RxCpltCallback+0x5c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b50      	cmp	r3, #80	; 0x50
 80011be:	d00e      	beq.n	80011de <HAL_UART_RxCpltCallback+0x2e>
 80011c0:	2b50      	cmp	r3, #80	; 0x50
 80011c2:	dc18      	bgt.n	80011f6 <HAL_UART_RxCpltCallback+0x46>
 80011c4:	2b47      	cmp	r3, #71	; 0x47
 80011c6:	d006      	beq.n	80011d6 <HAL_UART_RxCpltCallback+0x26>
 80011c8:	2b47      	cmp	r3, #71	; 0x47
 80011ca:	dc14      	bgt.n	80011f6 <HAL_UART_RxCpltCallback+0x46>
 80011cc:	2b2b      	cmp	r3, #43	; 0x2b
 80011ce:	d00e      	beq.n	80011ee <HAL_UART_RxCpltCallback+0x3e>
 80011d0:	2b2e      	cmp	r3, #46	; 0x2e
 80011d2:	d008      	beq.n	80011e6 <HAL_UART_RxCpltCallback+0x36>
		break;
	case '+':
		audio_state = STATE_STOP;
		break;
	default:
		break;
 80011d4:	e00f      	b.n	80011f6 <HAL_UART_RxCpltCallback+0x46>
		audio_state = STATE_START_RECORDING;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_UART_RxCpltCallback+0x60>)
 80011d8:	2203      	movs	r2, #3
 80011da:	701a      	strb	r2, [r3, #0]
		break;
 80011dc:	e00c      	b.n	80011f8 <HAL_UART_RxCpltCallback+0x48>
		audio_state = STATE_STOP;
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_UART_RxCpltCallback+0x60>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
		break;
 80011e4:	e008      	b.n	80011f8 <HAL_UART_RxCpltCallback+0x48>
		audio_state = CONNECTING;
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_UART_RxCpltCallback+0x60>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	701a      	strb	r2, [r3, #0]
		break;
 80011ec:	e004      	b.n	80011f8 <HAL_UART_RxCpltCallback+0x48>
		audio_state = STATE_STOP;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_UART_RxCpltCallback+0x60>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
		break;
 80011f4:	e000      	b.n	80011f8 <HAL_UART_RxCpltCallback+0x48>
		break;
 80011f6:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *) RX_data, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	4904      	ldr	r1, [pc, #16]	; (800120c <HAL_UART_RxCpltCallback+0x5c>)
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_UART_RxCpltCallback+0x64>)
 80011fe:	f005 fbd1 	bl	80069a4 <HAL_UART_Receive_IT>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000b2c 	.word	0x20000b2c
 8001210:	20000002 	.word	0x20000002
 8001214:	200002d8 	.word	0x200002d8

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	e7fe      	b.n	8001220 <Error_Handler+0x8>
	...

08001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <HAL_MspInit+0x4c>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_MspInit+0x4c>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_MspInit+0x4c>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_MspInit+0x4c>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <HAL_CRC_MspInit+0x3c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10d      	bne.n	80012a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_CRC_MspInit+0x40>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <HAL_CRC_MspInit+0x40>)
 8001290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <HAL_CRC_MspInit+0x40>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023000 	.word	0x40023000
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <HAL_I2C_MspInit+0x84>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12b      	bne.n	8001332 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_I2C_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_I2C_MspInit+0x88>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_I2C_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012f6:	23c0      	movs	r3, #192	; 0xc0
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fa:	2312      	movs	r3, #18
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001306:	2304      	movs	r3, #4
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <HAL_I2C_MspInit+0x8c>)
 8001312:	f001 f8f9 	bl	8002508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_I2C_MspInit+0x88>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_I2C_MspInit+0x88>)
 8001320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_I2C_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40005400 	.word	0x40005400
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400

08001348 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0a2      	sub	sp, #136	; 0x88
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	225c      	movs	r2, #92	; 0x5c
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f00a f801 	bl	800b370 <memset>
  if(hi2s->Instance==SPI2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a50      	ldr	r2, [pc, #320]	; (80014b4 <HAL_I2S_MspInit+0x16c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	f040 8098 	bne.w	80014aa <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800137e:	2332      	movs	r3, #50	; 0x32
 8001380:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001386:	2308      	movs	r3, #8
 8001388:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800138a:	2302      	movs	r3, #2
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800138e:	2302      	movs	r3, #2
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001392:	2301      	movs	r3, #1
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001396:	2300      	movs	r3, #0
 8001398:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 fc5c 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 80013aa:	f7ff ff35 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <HAL_I2S_MspInit+0x170>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a40      	ldr	r2, [pc, #256]	; (80014b8 <HAL_I2S_MspInit+0x170>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <HAL_I2S_MspInit+0x170>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <HAL_I2S_MspInit+0x170>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a39      	ldr	r2, [pc, #228]	; (80014b8 <HAL_I2S_MspInit+0x170>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <HAL_I2S_MspInit+0x170>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <HAL_I2S_MspInit+0x170>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <HAL_I2S_MspInit+0x170>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_I2S_MspInit+0x170>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001402:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001406:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001416:	2305      	movs	r3, #5
 8001418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001420:	4619      	mov	r1, r3
 8001422:	4826      	ldr	r0, [pc, #152]	; (80014bc <HAL_I2S_MspInit+0x174>)
 8001424:	f001 f870 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800143a:	2305      	movs	r3, #5
 800143c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001440:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001444:	4619      	mov	r1, r3
 8001446:	481e      	ldr	r0, [pc, #120]	; (80014c0 <HAL_I2S_MspInit+0x178>)
 8001448:	f001 f85e 	bl	8002508 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_I2S_MspInit+0x180>)
 8001450:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 8001466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 800146e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001472:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 8001476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 8001490:	f000 fc38 	bl	8001d04 <HAL_DMA_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 800149a:	f7ff febd 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 80014a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_I2S_MspInit+0x17c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3788      	adds	r7, #136	; 0x88
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40003800 	.word	0x40003800
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020800 	.word	0x40020800
 80014c4:	20000134 	.word	0x20000134
 80014c8:	40026058 	.word	0x40026058

080014cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0a2      	sub	sp, #136	; 0x88
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	225c      	movs	r2, #92	; 0x5c
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f009 ff3f 	bl	800b370 <memset>
  if(hsd->Instance==SDIO)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a7d      	ldr	r2, [pc, #500]	; (80016ec <HAL_SD_MspInit+0x220>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	f040 80f3 	bne.w	80016e4 <HAL_SD_MspInit+0x218>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80014fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001502:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001504:	2300      	movs	r3, #0
 8001506:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001508:	2300      	movs	r3, #0
 800150a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fba3 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800151c:	f7ff fe7c 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <HAL_SD_MspInit+0x224>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	4a71      	ldr	r2, [pc, #452]	; (80016f0 <HAL_SD_MspInit+0x224>)
 800152a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800152e:	6453      	str	r3, [r2, #68]	; 0x44
 8001530:	4b6f      	ldr	r3, [pc, #444]	; (80016f0 <HAL_SD_MspInit+0x224>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	4b6b      	ldr	r3, [pc, #428]	; (80016f0 <HAL_SD_MspInit+0x224>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a6a      	ldr	r2, [pc, #424]	; (80016f0 <HAL_SD_MspInit+0x224>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <HAL_SD_MspInit+0x224>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4b64      	ldr	r3, [pc, #400]	; (80016f0 <HAL_SD_MspInit+0x224>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a63      	ldr	r2, [pc, #396]	; (80016f0 <HAL_SD_MspInit+0x224>)
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <HAL_SD_MspInit+0x224>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001574:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001578:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157e:	2301      	movs	r3, #1
 8001580:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001588:	230c      	movs	r3, #12
 800158a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001592:	4619      	mov	r1, r3
 8001594:	4857      	ldr	r0, [pc, #348]	; (80016f4 <HAL_SD_MspInit+0x228>)
 8001596:	f000 ffb7 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015ae:	230c      	movs	r3, #12
 80015b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015b8:	4619      	mov	r1, r3
 80015ba:	484e      	ldr	r0, [pc, #312]	; (80016f4 <HAL_SD_MspInit+0x228>)
 80015bc:	f000 ffa4 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015c0:	2304      	movs	r3, #4
 80015c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015d2:	230c      	movs	r3, #12
 80015d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015dc:	4619      	mov	r1, r3
 80015de:	4846      	ldr	r0, [pc, #280]	; (80016f8 <HAL_SD_MspInit+0x22c>)
 80015e0:	f000 ff92 	bl	8002508 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <HAL_SD_MspInit+0x230>)
 80015e6:	4a46      	ldr	r2, [pc, #280]	; (8001700 <HAL_SD_MspInit+0x234>)
 80015e8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <HAL_SD_MspInit+0x230>)
 80015ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f2:	4b42      	ldr	r3, [pc, #264]	; (80016fc <HAL_SD_MspInit+0x230>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f8:	4b40      	ldr	r3, [pc, #256]	; (80016fc <HAL_SD_MspInit+0x230>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015fe:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <HAL_SD_MspInit+0x230>)
 8001600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001604:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <HAL_SD_MspInit+0x230>)
 8001608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800160e:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <HAL_SD_MspInit+0x230>)
 8001610:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001614:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_SD_MspInit+0x230>)
 8001618:	2220      	movs	r2, #32
 800161a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800161c:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_SD_MspInit+0x230>)
 800161e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001622:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001624:	4b35      	ldr	r3, [pc, #212]	; (80016fc <HAL_SD_MspInit+0x230>)
 8001626:	2204      	movs	r2, #4
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_SD_MspInit+0x230>)
 800162c:	2203      	movs	r2, #3
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_SD_MspInit+0x230>)
 8001632:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_SD_MspInit+0x230>)
 800163a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001640:	482e      	ldr	r0, [pc, #184]	; (80016fc <HAL_SD_MspInit+0x230>)
 8001642:	f000 fb5f 	bl	8001d04 <HAL_DMA_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_SD_MspInit+0x184>
    {
      Error_Handler();
 800164c:	f7ff fde4 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <HAL_SD_MspInit+0x230>)
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
 8001656:	4a29      	ldr	r2, [pc, #164]	; (80016fc <HAL_SD_MspInit+0x230>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_SD_MspInit+0x238>)
 800165e:	4a2a      	ldr	r2, [pc, #168]	; (8001708 <HAL_SD_MspInit+0x23c>)
 8001660:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <HAL_SD_MspInit+0x238>)
 8001664:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001668:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_SD_MspInit+0x238>)
 800166c:	2240      	movs	r2, #64	; 0x40
 800166e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <HAL_SD_MspInit+0x238>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <HAL_SD_MspInit+0x238>)
 8001678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_SD_MspInit+0x238>)
 8001680:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001684:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_SD_MspInit+0x238>)
 8001688:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_SD_MspInit+0x238>)
 8001690:	2220      	movs	r2, #32
 8001692:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_SD_MspInit+0x238>)
 8001696:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800169a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_SD_MspInit+0x238>)
 800169e:	2204      	movs	r2, #4
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_SD_MspInit+0x238>)
 80016a4:	2203      	movs	r2, #3
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_SD_MspInit+0x238>)
 80016aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_SD_MspInit+0x238>)
 80016b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80016b8:	4812      	ldr	r0, [pc, #72]	; (8001704 <HAL_SD_MspInit+0x238>)
 80016ba:	f000 fb23 	bl	8001d04 <HAL_DMA_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_SD_MspInit+0x1fc>
    {
      Error_Handler();
 80016c4:	f7ff fda8 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_SD_MspInit+0x238>)
 80016cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ce:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_SD_MspInit+0x238>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2031      	movs	r0, #49	; 0x31
 80016da:	f000 fac0 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80016de:	2031      	movs	r0, #49	; 0x31
 80016e0:	f000 fad9 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80016e4:	bf00      	nop
 80016e6:	3788      	adds	r7, #136	; 0x88
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	20000218 	.word	0x20000218
 8001700:	40026458 	.word	0x40026458
 8001704:	20000278 	.word	0x20000278
 8001708:	400264a0 	.word	0x400264a0

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <HAL_UART_MspInit+0x94>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d133      	bne.n	8001796 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_UART_MspInit+0x98>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <HAL_UART_MspInit+0x98>)
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_UART_MspInit+0x98>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_UART_MspInit+0x98>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_UART_MspInit+0x98>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_UART_MspInit+0x98>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001766:	230c      	movs	r3, #12
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001776:	2307      	movs	r3, #7
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4809      	ldr	r0, [pc, #36]	; (80017a8 <HAL_UART_MspInit+0x9c>)
 8001782:	f000 fec1 	bl	8002508 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2026      	movs	r0, #38	; 0x26
 800178c:	f000 fa67 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001790:	2026      	movs	r0, #38	; 0x26
 8001792:	f000 fa80 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40004400 	.word	0x40004400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f8:	f000 f912 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <DMA1_Stream3_IRQHandler+0x10>)
 8001806:	f000 fc15 	bl	8002034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000134 	.word	0x20000134

08001814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <USART2_IRQHandler+0x10>)
 800181a:	f005 f8f3 	bl	8006a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200002d8 	.word	0x200002d8

08001828 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <SDIO_IRQHandler+0x10>)
 800182e:	f004 f861 	bl	80058f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000194 	.word	0x20000194

0800183c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA2_Stream3_IRQHandler+0x10>)
 8001842:	f000 fbf7 	bl	8002034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000218 	.word	0x20000218

08001850 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA2_Stream6_IRQHandler+0x10>)
 8001856:	f000 fbed 	bl	8002034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000278 	.word	0x20000278

08001864 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800186e:	f009 fd31 	bl	800b2d4 <__errno>
 8001872:	4603      	mov	r3, r0
 8001874:	2216      	movs	r2, #22
 8001876:	601a      	str	r2, [r3, #0]
	return -1;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_exit>:

void _exit (int status)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800188c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ffe7 	bl	8001864 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001896:	e7fe      	b.n	8001896 <_exit+0x12>

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f009 fd04 	bl	800b2d4 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20020000 	.word	0x20020000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20000b48 	.word	0x20000b48
 8001900:	20000dd0 	.word	0x20000dd0

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001952:	f7ff ffd7 	bl	8001904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f009 fcd7 	bl	800b308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7fe ff9d 	bl	8000898 <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800196c:	0800bdd8 	.word	0x0800bdd8
  ldr r2, =_sbss
 8001970:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001974:	20000dcc 	.word	0x20000dcc

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_Init+0x40>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_Init+0x40>)
 8001992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_Init+0x40>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f94f 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	200f      	movs	r0, #15
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fc38 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f967 	bl	8001cb2 <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019fc:	f000 f92f 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000004 	.word	0x20000004
 8001a18:	2000000c 	.word	0x2000000c
 8001a1c:	20000008 	.word	0x20000008

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2000000c 	.word	0x2000000c
 8001a44:	20000b4c 	.word	0x20000b4c

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000b4c 	.word	0x20000b4c

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000000c 	.word	0x2000000c

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4907      	ldr	r1, [pc, #28]	; (8001b44 <__NVIC_EnableIRQ+0x38>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c28:	f7ff ff8e 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff29 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff3e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff8e 	bl	8001b9c <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff31 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e00e      	b.n	8001cfa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	795b      	ldrb	r3, [r3, #5]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d105      	bne.n	8001cf2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fac1 	bl	8001274 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff fe9a 	bl	8001a48 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e099      	b.n	8001e54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d40:	e00f      	b.n	8001d62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d42:	f7ff fe81 	bl	8001a48 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d908      	bls.n	8001d62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e078      	b.n	8001e54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e8      	bne.n	8001d42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_DMA_Init+0x158>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d107      	bne.n	8001dcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f023 0307 	bic.w	r3, r3, #7
 8001de2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d117      	bne.n	8001e26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00e      	beq.n	8001e26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fb01 	bl	8002410 <DMA_CheckFifoParam>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e22:	2301      	movs	r3, #1
 8001e24:	e016      	b.n	8001e54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fab8 	bl	80023a4 <DMA_CalcBaseAndBitshift>
 8001e34:	4603      	mov	r3, r0
 8001e36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	223f      	movs	r2, #63	; 0x3f
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	f010803f 	.word	0xf010803f

08001e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_DMA_Start_IT+0x26>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e040      	b.n	8001f08 <HAL_DMA_Start_IT+0xa8>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d12f      	bne.n	8001efa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fa4a 	bl	8002348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	223f      	movs	r2, #63	; 0x3f
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0216 	orr.w	r2, r2, #22
 8001ece:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0208 	orr.w	r2, r2, #8
 8001ee6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e005      	b.n	8001f06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f02:	2302      	movs	r3, #2
 8001f04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f1e:	f7ff fd93 	bl	8001a48 <HAL_GetTick>
 8001f22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d008      	beq.n	8001f42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e052      	b.n	8001fe8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0216 	bic.w	r2, r2, #22
 8001f50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_DMA_Abort+0x62>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0208 	bic.w	r2, r2, #8
 8001f80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f92:	e013      	b.n	8001fbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f94:	f7ff fd58 	bl	8001a48 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d90c      	bls.n	8001fbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2203      	movs	r2, #3
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e015      	b.n	8001fe8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1e4      	bne.n	8001f94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	223f      	movs	r2, #63	; 0x3f
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d004      	beq.n	800200e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00c      	b.n	8002028 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2205      	movs	r2, #5
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002040:	4b8e      	ldr	r3, [pc, #568]	; (800227c <HAL_DMA_IRQHandler+0x248>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a8e      	ldr	r2, [pc, #568]	; (8002280 <HAL_DMA_IRQHandler+0x24c>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0a9b      	lsrs	r3, r3, #10
 800204c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	2208      	movs	r2, #8
 8002060:	409a      	lsls	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01a      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0204 	bic.w	r2, r2, #4
 8002086:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	2208      	movs	r2, #8
 800208e:	409a      	lsls	r2, r3
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2201      	movs	r2, #1
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d012      	beq.n	80020d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	2201      	movs	r2, #1
 80020c4:	409a      	lsls	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f043 0202 	orr.w	r2, r3, #2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2204      	movs	r2, #4
 80020dc:	409a      	lsls	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00b      	beq.n	800210c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	2204      	movs	r2, #4
 80020fa:	409a      	lsls	r2, r3
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	f043 0204 	orr.w	r2, r3, #4
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	2210      	movs	r2, #16
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d043      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d03c      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	2210      	movs	r2, #16
 8002130:	409a      	lsls	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d018      	beq.n	8002176 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d108      	bne.n	8002164 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d024      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	4798      	blx	r3
 8002162:	e01f      	b.n	80021a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
 8002174:	e016      	b.n	80021a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d107      	bne.n	8002194 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0208 	bic.w	r2, r2, #8
 8002192:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	2220      	movs	r2, #32
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 808f 	beq.w	80022d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 8087 	beq.w	80022d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	2220      	movs	r2, #32
 80021cc:	409a      	lsls	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d136      	bne.n	800224c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0216 	bic.w	r2, r2, #22
 80021ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <HAL_DMA_IRQHandler+0x1da>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0208 	bic.w	r2, r2, #8
 800221c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002222:	223f      	movs	r2, #63	; 0x3f
 8002224:	409a      	lsls	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223e:	2b00      	cmp	r3, #0
 8002240:	d07e      	beq.n	8002340 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
        }
        return;
 800224a:	e079      	b.n	8002340 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01d      	beq.n	8002296 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10d      	bne.n	8002284 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	2b00      	cmp	r3, #0
 800226e:	d031      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
 8002278:	e02c      	b.n	80022d4 <HAL_DMA_IRQHandler+0x2a0>
 800227a:	bf00      	nop
 800227c:	20000004 	.word	0x20000004
 8002280:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d023      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
 8002294:	e01e      	b.n	80022d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10f      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0210 	bic.w	r2, r2, #16
 80022b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d032      	beq.n	8002342 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d022      	beq.n	800232e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2205      	movs	r2, #5
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	3301      	adds	r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	d307      	bcc.n	800231c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f2      	bne.n	8002300 <HAL_DMA_IRQHandler+0x2cc>
 800231a:	e000      	b.n	800231e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800231c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
 800233e:	e000      	b.n	8002342 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002340:	bf00      	nop
    }
  }
}
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b40      	cmp	r3, #64	; 0x40
 8002374:	d108      	bne.n	8002388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002386:	e007      	b.n	8002398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3b10      	subs	r3, #16
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <DMA_CalcBaseAndBitshift+0x64>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023be:	4a13      	ldr	r2, [pc, #76]	; (800240c <DMA_CalcBaseAndBitshift+0x68>)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d909      	bls.n	80023e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	1d1a      	adds	r2, r3, #4
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	659a      	str	r2, [r3, #88]	; 0x58
 80023e4:	e007      	b.n	80023f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	aaaaaaab 	.word	0xaaaaaaab
 800240c:	0800bcf4 	.word	0x0800bcf4

08002410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d11f      	bne.n	800246a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d856      	bhi.n	80024de <DMA_CheckFifoParam+0xce>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <DMA_CheckFifoParam+0x28>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	0800245b 	.word	0x0800245b
 8002440:	08002449 	.word	0x08002449
 8002444:	080024df 	.word	0x080024df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d046      	beq.n	80024e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002458:	e043      	b.n	80024e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002462:	d140      	bne.n	80024e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e03d      	b.n	80024e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002472:	d121      	bne.n	80024b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d837      	bhi.n	80024ea <DMA_CheckFifoParam+0xda>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <DMA_CheckFifoParam+0x70>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	08002491 	.word	0x08002491
 8002484:	08002497 	.word	0x08002497
 8002488:	08002491 	.word	0x08002491
 800248c:	080024a9 	.word	0x080024a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	e030      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d025      	beq.n	80024ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a6:	e022      	b.n	80024ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024b0:	d11f      	bne.n	80024f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024b6:	e01c      	b.n	80024f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d903      	bls.n	80024c6 <DMA_CheckFifoParam+0xb6>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d003      	beq.n	80024cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024c4:	e018      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      break;
 80024ca:	e015      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e00b      	b.n	80024f6 <DMA_CheckFifoParam+0xe6>
      break;
 80024de:	bf00      	nop
 80024e0:	e00a      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024e2:	bf00      	nop
 80024e4:	e008      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024e6:	bf00      	nop
 80024e8:	e006      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ea:	bf00      	nop
 80024ec:	e004      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
 80024f0:	e002      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024f2:	bf00      	nop
 80024f4:	e000      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
    }
  } 
  
  return status; 
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e165      	b.n	80027f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 8154 	bne.w	80027ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80ae 	beq.w	80027ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_GPIO_Init+0x300>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a5c      	ldr	r2, [pc, #368]	; (8002808 <HAL_GPIO_Init+0x300>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b5a      	ldr	r3, [pc, #360]	; (8002808 <HAL_GPIO_Init+0x300>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_GPIO_Init+0x304>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4f      	ldr	r2, [pc, #316]	; (8002810 <HAL_GPIO_Init+0x308>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d025      	beq.n	8002722 <HAL_GPIO_Init+0x21a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4e      	ldr	r2, [pc, #312]	; (8002814 <HAL_GPIO_Init+0x30c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01f      	beq.n	800271e <HAL_GPIO_Init+0x216>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4d      	ldr	r2, [pc, #308]	; (8002818 <HAL_GPIO_Init+0x310>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d019      	beq.n	800271a <HAL_GPIO_Init+0x212>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4c      	ldr	r2, [pc, #304]	; (800281c <HAL_GPIO_Init+0x314>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_Init+0x20e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4b      	ldr	r2, [pc, #300]	; (8002820 <HAL_GPIO_Init+0x318>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HAL_GPIO_Init+0x20a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <HAL_GPIO_Init+0x31c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_Init+0x206>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a49      	ldr	r2, [pc, #292]	; (8002828 <HAL_GPIO_Init+0x320>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_GPIO_Init+0x202>
 8002706:	2306      	movs	r3, #6
 8002708:	e00c      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800270a:	2307      	movs	r3, #7
 800270c:	e00a      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800270e:	2305      	movs	r3, #5
 8002710:	e008      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 8002712:	2304      	movs	r3, #4
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 8002716:	2303      	movs	r3, #3
 8002718:	e004      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800271a:	2302      	movs	r3, #2
 800271c:	e002      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 8002722:	2300      	movs	r3, #0
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f002 0203 	and.w	r2, r2, #3
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4093      	lsls	r3, r2
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002734:	4935      	ldr	r1, [pc, #212]	; (800280c <HAL_GPIO_Init+0x304>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002742:	4b3a      	ldr	r3, [pc, #232]	; (800282c <HAL_GPIO_Init+0x324>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002766:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_GPIO_Init+0x324>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800276c:	4b2f      	ldr	r3, [pc, #188]	; (800282c <HAL_GPIO_Init+0x324>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <HAL_GPIO_Init+0x324>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_GPIO_Init+0x324>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ba:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_GPIO_Init+0x324>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c0:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_GPIO_Init+0x324>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e4:	4a11      	ldr	r2, [pc, #68]	; (800282c <HAL_GPIO_Init+0x324>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3301      	adds	r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	f67f ae96 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40021400 	.word	0x40021400
 8002828:	40021800 	.word	0x40021800
 800282c:	40013c00 	.word	0x40013c00

08002830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e001      	b.n	8002852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a4:	887a      	ldrh	r2, [r7, #2]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	041a      	lsls	r2, r3, #16
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	400b      	ands	r3, r1
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e12b      	b.n	8002b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fce2 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800291a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800292a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800292c:	f001 f96e 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4a81      	ldr	r2, [pc, #516]	; (8002b3c <HAL_I2C_Init+0x274>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d807      	bhi.n	800294c <HAL_I2C_Init+0x84>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a80      	ldr	r2, [pc, #512]	; (8002b40 <HAL_I2C_Init+0x278>)
 8002940:	4293      	cmp	r3, r2
 8002942:	bf94      	ite	ls
 8002944:	2301      	movls	r3, #1
 8002946:	2300      	movhi	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e006      	b.n	800295a <HAL_I2C_Init+0x92>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4a7d      	ldr	r2, [pc, #500]	; (8002b44 <HAL_I2C_Init+0x27c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	bf94      	ite	ls
 8002954:	2301      	movls	r3, #1
 8002956:	2300      	movhi	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0e7      	b.n	8002b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4a78      	ldr	r2, [pc, #480]	; (8002b48 <HAL_I2C_Init+0x280>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0c9b      	lsrs	r3, r3, #18
 800296c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a6a      	ldr	r2, [pc, #424]	; (8002b3c <HAL_I2C_Init+0x274>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d802      	bhi.n	800299c <HAL_I2C_Init+0xd4>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	3301      	adds	r3, #1
 800299a:	e009      	b.n	80029b0 <HAL_I2C_Init+0xe8>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	4a69      	ldr	r2, [pc, #420]	; (8002b4c <HAL_I2C_Init+0x284>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	3301      	adds	r3, #1
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	430b      	orrs	r3, r1
 80029b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	495c      	ldr	r1, [pc, #368]	; (8002b3c <HAL_I2C_Init+0x274>)
 80029cc:	428b      	cmp	r3, r1
 80029ce:	d819      	bhi.n	8002a04 <HAL_I2C_Init+0x13c>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e59      	subs	r1, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fbb1 f3f3 	udiv	r3, r1, r3
 80029de:	1c59      	adds	r1, r3, #1
 80029e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029e4:	400b      	ands	r3, r1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_I2C_Init+0x138>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1e59      	subs	r1, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fe:	e051      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a00:	2304      	movs	r3, #4
 8002a02:	e04f      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d111      	bne.n	8002a30 <HAL_I2C_Init+0x168>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	440b      	add	r3, r1
 8002a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e012      	b.n	8002a56 <HAL_I2C_Init+0x18e>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1e58      	subs	r0, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	0099      	lsls	r1, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Init+0x196>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e022      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10e      	bne.n	8002a84 <HAL_I2C_Init+0x1bc>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1e58      	subs	r0, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	440b      	add	r3, r1
 8002a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a82:	e00f      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e58      	subs	r0, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	0099      	lsls	r1, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	6809      	ldr	r1, [r1, #0]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6911      	ldr	r1, [r2, #16]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68d2      	ldr	r2, [r2, #12]
 8002ade:	4311      	orrs	r1, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	000186a0 	.word	0x000186a0
 8002b40:	001e847f 	.word	0x001e847f
 8002b44:	003d08ff 	.word	0x003d08ff
 8002b48:	431bde83 	.word	0x431bde83
 8002b4c:	10624dd3 	.word	0x10624dd3

08002b50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	460b      	mov	r3, r1
 8002b64:	813b      	strh	r3, [r7, #8]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b6a:	f7fe ff6d 	bl	8001a48 <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	f040 80d9 	bne.w	8002d30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2319      	movs	r3, #25
 8002b84:	2201      	movs	r2, #1
 8002b86:	496d      	ldr	r1, [pc, #436]	; (8002d3c <HAL_I2C_Mem_Write+0x1ec>)
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f971 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0cc      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Mem_Write+0x56>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0c5      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d007      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2221      	movs	r2, #33	; 0x21
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a4d      	ldr	r2, [pc, #308]	; (8002d40 <HAL_I2C_Mem_Write+0x1f0>)
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c0e:	88f8      	ldrh	r0, [r7, #6]
 8002c10:	893a      	ldrh	r2, [r7, #8]
 8002c12:	8979      	ldrh	r1, [r7, #10]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f890 	bl	8002d44 <I2C_RequestMemoryWrite>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d052      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e081      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f9f2 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1aa      	bne.n	8002c2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f9de 	bl	800309e <I2C_WaitOnBTFFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00d      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d107      	bne.n	8002d00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e016      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	460b      	mov	r3, r1
 8002d58:	813b      	strh	r3, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f878 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d94:	d103      	bne.n	8002d9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e05f      	b.n	8002e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	492d      	ldr	r1, [pc, #180]	; (8002e6c <I2C_RequestMemoryWrite+0x128>)
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f8b0 	bl	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e04c      	b.n	8002e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de0:	6a39      	ldr	r1, [r7, #32]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f91a 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d107      	bne.n	8002e06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e02b      	b.n	8002e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e10:	893b      	ldrh	r3, [r7, #8]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]
 8002e1a:	e021      	b.n	8002e60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e1c:	893b      	ldrh	r3, [r7, #8]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	6a39      	ldr	r1, [r7, #32]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f8f4 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d107      	bne.n	8002e52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e005      	b.n	8002e62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e56:	893b      	ldrh	r3, [r7, #8]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	00010002 	.word	0x00010002

08002e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e80:	e025      	b.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e88:	d021      	beq.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe fddd 	bl	8001a48 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d116      	bne.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0220 	orr.w	r2, r3, #32
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e023      	b.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10d      	bne.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf0c      	ite	eq
 8002eea:	2301      	moveq	r3, #1
 8002eec:	2300      	movne	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	e00c      	b.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d0b6      	beq.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2c:	e051      	b.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3c:	d123      	bne.n	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f043 0204 	orr.w	r2, r3, #4
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e046      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f8c:	d021      	beq.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7fe fd5b 	bl	8001a48 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d116      	bne.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e020      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10c      	bne.n	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	e00b      	b.n	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d18d      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003028:	e02d      	b.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f878 	bl	8003120 <I2C_IsAcknowledgeFailed>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e02d      	b.n	8003096 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003040:	d021      	beq.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fe fd01 	bl	8001a48 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d116      	bne.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e007      	b.n	8003096 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	2b80      	cmp	r3, #128	; 0x80
 8003092:	d1ca      	bne.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030aa:	e02d      	b.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f837 	bl	8003120 <I2C_IsAcknowledgeFailed>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e02d      	b.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c2:	d021      	beq.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c4:	f7fe fcc0 	bl	8001a48 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d302      	bcc.n	80030da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d116      	bne.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e007      	b.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b04      	cmp	r3, #4
 8003114:	d1ca      	bne.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d11b      	bne.n	8003170 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003140:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e0e1      	b.n	8003356 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a6d      	ldr	r2, [pc, #436]	; (8003360 <HAL_I2S_Init+0x1e0>)
 80031aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fe f8cb 	bl	8001348 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031c8:	f023 030f 	bic.w	r3, r3, #15
 80031cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2202      	movs	r2, #2
 80031d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d06f      	beq.n	80032be <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031e6:	2310      	movs	r3, #16
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	e001      	b.n	80031f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d802      	bhi.n	80031fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a58      	ldr	r2, [pc, #352]	; (8003364 <HAL_I2S_Init+0x1e4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_I2S_Init+0x92>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a56      	ldr	r2, [pc, #344]	; (8003368 <HAL_I2S_Init+0x1e8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d104      	bne.n	800321c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003212:	2001      	movs	r0, #1
 8003214:	f001 f84c 	bl	80042b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	e003      	b.n	8003224 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800321c:	2002      	movs	r0, #2
 800321e:	f001 f847 	bl	80042b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003222:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322c:	d125      	bne.n	800327a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	3305      	adds	r3, #5
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e01f      	b.n	8003298 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	3305      	adds	r3, #5
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e00e      	b.n	8003298 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	461a      	mov	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	3305      	adds	r3, #5
 8003296:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4a34      	ldr	r2, [pc, #208]	; (800336c <HAL_I2S_Init+0x1ec>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	e003      	b.n	80032c6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032be:	2302      	movs	r3, #2
 80032c0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d902      	bls.n	80032d2 <HAL_I2S_Init+0x152>
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2bff      	cmp	r3, #255	; 0xff
 80032d0:	d907      	bls.n	80032e2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e039      	b.n	8003356 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	ea42 0103 	orr.w	r1, r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003300:	f023 030f 	bic.w	r3, r3, #15
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6851      	ldr	r1, [r2, #4]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6892      	ldr	r2, [r2, #8]
 800330c:	4311      	orrs	r1, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6992      	ldr	r2, [r2, #24]
 8003318:	430a      	orrs	r2, r1
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003324:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b30      	cmp	r3, #48	; 0x30
 800332c:	d003      	beq.n	8003336 <HAL_I2S_Init+0x1b6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2bb0      	cmp	r3, #176	; 0xb0
 8003334:	d107      	bne.n	8003346 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003344:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	08003801 	.word	0x08003801
 8003364:	40003800 	.word	0x40003800
 8003368:	40003c00 	.word	0x40003c00
 800336c:	cccccccd 	.word	0xcccccccd

08003370 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_I2S_Receive_DMA+0x1a>
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e0a1      	b.n	80034d2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_I2S_Receive_DMA+0x2e>
 800339a:	2302      	movs	r3, #2
 800339c:	e099      	b.n	80034d2 <HAL_I2S_Receive_DMA+0x162>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d005      	beq.n	80033be <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
 80033bc:	e089      	b.n	80034d2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2204      	movs	r2, #4
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d002      	beq.n	80033ea <HAL_I2S_Receive_DMA+0x7a>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d10a      	bne.n	8003400 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	865a      	strh	r2, [r3, #50]	; 0x32
 80033fe:	e005      	b.n	800340c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	4a32      	ldr	r2, [pc, #200]	; (80034dc <HAL_I2S_Receive_DMA+0x16c>)
 8003412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <HAL_I2S_Receive_DMA+0x170>)
 800341a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	4a30      	ldr	r2, [pc, #192]	; (80034e4 <HAL_I2S_Receive_DMA+0x174>)
 8003422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003432:	d10a      	bne.n	800344a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	4619      	mov	r1, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003460:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003462:	f7fe fcfd 	bl	8001e60 <HAL_DMA_Start_IT>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00f      	beq.n	800348c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f043 0208 	orr.w	r2, r3, #8
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e022      	b.n	80034d2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003496:	2b00      	cmp	r3, #0
 8003498:	d107      	bne.n	80034aa <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034a8:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	080036df 	.word	0x080036df
 80034e0:	0800369d 	.word	0x0800369d
 80034e4:	080036fb 	.word	0x080036fb

080034e8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fc:	d003      	beq.n	8003506 <HAL_I2S_DMAStop+0x1e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d155      	bne.n	80035b2 <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00f      	beq.n	800352e <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fcfc 	bl	8001f10 <HAL_DMA_Abort>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f043 0208 	orr.w	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800352e:	2364      	movs	r3, #100	; 0x64
 8003530:	2201      	movs	r2, #1
 8003532:	2102      	movs	r1, #2
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f9ed 	bl	8003914 <I2S_WaitFlagStateUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003558:	2364      	movs	r3, #100	; 0x64
 800355a:	2200      	movs	r2, #0
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f9d8 	bl	8003914 <I2S_WaitFlagStateUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003590:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0202 	bic.w	r2, r2, #2
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	e04d      	b.n	800364e <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ba:	d004      	beq.n	80035c6 <HAL_I2S_DMAStop+0xde>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d143      	bne.n	800364e <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00f      	beq.n	80035ee <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fc9c 	bl	8001f10 <HAL_DMA_Abort>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f043 0208 	orr.w	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fc:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362c:	d10c      	bne.n	8003648 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
 8003646:	e002      	b.n	800364e <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10e      	bne.n	80036d0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7fd fba7 	bl	8000e24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff ffc1 	bl	8003674 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0203 	bic.w	r2, r2, #3
 8003716:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	f043 0208 	orr.w	r2, r3, #8
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff ffa5 	bl	8003688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	881a      	ldrh	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	1c9a      	adds	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10e      	bne.n	800379a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800378a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff63 	bl	8003660 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	b292      	uxth	r2, r2
 80037b6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	1c9a      	adds	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10e      	bne.n	80037f8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd fb16 	bl	8000e24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b04      	cmp	r3, #4
 800381a:	d13a      	bne.n	8003892 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d109      	bne.n	800383a <I2S_IRQHandler+0x3a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d102      	bne.n	800383a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ffb4 	bl	80037a2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d126      	bne.n	8003892 <I2S_IRQHandler+0x92>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b20      	cmp	r3, #32
 8003850:	d11f      	bne.n	8003892 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003860:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	f043 0202 	orr.w	r2, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fefb 	bl	8003688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b03      	cmp	r3, #3
 800389c:	d136      	bne.n	800390c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d109      	bne.n	80038bc <I2S_IRQHandler+0xbc>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b80      	cmp	r3, #128	; 0x80
 80038b4:	d102      	bne.n	80038bc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff ff45 	bl	8003746 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d122      	bne.n	800390c <I2S_IRQHandler+0x10c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d11b      	bne.n	800390c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff febe 	bl	8003688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800390c:	bf00      	nop
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003924:	f7fe f890 	bl	8001a48 <HAL_GetTick>
 8003928:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800392a:	e018      	b.n	800395e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003932:	d014      	beq.n	800395e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003934:	f7fe f888 	bl	8001a48 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d902      	bls.n	800394a <I2S_WaitFlagStateUntilTimeout+0x36>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00f      	b.n	800397e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	d1d7      	bne.n	800392c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x90>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x90>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	6413      	str	r3, [r2, #64]	; 0x40
 80039a2:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x90>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039ae:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x94>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039b4:	f7fe f848 	bl	8001a48 <HAL_GetTick>
 80039b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ba:	e009      	b.n	80039d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039bc:	f7fe f844 	bl	8001a48 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ca:	d901      	bls.n	80039d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e01f      	b.n	8003a10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_PWREx_EnableOverDrive+0x98>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d1ee      	bne.n	80039bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039e4:	f7fe f830 	bl	8001a48 <HAL_GetTick>
 80039e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039ea:	e009      	b.n	8003a00 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039ec:	f7fe f82c 	bl	8001a48 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039fa:	d901      	bls.n	8003a00 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e007      	b.n	8003a10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a0c:	d1ee      	bne.n	80039ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	420e0040 	.word	0x420e0040
 8003a20:	40007000 	.word	0x40007000
 8003a24:	420e0044 	.word	0x420e0044

08003a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0cc      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d90c      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b65      	ldr	r3, [pc, #404]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0b8      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a7c:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a58      	ldr	r2, [pc, #352]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a94:	4b53      	ldr	r3, [pc, #332]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a52      	ldr	r2, [pc, #328]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa0:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	494d      	ldr	r1, [pc, #308]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d044      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d119      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e07f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	4b3f      	ldr	r3, [pc, #252]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af6:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e067      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b06:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4934      	ldr	r1, [pc, #208]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b18:	f7fd ff96 	bl	8001a48 <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b20:	f7fd ff92 	bl	8001a48 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e04f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 020c 	and.w	r2, r3, #12
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d1eb      	bne.n	8003b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b48:	4b25      	ldr	r3, [pc, #148]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d20c      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e032      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4916      	ldr	r1, [pc, #88]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	490e      	ldr	r1, [pc, #56]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bae:	f000 fdc1 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	490a      	ldr	r1, [pc, #40]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc0:	5ccb      	ldrb	r3, [r1, r3]
 8003bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fef6 	bl	80019c0 <HAL_InitTick>

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023c00 	.word	0x40023c00
 8003be4:	40023800 	.word	0x40023800
 8003be8:	0800bcdc 	.word	0x0800bcdc
 8003bec:	20000004 	.word	0x20000004
 8003bf0:	20000008 	.word	0x20000008

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000004 	.word	0x20000004

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	0800bcec 	.word	0x0800bcec

08003c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c38:	f7ff ffdc 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0b5b      	lsrs	r3, r3, #13
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	0800bcec 	.word	0x0800bcec

08003c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08c      	sub	sp, #48	; 0x30
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d010      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003c94:	4b6f      	ldr	r3, [pc, #444]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	496c      	ldr	r1, [pc, #432]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d010      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003cc2:	4b64      	ldr	r3, [pc, #400]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	4960      	ldr	r1, [pc, #384]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d017      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf0:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4955      	ldr	r1, [pc, #340]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003d10:	2301      	movs	r3, #1
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d2c:	4b49      	ldr	r3, [pc, #292]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	4946      	ldr	r1, [pc, #280]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 808a 	beq.w	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	4a38      	ldr	r2, [pc, #224]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7a:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d86:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a33      	ldr	r2, [pc, #204]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d92:	f7fd fe59 	bl	8001a48 <HAL_GetTick>
 8003d96:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fd fe55 	bl	8001a48 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e278      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dac:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003db8:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d02f      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd0:	6a3a      	ldr	r2, [r7, #32]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d028      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd6:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dde:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003df2:	4b18      	ldr	r3, [pc, #96]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d114      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dfe:	f7fd fe23 	bl	8001a48 <HAL_GetTick>
 8003e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	e00a      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e06:	f7fd fe1f 	bl	8001a48 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e240      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0ee      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e34:	d114      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4a:	4902      	ldr	r1, [pc, #8]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]
 8003e50:	e00c      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	42470e40 	.word	0x42470e40
 8003e60:	4b4a      	ldr	r3, [pc, #296]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a49      	ldr	r2, [pc, #292]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e6a:	6093      	str	r3, [r2, #8]
 8003e6c:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e78:	4944      	ldr	r1, [pc, #272]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d004      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003e90:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e92:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003ea0:	4b3a      	ldr	r3, [pc, #232]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	4937      	ldr	r1, [pc, #220]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ec2:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed0:	492e      	ldr	r1, [pc, #184]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d011      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ee4:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eea:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	4926      	ldr	r1, [pc, #152]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f02:	d101      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003f04:	2301      	movs	r3, #1
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003f14:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	491a      	ldr	r1, [pc, #104]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d011      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f44:	4911      	ldr	r1, [pc, #68]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f54:	d101      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003f56:	2301      	movs	r3, #1
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f68:	f040 80ff 	bne.w	800416a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f6c:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f72:	f7fd fd69 	bl	8001a48 <HAL_GetTick>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f78:	e00e      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f7a:	f7fd fd65 	bl	8001a48 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d907      	bls.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e188      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	424711e0 	.word	0x424711e0
 8003f94:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f98:	4b7e      	ldr	r3, [pc, #504]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ea      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d028      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d124      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fcc:	4b71      	ldr	r3, [pc, #452]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	3301      	adds	r3, #1
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fde:	4b6d      	ldr	r3, [pc, #436]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	019b      	lsls	r3, r3, #6
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	431a      	orrs	r2, r3
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	071b      	lsls	r3, r3, #28
 800400e:	4961      	ldr	r1, [pc, #388]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d004      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004034:	2b00      	cmp	r3, #0
 8004036:	d035      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004040:	d130      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004042:	4b54      	ldr	r3, [pc, #336]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004054:	4b4f      	ldr	r3, [pc, #316]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405a:	0f1b      	lsrs	r3, r3, #28
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	019b      	lsls	r3, r3, #6
 800406c:	431a      	orrs	r2, r3
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	3b01      	subs	r3, #1
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	431a      	orrs	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	071b      	lsls	r3, r3, #28
 8004084:	4943      	ldr	r1, [pc, #268]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800408c:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800408e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004092:	f023 021f 	bic.w	r2, r3, #31
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	3b01      	subs	r3, #1
 800409c:	493d      	ldr	r1, [pc, #244]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d029      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b8:	d124      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	3301      	adds	r3, #1
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040cc:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d2:	0f1b      	lsrs	r3, r3, #28
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	019b      	lsls	r3, r3, #6
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	431a      	orrs	r2, r3
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	431a      	orrs	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	071b      	lsls	r3, r3, #28
 80040fc:	4925      	ldr	r1, [pc, #148]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800410c:	2b00      	cmp	r3, #0
 800410e:	d016      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	3b01      	subs	r3, #1
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	061b      	lsls	r3, r3, #24
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	071b      	lsls	r3, r3, #28
 8004136:	4917      	ldr	r1, [pc, #92]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800413e:	4b16      	ldr	r3, [pc, #88]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004144:	f7fd fc80 	bl	8001a48 <HAL_GetTick>
 8004148:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800414c:	f7fd fc7c 	bl	8001a48 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e09f      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	2b01      	cmp	r3, #1
 800416e:	f040 8095 	bne.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004178:	f7fd fc66 	bl	8001a48 <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800417e:	e00f      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004180:	f7fd fc62 	bl	8001a48 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d908      	bls.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e085      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800
 8004198:	42470068 	.word	0x42470068
 800419c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041a0:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ac:	d0e8      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02b      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d127      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80041d6:	4b34      	ldr	r3, [pc, #208]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	019b      	lsls	r3, r3, #6
 80041f2:	431a      	orrs	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	3b01      	subs	r3, #1
 80041fa:	041b      	lsls	r3, r3, #16
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	061b      	lsls	r3, r3, #24
 8004204:	4928      	ldr	r1, [pc, #160]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800420c:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800420e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004212:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	3b01      	subs	r3, #1
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	4922      	ldr	r1, [pc, #136]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01d      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423a:	d118      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800423c:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	0e1b      	lsrs	r3, r3, #24
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	019b      	lsls	r3, r3, #6
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	3b01      	subs	r3, #1
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	431a      	orrs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	061b      	lsls	r3, r3, #24
 8004266:	4910      	ldr	r1, [pc, #64]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004274:	f7fd fbe8 	bl	8001a48 <HAL_GetTick>
 8004278:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800427c:	f7fd fbe4 	bl	8001a48 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e007      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800429a:	d1ef      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3730      	adds	r7, #48	; 0x30
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	42470070 	.word	0x42470070

080042b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	; 0x24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	2b07      	cmp	r3, #7
 80042d6:	f200 8220 	bhi.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080044e3 	.word	0x080044e3
 80042e4:	08004605 	.word	0x08004605
 80042e8:	0800471b 	.word	0x0800471b
 80042ec:	08004301 	.word	0x08004301
 80042f0:	0800471b 	.word	0x0800471b
 80042f4:	0800471b 	.word	0x0800471b
 80042f8:	0800471b 	.word	0x0800471b
 80042fc:	08004301 	.word	0x08004301
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004300:	4ba7      	ldr	r3, [pc, #668]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004306:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004316:	f000 80d6 	beq.w	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004320:	f200 80dd 	bhi.w	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800432a:	f000 809f 	beq.w	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004334:	f200 80d3 	bhi.w	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800433e:	d05b      	beq.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004346:	f200 80ca 	bhi.w	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004350:	f000 80b6 	beq.w	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800435a:	f200 80c0 	bhi.w	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004364:	f000 8082 	beq.w	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800436e:	f200 80b6 	bhi.w	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437e:	d03b      	beq.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8004380:	e0ad      	b.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004382:	4b87      	ldr	r3, [pc, #540]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800438e:	4b84      	ldr	r3, [pc, #528]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004398:	4a82      	ldr	r2, [pc, #520]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e008      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80043a2:	4b7f      	ldr	r3, [pc, #508]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ac:	4a7d      	ldr	r2, [pc, #500]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80043b4:	4b7a      	ldr	r3, [pc, #488]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	0e1b      	lsrs	r3, r3, #24
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80043c2:	4b77      	ldr	r3, [pc, #476]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	099b      	lsrs	r3, r3, #6
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	fb03 f202 	mul.w	r2, r3, r2
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80043dc:	4b70      	ldr	r3, [pc, #448]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	3301      	adds	r3, #1
 80043ea:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	61fb      	str	r3, [r7, #28]
          break;
 80043f6:	e073      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043f8:	4b69      	ldr	r3, [pc, #420]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004404:	4b66      	ldr	r3, [pc, #408]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440e:	4a65      	ldr	r2, [pc, #404]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e008      	b.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8004418:	4b61      	ldr	r3, [pc, #388]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800441a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004422:	4a60      	ldr	r2, [pc, #384]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800442a:	4b5d      	ldr	r3, [pc, #372]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004430:	0e1b      	lsrs	r3, r3, #24
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8004438:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	099b      	lsrs	r3, r3, #6
 8004440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	fb03 f202 	mul.w	r2, r3, r2
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8004452:	4b53      	ldr	r3, [pc, #332]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	3301      	adds	r3, #1
 800445e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	61fb      	str	r3, [r7, #28]
          break;
 800446a:	e039      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800446c:	4b4c      	ldr	r3, [pc, #304]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d108      	bne.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004478:	4b49      	ldr	r3, [pc, #292]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004480:	4a48      	ldr	r2, [pc, #288]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e007      	b.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800448a:	4b45      	ldr	r3, [pc, #276]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004492:	4a44      	ldr	r2, [pc, #272]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800449a:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	0f1b      	lsrs	r3, r3, #28
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80044a6:	4b3e      	ldr	r3, [pc, #248]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	099b      	lsrs	r3, r3, #6
 80044ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	fb03 f202 	mul.w	r2, r3, r2
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044bc:	61fb      	str	r3, [r7, #28]
          break;
 80044be:	e00f      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80044c0:	4b39      	ldr	r3, [pc, #228]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044c2:	61fb      	str	r3, [r7, #28]
          break;
 80044c4:	e00c      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80044c6:	4b36      	ldr	r3, [pc, #216]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80044d2:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044d4:	61fb      	str	r3, [r7, #28]
          break;
 80044d6:	e003      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80044d8:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044da:	61fb      	str	r3, [r7, #28]
          break;
 80044dc:	e000      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80044de:	bf00      	nop
        }
      }
      break;
 80044e0:	e11b      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80044e2:	4b2f      	ldr	r3, [pc, #188]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80044f4:	d075      	beq.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80044fc:	d87e      	bhi.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004504:	d03c      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800450c:	d876      	bhi.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d006      	beq.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800451a:	d16f      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800451e:	61fb      	str	r3, [r7, #28]
          break;
 8004520:	e06f      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004522:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452e:	d109      	bne.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004530:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453a:	4a1a      	ldr	r2, [pc, #104]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	e008      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004544:	4b16      	ldr	r3, [pc, #88]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	fb02 f303 	mul.w	r3, r2, r3
 8004568:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	0f1b      	lsrs	r3, r3, #28
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	61fb      	str	r3, [r7, #28]
          break;
 800457e:	e040      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458c:	d10e      	bne.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004596:	4a03      	ldr	r2, [pc, #12]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e00d      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80045a0:	40023800 	.word	0x40023800
 80045a4:	00f42400 	.word	0x00f42400
 80045a8:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045ac:	4b5e      	ldr	r3, [pc, #376]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b4:	4a5d      	ldr	r2, [pc, #372]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80045bc:	4b5a      	ldr	r3, [pc, #360]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	fb02 f303 	mul.w	r3, r2, r3
 80045cc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80045ce:	4b56      	ldr	r3, [pc, #344]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	0f1b      	lsrs	r3, r3, #28
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	61fb      	str	r3, [r7, #28]
          break;
 80045e0:	e00f      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045e2:	4b51      	ldr	r3, [pc, #324]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ee:	d102      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          {
            frequency = HSE_VALUE;
 80045f0:	4b4e      	ldr	r3, [pc, #312]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045f2:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80045f4:	e005      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
            frequency = HSI_VALUE;
 80045f6:	4b4d      	ldr	r3, [pc, #308]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045f8:	61fb      	str	r3, [r7, #28]
          break;
 80045fa:	e002      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
          break;
 8004600:	bf00      	nop
        }
      }
      break;
 8004602:	e08a      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004604:	4b48      	ldr	r3, [pc, #288]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800460a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004616:	d06f      	beq.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800461e:	d878      	bhi.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004626:	d03c      	beq.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800462e:	d870      	bhi.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d006      	beq.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463c:	d169      	bne.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800463e:	4b3c      	ldr	r3, [pc, #240]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004640:	61fb      	str	r3, [r7, #28]
          break;
 8004642:	e069      	b.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004644:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004650:	d109      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004652:	4b35      	ldr	r3, [pc, #212]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465c:	4a33      	ldr	r2, [pc, #204]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e008      	b.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004666:	4b30      	ldr	r3, [pc, #192]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004670:	4a2e      	ldr	r2, [pc, #184]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004678:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800467a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800468c:	4b26      	ldr	r3, [pc, #152]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800468e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004692:	0f1b      	lsrs	r3, r3, #28
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	61fb      	str	r3, [r7, #28]
          break;
 80046a0:	e03a      	b.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046a2:	4b21      	ldr	r3, [pc, #132]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ae:	d108      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046b0:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b8:	4a1c      	ldr	r2, [pc, #112]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80046ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e007      	b.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046c2:	4b19      	ldr	r3, [pc, #100]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ca:	4a18      	ldr	r2, [pc, #96]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80046e4:	4b10      	ldr	r3, [pc, #64]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	0f1b      	lsrs	r3, r3, #28
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	61fb      	str	r3, [r7, #28]
          break;
 80046f6:	e00f      	b.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004704:	d102      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          {
            frequency = HSE_VALUE;
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004708:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800470a:	e005      	b.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = HSI_VALUE;
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800470e:	61fb      	str	r3, [r7, #28]
          break;
 8004710:	e002      	b.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
          break;
 8004716:	bf00      	nop
        }
      }
      break;
 8004718:	bf00      	nop
    }
  }
  return frequency;
 800471a:	69fb      	ldr	r3, [r7, #28]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3724      	adds	r7, #36	; 0x24
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40023800 	.word	0x40023800
 800472c:	00f42400 	.word	0x00f42400
 8004730:	00bb8000 	.word	0x00bb8000

08004734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004738:	b0ae      	sub	sp, #184	; 0xb8
 800473a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800475a:	4bcb      	ldr	r3, [pc, #812]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x354>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b0c      	cmp	r3, #12
 8004764:	f200 8204 	bhi.w	8004b70 <HAL_RCC_GetSysClockFreq+0x43c>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <HAL_RCC_GetSysClockFreq+0x3c>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	080047a5 	.word	0x080047a5
 8004774:	08004b71 	.word	0x08004b71
 8004778:	08004b71 	.word	0x08004b71
 800477c:	08004b71 	.word	0x08004b71
 8004780:	080047ad 	.word	0x080047ad
 8004784:	08004b71 	.word	0x08004b71
 8004788:	08004b71 	.word	0x08004b71
 800478c:	08004b71 	.word	0x08004b71
 8004790:	080047b5 	.word	0x080047b5
 8004794:	08004b71 	.word	0x08004b71
 8004798:	08004b71 	.word	0x08004b71
 800479c:	08004b71 	.word	0x08004b71
 80047a0:	080049a5 	.word	0x080049a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047a4:	4bb9      	ldr	r3, [pc, #740]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x358>)
 80047a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80047aa:	e1e5      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ac:	4bb7      	ldr	r3, [pc, #732]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x358>)
 80047ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047b2:	e1e1      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047b4:	4bb4      	ldr	r3, [pc, #720]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047c0:	4bb1      	ldr	r3, [pc, #708]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d071      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047cc:	4bae      	ldr	r3, [pc, #696]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80047dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047f2:	4622      	mov	r2, r4
 80047f4:	462b      	mov	r3, r5
 80047f6:	f04f 0000 	mov.w	r0, #0
 80047fa:	f04f 0100 	mov.w	r1, #0
 80047fe:	0159      	lsls	r1, r3, #5
 8004800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004804:	0150      	lsls	r0, r2, #5
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4621      	mov	r1, r4
 800480c:	1a51      	subs	r1, r2, r1
 800480e:	6439      	str	r1, [r7, #64]	; 0x40
 8004810:	4629      	mov	r1, r5
 8004812:	eb63 0301 	sbc.w	r3, r3, r1
 8004816:	647b      	str	r3, [r7, #68]	; 0x44
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004824:	4649      	mov	r1, r9
 8004826:	018b      	lsls	r3, r1, #6
 8004828:	4641      	mov	r1, r8
 800482a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800482e:	4641      	mov	r1, r8
 8004830:	018a      	lsls	r2, r1, #6
 8004832:	4641      	mov	r1, r8
 8004834:	1a51      	subs	r1, r2, r1
 8004836:	63b9      	str	r1, [r7, #56]	; 0x38
 8004838:	4649      	mov	r1, r9
 800483a:	eb63 0301 	sbc.w	r3, r3, r1
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800484c:	4649      	mov	r1, r9
 800484e:	00cb      	lsls	r3, r1, #3
 8004850:	4641      	mov	r1, r8
 8004852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004856:	4641      	mov	r1, r8
 8004858:	00ca      	lsls	r2, r1, #3
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	4603      	mov	r3, r0
 8004860:	4622      	mov	r2, r4
 8004862:	189b      	adds	r3, r3, r2
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
 8004866:	462b      	mov	r3, r5
 8004868:	460a      	mov	r2, r1
 800486a:	eb42 0303 	adc.w	r3, r2, r3
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800487c:	4629      	mov	r1, r5
 800487e:	028b      	lsls	r3, r1, #10
 8004880:	4621      	mov	r1, r4
 8004882:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004886:	4621      	mov	r1, r4
 8004888:	028a      	lsls	r2, r1, #10
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004898:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800489c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80048a0:	f7fb fd16 	bl	80002d0 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4613      	mov	r3, r2
 80048aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048ae:	e067      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b0:	4b75      	ldr	r3, [pc, #468]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	099b      	lsrs	r3, r3, #6
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80048c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048ca:	2300      	movs	r3, #0
 80048cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80048d2:	4622      	mov	r2, r4
 80048d4:	462b      	mov	r3, r5
 80048d6:	f04f 0000 	mov.w	r0, #0
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	0159      	lsls	r1, r3, #5
 80048e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e4:	0150      	lsls	r0, r2, #5
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4621      	mov	r1, r4
 80048ec:	1a51      	subs	r1, r2, r1
 80048ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80048f0:	4629      	mov	r1, r5
 80048f2:	eb63 0301 	sbc.w	r3, r3, r1
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004904:	4649      	mov	r1, r9
 8004906:	018b      	lsls	r3, r1, #6
 8004908:	4641      	mov	r1, r8
 800490a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800490e:	4641      	mov	r1, r8
 8004910:	018a      	lsls	r2, r1, #6
 8004912:	4641      	mov	r1, r8
 8004914:	ebb2 0a01 	subs.w	sl, r2, r1
 8004918:	4649      	mov	r1, r9
 800491a:	eb63 0b01 	sbc.w	fp, r3, r1
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800492a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800492e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004932:	4692      	mov	sl, r2
 8004934:	469b      	mov	fp, r3
 8004936:	4623      	mov	r3, r4
 8004938:	eb1a 0303 	adds.w	r3, sl, r3
 800493c:	623b      	str	r3, [r7, #32]
 800493e:	462b      	mov	r3, r5
 8004940:	eb4b 0303 	adc.w	r3, fp, r3
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004952:	4629      	mov	r1, r5
 8004954:	028b      	lsls	r3, r1, #10
 8004956:	4621      	mov	r1, r4
 8004958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800495c:	4621      	mov	r1, r4
 800495e:	028a      	lsls	r2, r1, #10
 8004960:	4610      	mov	r0, r2
 8004962:	4619      	mov	r1, r3
 8004964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004968:	2200      	movs	r2, #0
 800496a:	673b      	str	r3, [r7, #112]	; 0x70
 800496c:	677a      	str	r2, [r7, #116]	; 0x74
 800496e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004972:	f7fb fcad 	bl	80002d0 <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4613      	mov	r3, r2
 800497c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004980:	4b41      	ldr	r3, [pc, #260]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049a2:	e0e9      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a4:	4b38      	ldr	r3, [pc, #224]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049b0:	4b35      	ldr	r3, [pc, #212]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d069      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049bc:	4b32      	ldr	r3, [pc, #200]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	099b      	lsrs	r3, r3, #6
 80049c2:	2200      	movs	r2, #0
 80049c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ce:	663b      	str	r3, [r7, #96]	; 0x60
 80049d0:	2300      	movs	r3, #0
 80049d2:	667b      	str	r3, [r7, #100]	; 0x64
 80049d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80049d8:	4622      	mov	r2, r4
 80049da:	462b      	mov	r3, r5
 80049dc:	f04f 0000 	mov.w	r0, #0
 80049e0:	f04f 0100 	mov.w	r1, #0
 80049e4:	0159      	lsls	r1, r3, #5
 80049e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ea:	0150      	lsls	r0, r2, #5
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4621      	mov	r1, r4
 80049f2:	1a51      	subs	r1, r2, r1
 80049f4:	61b9      	str	r1, [r7, #24]
 80049f6:	4629      	mov	r1, r5
 80049f8:	eb63 0301 	sbc.w	r3, r3, r1
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a0a:	4659      	mov	r1, fp
 8004a0c:	018b      	lsls	r3, r1, #6
 8004a0e:	4651      	mov	r1, sl
 8004a10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a14:	4651      	mov	r1, sl
 8004a16:	018a      	lsls	r2, r1, #6
 8004a18:	4651      	mov	r1, sl
 8004a1a:	ebb2 0801 	subs.w	r8, r2, r1
 8004a1e:	4659      	mov	r1, fp
 8004a20:	eb63 0901 	sbc.w	r9, r3, r1
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a38:	4690      	mov	r8, r2
 8004a3a:	4699      	mov	r9, r3
 8004a3c:	4623      	mov	r3, r4
 8004a3e:	eb18 0303 	adds.w	r3, r8, r3
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	462b      	mov	r3, r5
 8004a46:	eb49 0303 	adc.w	r3, r9, r3
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a58:	4629      	mov	r1, r5
 8004a5a:	028b      	lsls	r3, r1, #10
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a62:	4621      	mov	r1, r4
 8004a64:	028a      	lsls	r2, r1, #10
 8004a66:	4610      	mov	r0, r2
 8004a68:	4619      	mov	r1, r3
 8004a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a6e:	2200      	movs	r2, #0
 8004a70:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a78:	f7fb fc2a 	bl	80002d0 <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4613      	mov	r3, r2
 8004a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a86:	e063      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x41c>
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a90:	4b3d      	ldr	r3, [pc, #244]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x454>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	2200      	movs	r2, #0
 8004a98:	4618      	mov	r0, r3
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	657b      	str	r3, [r7, #84]	; 0x54
 8004aa6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004aaa:	4642      	mov	r2, r8
 8004aac:	464b      	mov	r3, r9
 8004aae:	f04f 0000 	mov.w	r0, #0
 8004ab2:	f04f 0100 	mov.w	r1, #0
 8004ab6:	0159      	lsls	r1, r3, #5
 8004ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004abc:	0150      	lsls	r0, r2, #5
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	1a51      	subs	r1, r2, r1
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	4649      	mov	r1, r9
 8004aca:	eb63 0301 	sbc.w	r3, r3, r1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004adc:	4659      	mov	r1, fp
 8004ade:	018b      	lsls	r3, r1, #6
 8004ae0:	4651      	mov	r1, sl
 8004ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ae6:	4651      	mov	r1, sl
 8004ae8:	018a      	lsls	r2, r1, #6
 8004aea:	4651      	mov	r1, sl
 8004aec:	1a54      	subs	r4, r2, r1
 8004aee:	4659      	mov	r1, fp
 8004af0:	eb63 0501 	sbc.w	r5, r3, r1
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	00eb      	lsls	r3, r5, #3
 8004afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b02:	00e2      	lsls	r2, r4, #3
 8004b04:	4614      	mov	r4, r2
 8004b06:	461d      	mov	r5, r3
 8004b08:	4643      	mov	r3, r8
 8004b0a:	18e3      	adds	r3, r4, r3
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	464b      	mov	r3, r9
 8004b10:	eb45 0303 	adc.w	r3, r5, r3
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b22:	4629      	mov	r1, r5
 8004b24:	028b      	lsls	r3, r1, #10
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	028a      	lsls	r2, r1, #10
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b38:	2200      	movs	r2, #0
 8004b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b3c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b42:	f7fb fbc5 	bl	80002d0 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b50:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x454>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0f1b      	lsrs	r3, r3, #28
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b6e:	e003      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x458>)
 8004b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	37b8      	adds	r7, #184	; 0xb8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	00f42400 	.word	0x00f42400

08004b90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e28d      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8083 	beq.w	8004cb6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bb0:	4b94      	ldr	r3, [pc, #592]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d019      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bbc:	4b91      	ldr	r3, [pc, #580]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d106      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bc8:	4b8e      	ldr	r3, [pc, #568]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4b8b      	ldr	r3, [pc, #556]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d112      	bne.n	8004c08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be2:	4b88      	ldr	r3, [pc, #544]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bee:	d10b      	bne.n	8004c08 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	4b84      	ldr	r3, [pc, #528]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05b      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x124>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d157      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e25a      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d106      	bne.n	8004c20 <HAL_RCC_OscConfig+0x90>
 8004c12:	4b7c      	ldr	r3, [pc, #496]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a7b      	ldr	r2, [pc, #492]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e01d      	b.n	8004c5c <HAL_RCC_OscConfig+0xcc>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCC_OscConfig+0xb4>
 8004c2a:	4b76      	ldr	r3, [pc, #472]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a75      	ldr	r2, [pc, #468]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	4b73      	ldr	r3, [pc, #460]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a72      	ldr	r2, [pc, #456]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_OscConfig+0xcc>
 8004c44:	4b6f      	ldr	r3, [pc, #444]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6e      	ldr	r2, [pc, #440]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	4b6c      	ldr	r3, [pc, #432]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a6b      	ldr	r2, [pc, #428]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fc fef0 	bl	8001a48 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fc feec 	bl	8001a48 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e21f      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	4b61      	ldr	r3, [pc, #388]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0xdc>
 8004c8a:	e014      	b.n	8004cb6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fc fedc 	bl	8001a48 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fc fed8 	bl	8001a48 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e20b      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	4b57      	ldr	r3, [pc, #348]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x104>
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d06f      	beq.n	8004da2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cc2:	4b50      	ldr	r3, [pc, #320]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d017      	beq.n	8004cfe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cce:	4b4d      	ldr	r3, [pc, #308]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d105      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cda:	4b4a      	ldr	r3, [pc, #296]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce6:	4b47      	ldr	r3, [pc, #284]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d11c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cf2:	4b44      	ldr	r3, [pc, #272]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d116      	bne.n	8004d2c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfe:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_RCC_OscConfig+0x186>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d001      	beq.n	8004d16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e1d3      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d16:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4937      	ldr	r1, [pc, #220]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2a:	e03a      	b.n	8004da2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d020      	beq.n	8004d76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d34:	4b34      	ldr	r3, [pc, #208]	; (8004e08 <HAL_RCC_OscConfig+0x278>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3a:	f7fc fe85 	bl	8001a48 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d42:	f7fc fe81 	bl	8001a48 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e1b4      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d54:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d60:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4925      	ldr	r1, [pc, #148]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	600b      	str	r3, [r1, #0]
 8004d74:	e015      	b.n	8004da2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <HAL_RCC_OscConfig+0x278>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fc fe64 	bl	8001a48 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d84:	f7fc fe60 	bl	8001a48 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e193      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d96:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d036      	beq.n	8004e1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d016      	beq.n	8004de4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db6:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <HAL_RCC_OscConfig+0x27c>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbc:	f7fc fe44 	bl	8001a48 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc4:	f7fc fe40 	bl	8001a48 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e173      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_OscConfig+0x274>)
 8004dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x234>
 8004de2:	e01b      	b.n	8004e1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCC_OscConfig+0x27c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dea:	f7fc fe2d 	bl	8001a48 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df0:	e00e      	b.n	8004e10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df2:	f7fc fe29 	bl	8001a48 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d907      	bls.n	8004e10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e15c      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
 8004e04:	40023800 	.word	0x40023800
 8004e08:	42470000 	.word	0x42470000
 8004e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e10:	4b8a      	ldr	r3, [pc, #552]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ea      	bne.n	8004df2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8097 	beq.w	8004f58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b83      	ldr	r3, [pc, #524]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	4b7f      	ldr	r3, [pc, #508]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	4a7e      	ldr	r2, [pc, #504]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e48:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4a:	4b7c      	ldr	r3, [pc, #496]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5a:	4b79      	ldr	r3, [pc, #484]	; (8005040 <HAL_RCC_OscConfig+0x4b0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d118      	bne.n	8004e98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e66:	4b76      	ldr	r3, [pc, #472]	; (8005040 <HAL_RCC_OscConfig+0x4b0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a75      	ldr	r2, [pc, #468]	; (8005040 <HAL_RCC_OscConfig+0x4b0>)
 8004e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e72:	f7fc fde9 	bl	8001a48 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7a:	f7fc fde5 	bl	8001a48 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e118      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8c:	4b6c      	ldr	r3, [pc, #432]	; (8005040 <HAL_RCC_OscConfig+0x4b0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x31e>
 8004ea0:	4b66      	ldr	r3, [pc, #408]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a65      	ldr	r2, [pc, #404]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004eac:	e01c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x358>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x340>
 8004eb6:	4b61      	ldr	r3, [pc, #388]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	4a60      	ldr	r2, [pc, #384]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec2:	4b5e      	ldr	r3, [pc, #376]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	4a5d      	ldr	r2, [pc, #372]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x358>
 8004ed0:	4b5a      	ldr	r3, [pc, #360]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	4a59      	ldr	r2, [pc, #356]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6713      	str	r3, [r2, #112]	; 0x70
 8004edc:	4b57      	ldr	r3, [pc, #348]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	4a56      	ldr	r2, [pc, #344]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fc fdaa 	bl	8001a48 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fc fda6 	bl	8001a48 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0d7      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0e:	4b4b      	ldr	r3, [pc, #300]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ee      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x368>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1c:	f7fc fd94 	bl	8001a48 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fc fd90 	bl	8001a48 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e0c1      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3a:	4b40      	ldr	r3, [pc, #256]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ee      	bne.n	8004f24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4c:	4b3b      	ldr	r3, [pc, #236]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	4a3a      	ldr	r2, [pc, #232]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80ad 	beq.w	80050bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f62:	4b36      	ldr	r3, [pc, #216]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d060      	beq.n	8005030 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d145      	bne.n	8005002 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	4b33      	ldr	r3, [pc, #204]	; (8005044 <HAL_RCC_OscConfig+0x4b4>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fc fd64 	bl	8001a48 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fc fd60 	bl	8001a48 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e093      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f96:	4b29      	ldr	r3, [pc, #164]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69da      	ldr	r2, [r3, #28]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	019b      	lsls	r3, r3, #6
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	061b      	lsls	r3, r3, #24
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	071b      	lsls	r3, r3, #28
 8004fce:	491b      	ldr	r1, [pc, #108]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd4:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <HAL_RCC_OscConfig+0x4b4>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7fc fd35 	bl	8001a48 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe2:	f7fc fd31 	bl	8001a48 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e064      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff4:	4b11      	ldr	r3, [pc, #68]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x452>
 8005000:	e05c      	b.n	80050bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <HAL_RCC_OscConfig+0x4b4>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fc fd1e 	bl	8001a48 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005010:	f7fc fd1a 	bl	8001a48 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e04d      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	4b06      	ldr	r3, [pc, #24]	; (800503c <HAL_RCC_OscConfig+0x4ac>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x480>
 800502e:	e045      	b.n	80050bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d107      	bne.n	8005048 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e040      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
 800503c:	40023800 	.word	0x40023800
 8005040:	40007000 	.word	0x40007000
 8005044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005048:	4b1f      	ldr	r3, [pc, #124]	; (80050c8 <HAL_RCC_OscConfig+0x538>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d030      	beq.n	80050b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d129      	bne.n	80050b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d122      	bne.n	80050b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005078:	4013      	ands	r3, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800507e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005080:	4293      	cmp	r3, r2
 8005082:	d119      	bne.n	80050b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	085b      	lsrs	r3, r3, #1
 8005090:	3b01      	subs	r3, #1
 8005092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d10f      	bne.n	80050b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d107      	bne.n	80050b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d001      	beq.n	80050bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800

080050cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e022      	b.n	8005124 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7fc f9eb 	bl	80014cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2203      	movs	r2, #3
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f814 	bl	800512c <HAL_SD_InitCard>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e00a      	b.n	8005124 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800512c:	b5b0      	push	{r4, r5, r7, lr}
 800512e:	b08e      	sub	sp, #56	; 0x38
 8005130:	af04      	add	r7, sp, #16
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005134:	2300      	movs	r3, #0
 8005136:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005148:	2376      	movs	r3, #118	; 0x76
 800514a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681d      	ldr	r5, [r3, #0]
 8005150:	466c      	mov	r4, sp
 8005152:	f107 0314 	add.w	r3, r7, #20
 8005156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800515a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005164:	4628      	mov	r0, r5
 8005166:	f002 fb47 	bl	80077f8 <SDIO_Init>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e04f      	b.n	800521c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800517c:	4b29      	ldr	r3, [pc, #164]	; (8005224 <HAL_SD_InitCard+0xf8>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f002 fb7f 	bl	800788a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800518c:	4b25      	ldr	r3, [pc, #148]	; (8005224 <HAL_SD_InitCard+0xf8>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005192:	2002      	movs	r0, #2
 8005194:	f7fc fc64 	bl	8001a60 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 f8f1 	bl	8006380 <SD_PowerON>
 800519e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e02e      	b.n	800521c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 f810 	bl	80061e4 <SD_InitCard>
 80051c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00b      	beq.n	80051e4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e01b      	b.n	800521c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051ec:	4618      	mov	r0, r3
 80051ee:	f002 fbde 	bl	80079ae <SDMMC_CmdBlockLength>
 80051f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00f      	beq.n	800521a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <HAL_SD_InitCard+0xfc>)
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3728      	adds	r7, #40	; 0x28
 8005220:	46bd      	mov	sp, r7
 8005222:	bdb0      	pop	{r4, r5, r7, pc}
 8005224:	422580a0 	.word	0x422580a0
 8005228:	004005ff 	.word	0x004005ff

0800522c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b092      	sub	sp, #72	; 0x48
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800523a:	f7fc fc05 	bl	8001a48 <HAL_GetTick>
 800523e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d107      	bne.n	800525e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e1bd      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	f040 81b0 	bne.w	80055cc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	441a      	add	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527c:	429a      	cmp	r2, r3
 800527e:	d907      	bls.n	8005290 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e1a4      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2203      	movs	r2, #3
 8005294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2200      	movs	r2, #0
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d002      	beq.n	80052ae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	025b      	lsls	r3, r3, #9
 80052ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	025b      	lsls	r3, r3, #9
 80052b8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80052ba:	2390      	movs	r3, #144	; 0x90
 80052bc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80052be:	2302      	movs	r3, #2
 80052c0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f107 0214 	add.w	r2, r7, #20
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f002 fb3e 	bl	8007956 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d90a      	bls.n	80052f6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2202      	movs	r2, #2
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052ec:	4618      	mov	r0, r3
 80052ee:	f002 fba2 	bl	8007a36 <SDMMC_CmdReadMultiBlock>
 80052f2:	6478      	str	r0, [r7, #68]	; 0x44
 80052f4:	e009      	b.n	800530a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005302:	4618      	mov	r0, r3
 8005304:	f002 fb75 	bl	80079f2 <SDMMC_CmdReadSingleBlock>
 8005308:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800530a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800530c:	2b00      	cmp	r3, #0
 800530e:	d012      	beq.n	8005336 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a7a      	ldr	r2, [pc, #488]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 8005316:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531e:	431a      	orrs	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e151      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800533a:	e061      	b.n	8005400 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d03c      	beq.n	80053c4 <HAL_SD_ReadBlocks+0x198>
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d039      	beq.n	80053c4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005350:	2300      	movs	r3, #0
 8005352:	643b      	str	r3, [r7, #64]	; 0x40
 8005354:	e033      	b.n	80053be <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f002 fa77 	bl	800784e <SDIO_ReadFIFO>
 8005360:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	b2da      	uxtb	r2, r3
 8005366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005368:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	3301      	adds	r3, #1
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005372:	3b01      	subs	r3, #1
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	b2da      	uxtb	r2, r3
 800537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	3301      	adds	r3, #1
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005388:	3b01      	subs	r3, #1
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	b2da      	uxtb	r2, r3
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005398:	3301      	adds	r3, #1
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800539c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539e:	3b01      	subs	r3, #1
 80053a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053aa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ae:	3301      	adds	r3, #1
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80053b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b4:	3b01      	subs	r3, #1
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80053b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ba:	3301      	adds	r3, #1
 80053bc:	643b      	str	r3, [r7, #64]	; 0x40
 80053be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c0:	2b07      	cmp	r3, #7
 80053c2:	d9c8      	bls.n	8005356 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80053c4:	f7fc fb40 	bl	8001a48 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d902      	bls.n	80053da <HAL_SD_ReadBlocks+0x1ae>
 80053d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d112      	bne.n	8005400 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a48      	ldr	r2, [pc, #288]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 80053e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e0ec      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005406:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800540a:	2b00      	cmp	r3, #0
 800540c:	d096      	beq.n	800533c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d022      	beq.n	8005462 <HAL_SD_ReadBlocks+0x236>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d91f      	bls.n	8005462 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	2b03      	cmp	r3, #3
 8005428:	d01b      	beq.n	8005462 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f002 fb68 	bl	8007b04 <SDMMC_CmdStopTransfer>
 8005434:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005438:	2b00      	cmp	r3, #0
 800543a:	d012      	beq.n	8005462 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2f      	ldr	r2, [pc, #188]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544a:	431a      	orrs	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e0bb      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d012      	beq.n	8005496 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a22      	ldr	r2, [pc, #136]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	f043 0208 	orr.w	r2, r3, #8
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e0a1      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d012      	beq.n	80054ca <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a15      	ldr	r2, [pc, #84]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	f043 0202 	orr.w	r2, r3, #2
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e087      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d064      	beq.n	80055a2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a08      	ldr	r2, [pc, #32]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e06d      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
 80054fe:	bf00      	nop
 8005500:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f002 f9a0 	bl	800784e <SDIO_ReadFIFO>
 800550e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	b2da      	uxtb	r2, r3
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	3301      	adds	r3, #1
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005520:	3b01      	subs	r3, #1
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	b2da      	uxtb	r2, r3
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	3301      	adds	r3, #1
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005536:	3b01      	subs	r3, #1
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	b2da      	uxtb	r2, r3
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005542:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	3301      	adds	r3, #1
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800554a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554c:	3b01      	subs	r3, #1
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	0e1b      	lsrs	r3, r3, #24
 8005554:	b2da      	uxtb	r2, r3
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	3301      	adds	r3, #1
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	3b01      	subs	r3, #1
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005566:	f7fc fa6f 	bl	8001a48 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005572:	429a      	cmp	r2, r3
 8005574:	d902      	bls.n	800557c <HAL_SD_ReadBlocks+0x350>
 8005576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005578:	2b00      	cmp	r3, #0
 800557a:	d112      	bne.n	80055a2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <HAL_SD_ReadBlocks+0x3b8>)
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e01b      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <HAL_SD_ReadBlocks+0x38a>
 80055b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1a6      	bne.n	8005504 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80055be:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e006      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3748      	adds	r7, #72	; 0x48
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	004005ff 	.word	0x004005ff

080055e8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b092      	sub	sp, #72	; 0x48
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80055f6:	f7fc fa27 	bl	8001a48 <HAL_GetTick>
 80055fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d107      	bne.n	800561a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e165      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	f040 8158 	bne.w	80058d8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800562e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	429a      	cmp	r2, r3
 800563a:	d907      	bls.n	800564c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e14c      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2203      	movs	r2, #3
 8005650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2200      	movs	r2, #0
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005660:	2b01      	cmp	r3, #1
 8005662:	d002      	beq.n	800566a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	025b      	lsls	r3, r3, #9
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800566a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800566e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	025b      	lsls	r3, r3, #9
 8005674:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005676:	2390      	movs	r3, #144	; 0x90
 8005678:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800567e:	2300      	movs	r3, #0
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005682:	2301      	movs	r3, #1
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f107 0218 	add.w	r2, r7, #24
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f002 f960 	bl	8007956 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d90a      	bls.n	80056b2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056a8:	4618      	mov	r0, r3
 80056aa:	f002 fa08 	bl	8007abe <SDMMC_CmdWriteMultiBlock>
 80056ae:	6478      	str	r0, [r7, #68]	; 0x44
 80056b0:	e009      	b.n	80056c6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2210      	movs	r2, #16
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056be:	4618      	mov	r0, r3
 80056c0:	f002 f9db 	bl	8007a7a <SDMMC_CmdWriteSingleBlock>
 80056c4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80056c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d012      	beq.n	80056f2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a87      	ldr	r2, [pc, #540]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056da:	431a      	orrs	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e0f9      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80056f6:	e065      	b.n	80057c4 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d040      	beq.n	8005788 <HAL_SD_WriteBlocks+0x1a0>
 8005706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d03d      	beq.n	8005788 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800570c:	2300      	movs	r3, #0
 800570e:	643b      	str	r3, [r7, #64]	; 0x40
 8005710:	e037      	b.n	8005782 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	3301      	adds	r3, #1
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	3b01      	subs	r3, #1
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	021a      	lsls	r2, r3, #8
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005732:	3301      	adds	r3, #1
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005738:	3b01      	subs	r3, #1
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	041a      	lsls	r2, r3, #16
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574a:	3301      	adds	r3, #1
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800574e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005750:	3b01      	subs	r3, #1
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	061a      	lsls	r2, r3, #24
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	3301      	adds	r3, #1
 8005764:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	3b01      	subs	r3, #1
 800576a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f107 0214 	add.w	r2, r7, #20
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f002 f876 	bl	8007868 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800577c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577e:	3301      	adds	r3, #1
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
 8005782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005784:	2b07      	cmp	r3, #7
 8005786:	d9c4      	bls.n	8005712 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005788:	f7fc f95e 	bl	8001a48 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005794:	429a      	cmp	r2, r3
 8005796:	d902      	bls.n	800579e <HAL_SD_WriteBlocks+0x1b6>
 8005798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800579a:	2b00      	cmp	r3, #0
 800579c:	d112      	bne.n	80057c4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a53      	ldr	r2, [pc, #332]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ac:	431a      	orrs	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e090      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d092      	beq.n	80056f8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d022      	beq.n	8005826 <HAL_SD_WriteBlocks+0x23e>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d91f      	bls.n	8005826 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d01b      	beq.n	8005826 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f002 f986 	bl	8007b04 <SDMMC_CmdStopTransfer>
 80057f8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80057fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d012      	beq.n	8005826 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a3a      	ldr	r2, [pc, #232]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 8005806:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800580c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800580e:	431a      	orrs	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e05f      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2d      	ldr	r2, [pc, #180]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	f043 0208 	orr.w	r2, r3, #8
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e045      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d012      	beq.n	800588e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a20      	ldr	r2, [pc, #128]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	f043 0202 	orr.w	r2, r3, #2
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e02b      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	d012      	beq.n	80058c2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	f043 0210 	orr.w	r2, r3, #16
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e011      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e006      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3748      	adds	r7, #72	; 0x48
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	004005ff 	.word	0x004005ff

080058f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_SD_IRQHandler+0x2e>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 ff4f 	bl	80067be <SD_Read_IT>
 8005920:	e155      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 808f 	beq.w	8005a50 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800594a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800594e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d039      	beq.n	80059de <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <HAL_SD_IRQHandler+0x8a>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d011      	beq.n	80059a2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f002 f8be 	bl	8007b04 <SDMMC_CmdStopTransfer>
 8005988:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f91f 	bl	8005be0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <HAL_SD_IRQHandler+0xda>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f002 fd34 	bl	800843c <HAL_SD_RxCpltCallback>
 80059d4:	e0fb      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f002 fd26 	bl	8008428 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80059dc:	e0f7      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80f2 	beq.w	8005bce <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d011      	beq.n	8005a18 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f002 f883 	bl	8007b04 <SDMMC_CmdStopTransfer>
 80059fe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8e4 	bl	8005be0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f040 80d5 	bne.w	8005bce <HAL_SD_IRQHandler+0x2da>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f040 80cf 	bne.w	8005bce <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0208 	bic.w	r2, r2, #8
 8005a3e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f002 fced 	bl	8008428 <HAL_SD_TxCpltCallback>
}
 8005a4e:	e0be      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <HAL_SD_IRQHandler+0x17c>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fef9 	bl	8006860 <SD_Write_IT>
 8005a6e:	e0ae      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80a7 	beq.w	8005bce <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	f043 0202 	orr.w	r2, r3, #2
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	f043 0208 	orr.w	r2, r3, #8
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d005      	beq.n	8005ace <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	f043 0220 	orr.w	r2, r3, #32
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	f043 0210 	orr.w	r2, r3, #16
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f240 523a 	movw	r2, #1338	; 0x53a
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005b00:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 fffc 	bl	8007b04 <SDMMC_CmdStopTransfer>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f855 	bl	8005be0 <HAL_SD_ErrorCallback>
}
 8005b36:	e04a      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d045      	beq.n	8005bce <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <HAL_SD_IRQHandler+0x262>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d011      	beq.n	8005b7a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	4a1f      	ldr	r2, [pc, #124]	; (8005bd8 <HAL_SD_IRQHandler+0x2e4>)
 8005b5c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fc fa44 	bl	8001ff0 <HAL_DMA_Abort_IT>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d02f      	beq.n	8005bce <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fac8 	bl	8006108 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b78:	e029      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <HAL_SD_IRQHandler+0x29a>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d011      	beq.n	8005bb2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <HAL_SD_IRQHandler+0x2e8>)
 8005b94:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fc fa28 	bl	8001ff0 <HAL_DMA_Abort_IT>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d013      	beq.n	8005bce <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fae3 	bl	8006176 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005bb0:	e00d      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f002 fc24 	bl	8008414 <HAL_SD_AbortCallback>
}
 8005bcc:	e7ff      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	08006109 	.word	0x08006109
 8005bdc:	08006177 	.word	0x08006177

08005be0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c02:	0f9b      	lsrs	r3, r3, #30
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c0e:	0e9b      	lsrs	r3, r3, #26
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c20:	0e1b      	lsrs	r3, r3, #24
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c32:	0c1b      	lsrs	r3, r3, #16
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c3e:	0a1b      	lsrs	r3, r3, #8
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c54:	0d1b      	lsrs	r3, r3, #20
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c60:	0c1b      	lsrs	r3, r3, #16
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c72:	0bdb      	lsrs	r3, r3, #15
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c84:	0b9b      	lsrs	r3, r3, #14
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c96:	0b5b      	lsrs	r3, r3, #13
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca8:	0b1b      	lsrs	r3, r3, #12
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d163      	bne.n	8005d8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cc8:	009a      	lsls	r2, r3, #2
 8005cca:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cce:	4013      	ands	r3, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005cd4:	0f92      	lsrs	r2, r2, #30
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce0:	0edb      	lsrs	r3, r3, #27
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf2:	0e1b      	lsrs	r3, r3, #24
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d04:	0d5b      	lsrs	r3, r3, #21
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d16:	0c9b      	lsrs	r3, r3, #18
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d28:	0bdb      	lsrs	r3, r3, #15
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	7e1b      	ldrb	r3, [r3, #24]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d56:	fb03 f202 	mul.w	r2, r3, r2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	7a1b      	ldrb	r3, [r3, #8]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	2201      	movs	r2, #1
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d78:	0a52      	lsrs	r2, r2, #9
 8005d7a:	fb03 f202 	mul.w	r2, r3, r2
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d88:	661a      	str	r2, [r3, #96]	; 0x60
 8005d8a:	e031      	b.n	8005df0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d11d      	bne.n	8005dd0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da2:	0c1b      	lsrs	r3, r3, #16
 8005da4:	431a      	orrs	r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	3301      	adds	r3, #1
 8005db0:	029a      	lsls	r2, r3, #10
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	661a      	str	r2, [r3, #96]	; 0x60
 8005dce:	e00f      	b.n	8005df0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a58      	ldr	r2, [pc, #352]	; (8005f38 <HAL_SD_GetCardCSD+0x344>)
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e09d      	b.n	8005f2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df4:	0b9b      	lsrs	r3, r3, #14
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e06:	09db      	lsrs	r3, r3, #7
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	0fdb      	lsrs	r3, r3, #31
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	0f5b      	lsrs	r3, r3, #29
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	0e9b      	lsrs	r3, r3, #26
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	0d9b      	lsrs	r3, r3, #22
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	0d5b      	lsrs	r3, r3, #21
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	0c1b      	lsrs	r3, r3, #16
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	0bdb      	lsrs	r3, r3, #15
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	0b9b      	lsrs	r3, r3, #14
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	0b5b      	lsrs	r3, r3, #13
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	0b1b      	lsrs	r3, r3, #12
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	0a9b      	lsrs	r3, r3, #10
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	004005ff 	.word	0x004005ff

08005f3c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005f94:	b5b0      	push	{r4, r5, r7, lr}
 8005f96:	b08e      	sub	sp, #56	; 0x38
 8005f98:	af04      	add	r7, sp, #16
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2203      	movs	r2, #3
 8005fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d02e      	beq.n	8006012 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fba:	d106      	bne.n	8005fca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8005fc8:	e029      	b.n	800601e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd0:	d10a      	bne.n	8005fe8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa8a 	bl	80064ec <SD_WideBus_Enable>
 8005fd8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	639a      	str	r2, [r3, #56]	; 0x38
 8005fe6:	e01a      	b.n	800601e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fac7 	bl	8006582 <SD_WideBus_Disable>
 8005ff4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
 8006002:	e00c      	b.n	800601e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38
 8006010:	e005      	b.n	800601e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a26      	ldr	r2, [pc, #152]	; (80060c4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800603c:	e01f      	b.n	800607e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681d      	ldr	r5, [r3, #0]
 8006064:	466c      	mov	r4, sp
 8006066:	f107 0314 	add.w	r3, r7, #20
 800606a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800606e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006072:	f107 0308 	add.w	r3, r7, #8
 8006076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006078:	4628      	mov	r0, r5
 800607a:	f001 fbbd 	bl	80077f8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fc91 	bl	80079ae <SDMMC_CmdBlockLength>
 800608c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00c      	beq.n	80060ae <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a0a      	ldr	r2, [pc, #40]	; (80060c4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800609a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80060b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3728      	adds	r7, #40	; 0x28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bdb0      	pop	{r4, r5, r7, pc}
 80060c2:	bf00      	nop
 80060c4:	004005ff 	.word	0x004005ff

080060c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80060d4:	f107 030c 	add.w	r3, r7, #12
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f9de 	bl	800649c <SD_SendStatus>
 80060e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	0a5b      	lsrs	r3, r3, #9
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80060fe:	693b      	ldr	r3, [r7, #16]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f240 523a 	movw	r2, #1338	; 0x53a
 800611e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff ffd1 	bl	80060c8 <HAL_SD_GetCardState>
 8006126:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b06      	cmp	r3, #6
 800613a:	d002      	beq.n	8006142 <SD_DMATxAbort+0x3a>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b05      	cmp	r3, #5
 8006140:	d10a      	bne.n	8006158 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f001 fcdc 	bl	8007b04 <SDMMC_CmdStopTransfer>
 800614c:	4602      	mov	r2, r0
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	431a      	orrs	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	2b00      	cmp	r3, #0
 800615e:	d103      	bne.n	8006168 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f002 f957 	bl	8008414 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006166:	e002      	b.n	800616e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fd39 	bl	8005be0 <HAL_SD_ErrorCallback>
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f240 523a 	movw	r2, #1338	; 0x53a
 800618c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff ff9a 	bl	80060c8 <HAL_SD_GetCardState>
 8006194:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	d002      	beq.n	80061b0 <SD_DMARxAbort+0x3a>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b05      	cmp	r3, #5
 80061ae:	d10a      	bne.n	80061c6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 fca5 	bl	8007b04 <SDMMC_CmdStopTransfer>
 80061ba:	4602      	mov	r2, r0
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	431a      	orrs	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d103      	bne.n	80061d6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f002 f920 	bl	8008414 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80061d4:	e002      	b.n	80061dc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff fd02 	bl	8005be0 <HAL_SD_ErrorCallback>
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061e4:	b5b0      	push	{r4, r5, r7, lr}
 80061e6:	b094      	sub	sp, #80	; 0x50
 80061e8:	af04      	add	r7, sp, #16
 80061ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80061ec:	2301      	movs	r3, #1
 80061ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 fb56 	bl	80078a6 <SDIO_GetPowerState>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006200:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006204:	e0b8      	b.n	8006378 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	2b03      	cmp	r3, #3
 800620c:	d02f      	beq.n	800626e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f001 fd80 	bl	8007d18 <SDMMC_CmdSendCID>
 8006218:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800621a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <SD_InitCard+0x40>
    {
      return errorstate;
 8006220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006222:	e0a9      	b.n	8006378 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f001 fb80 	bl	8007930 <SDIO_GetResponse>
 8006230:	4602      	mov	r2, r0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2104      	movs	r1, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fb77 	bl	8007930 <SDIO_GetResponse>
 8006242:	4602      	mov	r2, r0
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2108      	movs	r1, #8
 800624e:	4618      	mov	r0, r3
 8006250:	f001 fb6e 	bl	8007930 <SDIO_GetResponse>
 8006254:	4602      	mov	r2, r0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	210c      	movs	r1, #12
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fb65 	bl	8007930 <SDIO_GetResponse>
 8006266:	4602      	mov	r2, r0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	2b03      	cmp	r3, #3
 8006274:	d00d      	beq.n	8006292 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f107 020e 	add.w	r2, r7, #14
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fd86 	bl	8007d92 <SDMMC_CmdSetRelAdd>
 8006286:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <SD_InitCard+0xae>
    {
      return errorstate;
 800628e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006290:	e072      	b.n	8006378 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	2b03      	cmp	r3, #3
 8006298:	d036      	beq.n	8006308 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800629a:	89fb      	ldrh	r3, [r7, #14]
 800629c:	461a      	mov	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062aa:	041b      	lsls	r3, r3, #16
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f001 fd50 	bl	8007d54 <SDMMC_CmdSendCSD>
 80062b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80062b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80062bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062be:	e05b      	b.n	8006378 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 fb32 	bl	8007930 <SDIO_GetResponse>
 80062cc:	4602      	mov	r2, r0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2104      	movs	r1, #4
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 fb29 	bl	8007930 <SDIO_GetResponse>
 80062de:	4602      	mov	r2, r0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2108      	movs	r1, #8
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 fb20 	bl	8007930 <SDIO_GetResponse>
 80062f0:	4602      	mov	r2, r0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	210c      	movs	r1, #12
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fb17 	bl	8007930 <SDIO_GetResponse>
 8006302:	4602      	mov	r2, r0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2104      	movs	r1, #4
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fb0e 	bl	8007930 <SDIO_GetResponse>
 8006314:	4603      	mov	r3, r0
 8006316:	0d1a      	lsrs	r2, r3, #20
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800631c:	f107 0310 	add.w	r3, r7, #16
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fc66 	bl	8005bf4 <HAL_SD_GetCardCSD>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800632e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006332:	e021      	b.n	8006378 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6819      	ldr	r1, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633c:	041b      	lsls	r3, r3, #16
 800633e:	2200      	movs	r2, #0
 8006340:	461c      	mov	r4, r3
 8006342:	4615      	mov	r5, r2
 8006344:	4622      	mov	r2, r4
 8006346:	462b      	mov	r3, r5
 8006348:	4608      	mov	r0, r1
 800634a:	f001 fbfd 	bl	8007b48 <SDMMC_CmdSelDesel>
 800634e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <SD_InitCard+0x176>
  {
    return errorstate;
 8006356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006358:	e00e      	b.n	8006378 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681d      	ldr	r5, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	466c      	mov	r4, sp
 8006362:	f103 0210 	add.w	r2, r3, #16
 8006366:	ca07      	ldmia	r2, {r0, r1, r2}
 8006368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800636c:	3304      	adds	r3, #4
 800636e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006370:	4628      	mov	r0, r5
 8006372:	f001 fa41 	bl	80077f8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3740      	adds	r7, #64	; 0x40
 800637c:	46bd      	mov	sp, r7
 800637e:	bdb0      	pop	{r4, r5, r7, pc}

08006380 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f001 fbf8 	bl	8007b8e <SDMMC_CmdGoIdleState>
 800639e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <SD_PowerON+0x2a>
  {
    return errorstate;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	e072      	b.n	8006490 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 fc0b 	bl	8007bca <SDMMC_CmdOperCond>
 80063b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00d      	beq.n	80063d8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 fbe1 	bl	8007b8e <SDMMC_CmdGoIdleState>
 80063cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <SD_PowerON+0x5e>
    {
      return errorstate;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	e05b      	b.n	8006490 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d137      	bne.n	8006456 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2100      	movs	r1, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f001 fc0b 	bl	8007c08 <SDMMC_CmdAppCommand>
 80063f2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d02d      	beq.n	8006456 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063fe:	e047      	b.n	8006490 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f001 fbfe 	bl	8007c08 <SDMMC_CmdAppCommand>
 800640c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <SD_PowerON+0x98>
    {
      return errorstate;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	e03b      	b.n	8006490 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	491e      	ldr	r1, [pc, #120]	; (8006498 <SD_PowerON+0x118>)
 800641e:	4618      	mov	r0, r3
 8006420:	f001 fc14 	bl	8007c4c <SDMMC_CmdAppOperCommand>
 8006424:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800642c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006430:	e02e      	b.n	8006490 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f001 fa79 	bl	8007930 <SDIO_GetResponse>
 800643e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	0fdb      	lsrs	r3, r3, #31
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <SD_PowerON+0xcc>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <SD_PowerON+0xce>
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]

    count++;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	3301      	adds	r3, #1
 8006454:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800645c:	4293      	cmp	r3, r2
 800645e:	d802      	bhi.n	8006466 <SD_PowerON+0xe6>
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0cc      	beq.n	8006400 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800646c:	4293      	cmp	r3, r2
 800646e:	d902      	bls.n	8006476 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006474:	e00c      	b.n	8006490 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	645a      	str	r2, [r3, #68]	; 0x44
 8006486:	e002      	b.n	800648e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	c1100000 	.word	0xc1100000

0800649c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80064ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064b0:	e018      	b.n	80064e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ba:	041b      	lsls	r3, r3, #16
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f001 fc88 	bl	8007dd4 <SDMMC_CmdSendStatus>
 80064c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	e009      	b.n	80064e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2100      	movs	r1, #0
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 fa2a 	bl	8007930 <SDIO_GetResponse>
 80064dc:	4602      	mov	r2, r0
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f001 fa14 	bl	8007930 <SDIO_GetResponse>
 8006508:	4603      	mov	r3, r0
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006512:	d102      	bne.n	800651a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006518:	e02f      	b.n	800657a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800651a:	f107 030c 	add.w	r3, r7, #12
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f879 	bl	8006618 <SD_FindSCR>
 8006526:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	e023      	b.n	800657a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01c      	beq.n	8006576 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006544:	041b      	lsls	r3, r3, #16
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f001 fb5d 	bl	8007c08 <SDMMC_CmdAppCommand>
 800654e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	e00f      	b.n	800657a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2102      	movs	r1, #2
 8006560:	4618      	mov	r0, r3
 8006562:	f001 fb96 	bl	8007c92 <SDMMC_CmdBusWidth>
 8006566:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	e003      	b.n	800657a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006572:	2300      	movs	r3, #0
 8006574:	e001      	b.n	800657a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006576:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b086      	sub	sp, #24
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2100      	movs	r1, #0
 8006598:	4618      	mov	r0, r3
 800659a:	f001 f9c9 	bl	8007930 <SDIO_GetResponse>
 800659e:	4603      	mov	r3, r0
 80065a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065a8:	d102      	bne.n	80065b0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80065aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065ae:	e02f      	b.n	8006610 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80065b0:	f107 030c 	add.w	r3, r7, #12
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f82e 	bl	8006618 <SD_FindSCR>
 80065bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	e023      	b.n	8006610 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d01c      	beq.n	800660c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065da:	041b      	lsls	r3, r3, #16
 80065dc:	4619      	mov	r1, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	f001 fb12 	bl	8007c08 <SDMMC_CmdAppCommand>
 80065e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	e00f      	b.n	8006610 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 fb4b 	bl	8007c92 <SDMMC_CmdBusWidth>
 80065fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	e003      	b.n	8006610 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006608:	2300      	movs	r3, #0
 800660a:	e001      	b.n	8006610 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800660c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006618:	b590      	push	{r4, r7, lr}
 800661a:	b08f      	sub	sp, #60	; 0x3c
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006622:	f7fb fa11 	bl	8001a48 <HAL_GetTick>
 8006626:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800662c:	2300      	movs	r3, #0
 800662e:	60bb      	str	r3, [r7, #8]
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2108      	movs	r1, #8
 800663e:	4618      	mov	r0, r3
 8006640:	f001 f9b5 	bl	80079ae <SDMMC_CmdBlockLength>
 8006644:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <SD_FindSCR+0x38>
  {
    return errorstate;
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	e0b2      	b.n	80067b6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006658:	041b      	lsls	r3, r3, #16
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f001 fad3 	bl	8007c08 <SDMMC_CmdAppCommand>
 8006662:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <SD_FindSCR+0x56>
  {
    return errorstate;
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	e0a3      	b.n	80067b6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800666e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006672:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006674:	2308      	movs	r3, #8
 8006676:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006678:	2330      	movs	r3, #48	; 0x30
 800667a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800667c:	2302      	movs	r3, #2
 800667e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006680:	2300      	movs	r3, #0
 8006682:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006684:	2301      	movs	r3, #1
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f107 0210 	add.w	r2, r7, #16
 8006690:	4611      	mov	r1, r2
 8006692:	4618      	mov	r0, r3
 8006694:	f001 f95f 	bl	8007956 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f001 fb1a 	bl	8007cd6 <SDMMC_CmdSendSCR>
 80066a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d02a      	beq.n	8006700 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	e083      	b.n	80067b6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00f      	beq.n	80066dc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	f107 0208 	add.w	r2, r7, #8
 80066c8:	18d4      	adds	r4, r2, r3
 80066ca:	4608      	mov	r0, r1
 80066cc:	f001 f8bf 	bl	800784e <SDIO_ReadFIFO>
 80066d0:	4603      	mov	r3, r0
 80066d2:	6023      	str	r3, [r4, #0]
      index++;
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	3301      	adds	r3, #1
 80066d8:	637b      	str	r3, [r7, #52]	; 0x34
 80066da:	e006      	b.n	80066ea <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d012      	beq.n	8006710 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80066ea:	f7fb f9ad 	bl	8001a48 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f8:	d102      	bne.n	8006700 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80066fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066fe:	e05a      	b.n	80067b6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006706:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0cf      	beq.n	80066ae <SD_FindSCR+0x96>
 800670e:	e000      	b.n	8006712 <SD_FindSCR+0xfa>
      break;
 8006710:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2208      	movs	r2, #8
 8006726:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006728:	2308      	movs	r3, #8
 800672a:	e044      	b.n	80067b6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2202      	movs	r2, #2
 8006740:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006742:	2302      	movs	r3, #2
 8006744:	e037      	b.n	80067b6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2220      	movs	r2, #32
 800675a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800675c:	2320      	movs	r3, #32
 800675e:	e02a      	b.n	80067b6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f240 523a 	movw	r2, #1338	; 0x53a
 8006768:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	061a      	lsls	r2, r3, #24
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006776:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	0a1b      	lsrs	r3, r3, #8
 800677c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006780:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	0e1b      	lsrs	r3, r3, #24
 8006786:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	601a      	str	r2, [r3, #0]
    scr++;
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	3304      	adds	r3, #4
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	061a      	lsls	r2, r3, #24
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800679e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	0a1b      	lsrs	r3, r3, #8
 80067a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80067a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	0e1b      	lsrs	r3, r3, #24
 80067ae:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	373c      	adds	r7, #60	; 0x3c
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd90      	pop	{r4, r7, pc}

080067be <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b086      	sub	sp, #24
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ca:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d03f      	beq.n	8006858 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e033      	b.n	8006846 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 f833 	bl	800784e <SDIO_ReadFIFO>
 80067e8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	0a1b      	lsrs	r3, r3, #8
 8006802:	b2da      	uxtb	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	3b01      	subs	r3, #1
 8006812:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	0c1b      	lsrs	r3, r3, #16
 8006818:	b2da      	uxtb	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3301      	adds	r3, #1
 8006822:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	3b01      	subs	r3, #1
 8006828:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	0e1b      	lsrs	r3, r3, #24
 800682e:	b2da      	uxtb	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	3b01      	subs	r3, #1
 800683e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	3301      	adds	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b07      	cmp	r3, #7
 800684a:	d9c8      	bls.n	80067de <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006858:	bf00      	nop
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d043      	beq.n	8006902 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	e037      	b.n	80068f0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	3b01      	subs	r3, #1
 8006890:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	021a      	lsls	r2, r3, #8
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4313      	orrs	r3, r2
 800689c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3301      	adds	r3, #1
 80068a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	041a      	lsls	r2, r3, #16
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	3b01      	subs	r3, #1
 80068c0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	061a      	lsls	r2, r3, #24
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f107 0208 	add.w	r2, r7, #8
 80068e2:	4611      	mov	r1, r2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 ffbf 	bl	8007868 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	3301      	adds	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b07      	cmp	r3, #7
 80068f4:	d9c4      	bls.n	8006880 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006902:	bf00      	nop
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e03f      	b.n	800699c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d106      	bne.n	8006936 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7fa feeb 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2224      	movs	r2, #36	; 0x24
 800693a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800694c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fcde 	bl	8007310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691a      	ldr	r2, [r3, #16]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006962:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695a      	ldr	r2, [r3, #20]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006972:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006982:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	4613      	mov	r3, r2
 80069b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	d11d      	bne.n	80069fa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <HAL_UART_Receive_IT+0x26>
 80069c4:	88fb      	ldrh	r3, [r7, #6]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e016      	b.n	80069fc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_UART_Receive_IT+0x38>
 80069d8:	2302      	movs	r3, #2
 80069da:	e00f      	b.n	80069fc <HAL_UART_Receive_IT+0x58>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	461a      	mov	r2, r3
 80069ee:	68b9      	ldr	r1, [r7, #8]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fab5 	bl	8006f60 <UART_Start_Receive_IT>
 80069f6:	4603      	mov	r3, r0
 80069f8:	e000      	b.n	80069fc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80069fa:	2302      	movs	r3, #2
  }
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b0ba      	sub	sp, #232	; 0xe8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10f      	bne.n	8006a6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d009      	beq.n	8006a6a <HAL_UART_IRQHandler+0x66>
 8006a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fb99 	bl	800719a <UART_Receive_IT>
      return;
 8006a68:	e256      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 80de 	beq.w	8006c30 <HAL_UART_IRQHandler+0x22c>
 8006a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 80d1 	beq.w	8006c30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <HAL_UART_IRQHandler+0xae>
 8006a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f043 0201 	orr.w	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xd2>
 8006abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	f043 0202 	orr.w	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <HAL_UART_IRQHandler+0xf6>
 8006ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f043 0204 	orr.w	r2, r3, #4
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d011      	beq.n	8006b2a <HAL_UART_IRQHandler+0x126>
 8006b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d105      	bne.n	8006b1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f043 0208 	orr.w	r2, r3, #8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 81ed 	beq.w	8006f0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <HAL_UART_IRQHandler+0x14e>
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fb24 	bl	800719a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	bf0c      	ite	eq
 8006b60:	2301      	moveq	r3, #1
 8006b62:	2300      	movne	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <HAL_UART_IRQHandler+0x17a>
 8006b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d04f      	beq.n	8006c1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa2c 	bl	8006fdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b40      	cmp	r3, #64	; 0x40
 8006b90:	d141      	bne.n	8006c16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3314      	adds	r3, #20
 8006b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3314      	adds	r3, #20
 8006bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1d9      	bne.n	8006b92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d013      	beq.n	8006c0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	4a7d      	ldr	r2, [pc, #500]	; (8006de0 <HAL_UART_IRQHandler+0x3dc>)
 8006bec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fb f9fc 	bl	8001ff0 <HAL_DMA_Abort_IT>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d016      	beq.n	8006c2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	e00e      	b.n	8006c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f990 	bl	8006f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c14:	e00a      	b.n	8006c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f98c 	bl	8006f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	e006      	b.n	8006c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f988 	bl	8006f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c2a:	e170      	b.n	8006f0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	bf00      	nop
    return;
 8006c2e:	e16e      	b.n	8006f0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	f040 814a 	bne.w	8006ece <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3e:	f003 0310 	and.w	r3, r3, #16
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8143 	beq.w	8006ece <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 813c 	beq.w	8006ece <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c56:	2300      	movs	r3, #0
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60bb      	str	r3, [r7, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	f040 80b4 	bne.w	8006de4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8140 	beq.w	8006f12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	f080 8139 	bcs.w	8006f12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb2:	f000 8088 	beq.w	8006dc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	330c      	adds	r3, #12
 8006cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1d9      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3314      	adds	r3, #20
 8006d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e1      	bne.n	8006d02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3314      	adds	r3, #20
 8006d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e3      	bne.n	8006d3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d96:	f023 0310 	bic.w	r3, r3, #16
 8006d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006da8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006daa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e3      	bne.n	8006d84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fb f8a5 	bl	8001f10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f8b6 	bl	8006f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ddc:	e099      	b.n	8006f12 <HAL_UART_IRQHandler+0x50e>
 8006dde:	bf00      	nop
 8006de0:	080070a3 	.word	0x080070a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 808b 	beq.w	8006f16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8086 	beq.w	8006f16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	330c      	adds	r3, #12
 8006e2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e2e:	647a      	str	r2, [r7, #68]	; 0x44
 8006e30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e3      	bne.n	8006e0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3314      	adds	r3, #20
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	623b      	str	r3, [r7, #32]
   return(result);
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	f023 0301 	bic.w	r3, r3, #1
 8006e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3314      	adds	r3, #20
 8006e62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e66:	633a      	str	r2, [r7, #48]	; 0x30
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e3      	bne.n	8006e42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0310 	bic.w	r3, r3, #16
 8006e9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006eac:	61fa      	str	r2, [r7, #28]
 8006eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	69b9      	ldr	r1, [r7, #24]
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e3      	bne.n	8006e88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f83e 	bl	8006f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ecc:	e023      	b.n	8006f16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <HAL_UART_IRQHandler+0x4ea>
 8006eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f8ef 	bl	80070ca <UART_Transmit_IT>
    return;
 8006eec:	e014      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00e      	beq.n	8006f18 <HAL_UART_IRQHandler+0x514>
 8006efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f92f 	bl	800716a <UART_EndTransmit_IT>
    return;
 8006f0c:	e004      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
    return;
 8006f0e:	bf00      	nop
 8006f10:	e002      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
      return;
 8006f12:	bf00      	nop
 8006f14:	e000      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
      return;
 8006f16:	bf00      	nop
  }
}
 8006f18:	37e8      	adds	r7, #232	; 0xe8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop

08006f20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	88fa      	ldrh	r2, [r7, #6]
 8006f78:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2222      	movs	r2, #34	; 0x22
 8006f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695a      	ldr	r2, [r3, #20]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0201 	orr.w	r2, r2, #1
 8006fbc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 0220 	orr.w	r2, r2, #32
 8006fcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b095      	sub	sp, #84	; 0x54
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007004:	643a      	str	r2, [r7, #64]	; 0x40
 8007006:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800700a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3314      	adds	r3, #20
 800701e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	61fb      	str	r3, [r7, #28]
   return(result);
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f023 0301 	bic.w	r3, r3, #1
 800702e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3314      	adds	r3, #20
 8007036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007038:	62fa      	str	r2, [r7, #44]	; 0x2c
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800703e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e5      	bne.n	8007018 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	2b01      	cmp	r3, #1
 8007052:	d119      	bne.n	8007088 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	60bb      	str	r3, [r7, #8]
   return(result);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f023 0310 	bic.w	r3, r3, #16
 800706a:	647b      	str	r3, [r7, #68]	; 0x44
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007074:	61ba      	str	r2, [r7, #24]
 8007076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6979      	ldr	r1, [r7, #20]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	613b      	str	r3, [r7, #16]
   return(result);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007096:	bf00      	nop
 8007098:	3754      	adds	r7, #84	; 0x54
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f7ff ff39 	bl	8006f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070c2:	bf00      	nop
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b21      	cmp	r3, #33	; 0x21
 80070dc:	d13e      	bne.n	800715c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e6:	d114      	bne.n	8007112 <UART_Transmit_IT+0x48>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d110      	bne.n	8007112 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007104:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	1c9a      	adds	r2, r3, #2
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	621a      	str	r2, [r3, #32]
 8007110:	e008      	b.n	8007124 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	1c59      	adds	r1, r3, #1
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6211      	str	r1, [r2, #32]
 800711c:	781a      	ldrb	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4619      	mov	r1, r3
 8007132:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10f      	bne.n	8007158 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007146:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007156:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	e000      	b.n	800715e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800715c:	2302      	movs	r3, #2
  }
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007180:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fec8 	bl	8006f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b08c      	sub	sp, #48	; 0x30
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b22      	cmp	r3, #34	; 0x22
 80071ac:	f040 80ab 	bne.w	8007306 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b8:	d117      	bne.n	80071ea <UART_Receive_IT+0x50>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d113      	bne.n	80071ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d8:	b29a      	uxth	r2, r3
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	1c9a      	adds	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	629a      	str	r2, [r3, #40]	; 0x28
 80071e8:	e026      	b.n	8007238 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fc:	d007      	beq.n	800720e <UART_Receive_IT+0x74>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <UART_Receive_IT+0x82>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d106      	bne.n	800721c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e008      	b.n	800722e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007228:	b2da      	uxtb	r2, r3
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29b      	uxth	r3, r3
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4619      	mov	r1, r3
 8007246:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007248:	2b00      	cmp	r3, #0
 800724a:	d15a      	bne.n	8007302 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0220 	bic.w	r2, r2, #32
 800725a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800726a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695a      	ldr	r2, [r3, #20]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	2b01      	cmp	r3, #1
 800728a:	d135      	bne.n	80072f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	613b      	str	r3, [r7, #16]
   return(result);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f023 0310 	bic.w	r3, r3, #16
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b2:	623a      	str	r2, [r7, #32]
 80072b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	69f9      	ldr	r1, [r7, #28]
 80072b8:	6a3a      	ldr	r2, [r7, #32]
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	61bb      	str	r3, [r7, #24]
   return(result);
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b10      	cmp	r3, #16
 80072d2:	d10a      	bne.n	80072ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff fe29 	bl	8006f48 <HAL_UARTEx_RxEventCallback>
 80072f6:	e002      	b.n	80072fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7f9 ff59 	bl	80011b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e002      	b.n	8007308 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e000      	b.n	8007308 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007306:	2302      	movs	r3, #2
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3730      	adds	r7, #48	; 0x30
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007314:	b0c0      	sub	sp, #256	; 0x100
 8007316:	af00      	add	r7, sp, #0
 8007318:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732c:	68d9      	ldr	r1, [r3, #12]
 800732e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	ea40 0301 	orr.w	r3, r0, r1
 8007338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800733a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	431a      	orrs	r2, r3
 8007348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	431a      	orrs	r2, r3
 8007350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007368:	f021 010c 	bic.w	r1, r1, #12
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007376:	430b      	orrs	r3, r1
 8007378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800737a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738a:	6999      	ldr	r1, [r3, #24]
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	ea40 0301 	orr.w	r3, r0, r1
 8007396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4b8f      	ldr	r3, [pc, #572]	; (80075dc <UART_SetConfig+0x2cc>)
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d005      	beq.n	80073b0 <UART_SetConfig+0xa0>
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	4b8d      	ldr	r3, [pc, #564]	; (80075e0 <UART_SetConfig+0x2d0>)
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d104      	bne.n	80073ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073b0:	f7fc fc40 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 80073b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80073b8:	e003      	b.n	80073c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073ba:	f7fc fc27 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 80073be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073cc:	f040 810c 	bne.w	80075e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80073de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073e2:	4622      	mov	r2, r4
 80073e4:	462b      	mov	r3, r5
 80073e6:	1891      	adds	r1, r2, r2
 80073e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80073ea:	415b      	adcs	r3, r3
 80073ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073f2:	4621      	mov	r1, r4
 80073f4:	eb12 0801 	adds.w	r8, r2, r1
 80073f8:	4629      	mov	r1, r5
 80073fa:	eb43 0901 	adc.w	r9, r3, r1
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800740a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800740e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007412:	4690      	mov	r8, r2
 8007414:	4699      	mov	r9, r3
 8007416:	4623      	mov	r3, r4
 8007418:	eb18 0303 	adds.w	r3, r8, r3
 800741c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007420:	462b      	mov	r3, r5
 8007422:	eb49 0303 	adc.w	r3, r9, r3
 8007426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800742a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007436:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800743a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800743e:	460b      	mov	r3, r1
 8007440:	18db      	adds	r3, r3, r3
 8007442:	653b      	str	r3, [r7, #80]	; 0x50
 8007444:	4613      	mov	r3, r2
 8007446:	eb42 0303 	adc.w	r3, r2, r3
 800744a:	657b      	str	r3, [r7, #84]	; 0x54
 800744c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007454:	f7f8 ff3c 	bl	80002d0 <__aeabi_uldivmod>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4b61      	ldr	r3, [pc, #388]	; (80075e4 <UART_SetConfig+0x2d4>)
 800745e:	fba3 2302 	umull	r2, r3, r3, r2
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	011c      	lsls	r4, r3, #4
 8007466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800746a:	2200      	movs	r2, #0
 800746c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007470:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007478:	4642      	mov	r2, r8
 800747a:	464b      	mov	r3, r9
 800747c:	1891      	adds	r1, r2, r2
 800747e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007480:	415b      	adcs	r3, r3
 8007482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007488:	4641      	mov	r1, r8
 800748a:	eb12 0a01 	adds.w	sl, r2, r1
 800748e:	4649      	mov	r1, r9
 8007490:	eb43 0b01 	adc.w	fp, r3, r1
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	f04f 0300 	mov.w	r3, #0
 800749c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074a8:	4692      	mov	sl, r2
 80074aa:	469b      	mov	fp, r3
 80074ac:	4643      	mov	r3, r8
 80074ae:	eb1a 0303 	adds.w	r3, sl, r3
 80074b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074b6:	464b      	mov	r3, r9
 80074b8:	eb4b 0303 	adc.w	r3, fp, r3
 80074bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80074d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80074d4:	460b      	mov	r3, r1
 80074d6:	18db      	adds	r3, r3, r3
 80074d8:	643b      	str	r3, [r7, #64]	; 0x40
 80074da:	4613      	mov	r3, r2
 80074dc:	eb42 0303 	adc.w	r3, r2, r3
 80074e0:	647b      	str	r3, [r7, #68]	; 0x44
 80074e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074ea:	f7f8 fef1 	bl	80002d0 <__aeabi_uldivmod>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	4b3b      	ldr	r3, [pc, #236]	; (80075e4 <UART_SetConfig+0x2d4>)
 80074f6:	fba3 2301 	umull	r2, r3, r3, r1
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	2264      	movs	r2, #100	; 0x64
 80074fe:	fb02 f303 	mul.w	r3, r2, r3
 8007502:	1acb      	subs	r3, r1, r3
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800750a:	4b36      	ldr	r3, [pc, #216]	; (80075e4 <UART_SetConfig+0x2d4>)
 800750c:	fba3 2302 	umull	r2, r3, r3, r2
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007518:	441c      	add	r4, r3
 800751a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800751e:	2200      	movs	r2, #0
 8007520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007524:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800752c:	4642      	mov	r2, r8
 800752e:	464b      	mov	r3, r9
 8007530:	1891      	adds	r1, r2, r2
 8007532:	63b9      	str	r1, [r7, #56]	; 0x38
 8007534:	415b      	adcs	r3, r3
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800753c:	4641      	mov	r1, r8
 800753e:	1851      	adds	r1, r2, r1
 8007540:	6339      	str	r1, [r7, #48]	; 0x30
 8007542:	4649      	mov	r1, r9
 8007544:	414b      	adcs	r3, r1
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007554:	4659      	mov	r1, fp
 8007556:	00cb      	lsls	r3, r1, #3
 8007558:	4651      	mov	r1, sl
 800755a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800755e:	4651      	mov	r1, sl
 8007560:	00ca      	lsls	r2, r1, #3
 8007562:	4610      	mov	r0, r2
 8007564:	4619      	mov	r1, r3
 8007566:	4603      	mov	r3, r0
 8007568:	4642      	mov	r2, r8
 800756a:	189b      	adds	r3, r3, r2
 800756c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007570:	464b      	mov	r3, r9
 8007572:	460a      	mov	r2, r1
 8007574:	eb42 0303 	adc.w	r3, r2, r3
 8007578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007588:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800758c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007590:	460b      	mov	r3, r1
 8007592:	18db      	adds	r3, r3, r3
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28
 8007596:	4613      	mov	r3, r2
 8007598:	eb42 0303 	adc.w	r3, r2, r3
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800759e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075a6:	f7f8 fe93 	bl	80002d0 <__aeabi_uldivmod>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <UART_SetConfig+0x2d4>)
 80075b0:	fba3 1302 	umull	r1, r3, r3, r2
 80075b4:	095b      	lsrs	r3, r3, #5
 80075b6:	2164      	movs	r1, #100	; 0x64
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	3332      	adds	r3, #50	; 0x32
 80075c2:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <UART_SetConfig+0x2d4>)
 80075c4:	fba2 2303 	umull	r2, r3, r2, r3
 80075c8:	095b      	lsrs	r3, r3, #5
 80075ca:	f003 0207 	and.w	r2, r3, #7
 80075ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4422      	add	r2, r4
 80075d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075d8:	e105      	b.n	80077e6 <UART_SetConfig+0x4d6>
 80075da:	bf00      	nop
 80075dc:	40011000 	.word	0x40011000
 80075e0:	40011400 	.word	0x40011400
 80075e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80075f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075fa:	4642      	mov	r2, r8
 80075fc:	464b      	mov	r3, r9
 80075fe:	1891      	adds	r1, r2, r2
 8007600:	6239      	str	r1, [r7, #32]
 8007602:	415b      	adcs	r3, r3
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
 8007606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800760a:	4641      	mov	r1, r8
 800760c:	1854      	adds	r4, r2, r1
 800760e:	4649      	mov	r1, r9
 8007610:	eb43 0501 	adc.w	r5, r3, r1
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	00eb      	lsls	r3, r5, #3
 800761e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007622:	00e2      	lsls	r2, r4, #3
 8007624:	4614      	mov	r4, r2
 8007626:	461d      	mov	r5, r3
 8007628:	4643      	mov	r3, r8
 800762a:	18e3      	adds	r3, r4, r3
 800762c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007630:	464b      	mov	r3, r9
 8007632:	eb45 0303 	adc.w	r3, r5, r3
 8007636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800763a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800764a:	f04f 0200 	mov.w	r2, #0
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007656:	4629      	mov	r1, r5
 8007658:	008b      	lsls	r3, r1, #2
 800765a:	4621      	mov	r1, r4
 800765c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007660:	4621      	mov	r1, r4
 8007662:	008a      	lsls	r2, r1, #2
 8007664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007668:	f7f8 fe32 	bl	80002d0 <__aeabi_uldivmod>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4b60      	ldr	r3, [pc, #384]	; (80077f4 <UART_SetConfig+0x4e4>)
 8007672:	fba3 2302 	umull	r2, r3, r3, r2
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	011c      	lsls	r4, r3, #4
 800767a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800767e:	2200      	movs	r2, #0
 8007680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007684:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	1891      	adds	r1, r2, r2
 8007692:	61b9      	str	r1, [r7, #24]
 8007694:	415b      	adcs	r3, r3
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800769c:	4641      	mov	r1, r8
 800769e:	1851      	adds	r1, r2, r1
 80076a0:	6139      	str	r1, [r7, #16]
 80076a2:	4649      	mov	r1, r9
 80076a4:	414b      	adcs	r3, r1
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	f04f 0200 	mov.w	r2, #0
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076b4:	4659      	mov	r1, fp
 80076b6:	00cb      	lsls	r3, r1, #3
 80076b8:	4651      	mov	r1, sl
 80076ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076be:	4651      	mov	r1, sl
 80076c0:	00ca      	lsls	r2, r1, #3
 80076c2:	4610      	mov	r0, r2
 80076c4:	4619      	mov	r1, r3
 80076c6:	4603      	mov	r3, r0
 80076c8:	4642      	mov	r2, r8
 80076ca:	189b      	adds	r3, r3, r2
 80076cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076d0:	464b      	mov	r3, r9
 80076d2:	460a      	mov	r2, r1
 80076d4:	eb42 0303 	adc.w	r3, r2, r3
 80076d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80076e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80076f4:	4649      	mov	r1, r9
 80076f6:	008b      	lsls	r3, r1, #2
 80076f8:	4641      	mov	r1, r8
 80076fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076fe:	4641      	mov	r1, r8
 8007700:	008a      	lsls	r2, r1, #2
 8007702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007706:	f7f8 fde3 	bl	80002d0 <__aeabi_uldivmod>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4b39      	ldr	r3, [pc, #228]	; (80077f4 <UART_SetConfig+0x4e4>)
 8007710:	fba3 1302 	umull	r1, r3, r3, r2
 8007714:	095b      	lsrs	r3, r3, #5
 8007716:	2164      	movs	r1, #100	; 0x64
 8007718:	fb01 f303 	mul.w	r3, r1, r3
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	3332      	adds	r3, #50	; 0x32
 8007722:	4a34      	ldr	r2, [pc, #208]	; (80077f4 <UART_SetConfig+0x4e4>)
 8007724:	fba2 2303 	umull	r2, r3, r2, r3
 8007728:	095b      	lsrs	r3, r3, #5
 800772a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800772e:	441c      	add	r4, r3
 8007730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007734:	2200      	movs	r2, #0
 8007736:	673b      	str	r3, [r7, #112]	; 0x70
 8007738:	677a      	str	r2, [r7, #116]	; 0x74
 800773a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800773e:	4642      	mov	r2, r8
 8007740:	464b      	mov	r3, r9
 8007742:	1891      	adds	r1, r2, r2
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	415b      	adcs	r3, r3
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800774e:	4641      	mov	r1, r8
 8007750:	1851      	adds	r1, r2, r1
 8007752:	6039      	str	r1, [r7, #0]
 8007754:	4649      	mov	r1, r9
 8007756:	414b      	adcs	r3, r1
 8007758:	607b      	str	r3, [r7, #4]
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007766:	4659      	mov	r1, fp
 8007768:	00cb      	lsls	r3, r1, #3
 800776a:	4651      	mov	r1, sl
 800776c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007770:	4651      	mov	r1, sl
 8007772:	00ca      	lsls	r2, r1, #3
 8007774:	4610      	mov	r0, r2
 8007776:	4619      	mov	r1, r3
 8007778:	4603      	mov	r3, r0
 800777a:	4642      	mov	r2, r8
 800777c:	189b      	adds	r3, r3, r2
 800777e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007780:	464b      	mov	r3, r9
 8007782:	460a      	mov	r2, r1
 8007784:	eb42 0303 	adc.w	r3, r2, r3
 8007788:	66fb      	str	r3, [r7, #108]	; 0x6c
 800778a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	663b      	str	r3, [r7, #96]	; 0x60
 8007794:	667a      	str	r2, [r7, #100]	; 0x64
 8007796:	f04f 0200 	mov.w	r2, #0
 800779a:	f04f 0300 	mov.w	r3, #0
 800779e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80077a2:	4649      	mov	r1, r9
 80077a4:	008b      	lsls	r3, r1, #2
 80077a6:	4641      	mov	r1, r8
 80077a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ac:	4641      	mov	r1, r8
 80077ae:	008a      	lsls	r2, r1, #2
 80077b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80077b4:	f7f8 fd8c 	bl	80002d0 <__aeabi_uldivmod>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <UART_SetConfig+0x4e4>)
 80077be:	fba3 1302 	umull	r1, r3, r3, r2
 80077c2:	095b      	lsrs	r3, r3, #5
 80077c4:	2164      	movs	r1, #100	; 0x64
 80077c6:	fb01 f303 	mul.w	r3, r1, r3
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	3332      	adds	r3, #50	; 0x32
 80077d0:	4a08      	ldr	r2, [pc, #32]	; (80077f4 <UART_SetConfig+0x4e4>)
 80077d2:	fba2 2303 	umull	r2, r3, r2, r3
 80077d6:	095b      	lsrs	r3, r3, #5
 80077d8:	f003 020f 	and.w	r2, r3, #15
 80077dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4422      	add	r2, r4
 80077e4:	609a      	str	r2, [r3, #8]
}
 80077e6:	bf00      	nop
 80077e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077ec:	46bd      	mov	sp, r7
 80077ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077f2:	bf00      	nop
 80077f4:	51eb851f 	.word	0x51eb851f

080077f8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80077f8:	b084      	sub	sp, #16
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	f107 001c 	add.w	r0, r7, #28
 8007806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800780e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007810:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007812:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007816:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800781a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800781e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007822:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007832:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	b004      	add	sp, #16
 800784c:	4770      	bx	lr

0800784e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2203      	movs	r2, #3
 8007896:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0303 	and.w	r3, r3, #3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078e0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80078e6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80078ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80078fc:	f023 030f 	bic.w	r3, r3, #15
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	b2db      	uxtb	r3, r3
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3314      	adds	r3, #20
 800793e:	461a      	mov	r2, r3
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	4413      	add	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
}  
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800797c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007982:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007988:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0

}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b088      	sub	sp, #32
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80079bc:	2310      	movs	r3, #16
 80079be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079c0:	2340      	movs	r3, #64	; 0x40
 80079c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ce:	f107 0308 	add.w	r3, r7, #8
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ff74 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80079da:	f241 3288 	movw	r2, #5000	; 0x1388
 80079de:	2110      	movs	r1, #16
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa19 	bl	8007e18 <SDMMC_GetCmdResp1>
 80079e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079e8:	69fb      	ldr	r3, [r7, #28]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b088      	sub	sp, #32
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007a00:	2311      	movs	r3, #17
 8007a02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a04:	2340      	movs	r3, #64	; 0x40
 8007a06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a12:	f107 0308 	add.w	r3, r7, #8
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff ff52 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a22:	2111      	movs	r1, #17
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f9f7 	bl	8007e18 <SDMMC_GetCmdResp1>
 8007a2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3720      	adds	r7, #32
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b088      	sub	sp, #32
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007a44:	2312      	movs	r3, #18
 8007a46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a48:	2340      	movs	r3, #64	; 0x40
 8007a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a56:	f107 0308 	add.w	r3, r7, #8
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7ff ff30 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a66:	2112      	movs	r1, #18
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f9d5 	bl	8007e18 <SDMMC_GetCmdResp1>
 8007a6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a70:	69fb      	ldr	r3, [r7, #28]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3720      	adds	r7, #32
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b088      	sub	sp, #32
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007a88:	2318      	movs	r3, #24
 8007a8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a8c:	2340      	movs	r3, #64	; 0x40
 8007a8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a90:	2300      	movs	r3, #0
 8007a92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a9a:	f107 0308 	add.w	r3, r7, #8
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff ff0e 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aaa:	2118      	movs	r1, #24
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f9b3 	bl	8007e18 <SDMMC_GetCmdResp1>
 8007ab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3720      	adds	r7, #32
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b088      	sub	sp, #32
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007acc:	2319      	movs	r3, #25
 8007ace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ad0:	2340      	movs	r3, #64	; 0x40
 8007ad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007adc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ade:	f107 0308 	add.w	r3, r7, #8
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff feec 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aee:	2119      	movs	r1, #25
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f991 	bl	8007e18 <SDMMC_GetCmdResp1>
 8007af6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007af8:	69fb      	ldr	r3, [r7, #28]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3720      	adds	r7, #32
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007b10:	230c      	movs	r3, #12
 8007b12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b14:	2340      	movs	r3, #64	; 0x40
 8007b16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b22:	f107 0308 	add.w	r3, r7, #8
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7ff feca 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007b2e:	4a05      	ldr	r2, [pc, #20]	; (8007b44 <SDMMC_CmdStopTransfer+0x40>)
 8007b30:	210c      	movs	r1, #12
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f970 	bl	8007e18 <SDMMC_GetCmdResp1>
 8007b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3720      	adds	r7, #32
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	05f5e100 	.word	0x05f5e100

08007b48 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08a      	sub	sp, #40	; 0x28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007b58:	2307      	movs	r3, #7
 8007b5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b5c:	2340      	movs	r3, #64	; 0x40
 8007b5e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b68:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b6a:	f107 0310 	add.w	r3, r7, #16
 8007b6e:	4619      	mov	r1, r3
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f7ff fea6 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b7a:	2107      	movs	r1, #7
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f94b 	bl	8007e18 <SDMMC_GetCmdResp1>
 8007b82:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3728      	adds	r7, #40	; 0x28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b088      	sub	sp, #32
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007baa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bac:	f107 0308 	add.w	r3, r7, #8
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff fe85 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fb65 	bl	8008288 <SDMMC_GetCmdError>
 8007bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3720      	adds	r7, #32
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b088      	sub	sp, #32
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007bd2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007bd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007bd8:	2308      	movs	r3, #8
 8007bda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bdc:	2340      	movs	r3, #64	; 0x40
 8007bde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bea:	f107 0308 	add.w	r3, r7, #8
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7ff fe66 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 faf8 	bl	80081ec <SDMMC_GetCmdResp7>
 8007bfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bfe:	69fb      	ldr	r3, [r7, #28]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3720      	adds	r7, #32
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007c16:	2337      	movs	r3, #55	; 0x37
 8007c18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c1a:	2340      	movs	r3, #64	; 0x40
 8007c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c28:	f107 0308 	add.w	r3, r7, #8
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff fe47 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c38:	2137      	movs	r1, #55	; 0x37
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f8ec 	bl	8007e18 <SDMMC_GetCmdResp1>
 8007c40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c42:	69fb      	ldr	r3, [r7, #28]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3720      	adds	r7, #32
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007c62:	2329      	movs	r3, #41	; 0x29
 8007c64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c66:	2340      	movs	r3, #64	; 0x40
 8007c68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c74:	f107 0308 	add.w	r3, r7, #8
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff fe21 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f9ff 	bl	8008084 <SDMMC_GetCmdResp3>
 8007c86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c88:	69fb      	ldr	r3, [r7, #28]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3720      	adds	r7, #32
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b088      	sub	sp, #32
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007ca0:	2306      	movs	r3, #6
 8007ca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ca4:	2340      	movs	r3, #64	; 0x40
 8007ca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cb2:	f107 0308 	add.w	r3, r7, #8
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff fe02 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc2:	2106      	movs	r1, #6
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f8a7 	bl	8007e18 <SDMMC_GetCmdResp1>
 8007cca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3720      	adds	r7, #32
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b088      	sub	sp, #32
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007ce2:	2333      	movs	r3, #51	; 0x33
 8007ce4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ce6:	2340      	movs	r3, #64	; 0x40
 8007ce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cf4:	f107 0308 	add.w	r3, r7, #8
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fde1 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d04:	2133      	movs	r1, #51	; 0x33
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f886 	bl	8007e18 <SDMMC_GetCmdResp1>
 8007d0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007d24:	2302      	movs	r3, #2
 8007d26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007d28:	23c0      	movs	r3, #192	; 0xc0
 8007d2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d36:	f107 0308 	add.w	r3, r7, #8
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff fdc0 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f956 	bl	8007ff4 <SDMMC_GetCmdResp2>
 8007d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d4a:	69fb      	ldr	r3, [r7, #28]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007d62:	2309      	movs	r3, #9
 8007d64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007d66:	23c0      	movs	r3, #192	; 0xc0
 8007d68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d74:	f107 0308 	add.w	r3, r7, #8
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fda1 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f937 	bl	8007ff4 <SDMMC_GetCmdResp2>
 8007d86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d88:	69fb      	ldr	r3, [r7, #28]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3720      	adds	r7, #32
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b088      	sub	sp, #32
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007da0:	2303      	movs	r3, #3
 8007da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007da4:	2340      	movs	r3, #64	; 0x40
 8007da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007da8:	2300      	movs	r3, #0
 8007daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007db2:	f107 0308 	add.w	r3, r7, #8
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff fd82 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	2103      	movs	r1, #3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f99c 	bl	8008100 <SDMMC_GetCmdResp6>
 8007dc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dca:	69fb      	ldr	r3, [r7, #28]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3720      	adds	r7, #32
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007de2:	230d      	movs	r3, #13
 8007de4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007de6:	2340      	movs	r3, #64	; 0x40
 8007de8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dea:	2300      	movs	r3, #0
 8007dec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007df2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007df4:	f107 0308 	add.w	r3, r7, #8
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff fd61 	bl	80078c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e04:	210d      	movs	r1, #13
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f806 	bl	8007e18 <SDMMC_GetCmdResp1>
 8007e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e0e:	69fb      	ldr	r3, [r7, #28]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3720      	adds	r7, #32
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	460b      	mov	r3, r1
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007e26:	4b70      	ldr	r3, [pc, #448]	; (8007fe8 <SDMMC_GetCmdResp1+0x1d0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a70      	ldr	r2, [pc, #448]	; (8007fec <SDMMC_GetCmdResp1+0x1d4>)
 8007e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e30:	0a5a      	lsrs	r2, r3, #9
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	fb02 f303 	mul.w	r3, r2, r3
 8007e38:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	1e5a      	subs	r2, r3, #1
 8007e3e:	61fa      	str	r2, [r7, #28]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e48:	e0c9      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0ef      	beq.n	8007e3a <SDMMC_GetCmdResp1+0x22>
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1ea      	bne.n	8007e3a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2204      	movs	r2, #4
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e76:	2304      	movs	r3, #4
 8007e78:	e0b1      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d004      	beq.n	8007e90 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e0a6      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	22c5      	movs	r2, #197	; 0xc5
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff fd3d 	bl	8007916 <SDIO_GetCommandResponse>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	7afb      	ldrb	r3, [r7, #11]
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d001      	beq.n	8007eaa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e099      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007eaa:	2100      	movs	r1, #0
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f7ff fd3f 	bl	8007930 <SDIO_GetResponse>
 8007eb2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4b4e      	ldr	r3, [pc, #312]	; (8007ff0 <SDMMC_GetCmdResp1+0x1d8>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e08d      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	da02      	bge.n	8007ece <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ecc:	e087      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007ed8:	2340      	movs	r3, #64	; 0x40
 8007eda:	e080      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007ee6:	2380      	movs	r3, #128	; 0x80
 8007ee8:	e079      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ef8:	e071      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f08:	e069      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f18:	e061      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f28:	e059      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f38:	e051      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f48:	e049      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007f54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f58:	e041      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f68:	e039      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f78:	e031      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007f84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007f88:	e029      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007f94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f98:	e021      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d002      	beq.n	8007faa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007fa4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007fa8:	e019      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007fb8:	e011      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007fc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007fc8:	e009      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f003 0308 	and.w	r3, r3, #8
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007fd4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007fd8:	e001      	b.n	8007fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000004 	.word	0x20000004
 8007fec:	10624dd3 	.word	0x10624dd3
 8007ff0:	fdffe008 	.word	0xfdffe008

08007ff4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ffc:	4b1f      	ldr	r3, [pc, #124]	; (800807c <SDMMC_GetCmdResp2+0x88>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a1f      	ldr	r2, [pc, #124]	; (8008080 <SDMMC_GetCmdResp2+0x8c>)
 8008002:	fba2 2303 	umull	r2, r3, r2, r3
 8008006:	0a5b      	lsrs	r3, r3, #9
 8008008:	f241 3288 	movw	r2, #5000	; 0x1388
 800800c:	fb02 f303 	mul.w	r3, r2, r3
 8008010:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	60fa      	str	r2, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800801c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008020:	e026      	b.n	8008070 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008026:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0ef      	beq.n	8008012 <SDMMC_GetCmdResp2+0x1e>
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1ea      	bne.n	8008012 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2204      	movs	r2, #4
 800804c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800804e:	2304      	movs	r3, #4
 8008050:	e00e      	b.n	8008070 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d004      	beq.n	8008068 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008064:	2301      	movs	r3, #1
 8008066:	e003      	b.n	8008070 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	22c5      	movs	r2, #197	; 0xc5
 800806c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20000004 	.word	0x20000004
 8008080:	10624dd3 	.word	0x10624dd3

08008084 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800808c:	4b1a      	ldr	r3, [pc, #104]	; (80080f8 <SDMMC_GetCmdResp3+0x74>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a1a      	ldr	r2, [pc, #104]	; (80080fc <SDMMC_GetCmdResp3+0x78>)
 8008092:	fba2 2303 	umull	r2, r3, r2, r3
 8008096:	0a5b      	lsrs	r3, r3, #9
 8008098:	f241 3288 	movw	r2, #5000	; 0x1388
 800809c:	fb02 f303 	mul.w	r3, r2, r3
 80080a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1e5a      	subs	r2, r3, #1
 80080a6:	60fa      	str	r2, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d102      	bne.n	80080b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080b0:	e01b      	b.n	80080ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0ef      	beq.n	80080a2 <SDMMC_GetCmdResp3+0x1e>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1ea      	bne.n	80080a2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d004      	beq.n	80080e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2204      	movs	r2, #4
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080de:	2304      	movs	r3, #4
 80080e0:	e003      	b.n	80080ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	22c5      	movs	r2, #197	; 0xc5
 80080e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	20000004 	.word	0x20000004
 80080fc:	10624dd3 	.word	0x10624dd3

08008100 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	460b      	mov	r3, r1
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800810e:	4b35      	ldr	r3, [pc, #212]	; (80081e4 <SDMMC_GetCmdResp6+0xe4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a35      	ldr	r2, [pc, #212]	; (80081e8 <SDMMC_GetCmdResp6+0xe8>)
 8008114:	fba2 2303 	umull	r2, r3, r2, r3
 8008118:	0a5b      	lsrs	r3, r3, #9
 800811a:	f241 3288 	movw	r2, #5000	; 0x1388
 800811e:	fb02 f303 	mul.w	r3, r2, r3
 8008122:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	1e5a      	subs	r2, r3, #1
 8008128:	61fa      	str	r2, [r7, #28]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d102      	bne.n	8008134 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800812e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008132:	e052      	b.n	80081da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008138:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0ef      	beq.n	8008124 <SDMMC_GetCmdResp6+0x24>
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1ea      	bne.n	8008124 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2204      	movs	r2, #4
 800815e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008160:	2304      	movs	r3, #4
 8008162:	e03a      	b.n	80081da <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d004      	beq.n	800817a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2201      	movs	r2, #1
 8008174:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008176:	2301      	movs	r3, #1
 8008178:	e02f      	b.n	80081da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7ff fbcb 	bl	8007916 <SDIO_GetCommandResponse>
 8008180:	4603      	mov	r3, r0
 8008182:	461a      	mov	r2, r3
 8008184:	7afb      	ldrb	r3, [r7, #11]
 8008186:	4293      	cmp	r3, r2
 8008188:	d001      	beq.n	800818e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800818a:	2301      	movs	r3, #1
 800818c:	e025      	b.n	80081da <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	22c5      	movs	r2, #197	; 0xc5
 8008192:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008194:	2100      	movs	r1, #0
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff fbca 	bl	8007930 <SDIO_GetResponse>
 800819c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d106      	bne.n	80081b6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	0c1b      	lsrs	r3, r3, #16
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	e011      	b.n	80081da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80081c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081c4:	e009      	b.n	80081da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80081d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081d4:	e001      	b.n	80081da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80081d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3720      	adds	r7, #32
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20000004 	.word	0x20000004
 80081e8:	10624dd3 	.word	0x10624dd3

080081ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081f4:	4b22      	ldr	r3, [pc, #136]	; (8008280 <SDMMC_GetCmdResp7+0x94>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a22      	ldr	r2, [pc, #136]	; (8008284 <SDMMC_GetCmdResp7+0x98>)
 80081fa:	fba2 2303 	umull	r2, r3, r2, r3
 80081fe:	0a5b      	lsrs	r3, r3, #9
 8008200:	f241 3288 	movw	r2, #5000	; 0x1388
 8008204:	fb02 f303 	mul.w	r3, r2, r3
 8008208:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	1e5a      	subs	r2, r3, #1
 800820e:	60fa      	str	r2, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008214:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008218:	e02c      	b.n	8008274 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0ef      	beq.n	800820a <SDMMC_GetCmdResp7+0x1e>
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1ea      	bne.n	800820a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	d004      	beq.n	800824a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2204      	movs	r2, #4
 8008244:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008246:	2304      	movs	r3, #4
 8008248:	e014      	b.n	8008274 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d004      	beq.n	8008260 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800825c:	2301      	movs	r3, #1
 800825e:	e009      	b.n	8008274 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2240      	movs	r2, #64	; 0x40
 8008270:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008272:	2300      	movs	r3, #0
  
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	20000004 	.word	0x20000004
 8008284:	10624dd3 	.word	0x10624dd3

08008288 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008290:	4b11      	ldr	r3, [pc, #68]	; (80082d8 <SDMMC_GetCmdError+0x50>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a11      	ldr	r2, [pc, #68]	; (80082dc <SDMMC_GetCmdError+0x54>)
 8008296:	fba2 2303 	umull	r2, r3, r2, r3
 800829a:	0a5b      	lsrs	r3, r3, #9
 800829c:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a0:	fb02 f303 	mul.w	r3, r2, r3
 80082a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	1e5a      	subs	r2, r3, #1
 80082aa:	60fa      	str	r2, [r7, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082b4:	e009      	b.n	80082ca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0f1      	beq.n	80082a6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	22c5      	movs	r2, #197	; 0xc5
 80082c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	20000004 	.word	0x20000004
 80082dc:	10624dd3 	.word	0x10624dd3

080082e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80082e4:	4904      	ldr	r1, [pc, #16]	; (80082f8 <MX_FATFS_Init+0x18>)
 80082e6:	4805      	ldr	r0, [pc, #20]	; (80082fc <MX_FATFS_Init+0x1c>)
 80082e8:	f002 ffe4 	bl	800b2b4 <FATFS_LinkDriver>
 80082ec:	4603      	mov	r3, r0
 80082ee:	461a      	mov	r2, r3
 80082f0:	4b03      	ldr	r3, [pc, #12]	; (8008300 <MX_FATFS_Init+0x20>)
 80082f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80082f4:	bf00      	nop
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000b54 	.word	0x20000b54
 80082fc:	0800bcfc 	.word	0x0800bcfc
 8008300:	20000b50 	.word	0x20000b50

08008304 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008308:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800830a:	4618      	mov	r0, r3
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800831e:	f000 f8ac 	bl	800847a <BSP_SD_IsDetected>
 8008322:	4603      	mov	r3, r0
 8008324:	2b01      	cmp	r3, #1
 8008326:	d001      	beq.n	800832c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e012      	b.n	8008352 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800832c:	480b      	ldr	r0, [pc, #44]	; (800835c <BSP_SD_Init+0x48>)
 800832e:	f7fc fecd 	bl	80050cc <HAL_SD_Init>
 8008332:	4603      	mov	r3, r0
 8008334:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d109      	bne.n	8008350 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800833c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008340:	4806      	ldr	r0, [pc, #24]	; (800835c <BSP_SD_Init+0x48>)
 8008342:	f7fd fe27 	bl	8005f94 <HAL_SD_ConfigWideBusOperation>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008350:	79fb      	ldrb	r3, [r7, #7]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000194 	.word	0x20000194

08008360 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af02      	add	r7, sp, #8
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	68f9      	ldr	r1, [r7, #12]
 800837c:	4806      	ldr	r0, [pc, #24]	; (8008398 <BSP_SD_ReadBlocks+0x38>)
 800837e:	f7fc ff55 	bl	800522c <HAL_SD_ReadBlocks>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000194 	.word	0x20000194

0800839c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
 80083a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	68f9      	ldr	r1, [r7, #12]
 80083b8:	4806      	ldr	r0, [pc, #24]	; (80083d4 <BSP_SD_WriteBlocks+0x38>)
 80083ba:	f7fd f915 	bl	80055e8 <HAL_SD_WriteBlocks>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000194 	.word	0x20000194

080083d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80083dc:	4805      	ldr	r0, [pc, #20]	; (80083f4 <BSP_SD_GetCardState+0x1c>)
 80083de:	f7fd fe73 	bl	80060c8 <HAL_SD_GetCardState>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	bf14      	ite	ne
 80083e8:	2301      	movne	r3, #1
 80083ea:	2300      	moveq	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000194 	.word	0x20000194

080083f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	4803      	ldr	r0, [pc, #12]	; (8008410 <BSP_SD_GetCardInfo+0x18>)
 8008404:	f7fd fd9a 	bl	8005f3c <HAL_SD_GetCardInfo>
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20000194 	.word	0x20000194

08008414 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800841c:	f000 f818 	bl	8008450 <BSP_SD_AbortCallback>
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008430:	f000 f815 	bl	800845e <BSP_SD_WriteCpltCallback>
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008444:	f000 f812 	bl	800846c <BSP_SD_ReadCpltCallback>
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0

}
 8008454:	bf00      	nop
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800845e:	b480      	push	{r7}
 8008460:	af00      	add	r7, sp, #0

}
 8008462:	bf00      	nop
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0

}
 8008470:	bf00      	nop
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008480:	2301      	movs	r3, #1
 8008482:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008484:	f000 f80c 	bl	80084a0 <BSP_PlatformIsDetected>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800848e:	2300      	movs	r3, #0
 8008490:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	b2db      	uxtb	r3, r3
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80084a6:	2301      	movs	r3, #1
 80084a8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80084aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80084ae:	4806      	ldr	r0, [pc, #24]	; (80084c8 <BSP_PlatformIsDetected+0x28>)
 80084b0:	f7fa f9be 	bl	8002830 <HAL_GPIO_ReadPin>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80084ba:	2300      	movs	r3, #0
 80084bc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80084be:	79fb      	ldrb	r3, [r7, #7]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	40020400 	.word	0x40020400

080084cc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80084d6:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <SD_CheckStatus+0x38>)
 80084d8:	2201      	movs	r2, #1
 80084da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80084dc:	f7ff ff7c 	bl	80083d8 <BSP_SD_GetCardState>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d107      	bne.n	80084f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80084e6:	4b07      	ldr	r3, [pc, #28]	; (8008504 <SD_CheckStatus+0x38>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f023 0301 	bic.w	r3, r3, #1
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	4b04      	ldr	r3, [pc, #16]	; (8008504 <SD_CheckStatus+0x38>)
 80084f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80084f6:	4b03      	ldr	r3, [pc, #12]	; (8008504 <SD_CheckStatus+0x38>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	b2db      	uxtb	r3, r3
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	2000000d 	.word	0x2000000d

08008508 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008512:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <SD_initialize+0x38>)
 8008514:	2201      	movs	r2, #1
 8008516:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008518:	f7ff fefc 	bl	8008314 <BSP_SD_Init>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d107      	bne.n	8008532 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff ffd1 	bl	80084cc <SD_CheckStatus>
 800852a:	4603      	mov	r3, r0
 800852c:	461a      	mov	r2, r3
 800852e:	4b04      	ldr	r3, [pc, #16]	; (8008540 <SD_initialize+0x38>)
 8008530:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008532:	4b03      	ldr	r3, [pc, #12]	; (8008540 <SD_initialize+0x38>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	b2db      	uxtb	r3, r3
}
 8008538:	4618      	mov	r0, r3
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	2000000d 	.word	0x2000000d

08008544 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff ffbb 	bl	80084cc <SD_CheckStatus>
 8008556:	4603      	mov	r3, r0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	68b8      	ldr	r0, [r7, #8]
 800857e:	f7ff feef 	bl	8008360 <BSP_SD_ReadBlocks>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d107      	bne.n	8008598 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008588:	bf00      	nop
 800858a:	f7ff ff25 	bl	80083d8 <BSP_SD_GetCardState>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1fa      	bne.n	800858a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008598:	7dfb      	ldrb	r3, [r7, #23]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b086      	sub	sp, #24
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
 80085ae:	4603      	mov	r3, r0
 80085b0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80085b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	68b8      	ldr	r0, [r7, #8]
 80085c0:	f7ff feec 	bl	800839c <BSP_SD_WriteBlocks>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d107      	bne.n	80085da <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80085ca:	bf00      	nop
 80085cc:	f7ff ff04 	bl	80083d8 <BSP_SD_GetCardState>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1fa      	bne.n	80085cc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08c      	sub	sp, #48	; 0x30
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	603a      	str	r2, [r7, #0]
 80085ee:	71fb      	strb	r3, [r7, #7]
 80085f0:	460b      	mov	r3, r1
 80085f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80085fa:	4b25      	ldr	r3, [pc, #148]	; (8008690 <SD_ioctl+0xac>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <SD_ioctl+0x28>
 8008608:	2303      	movs	r3, #3
 800860a:	e03c      	b.n	8008686 <SD_ioctl+0xa2>

  switch (cmd)
 800860c:	79bb      	ldrb	r3, [r7, #6]
 800860e:	2b03      	cmp	r3, #3
 8008610:	d834      	bhi.n	800867c <SD_ioctl+0x98>
 8008612:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <SD_ioctl+0x34>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	08008629 	.word	0x08008629
 800861c:	08008631 	.word	0x08008631
 8008620:	08008649 	.word	0x08008649
 8008624:	08008663 	.word	0x08008663
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800862e:	e028      	b.n	8008682 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008630:	f107 030c 	add.w	r3, r7, #12
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fedf 	bl	80083f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800863a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008646:	e01c      	b.n	8008682 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008648:	f107 030c 	add.w	r3, r7, #12
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff fed3 	bl	80083f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	b29a      	uxth	r2, r3
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008660:	e00f      	b.n	8008682 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008662:	f107 030c 	add.w	r3, r7, #12
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fec6 	bl	80083f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	0a5a      	lsrs	r2, r3, #9
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800867a:	e002      	b.n	8008682 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800867c:	2304      	movs	r3, #4
 800867e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008686:	4618      	mov	r0, r3
 8008688:	3730      	adds	r7, #48	; 0x30
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	2000000d 	.word	0x2000000d

08008694 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	4a08      	ldr	r2, [pc, #32]	; (80086c4 <disk_status+0x30>)
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	79fa      	ldrb	r2, [r7, #7]
 80086ac:	4905      	ldr	r1, [pc, #20]	; (80086c4 <disk_status+0x30>)
 80086ae:	440a      	add	r2, r1
 80086b0:	7a12      	ldrb	r2, [r2, #8]
 80086b2:	4610      	mov	r0, r2
 80086b4:	4798      	blx	r3
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20000db0 	.word	0x20000db0

080086c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	4a0d      	ldr	r2, [pc, #52]	; (8008710 <disk_initialize+0x48>)
 80086da:	5cd3      	ldrb	r3, [r2, r3]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d111      	bne.n	8008704 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	4a0b      	ldr	r2, [pc, #44]	; (8008710 <disk_initialize+0x48>)
 80086e4:	2101      	movs	r1, #1
 80086e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	4a09      	ldr	r2, [pc, #36]	; (8008710 <disk_initialize+0x48>)
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	79fa      	ldrb	r2, [r7, #7]
 80086f6:	4906      	ldr	r1, [pc, #24]	; (8008710 <disk_initialize+0x48>)
 80086f8:	440a      	add	r2, r1
 80086fa:	7a12      	ldrb	r2, [r2, #8]
 80086fc:	4610      	mov	r0, r2
 80086fe:	4798      	blx	r3
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000db0 	.word	0x20000db0

08008714 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008714:	b590      	push	{r4, r7, lr}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	4a0a      	ldr	r2, [pc, #40]	; (8008750 <disk_read+0x3c>)
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	689c      	ldr	r4, [r3, #8]
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	4a07      	ldr	r2, [pc, #28]	; (8008750 <disk_read+0x3c>)
 8008734:	4413      	add	r3, r2
 8008736:	7a18      	ldrb	r0, [r3, #8]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	47a0      	blx	r4
 8008740:	4603      	mov	r3, r0
 8008742:	75fb      	strb	r3, [r7, #23]
  return res;
 8008744:	7dfb      	ldrb	r3, [r7, #23]
}
 8008746:	4618      	mov	r0, r3
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	bd90      	pop	{r4, r7, pc}
 800874e:	bf00      	nop
 8008750:	20000db0 	.word	0x20000db0

08008754 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008754:	b590      	push	{r4, r7, lr}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
 800875e:	603b      	str	r3, [r7, #0]
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	4a0a      	ldr	r2, [pc, #40]	; (8008790 <disk_write+0x3c>)
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	68dc      	ldr	r4, [r3, #12]
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	4a07      	ldr	r2, [pc, #28]	; (8008790 <disk_write+0x3c>)
 8008774:	4413      	add	r3, r2
 8008776:	7a18      	ldrb	r0, [r3, #8]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	47a0      	blx	r4
 8008780:	4603      	mov	r3, r0
 8008782:	75fb      	strb	r3, [r7, #23]
  return res;
 8008784:	7dfb      	ldrb	r3, [r7, #23]
}
 8008786:	4618      	mov	r0, r3
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	bd90      	pop	{r4, r7, pc}
 800878e:	bf00      	nop
 8008790:	20000db0 	.word	0x20000db0

08008794 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	603a      	str	r2, [r7, #0]
 800879e:	71fb      	strb	r3, [r7, #7]
 80087a0:	460b      	mov	r3, r1
 80087a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	4a09      	ldr	r2, [pc, #36]	; (80087cc <disk_ioctl+0x38>)
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	79fa      	ldrb	r2, [r7, #7]
 80087b2:	4906      	ldr	r1, [pc, #24]	; (80087cc <disk_ioctl+0x38>)
 80087b4:	440a      	add	r2, r1
 80087b6:	7a10      	ldrb	r0, [r2, #8]
 80087b8:	79b9      	ldrb	r1, [r7, #6]
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	4798      	blx	r3
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000db0 	.word	0x20000db0

080087d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3301      	adds	r3, #1
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80087e0:	89fb      	ldrh	r3, [r7, #14]
 80087e2:	021b      	lsls	r3, r3, #8
 80087e4:	b21a      	sxth	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b21b      	sxth	r3, r3
 80087ec:	4313      	orrs	r3, r2
 80087ee:	b21b      	sxth	r3, r3
 80087f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80087f2:	89fb      	ldrh	r3, [r7, #14]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3303      	adds	r3, #3
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	3202      	adds	r2, #2
 8008818:	7812      	ldrb	r2, [r2, #0]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	021b      	lsls	r3, r3, #8
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	3201      	adds	r2, #1
 8008826:	7812      	ldrb	r2, [r2, #0]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	7812      	ldrb	r2, [r2, #0]
 8008834:	4313      	orrs	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
	return rv;
 8008838:	68fb      	ldr	r3, [r7, #12]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	460b      	mov	r3, r1
 8008850:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	887a      	ldrh	r2, [r7, #2]
 800885a:	b2d2      	uxtb	r2, r2
 800885c:	701a      	strb	r2, [r3, #0]
 800885e:	887b      	ldrh	r3, [r7, #2]
 8008860:	0a1b      	lsrs	r3, r3, #8
 8008862:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	607a      	str	r2, [r7, #4]
 800886a:	887a      	ldrh	r2, [r7, #2]
 800886c:	b2d2      	uxtb	r2, r2
 800886e:	701a      	strb	r2, [r3, #0]
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	0a1b      	lsrs	r3, r3, #8
 8008896:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	607a      	str	r2, [r7, #4]
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	b2d2      	uxtb	r2, r2
 80088a2:	701a      	strb	r2, [r3, #0]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	0a1b      	lsrs	r3, r3, #8
 80088a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	701a      	strb	r2, [r3, #0]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	0a1b      	lsrs	r3, r3, #8
 80088ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	b2d2      	uxtb	r2, r2
 80088c6:	701a      	strb	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00d      	beq.n	800890a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	1c53      	adds	r3, r2, #1
 80088f2:	613b      	str	r3, [r7, #16]
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	1c59      	adds	r1, r3, #1
 80088f8:	6179      	str	r1, [r7, #20]
 80088fa:	7812      	ldrb	r2, [r2, #0]
 80088fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3b01      	subs	r3, #1
 8008902:	607b      	str	r3, [r7, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1f1      	bne.n	80088ee <mem_cpy+0x1a>
	}
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008916:	b480      	push	{r7}
 8008918:	b087      	sub	sp, #28
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	617a      	str	r2, [r7, #20]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	3b01      	subs	r3, #1
 8008936:	607b      	str	r3, [r7, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f3      	bne.n	8008926 <mem_set+0x10>
}
 800893e:	bf00      	nop
 8008940:	bf00      	nop
 8008942:	371c      	adds	r7, #28
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800894c:	b480      	push	{r7}
 800894e:	b089      	sub	sp, #36	; 0x24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	61fa      	str	r2, [r7, #28]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	4619      	mov	r1, r3
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	61ba      	str	r2, [r7, #24]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	1acb      	subs	r3, r1, r3
 8008978:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	3b01      	subs	r3, #1
 800897e:	607b      	str	r3, [r7, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <mem_cmp+0x40>
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0eb      	beq.n	8008964 <mem_cmp+0x18>

	return r;
 800898c:	697b      	ldr	r3, [r7, #20]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3724      	adds	r7, #36	; 0x24
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80089a4:	e002      	b.n	80089ac <chk_chr+0x12>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3301      	adds	r3, #1
 80089aa:	607b      	str	r3, [r7, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <chk_chr+0x26>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	4293      	cmp	r3, r2
 80089be:	d1f2      	bne.n	80089a6 <chk_chr+0xc>
	return *str;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	781b      	ldrb	r3, [r3, #0]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80089da:	2300      	movs	r3, #0
 80089dc:	60bb      	str	r3, [r7, #8]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	e029      	b.n	8008a38 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80089e4:	4a27      	ldr	r2, [pc, #156]	; (8008a84 <chk_lock+0xb4>)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	4413      	add	r3, r2
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01d      	beq.n	8008a2e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089f2:	4a24      	ldr	r2, [pc, #144]	; (8008a84 <chk_lock+0xb4>)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	011b      	lsls	r3, r3, #4
 80089f8:	4413      	add	r3, r2
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d116      	bne.n	8008a32 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008a04:	4a1f      	ldr	r2, [pc, #124]	; (8008a84 <chk_lock+0xb4>)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d10c      	bne.n	8008a32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a18:	4a1a      	ldr	r2, [pc, #104]	; (8008a84 <chk_lock+0xb4>)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	4413      	add	r3, r2
 8008a20:	3308      	adds	r3, #8
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d102      	bne.n	8008a32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a2c:	e007      	b.n	8008a3e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3301      	adds	r3, #1
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d9d2      	bls.n	80089e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d109      	bne.n	8008a58 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d102      	bne.n	8008a50 <chk_lock+0x80>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d101      	bne.n	8008a54 <chk_lock+0x84>
 8008a50:	2300      	movs	r3, #0
 8008a52:	e010      	b.n	8008a76 <chk_lock+0xa6>
 8008a54:	2312      	movs	r3, #18
 8008a56:	e00e      	b.n	8008a76 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d108      	bne.n	8008a70 <chk_lock+0xa0>
 8008a5e:	4a09      	ldr	r2, [pc, #36]	; (8008a84 <chk_lock+0xb4>)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	4413      	add	r3, r2
 8008a66:	330c      	adds	r3, #12
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a6e:	d101      	bne.n	8008a74 <chk_lock+0xa4>
 8008a70:	2310      	movs	r3, #16
 8008a72:	e000      	b.n	8008a76 <chk_lock+0xa6>
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20000d90 	.word	0x20000d90

08008a88 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	607b      	str	r3, [r7, #4]
 8008a92:	e002      	b.n	8008a9a <enq_lock+0x12>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3301      	adds	r3, #1
 8008a98:	607b      	str	r3, [r7, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d806      	bhi.n	8008aae <enq_lock+0x26>
 8008aa0:	4a09      	ldr	r2, [pc, #36]	; (8008ac8 <enq_lock+0x40>)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	4413      	add	r3, r2
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f2      	bne.n	8008a94 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	bf14      	ite	ne
 8008ab4:	2301      	movne	r3, #1
 8008ab6:	2300      	moveq	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	20000d90 	.word	0x20000d90

08008acc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	e01f      	b.n	8008b1c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008adc:	4a41      	ldr	r2, [pc, #260]	; (8008be4 <inc_lock+0x118>)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	011b      	lsls	r3, r3, #4
 8008ae2:	4413      	add	r3, r2
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d113      	bne.n	8008b16 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008aee:	4a3d      	ldr	r2, [pc, #244]	; (8008be4 <inc_lock+0x118>)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	4413      	add	r3, r2
 8008af6:	3304      	adds	r3, #4
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d109      	bne.n	8008b16 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008b02:	4a38      	ldr	r2, [pc, #224]	; (8008be4 <inc_lock+0x118>)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	4413      	add	r3, r2
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d006      	beq.n	8008b24 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d9dc      	bls.n	8008adc <inc_lock+0x10>
 8008b22:	e000      	b.n	8008b26 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008b24:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d132      	bne.n	8008b92 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	e002      	b.n	8008b38 <inc_lock+0x6c>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3301      	adds	r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d806      	bhi.n	8008b4c <inc_lock+0x80>
 8008b3e:	4a29      	ldr	r2, [pc, #164]	; (8008be4 <inc_lock+0x118>)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	4413      	add	r3, r2
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1f2      	bne.n	8008b32 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d101      	bne.n	8008b56 <inc_lock+0x8a>
 8008b52:	2300      	movs	r3, #0
 8008b54:	e040      	b.n	8008bd8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	4922      	ldr	r1, [pc, #136]	; (8008be4 <inc_lock+0x118>)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	440b      	add	r3, r1
 8008b62:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	491e      	ldr	r1, [pc, #120]	; (8008be4 <inc_lock+0x118>)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	440b      	add	r3, r1
 8008b70:	3304      	adds	r3, #4
 8008b72:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	695a      	ldr	r2, [r3, #20]
 8008b78:	491a      	ldr	r1, [pc, #104]	; (8008be4 <inc_lock+0x118>)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	011b      	lsls	r3, r3, #4
 8008b7e:	440b      	add	r3, r1
 8008b80:	3308      	adds	r3, #8
 8008b82:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008b84:	4a17      	ldr	r2, [pc, #92]	; (8008be4 <inc_lock+0x118>)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	4413      	add	r3, r2
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	2200      	movs	r2, #0
 8008b90:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d009      	beq.n	8008bac <inc_lock+0xe0>
 8008b98:	4a12      	ldr	r2, [pc, #72]	; (8008be4 <inc_lock+0x118>)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	4413      	add	r3, r2
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <inc_lock+0xe0>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e015      	b.n	8008bd8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d108      	bne.n	8008bc4 <inc_lock+0xf8>
 8008bb2:	4a0c      	ldr	r2, [pc, #48]	; (8008be4 <inc_lock+0x118>)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	011b      	lsls	r3, r3, #4
 8008bb8:	4413      	add	r3, r2
 8008bba:	330c      	adds	r3, #12
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	e001      	b.n	8008bc8 <inc_lock+0xfc>
 8008bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bc8:	4906      	ldr	r1, [pc, #24]	; (8008be4 <inc_lock+0x118>)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	440b      	add	r3, r1
 8008bd0:	330c      	adds	r3, #12
 8008bd2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3301      	adds	r3, #1
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	20000d90 	.word	0x20000d90

08008be8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	607b      	str	r3, [r7, #4]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d825      	bhi.n	8008c48 <dec_lock+0x60>
		n = Files[i].ctr;
 8008bfc:	4a17      	ldr	r2, [pc, #92]	; (8008c5c <dec_lock+0x74>)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	011b      	lsls	r3, r3, #4
 8008c02:	4413      	add	r3, r2
 8008c04:	330c      	adds	r3, #12
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008c0a:	89fb      	ldrh	r3, [r7, #14]
 8008c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c10:	d101      	bne.n	8008c16 <dec_lock+0x2e>
 8008c12:	2300      	movs	r3, #0
 8008c14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008c16:	89fb      	ldrh	r3, [r7, #14]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <dec_lock+0x3a>
 8008c1c:	89fb      	ldrh	r3, [r7, #14]
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008c22:	4a0e      	ldr	r2, [pc, #56]	; (8008c5c <dec_lock+0x74>)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	011b      	lsls	r3, r3, #4
 8008c28:	4413      	add	r3, r2
 8008c2a:	330c      	adds	r3, #12
 8008c2c:	89fa      	ldrh	r2, [r7, #14]
 8008c2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008c30:	89fb      	ldrh	r3, [r7, #14]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d105      	bne.n	8008c42 <dec_lock+0x5a>
 8008c36:	4a09      	ldr	r2, [pc, #36]	; (8008c5c <dec_lock+0x74>)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	4413      	add	r3, r2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	737b      	strb	r3, [r7, #13]
 8008c46:	e001      	b.n	8008c4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008c48:	2302      	movs	r3, #2
 8008c4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008c4c:	7b7b      	ldrb	r3, [r7, #13]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20000d90 	.word	0x20000d90

08008c60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008c68:	2300      	movs	r3, #0
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	e010      	b.n	8008c90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008c6e:	4a0d      	ldr	r2, [pc, #52]	; (8008ca4 <clear_lock+0x44>)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	4413      	add	r3, r2
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d105      	bne.n	8008c8a <clear_lock+0x2a>
 8008c7e:	4a09      	ldr	r2, [pc, #36]	; (8008ca4 <clear_lock+0x44>)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	4413      	add	r3, r2
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d9eb      	bls.n	8008c6e <clear_lock+0xe>
	}
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	20000d90 	.word	0x20000d90

08008ca8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	78db      	ldrb	r3, [r3, #3]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d034      	beq.n	8008d26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	7858      	ldrb	r0, [r3, #1]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ccc:	2301      	movs	r3, #1
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	f7ff fd40 	bl	8008754 <disk_write>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	73fb      	strb	r3, [r7, #15]
 8008cde:	e022      	b.n	8008d26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	1ad2      	subs	r2, r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d217      	bcs.n	8008d26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	789b      	ldrb	r3, [r3, #2]
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	e010      	b.n	8008d20 <sync_window+0x78>
					wsect += fs->fsize;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	4413      	add	r3, r2
 8008d06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	7858      	ldrb	r0, [r3, #1]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d12:	2301      	movs	r3, #1
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	f7ff fd1d 	bl	8008754 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	613b      	str	r3, [r7, #16]
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d8eb      	bhi.n	8008cfe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d01b      	beq.n	8008d80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff ffad 	bl	8008ca8 <sync_window>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d113      	bne.n	8008d80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	7858      	ldrb	r0, [r3, #1]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d62:	2301      	movs	r3, #1
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	f7ff fcd5 	bl	8008714 <disk_read>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d004      	beq.n	8008d7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff ff87 	bl	8008ca8 <sync_window>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d158      	bne.n	8008e56 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d148      	bne.n	8008e3e <sync_fs+0xb2>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	791b      	ldrb	r3, [r3, #4]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d144      	bne.n	8008e3e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3330      	adds	r3, #48	; 0x30
 8008db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff fda9 	bl	8008916 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	3330      	adds	r3, #48	; 0x30
 8008dc8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dcc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff fd38 	bl	8008846 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3330      	adds	r3, #48	; 0x30
 8008dda:	4921      	ldr	r1, [pc, #132]	; (8008e60 <sync_fs+0xd4>)
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7ff fd4d 	bl	800887c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3330      	adds	r3, #48	; 0x30
 8008de6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008dea:	491e      	ldr	r1, [pc, #120]	; (8008e64 <sync_fs+0xd8>)
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7ff fd45 	bl	800887c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	3330      	adds	r3, #48	; 0x30
 8008df6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4610      	mov	r0, r2
 8008e02:	f7ff fd3b 	bl	800887c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3330      	adds	r3, #48	; 0x30
 8008e0a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	4619      	mov	r1, r3
 8008e14:	4610      	mov	r0, r2
 8008e16:	f7ff fd31 	bl	800887c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7858      	ldrb	r0, [r3, #1]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e32:	2301      	movs	r3, #1
 8008e34:	f7ff fc8e 	bl	8008754 <disk_write>
			fs->fsi_flag = 0;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	785b      	ldrb	r3, [r3, #1]
 8008e42:	2200      	movs	r2, #0
 8008e44:	2100      	movs	r1, #0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff fca4 	bl	8008794 <disk_ioctl>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <sync_fs+0xca>
 8008e52:	2301      	movs	r3, #1
 8008e54:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	41615252 	.word	0x41615252
 8008e64:	61417272 	.word	0x61417272

08008e68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	3b02      	subs	r3, #2
 8008e76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	3b02      	subs	r3, #2
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d301      	bcc.n	8008e88 <clust2sect+0x20>
 8008e84:	2300      	movs	r3, #0
 8008e86:	e008      	b.n	8008e9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	895b      	ldrh	r3, [r3, #10]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	fb03 f202 	mul.w	r2, r3, r2
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	4413      	add	r3, r2
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b086      	sub	sp, #24
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d904      	bls.n	8008ec6 <get_fat+0x20>
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d302      	bcc.n	8008ecc <get_fat+0x26>
		val = 1;	/* Internal error */
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
 8008eca:	e08f      	b.n	8008fec <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ed0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d062      	beq.n	8008fa0 <get_fat+0xfa>
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	dc7c      	bgt.n	8008fd8 <get_fat+0x132>
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d002      	beq.n	8008ee8 <get_fat+0x42>
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d042      	beq.n	8008f6c <get_fat+0xc6>
 8008ee6:	e077      	b.n	8008fd8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	085b      	lsrs	r3, r3, #1
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	6a1a      	ldr	r2, [r3, #32]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	0a5b      	lsrs	r3, r3, #9
 8008efe:	4413      	add	r3, r2
 8008f00:	4619      	mov	r1, r3
 8008f02:	6938      	ldr	r0, [r7, #16]
 8008f04:	f7ff ff14 	bl	8008d30 <move_window>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d167      	bne.n	8008fde <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	60fa      	str	r2, [r7, #12]
 8008f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	6a1a      	ldr	r2, [r3, #32]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	0a5b      	lsrs	r3, r3, #9
 8008f2a:	4413      	add	r3, r2
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6938      	ldr	r0, [r7, #16]
 8008f30:	f7ff fefe 	bl	8008d30 <move_window>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d153      	bne.n	8008fe2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4413      	add	r3, r2
 8008f44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <get_fat+0xbc>
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	091b      	lsrs	r3, r3, #4
 8008f60:	e002      	b.n	8008f68 <get_fat+0xc2>
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f68:	617b      	str	r3, [r7, #20]
			break;
 8008f6a:	e03f      	b.n	8008fec <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6a1a      	ldr	r2, [r3, #32]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	0a1b      	lsrs	r3, r3, #8
 8008f74:	4413      	add	r3, r2
 8008f76:	4619      	mov	r1, r3
 8008f78:	6938      	ldr	r0, [r7, #16]
 8008f7a:	f7ff fed9 	bl	8008d30 <move_window>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d130      	bne.n	8008fe6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	005b      	lsls	r3, r3, #1
 8008f8e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008f92:	4413      	add	r3, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7ff fc1b 	bl	80087d0 <ld_word>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	617b      	str	r3, [r7, #20]
			break;
 8008f9e:	e025      	b.n	8008fec <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	6a1a      	ldr	r2, [r3, #32]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	09db      	lsrs	r3, r3, #7
 8008fa8:	4413      	add	r3, r2
 8008faa:	4619      	mov	r1, r3
 8008fac:	6938      	ldr	r0, [r7, #16]
 8008fae:	f7ff febf 	bl	8008d30 <move_window>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d118      	bne.n	8008fea <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008fc6:	4413      	add	r3, r2
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff fc19 	bl	8008800 <ld_dword>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008fd4:	617b      	str	r3, [r7, #20]
			break;
 8008fd6:	e009      	b.n	8008fec <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008fd8:	2301      	movs	r3, #1
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	e006      	b.n	8008fec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fde:	bf00      	nop
 8008fe0:	e004      	b.n	8008fec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fe2:	bf00      	nop
 8008fe4:	e002      	b.n	8008fec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008fe6:	bf00      	nop
 8008fe8:	e000      	b.n	8008fec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fea:	bf00      	nop
		}
	}

	return val;
 8008fec:	697b      	ldr	r3, [r7, #20]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008ff6:	b590      	push	{r4, r7, lr}
 8008ff8:	b089      	sub	sp, #36	; 0x24
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009002:	2302      	movs	r3, #2
 8009004:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b01      	cmp	r3, #1
 800900a:	f240 80d2 	bls.w	80091b2 <put_fat+0x1bc>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	429a      	cmp	r2, r3
 8009016:	f080 80cc 	bcs.w	80091b2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b03      	cmp	r3, #3
 8009020:	f000 8096 	beq.w	8009150 <put_fat+0x15a>
 8009024:	2b03      	cmp	r3, #3
 8009026:	f300 80cd 	bgt.w	80091c4 <put_fat+0x1ce>
 800902a:	2b01      	cmp	r3, #1
 800902c:	d002      	beq.n	8009034 <put_fat+0x3e>
 800902e:	2b02      	cmp	r3, #2
 8009030:	d06e      	beq.n	8009110 <put_fat+0x11a>
 8009032:	e0c7      	b.n	80091c4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	61bb      	str	r3, [r7, #24]
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	4413      	add	r3, r2
 8009040:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a1a      	ldr	r2, [r3, #32]
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	0a5b      	lsrs	r3, r3, #9
 800904a:	4413      	add	r3, r2
 800904c:	4619      	mov	r1, r3
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f7ff fe6e 	bl	8008d30 <move_window>
 8009054:	4603      	mov	r3, r0
 8009056:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009058:	7ffb      	ldrb	r3, [r7, #31]
 800905a:	2b00      	cmp	r3, #0
 800905c:	f040 80ab 	bne.w	80091b6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	1c59      	adds	r1, r3, #1
 800906a:	61b9      	str	r1, [r7, #24]
 800906c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009070:	4413      	add	r3, r2
 8009072:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00d      	beq.n	800909a <put_fat+0xa4>
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	b25b      	sxtb	r3, r3
 8009084:	f003 030f 	and.w	r3, r3, #15
 8009088:	b25a      	sxtb	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	b25b      	sxtb	r3, r3
 8009092:	4313      	orrs	r3, r2
 8009094:	b25b      	sxtb	r3, r3
 8009096:	b2db      	uxtb	r3, r3
 8009098:	e001      	b.n	800909e <put_fat+0xa8>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6a1a      	ldr	r2, [r3, #32]
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	0a5b      	lsrs	r3, r3, #9
 80090b0:	4413      	add	r3, r2
 80090b2:	4619      	mov	r1, r3
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f7ff fe3b 	bl	8008d30 <move_window>
 80090ba:	4603      	mov	r3, r0
 80090bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090be:	7ffb      	ldrb	r3, [r7, #31]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d17a      	bne.n	80091ba <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d0:	4413      	add	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <put_fat+0xf0>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	091b      	lsrs	r3, r3, #4
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	e00e      	b.n	8009104 <put_fat+0x10e>
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	b25b      	sxtb	r3, r3
 80090ec:	f023 030f 	bic.w	r3, r3, #15
 80090f0:	b25a      	sxtb	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	0a1b      	lsrs	r3, r3, #8
 80090f6:	b25b      	sxtb	r3, r3
 80090f8:	f003 030f 	and.w	r3, r3, #15
 80090fc:	b25b      	sxtb	r3, r3
 80090fe:	4313      	orrs	r3, r2
 8009100:	b25b      	sxtb	r3, r3
 8009102:	b2db      	uxtb	r3, r3
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2201      	movs	r2, #1
 800910c:	70da      	strb	r2, [r3, #3]
			break;
 800910e:	e059      	b.n	80091c4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6a1a      	ldr	r2, [r3, #32]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	0a1b      	lsrs	r3, r3, #8
 8009118:	4413      	add	r3, r2
 800911a:	4619      	mov	r1, r3
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f7ff fe07 	bl	8008d30 <move_window>
 8009122:	4603      	mov	r3, r0
 8009124:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009126:	7ffb      	ldrb	r3, [r7, #31]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d148      	bne.n	80091be <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800913a:	4413      	add	r3, r2
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	b292      	uxth	r2, r2
 8009140:	4611      	mov	r1, r2
 8009142:	4618      	mov	r0, r3
 8009144:	f7ff fb7f 	bl	8008846 <st_word>
			fs->wflag = 1;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2201      	movs	r2, #1
 800914c:	70da      	strb	r2, [r3, #3]
			break;
 800914e:	e039      	b.n	80091c4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a1a      	ldr	r2, [r3, #32]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	09db      	lsrs	r3, r3, #7
 8009158:	4413      	add	r3, r2
 800915a:	4619      	mov	r1, r3
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7ff fde7 	bl	8008d30 <move_window>
 8009162:	4603      	mov	r3, r0
 8009164:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009166:	7ffb      	ldrb	r3, [r7, #31]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d12a      	bne.n	80091c2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009180:	4413      	add	r3, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff fb3c 	bl	8008800 <ld_dword>
 8009188:	4603      	mov	r3, r0
 800918a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800918e:	4323      	orrs	r3, r4
 8009190:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80091a0:	4413      	add	r3, r2
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7ff fb69 	bl	800887c <st_dword>
			fs->wflag = 1;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	70da      	strb	r2, [r3, #3]
			break;
 80091b0:	e008      	b.n	80091c4 <put_fat+0x1ce>
		}
	}
 80091b2:	bf00      	nop
 80091b4:	e006      	b.n	80091c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80091b6:	bf00      	nop
 80091b8:	e004      	b.n	80091c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80091ba:	bf00      	nop
 80091bc:	e002      	b.n	80091c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80091be:	bf00      	nop
 80091c0:	e000      	b.n	80091c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80091c2:	bf00      	nop
	return res;
 80091c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3724      	adds	r7, #36	; 0x24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd90      	pop	{r4, r7, pc}

080091ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b088      	sub	sp, #32
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	60f8      	str	r0, [r7, #12]
 80091d6:	60b9      	str	r1, [r7, #8]
 80091d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d904      	bls.n	80091f4 <remove_chain+0x26>
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d301      	bcc.n	80091f8 <remove_chain+0x2a>
 80091f4:	2302      	movs	r3, #2
 80091f6:	e04b      	b.n	8009290 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00c      	beq.n	8009218 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80091fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009202:	6879      	ldr	r1, [r7, #4]
 8009204:	69b8      	ldr	r0, [r7, #24]
 8009206:	f7ff fef6 	bl	8008ff6 <put_fat>
 800920a:	4603      	mov	r3, r0
 800920c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800920e:	7ffb      	ldrb	r3, [r7, #31]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <remove_chain+0x4a>
 8009214:	7ffb      	ldrb	r3, [r7, #31]
 8009216:	e03b      	b.n	8009290 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009218:	68b9      	ldr	r1, [r7, #8]
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f7ff fe43 	bl	8008ea6 <get_fat>
 8009220:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d031      	beq.n	800928c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <remove_chain+0x64>
 800922e:	2302      	movs	r3, #2
 8009230:	e02e      	b.n	8009290 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009238:	d101      	bne.n	800923e <remove_chain+0x70>
 800923a:	2301      	movs	r3, #1
 800923c:	e028      	b.n	8009290 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800923e:	2200      	movs	r2, #0
 8009240:	68b9      	ldr	r1, [r7, #8]
 8009242:	69b8      	ldr	r0, [r7, #24]
 8009244:	f7ff fed7 	bl	8008ff6 <put_fat>
 8009248:	4603      	mov	r3, r0
 800924a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800924c:	7ffb      	ldrb	r3, [r7, #31]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <remove_chain+0x88>
 8009252:	7ffb      	ldrb	r3, [r7, #31]
 8009254:	e01c      	b.n	8009290 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	691a      	ldr	r2, [r3, #16]
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	3b02      	subs	r3, #2
 8009260:	429a      	cmp	r2, r3
 8009262:	d20b      	bcs.n	800927c <remove_chain+0xae>
			fs->free_clst++;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	791b      	ldrb	r3, [r3, #4]
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	b2da      	uxtb	r2, r3
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	429a      	cmp	r2, r3
 8009288:	d3c6      	bcc.n	8009218 <remove_chain+0x4a>
 800928a:	e000      	b.n	800928e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800928c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3720      	adds	r7, #32
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10d      	bne.n	80092ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d004      	beq.n	80092c4 <create_chain+0x2c>
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d31b      	bcc.n	80092fc <create_chain+0x64>
 80092c4:	2301      	movs	r3, #1
 80092c6:	61bb      	str	r3, [r7, #24]
 80092c8:	e018      	b.n	80092fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff fdea 	bl	8008ea6 <get_fat>
 80092d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d801      	bhi.n	80092de <create_chain+0x46>
 80092da:	2301      	movs	r3, #1
 80092dc:	e070      	b.n	80093c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092e4:	d101      	bne.n	80092ea <create_chain+0x52>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	e06a      	b.n	80093c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d201      	bcs.n	80092f8 <create_chain+0x60>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	e063      	b.n	80093c0 <create_chain+0x128>
		scl = clst;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	3301      	adds	r3, #1
 8009304:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	69fa      	ldr	r2, [r7, #28]
 800930c:	429a      	cmp	r2, r3
 800930e:	d307      	bcc.n	8009320 <create_chain+0x88>
				ncl = 2;
 8009310:	2302      	movs	r3, #2
 8009312:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009314:	69fa      	ldr	r2, [r7, #28]
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	429a      	cmp	r2, r3
 800931a:	d901      	bls.n	8009320 <create_chain+0x88>
 800931c:	2300      	movs	r3, #0
 800931e:	e04f      	b.n	80093c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009320:	69f9      	ldr	r1, [r7, #28]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff fdbf 	bl	8008ea6 <get_fat>
 8009328:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00e      	beq.n	800934e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d003      	beq.n	800933e <create_chain+0xa6>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800933c:	d101      	bne.n	8009342 <create_chain+0xaa>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	e03e      	b.n	80093c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	429a      	cmp	r2, r3
 8009348:	d1da      	bne.n	8009300 <create_chain+0x68>
 800934a:	2300      	movs	r3, #0
 800934c:	e038      	b.n	80093c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800934e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009354:	69f9      	ldr	r1, [r7, #28]
 8009356:	6938      	ldr	r0, [r7, #16]
 8009358:	f7ff fe4d 	bl	8008ff6 <put_fat>
 800935c:	4603      	mov	r3, r0
 800935e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d109      	bne.n	800937a <create_chain+0xe2>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d006      	beq.n	800937a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800936c:	69fa      	ldr	r2, [r7, #28]
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6938      	ldr	r0, [r7, #16]
 8009372:	f7ff fe40 	bl	8008ff6 <put_fat>
 8009376:	4603      	mov	r3, r0
 8009378:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d116      	bne.n	80093ae <create_chain+0x116>
		fs->last_clst = ncl;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	691a      	ldr	r2, [r3, #16]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	3b02      	subs	r3, #2
 8009390:	429a      	cmp	r2, r3
 8009392:	d804      	bhi.n	800939e <create_chain+0x106>
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	1e5a      	subs	r2, r3, #1
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	791b      	ldrb	r3, [r3, #4]
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	711a      	strb	r2, [r3, #4]
 80093ac:	e007      	b.n	80093be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d102      	bne.n	80093ba <create_chain+0x122>
 80093b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093b8:	e000      	b.n	80093bc <create_chain+0x124>
 80093ba:	2301      	movs	r3, #1
 80093bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80093be:	69fb      	ldr	r3, [r7, #28]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3720      	adds	r7, #32
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	3304      	adds	r3, #4
 80093de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	0a5b      	lsrs	r3, r3, #9
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	8952      	ldrh	r2, [r2, #10]
 80093e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	1d1a      	adds	r2, r3, #4
 80093f2:	613a      	str	r2, [r7, #16]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <clmt_clust+0x3a>
 80093fe:	2300      	movs	r3, #0
 8009400:	e010      	b.n	8009424 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	429a      	cmp	r2, r3
 8009408:	d307      	bcc.n	800941a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	617b      	str	r3, [r7, #20]
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	3304      	adds	r3, #4
 8009416:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009418:	e7e9      	b.n	80093ee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800941a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	4413      	add	r3, r2
}
 8009424:	4618      	mov	r0, r3
 8009426:	371c      	adds	r7, #28
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009446:	d204      	bcs.n	8009452 <dir_sdi+0x22>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	f003 031f 	and.w	r3, r3, #31
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009452:	2302      	movs	r3, #2
 8009454:	e063      	b.n	800951e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d106      	bne.n	8009476 <dir_sdi+0x46>
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b02      	cmp	r3, #2
 800946e:	d902      	bls.n	8009476 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10c      	bne.n	8009496 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	095b      	lsrs	r3, r3, #5
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	8912      	ldrh	r2, [r2, #8]
 8009484:	4293      	cmp	r3, r2
 8009486:	d301      	bcc.n	800948c <dir_sdi+0x5c>
 8009488:	2302      	movs	r3, #2
 800948a:	e048      	b.n	800951e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	61da      	str	r2, [r3, #28]
 8009494:	e029      	b.n	80094ea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	895b      	ldrh	r3, [r3, #10]
 800949a:	025b      	lsls	r3, r3, #9
 800949c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800949e:	e019      	b.n	80094d4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6979      	ldr	r1, [r7, #20]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7ff fcfe 	bl	8008ea6 <get_fat>
 80094aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094b2:	d101      	bne.n	80094b8 <dir_sdi+0x88>
 80094b4:	2301      	movs	r3, #1
 80094b6:	e032      	b.n	800951e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d904      	bls.n	80094c8 <dir_sdi+0x98>
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d301      	bcc.n	80094cc <dir_sdi+0x9c>
 80094c8:	2302      	movs	r3, #2
 80094ca:	e028      	b.n	800951e <dir_sdi+0xee>
			ofs -= csz;
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d2e1      	bcs.n	80094a0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80094dc:	6979      	ldr	r1, [r7, #20]
 80094de:	6938      	ldr	r0, [r7, #16]
 80094e0:	f7ff fcc2 	bl	8008e68 <clust2sect>
 80094e4:	4602      	mov	r2, r0
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <dir_sdi+0xcc>
 80094f8:	2302      	movs	r3, #2
 80094fa:	e010      	b.n	800951e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69da      	ldr	r2, [r3, #28]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	0a5b      	lsrs	r3, r3, #9
 8009504:	441a      	add	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009516:	441a      	add	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b086      	sub	sp, #24
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	3320      	adds	r3, #32
 800953c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <dir_next+0x28>
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800954c:	d301      	bcc.n	8009552 <dir_next+0x2c>
 800954e:	2304      	movs	r3, #4
 8009550:	e0aa      	b.n	80096a8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009558:	2b00      	cmp	r3, #0
 800955a:	f040 8098 	bne.w	800968e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10b      	bne.n	8009588 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	8912      	ldrh	r2, [r2, #8]
 8009578:	4293      	cmp	r3, r2
 800957a:	f0c0 8088 	bcc.w	800968e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	61da      	str	r2, [r3, #28]
 8009584:	2304      	movs	r3, #4
 8009586:	e08f      	b.n	80096a8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	0a5b      	lsrs	r3, r3, #9
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	8952      	ldrh	r2, [r2, #10]
 8009590:	3a01      	subs	r2, #1
 8009592:	4013      	ands	r3, r2
 8009594:	2b00      	cmp	r3, #0
 8009596:	d17a      	bne.n	800968e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	4619      	mov	r1, r3
 80095a0:	4610      	mov	r0, r2
 80095a2:	f7ff fc80 	bl	8008ea6 <get_fat>
 80095a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d801      	bhi.n	80095b2 <dir_next+0x8c>
 80095ae:	2302      	movs	r3, #2
 80095b0:	e07a      	b.n	80096a8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095b8:	d101      	bne.n	80095be <dir_next+0x98>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e074      	b.n	80096a8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d358      	bcc.n	800967a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	61da      	str	r2, [r3, #28]
 80095d4:	2304      	movs	r3, #4
 80095d6:	e067      	b.n	80096a8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	4619      	mov	r1, r3
 80095e0:	4610      	mov	r0, r2
 80095e2:	f7ff fe59 	bl	8009298 <create_chain>
 80095e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <dir_next+0xcc>
 80095ee:	2307      	movs	r3, #7
 80095f0:	e05a      	b.n	80096a8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <dir_next+0xd6>
 80095f8:	2302      	movs	r3, #2
 80095fa:	e055      	b.n	80096a8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009602:	d101      	bne.n	8009608 <dir_next+0xe2>
 8009604:	2301      	movs	r3, #1
 8009606:	e04f      	b.n	80096a8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff fb4d 	bl	8008ca8 <sync_window>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <dir_next+0xf2>
 8009614:	2301      	movs	r3, #1
 8009616:	e047      	b.n	80096a8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3330      	adds	r3, #48	; 0x30
 800961c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009620:	2100      	movs	r1, #0
 8009622:	4618      	mov	r0, r3
 8009624:	f7ff f977 	bl	8008916 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009628:	2300      	movs	r3, #0
 800962a:	613b      	str	r3, [r7, #16]
 800962c:	6979      	ldr	r1, [r7, #20]
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff fc1a 	bl	8008e68 <clust2sect>
 8009634:	4602      	mov	r2, r0
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	62da      	str	r2, [r3, #44]	; 0x2c
 800963a:	e012      	b.n	8009662 <dir_next+0x13c>
						fs->wflag = 1;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f7ff fb30 	bl	8008ca8 <sync_window>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <dir_next+0x12c>
 800964e:	2301      	movs	r3, #1
 8009650:	e02a      	b.n	80096a8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	3301      	adds	r3, #1
 8009656:	613b      	str	r3, [r7, #16]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	62da      	str	r2, [r3, #44]	; 0x2c
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	895b      	ldrh	r3, [r3, #10]
 8009666:	461a      	mov	r2, r3
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	4293      	cmp	r3, r2
 800966c:	d3e6      	bcc.n	800963c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1ad2      	subs	r2, r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009680:	6979      	ldr	r1, [r7, #20]
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7ff fbf0 	bl	8008e68 <clust2sect>
 8009688:	4602      	mov	r2, r0
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a0:	441a      	add	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80096c0:	2100      	movs	r1, #0
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff feb4 	bl	8009430 <dir_sdi>
 80096c8:	4603      	mov	r3, r0
 80096ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d12b      	bne.n	800972a <dir_alloc+0x7a>
		n = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	4619      	mov	r1, r3
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff fb27 	bl	8008d30 <move_window>
 80096e2:	4603      	mov	r3, r0
 80096e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d11d      	bne.n	8009728 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	2be5      	cmp	r3, #229	; 0xe5
 80096f4:	d004      	beq.n	8009700 <dir_alloc+0x50>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d107      	bne.n	8009710 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	3301      	adds	r3, #1
 8009704:	613b      	str	r3, [r7, #16]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	429a      	cmp	r2, r3
 800970c:	d102      	bne.n	8009714 <dir_alloc+0x64>
 800970e:	e00c      	b.n	800972a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009710:	2300      	movs	r3, #0
 8009712:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009714:	2101      	movs	r1, #1
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff ff05 	bl	8009526 <dir_next>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009720:	7dfb      	ldrb	r3, [r7, #23]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0d7      	beq.n	80096d6 <dir_alloc+0x26>
 8009726:	e000      	b.n	800972a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009728:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	2b04      	cmp	r3, #4
 800972e:	d101      	bne.n	8009734 <dir_alloc+0x84>
 8009730:	2307      	movs	r3, #7
 8009732:	75fb      	strb	r3, [r7, #23]
	return res;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	331a      	adds	r3, #26
 800974c:	4618      	mov	r0, r3
 800974e:	f7ff f83f 	bl	80087d0 <ld_word>
 8009752:	4603      	mov	r3, r0
 8009754:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	2b03      	cmp	r3, #3
 800975c:	d109      	bne.n	8009772 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	3314      	adds	r3, #20
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff f834 	bl	80087d0 <ld_word>
 8009768:	4603      	mov	r3, r0
 800976a:	041b      	lsls	r3, r3, #16
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009772:	68fb      	ldr	r3, [r7, #12]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	331a      	adds	r3, #26
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	b292      	uxth	r2, r2
 8009790:	4611      	mov	r1, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff f857 	bl	8008846 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b03      	cmp	r3, #3
 800979e:	d109      	bne.n	80097b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f103 0214 	add.w	r2, r3, #20
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	0c1b      	lsrs	r3, r3, #16
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7ff f849 	bl	8008846 <st_word>
	}
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80097c6:	2304      	movs	r3, #4
 80097c8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80097d0:	e03c      	b.n	800984c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6938      	ldr	r0, [r7, #16]
 80097da:	f7ff faa9 	bl	8008d30 <move_window>
 80097de:	4603      	mov	r3, r0
 80097e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d136      	bne.n	8009856 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80097f6:	2304      	movs	r3, #4
 80097f8:	75fb      	strb	r3, [r7, #23]
 80097fa:	e031      	b.n	8009860 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	330b      	adds	r3, #11
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009808:	73bb      	strb	r3, [r7, #14]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	7bba      	ldrb	r2, [r7, #14]
 800980e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	2be5      	cmp	r3, #229	; 0xe5
 8009814:	d011      	beq.n	800983a <dir_read+0x7e>
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	2b2e      	cmp	r3, #46	; 0x2e
 800981a:	d00e      	beq.n	800983a <dir_read+0x7e>
 800981c:	7bbb      	ldrb	r3, [r7, #14]
 800981e:	2b0f      	cmp	r3, #15
 8009820:	d00b      	beq.n	800983a <dir_read+0x7e>
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	f023 0320 	bic.w	r3, r3, #32
 8009828:	2b08      	cmp	r3, #8
 800982a:	bf0c      	ite	eq
 800982c:	2301      	moveq	r3, #1
 800982e:	2300      	movne	r3, #0
 8009830:	b2db      	uxtb	r3, r3
 8009832:	461a      	mov	r2, r3
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	4293      	cmp	r3, r2
 8009838:	d00f      	beq.n	800985a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800983a:	2100      	movs	r1, #0
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff fe72 	bl	8009526 <dir_next>
 8009842:	4603      	mov	r3, r0
 8009844:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d108      	bne.n	800985e <dir_read+0xa2>
	while (dp->sect) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1be      	bne.n	80097d2 <dir_read+0x16>
 8009854:	e004      	b.n	8009860 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009856:	bf00      	nop
 8009858:	e002      	b.n	8009860 <dir_read+0xa4>
				break;
 800985a:	bf00      	nop
 800985c:	e000      	b.n	8009860 <dir_read+0xa4>
		if (res != FR_OK) break;
 800985e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <dir_read+0xb0>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	61da      	str	r2, [r3, #28]
	return res;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b086      	sub	sp, #24
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009884:	2100      	movs	r1, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7ff fdd2 	bl	8009430 <dir_sdi>
 800988c:	4603      	mov	r3, r0
 800988e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009890:	7dfb      	ldrb	r3, [r7, #23]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <dir_find+0x24>
 8009896:	7dfb      	ldrb	r3, [r7, #23]
 8009898:	e03e      	b.n	8009918 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	4619      	mov	r1, r3
 80098a0:	6938      	ldr	r0, [r7, #16]
 80098a2:	f7ff fa45 	bl	8008d30 <move_window>
 80098a6:	4603      	mov	r3, r0
 80098a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d12f      	bne.n	8009910 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d102      	bne.n	80098c4 <dir_find+0x4e>
 80098be:	2304      	movs	r3, #4
 80098c0:	75fb      	strb	r3, [r7, #23]
 80098c2:	e028      	b.n	8009916 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	330b      	adds	r3, #11
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	330b      	adds	r3, #11
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	f003 0308 	and.w	r3, r3, #8
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <dir_find+0x86>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a18      	ldr	r0, [r3, #32]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3324      	adds	r3, #36	; 0x24
 80098ee:	220b      	movs	r2, #11
 80098f0:	4619      	mov	r1, r3
 80098f2:	f7ff f82b 	bl	800894c <mem_cmp>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80098fc:	2100      	movs	r1, #0
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff fe11 	bl	8009526 <dir_next>
 8009904:	4603      	mov	r3, r0
 8009906:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0c5      	beq.n	800989a <dir_find+0x24>
 800990e:	e002      	b.n	8009916 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009910:	bf00      	nop
 8009912:	e000      	b.n	8009916 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009914:	bf00      	nop

	return res;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800992e:	2101      	movs	r1, #1
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff febd 	bl	80096b0 <dir_alloc>
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d11c      	bne.n	800997a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	4619      	mov	r1, r3
 8009946:	68b8      	ldr	r0, [r7, #8]
 8009948:	f7ff f9f2 	bl	8008d30 <move_window>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d111      	bne.n	800997a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	2220      	movs	r2, #32
 800995c:	2100      	movs	r1, #0
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe ffd9 	bl	8008916 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a18      	ldr	r0, [r3, #32]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3324      	adds	r3, #36	; 0x24
 800996c:	220b      	movs	r2, #11
 800996e:	4619      	mov	r1, r3
 8009970:	f7fe ffb0 	bl	80088d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2201      	movs	r2, #1
 8009978:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800997a:	7bfb      	ldrb	r3, [r7, #15]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	4619      	mov	r1, r3
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7ff f9c9 	bl	8008d30 <move_window>
 800999e:	4603      	mov	r3, r0
 80099a0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80099a2:	7afb      	ldrb	r3, [r7, #11]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d106      	bne.n	80099b6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a1b      	ldr	r3, [r3, #32]
 80099ac:	22e5      	movs	r2, #229	; 0xe5
 80099ae:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2201      	movs	r2, #1
 80099b4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80099b6:	7afb      	ldrb	r3, [r7, #11]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2200      	movs	r2, #0
 80099ce:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	69db      	ldr	r3, [r3, #28]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d04e      	beq.n	8009a76 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	613b      	str	r3, [r7, #16]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80099e0:	e021      	b.n	8009a26 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1a      	ldr	r2, [r3, #32]
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	1c59      	adds	r1, r3, #1
 80099ea:	6179      	str	r1, [r7, #20]
 80099ec:	4413      	add	r3, r2
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	d100      	bne.n	80099fa <get_fileinfo+0x3a>
 80099f8:	e015      	b.n	8009a26 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	2b05      	cmp	r3, #5
 80099fe:	d101      	bne.n	8009a04 <get_fileinfo+0x44>
 8009a00:	23e5      	movs	r3, #229	; 0xe5
 8009a02:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b09      	cmp	r3, #9
 8009a08:	d106      	bne.n	8009a18 <get_fileinfo+0x58>
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	613a      	str	r2, [r7, #16]
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	4413      	add	r3, r2
 8009a14:	222e      	movs	r2, #46	; 0x2e
 8009a16:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	613a      	str	r2, [r7, #16]
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	4413      	add	r3, r2
 8009a22:	7bfa      	ldrb	r2, [r7, #15]
 8009a24:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b0a      	cmp	r3, #10
 8009a2a:	d9da      	bls.n	80099e2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	4413      	add	r3, r2
 8009a32:	3309      	adds	r3, #9
 8009a34:	2200      	movs	r2, #0
 8009a36:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a1b      	ldr	r3, [r3, #32]
 8009a3c:	7ada      	ldrb	r2, [r3, #11]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	331c      	adds	r3, #28
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fe fed9 	bl	8008800 <ld_dword>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	3316      	adds	r3, #22
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fed0 	bl	8008800 <ld_dword>
 8009a60:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	80da      	strh	r2, [r3, #6]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	0c1b      	lsrs	r3, r3, #16
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	809a      	strh	r2, [r3, #4]
 8009a74:	e000      	b.n	8009a78 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009a76:	bf00      	nop
}
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3324      	adds	r3, #36	; 0x24
 8009a94:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009a96:	220b      	movs	r2, #11
 8009a98:	2120      	movs	r1, #32
 8009a9a:	68b8      	ldr	r0, [r7, #8]
 8009a9c:	f7fe ff3b 	bl	8008916 <mem_set>
	si = i = 0; ni = 8;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	613b      	str	r3, [r7, #16]
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	61fb      	str	r3, [r7, #28]
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	61fa      	str	r2, [r7, #28]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009aba:	7efb      	ldrb	r3, [r7, #27]
 8009abc:	2b20      	cmp	r3, #32
 8009abe:	d94e      	bls.n	8009b5e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009ac0:	7efb      	ldrb	r3, [r7, #27]
 8009ac2:	2b2f      	cmp	r3, #47	; 0x2f
 8009ac4:	d006      	beq.n	8009ad4 <create_name+0x54>
 8009ac6:	7efb      	ldrb	r3, [r7, #27]
 8009ac8:	2b5c      	cmp	r3, #92	; 0x5c
 8009aca:	d110      	bne.n	8009aee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009acc:	e002      	b.n	8009ad4 <create_name+0x54>
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	61fb      	str	r3, [r7, #28]
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	4413      	add	r3, r2
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b2f      	cmp	r3, #47	; 0x2f
 8009ade:	d0f6      	beq.n	8009ace <create_name+0x4e>
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b5c      	cmp	r3, #92	; 0x5c
 8009aea:	d0f0      	beq.n	8009ace <create_name+0x4e>
			break;
 8009aec:	e038      	b.n	8009b60 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009aee:	7efb      	ldrb	r3, [r7, #27]
 8009af0:	2b2e      	cmp	r3, #46	; 0x2e
 8009af2:	d003      	beq.n	8009afc <create_name+0x7c>
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d30c      	bcc.n	8009b16 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	2b0b      	cmp	r3, #11
 8009b00:	d002      	beq.n	8009b08 <create_name+0x88>
 8009b02:	7efb      	ldrb	r3, [r7, #27]
 8009b04:	2b2e      	cmp	r3, #46	; 0x2e
 8009b06:	d001      	beq.n	8009b0c <create_name+0x8c>
 8009b08:	2306      	movs	r3, #6
 8009b0a:	e044      	b.n	8009b96 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009b0c:	2308      	movs	r3, #8
 8009b0e:	613b      	str	r3, [r7, #16]
 8009b10:	230b      	movs	r3, #11
 8009b12:	617b      	str	r3, [r7, #20]
			continue;
 8009b14:	e022      	b.n	8009b5c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009b16:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da04      	bge.n	8009b28 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009b1e:	7efb      	ldrb	r3, [r7, #27]
 8009b20:	3b80      	subs	r3, #128	; 0x80
 8009b22:	4a1f      	ldr	r2, [pc, #124]	; (8009ba0 <create_name+0x120>)
 8009b24:	5cd3      	ldrb	r3, [r2, r3]
 8009b26:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009b28:	7efb      	ldrb	r3, [r7, #27]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	481d      	ldr	r0, [pc, #116]	; (8009ba4 <create_name+0x124>)
 8009b2e:	f7fe ff34 	bl	800899a <chk_chr>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <create_name+0xbc>
 8009b38:	2306      	movs	r3, #6
 8009b3a:	e02c      	b.n	8009b96 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009b3c:	7efb      	ldrb	r3, [r7, #27]
 8009b3e:	2b60      	cmp	r3, #96	; 0x60
 8009b40:	d905      	bls.n	8009b4e <create_name+0xce>
 8009b42:	7efb      	ldrb	r3, [r7, #27]
 8009b44:	2b7a      	cmp	r3, #122	; 0x7a
 8009b46:	d802      	bhi.n	8009b4e <create_name+0xce>
 8009b48:	7efb      	ldrb	r3, [r7, #27]
 8009b4a:	3b20      	subs	r3, #32
 8009b4c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	613a      	str	r2, [r7, #16]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	4413      	add	r3, r2
 8009b58:	7efa      	ldrb	r2, [r7, #27]
 8009b5a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009b5c:	e7a6      	b.n	8009aac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009b5e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	441a      	add	r2, r3
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <create_name+0xf4>
 8009b70:	2306      	movs	r3, #6
 8009b72:	e010      	b.n	8009b96 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2be5      	cmp	r3, #229	; 0xe5
 8009b7a:	d102      	bne.n	8009b82 <create_name+0x102>
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2205      	movs	r2, #5
 8009b80:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009b82:	7efb      	ldrb	r3, [r7, #27]
 8009b84:	2b20      	cmp	r3, #32
 8009b86:	d801      	bhi.n	8009b8c <create_name+0x10c>
 8009b88:	2204      	movs	r2, #4
 8009b8a:	e000      	b.n	8009b8e <create_name+0x10e>
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	330b      	adds	r3, #11
 8009b92:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009b94:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3720      	adds	r7, #32
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	0800bd10 	.word	0x0800bd10
 8009ba4:	0800bc98 	.word	0x0800bc98

08009ba8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009bbc:	e002      	b.n	8009bc4 <follow_path+0x1c>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b2f      	cmp	r3, #47	; 0x2f
 8009bca:	d0f8      	beq.n	8009bbe <follow_path+0x16>
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b5c      	cmp	r3, #92	; 0x5c
 8009bd2:	d0f4      	beq.n	8009bbe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	2b1f      	cmp	r3, #31
 8009be0:	d80a      	bhi.n	8009bf8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2280      	movs	r2, #128	; 0x80
 8009be6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009bea:	2100      	movs	r1, #0
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff fc1f 	bl	8009430 <dir_sdi>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75fb      	strb	r3, [r7, #23]
 8009bf6:	e043      	b.n	8009c80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009bf8:	463b      	mov	r3, r7
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff ff3f 	bl	8009a80 <create_name>
 8009c02:	4603      	mov	r3, r0
 8009c04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d134      	bne.n	8009c76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7ff fe32 	bl	8009876 <dir_find>
 8009c12:	4603      	mov	r3, r0
 8009c14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	d127      	bne.n	8009c7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009c2a:	7afb      	ldrb	r3, [r7, #11]
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d122      	bne.n	8009c7a <follow_path+0xd2>
 8009c34:	2305      	movs	r3, #5
 8009c36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009c38:	e01f      	b.n	8009c7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c3a:	7afb      	ldrb	r3, [r7, #11]
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d11c      	bne.n	8009c7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	799b      	ldrb	r3, [r3, #6]
 8009c48:	f003 0310 	and.w	r3, r3, #16
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009c50:	2305      	movs	r3, #5
 8009c52:	75fb      	strb	r3, [r7, #23]
 8009c54:	e014      	b.n	8009c80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c64:	4413      	add	r3, r2
 8009c66:	4619      	mov	r1, r3
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff fd68 	bl	800973e <ld_clust>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c74:	e7c0      	b.n	8009bf8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009c76:	bf00      	nop
 8009c78:	e002      	b.n	8009c80 <follow_path+0xd8>
				break;
 8009c7a:	bf00      	nop
 8009c7c:	e000      	b.n	8009c80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c7e:	bf00      	nop
			}
		}
	}

	return res;
 8009c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b087      	sub	sp, #28
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d031      	beq.n	8009d04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	617b      	str	r3, [r7, #20]
 8009ca6:	e002      	b.n	8009cae <get_ldnumber+0x24>
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	3301      	adds	r3, #1
 8009cac:	617b      	str	r3, [r7, #20]
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d903      	bls.n	8009cbe <get_ldnumber+0x34>
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2b3a      	cmp	r3, #58	; 0x3a
 8009cbc:	d1f4      	bne.n	8009ca8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b3a      	cmp	r3, #58	; 0x3a
 8009cc4:	d11c      	bne.n	8009d00 <get_ldnumber+0x76>
			tp = *path;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	60fa      	str	r2, [r7, #12]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	3b30      	subs	r3, #48	; 0x30
 8009cd6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b09      	cmp	r3, #9
 8009cdc:	d80e      	bhi.n	8009cfc <get_ldnumber+0x72>
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d10a      	bne.n	8009cfc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d107      	bne.n	8009cfc <get_ldnumber+0x72>
					vol = (int)i;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	617b      	str	r3, [r7, #20]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	e002      	b.n	8009d06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009d00:	2300      	movs	r3, #0
 8009d02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009d04:	693b      	ldr	r3, [r7, #16]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	371c      	adds	r7, #28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
	...

08009d14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	70da      	strb	r2, [r3, #3]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d2a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7fe fffe 	bl	8008d30 <move_window>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <check_fs+0x2a>
 8009d3a:	2304      	movs	r3, #4
 8009d3c:	e038      	b.n	8009db0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	3330      	adds	r3, #48	; 0x30
 8009d42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe fd42 	bl	80087d0 <ld_word>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d001      	beq.n	8009d5c <check_fs+0x48>
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e029      	b.n	8009db0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d62:	2be9      	cmp	r3, #233	; 0xe9
 8009d64:	d009      	beq.n	8009d7a <check_fs+0x66>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d6c:	2beb      	cmp	r3, #235	; 0xeb
 8009d6e:	d11e      	bne.n	8009dae <check_fs+0x9a>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009d76:	2b90      	cmp	r3, #144	; 0x90
 8009d78:	d119      	bne.n	8009dae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3330      	adds	r3, #48	; 0x30
 8009d7e:	3336      	adds	r3, #54	; 0x36
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fe fd3d 	bl	8008800 <ld_dword>
 8009d86:	4603      	mov	r3, r0
 8009d88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d8c:	4a0a      	ldr	r2, [pc, #40]	; (8009db8 <check_fs+0xa4>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d101      	bne.n	8009d96 <check_fs+0x82>
 8009d92:	2300      	movs	r3, #0
 8009d94:	e00c      	b.n	8009db0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	3330      	adds	r3, #48	; 0x30
 8009d9a:	3352      	adds	r3, #82	; 0x52
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fe fd2f 	bl	8008800 <ld_dword>
 8009da2:	4603      	mov	r3, r0
 8009da4:	4a05      	ldr	r2, [pc, #20]	; (8009dbc <check_fs+0xa8>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d101      	bne.n	8009dae <check_fs+0x9a>
 8009daa:	2300      	movs	r3, #0
 8009dac:	e000      	b.n	8009db0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009dae:	2302      	movs	r3, #2
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	00544146 	.word	0x00544146
 8009dbc:	33544146 	.word	0x33544146

08009dc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b096      	sub	sp, #88	; 0x58
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f7ff ff58 	bl	8009c8a <get_ldnumber>
 8009dda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da01      	bge.n	8009de6 <find_volume+0x26>
 8009de2:	230b      	movs	r3, #11
 8009de4:	e22d      	b.n	800a242 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009de6:	4aa1      	ldr	r2, [pc, #644]	; (800a06c <find_volume+0x2ac>)
 8009de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <find_volume+0x3a>
 8009df6:	230c      	movs	r3, #12
 8009df8:	e223      	b.n	800a242 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dfe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	f023 0301 	bic.w	r3, r3, #1
 8009e06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01a      	beq.n	8009e46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe fc3d 	bl	8008694 <disk_status>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e24:	f003 0301 	and.w	r3, r3, #1
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10c      	bne.n	8009e46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d007      	beq.n	8009e42 <find_volume+0x82>
 8009e32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e36:	f003 0304 	and.w	r3, r3, #4
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009e3e:	230a      	movs	r3, #10
 8009e40:	e1ff      	b.n	800a242 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009e42:	2300      	movs	r3, #0
 8009e44:	e1fd      	b.n	800a242 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	2200      	movs	r2, #0
 8009e4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fe fc35 	bl	80086c8 <disk_initialize>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009e64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009e70:	2303      	movs	r3, #3
 8009e72:	e1e6      	b.n	800a242 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009e74:	79fb      	ldrb	r3, [r7, #7]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d007      	beq.n	8009e8a <find_volume+0xca>
 8009e7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e7e:	f003 0304 	and.w	r3, r3, #4
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009e86:	230a      	movs	r3, #10
 8009e88:	e1db      	b.n	800a242 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009e8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e92:	f7ff ff3f 	bl	8009d14 <check_fs>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d149      	bne.n	8009f38 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8009ea8:	e01e      	b.n	8009ee8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb2:	011b      	lsls	r3, r3, #4
 8009eb4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009eb8:	4413      	add	r3, r2
 8009eba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d006      	beq.n	8009ed4 <find_volume+0x114>
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	3308      	adds	r3, #8
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fe fc98 	bl	8008800 <ld_dword>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	e000      	b.n	8009ed6 <find_volume+0x116>
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	3358      	adds	r3, #88	; 0x58
 8009edc:	443b      	add	r3, r7
 8009ede:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8009ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d9dd      	bls.n	8009eaa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009eee:	2300      	movs	r3, #0
 8009ef0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <find_volume+0x13e>
 8009ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009efa:	3b01      	subs	r3, #1
 8009efc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	3358      	adds	r3, #88	; 0x58
 8009f04:	443b      	add	r3, r7
 8009f06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009f0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d005      	beq.n	8009f1e <find_volume+0x15e>
 8009f12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f16:	f7ff fefd 	bl	8009d14 <check_fs>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	e000      	b.n	8009f20 <find_volume+0x160>
 8009f1e:	2303      	movs	r3, #3
 8009f20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d905      	bls.n	8009f38 <find_volume+0x178>
 8009f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f2e:	3301      	adds	r3, #1
 8009f30:	643b      	str	r3, [r7, #64]	; 0x40
 8009f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	d9e2      	bls.n	8009efe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009f38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f3c:	2b04      	cmp	r3, #4
 8009f3e:	d101      	bne.n	8009f44 <find_volume+0x184>
 8009f40:	2301      	movs	r3, #1
 8009f42:	e17e      	b.n	800a242 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d901      	bls.n	8009f50 <find_volume+0x190>
 8009f4c:	230d      	movs	r3, #13
 8009f4e:	e178      	b.n	800a242 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f52:	3330      	adds	r3, #48	; 0x30
 8009f54:	330b      	adds	r3, #11
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fc3a 	bl	80087d0 <ld_word>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f62:	d001      	beq.n	8009f68 <find_volume+0x1a8>
 8009f64:	230d      	movs	r3, #13
 8009f66:	e16c      	b.n	800a242 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	3330      	adds	r3, #48	; 0x30
 8009f6c:	3316      	adds	r3, #22
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe fc2e 	bl	80087d0 <ld_word>
 8009f74:	4603      	mov	r3, r0
 8009f76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d106      	bne.n	8009f8c <find_volume+0x1cc>
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f80:	3330      	adds	r3, #48	; 0x30
 8009f82:	3324      	adds	r3, #36	; 0x24
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fe fc3b 	bl	8008800 <ld_dword>
 8009f8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f90:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	789b      	ldrb	r3, [r3, #2]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d005      	beq.n	8009fb0 <find_volume+0x1f0>
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa6:	789b      	ldrb	r3, [r3, #2]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d001      	beq.n	8009fb0 <find_volume+0x1f0>
 8009fac:	230d      	movs	r3, #13
 8009fae:	e148      	b.n	800a242 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	789b      	ldrb	r3, [r3, #2]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb8:	fb02 f303 	mul.w	r3, r2, r3
 8009fbc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fcc:	895b      	ldrh	r3, [r3, #10]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d008      	beq.n	8009fe4 <find_volume+0x224>
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	895b      	ldrh	r3, [r3, #10]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	895b      	ldrh	r3, [r3, #10]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	4013      	ands	r3, r2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <find_volume+0x228>
 8009fe4:	230d      	movs	r3, #13
 8009fe6:	e12c      	b.n	800a242 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	3330      	adds	r3, #48	; 0x30
 8009fec:	3311      	adds	r3, #17
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fbee 	bl	80087d0 <ld_word>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	891b      	ldrh	r3, [r3, #8]
 800a000:	f003 030f 	and.w	r3, r3, #15
 800a004:	b29b      	uxth	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <find_volume+0x24e>
 800a00a:	230d      	movs	r3, #13
 800a00c:	e119      	b.n	800a242 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	3330      	adds	r3, #48	; 0x30
 800a012:	3313      	adds	r3, #19
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fbdb 	bl	80087d0 <ld_word>
 800a01a:	4603      	mov	r3, r0
 800a01c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a020:	2b00      	cmp	r3, #0
 800a022:	d106      	bne.n	800a032 <find_volume+0x272>
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	3330      	adds	r3, #48	; 0x30
 800a028:	3320      	adds	r3, #32
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fe fbe8 	bl	8008800 <ld_dword>
 800a030:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	3330      	adds	r3, #48	; 0x30
 800a036:	330e      	adds	r3, #14
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe fbc9 	bl	80087d0 <ld_word>
 800a03e:	4603      	mov	r3, r0
 800a040:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a042:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <find_volume+0x28c>
 800a048:	230d      	movs	r3, #13
 800a04a:	e0fa      	b.n	800a242 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a04c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a050:	4413      	add	r3, r2
 800a052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a054:	8912      	ldrh	r2, [r2, #8]
 800a056:	0912      	lsrs	r2, r2, #4
 800a058:	b292      	uxth	r2, r2
 800a05a:	4413      	add	r3, r2
 800a05c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a05e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a062:	429a      	cmp	r2, r3
 800a064:	d204      	bcs.n	800a070 <find_volume+0x2b0>
 800a066:	230d      	movs	r3, #13
 800a068:	e0eb      	b.n	800a242 <find_volume+0x482>
 800a06a:	bf00      	nop
 800a06c:	20000d88 	.word	0x20000d88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a078:	8952      	ldrh	r2, [r2, #10]
 800a07a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <find_volume+0x2ca>
 800a086:	230d      	movs	r3, #13
 800a088:	e0db      	b.n	800a242 <find_volume+0x482>
		fmt = FS_FAT32;
 800a08a:	2303      	movs	r3, #3
 800a08c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a096:	4293      	cmp	r3, r2
 800a098:	d802      	bhi.n	800a0a0 <find_volume+0x2e0>
 800a09a:	2302      	movs	r3, #2
 800a09c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d802      	bhi.n	800a0b0 <find_volume+0x2f0>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	1c9a      	adds	r2, r3, #2
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0bc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a0be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0c2:	441a      	add	r2, r3
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a0c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	441a      	add	r2, r3
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a0d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d11e      	bne.n	800a118 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0dc:	3330      	adds	r3, #48	; 0x30
 800a0de:	332a      	adds	r3, #42	; 0x2a
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe fb75 	bl	80087d0 <ld_word>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <find_volume+0x330>
 800a0ec:	230d      	movs	r3, #13
 800a0ee:	e0a8      	b.n	800a242 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f2:	891b      	ldrh	r3, [r3, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <find_volume+0x33c>
 800a0f8:	230d      	movs	r3, #13
 800a0fa:	e0a2      	b.n	800a242 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	3330      	adds	r3, #48	; 0x30
 800a100:	332c      	adds	r3, #44	; 0x2c
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe fb7c 	bl	8008800 <ld_dword>
 800a108:	4602      	mov	r2, r0
 800a10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	647b      	str	r3, [r7, #68]	; 0x44
 800a116:	e01f      	b.n	800a158 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	891b      	ldrh	r3, [r3, #8]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <find_volume+0x364>
 800a120:	230d      	movs	r3, #13
 800a122:	e08e      	b.n	800a242 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a126:	6a1a      	ldr	r2, [r3, #32]
 800a128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a12a:	441a      	add	r2, r3
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a134:	2b02      	cmp	r3, #2
 800a136:	d103      	bne.n	800a140 <find_volume+0x380>
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	695b      	ldr	r3, [r3, #20]
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	e00a      	b.n	800a156 <find_volume+0x396>
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	695a      	ldr	r2, [r3, #20]
 800a144:	4613      	mov	r3, r2
 800a146:	005b      	lsls	r3, r3, #1
 800a148:	4413      	add	r3, r2
 800a14a:	085a      	lsrs	r2, r3, #1
 800a14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a156:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	699a      	ldr	r2, [r3, #24]
 800a15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a15e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a162:	0a5b      	lsrs	r3, r3, #9
 800a164:	429a      	cmp	r2, r3
 800a166:	d201      	bcs.n	800a16c <find_volume+0x3ac>
 800a168:	230d      	movs	r3, #13
 800a16a:	e06a      	b.n	800a242 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a172:	611a      	str	r2, [r3, #16]
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	691a      	ldr	r2, [r3, #16]
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17e:	2280      	movs	r2, #128	; 0x80
 800a180:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a182:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a186:	2b03      	cmp	r3, #3
 800a188:	d149      	bne.n	800a21e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	3330      	adds	r3, #48	; 0x30
 800a18e:	3330      	adds	r3, #48	; 0x30
 800a190:	4618      	mov	r0, r3
 800a192:	f7fe fb1d 	bl	80087d0 <ld_word>
 800a196:	4603      	mov	r3, r0
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d140      	bne.n	800a21e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a19e:	3301      	adds	r3, #1
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1a4:	f7fe fdc4 	bl	8008d30 <move_window>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d137      	bne.n	800a21e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b6:	3330      	adds	r3, #48	; 0x30
 800a1b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fe fb07 	bl	80087d0 <ld_word>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d127      	bne.n	800a21e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d0:	3330      	adds	r3, #48	; 0x30
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe fb14 	bl	8008800 <ld_dword>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	4a1c      	ldr	r2, [pc, #112]	; (800a24c <find_volume+0x48c>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d11e      	bne.n	800a21e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	3330      	adds	r3, #48	; 0x30
 800a1e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe fb09 	bl	8008800 <ld_dword>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	4a17      	ldr	r2, [pc, #92]	; (800a250 <find_volume+0x490>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d113      	bne.n	800a21e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f8:	3330      	adds	r3, #48	; 0x30
 800a1fa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe fafe 	bl	8008800 <ld_dword>
 800a204:	4602      	mov	r2, r0
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20c:	3330      	adds	r3, #48	; 0x30
 800a20e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe faf4 	bl	8008800 <ld_dword>
 800a218:	4602      	mov	r2, r0
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a220:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a224:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a226:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <find_volume+0x494>)
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	3301      	adds	r3, #1
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <find_volume+0x494>)
 800a230:	801a      	strh	r2, [r3, #0]
 800a232:	4b08      	ldr	r3, [pc, #32]	; (800a254 <find_volume+0x494>)
 800a234:	881a      	ldrh	r2, [r3, #0]
 800a236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a238:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a23a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a23c:	f7fe fd10 	bl	8008c60 <clear_lock>
#endif
	return FR_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3758      	adds	r7, #88	; 0x58
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	41615252 	.word	0x41615252
 800a250:	61417272 	.word	0x61417272
 800a254:	20000d8c 	.word	0x20000d8c

0800a258 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a262:	2309      	movs	r3, #9
 800a264:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01c      	beq.n	800a2a6 <validate+0x4e>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d018      	beq.n	800a2a6 <validate+0x4e>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d013      	beq.n	800a2a6 <validate+0x4e>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	889a      	ldrh	r2, [r3, #4]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	88db      	ldrh	r3, [r3, #6]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d10c      	bne.n	800a2a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	785b      	ldrb	r3, [r3, #1]
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe f9fe 	bl	8008694 <disk_status>
 800a298:	4603      	mov	r3, r0
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <validate+0x4e>
			res = FR_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <validate+0x5a>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	e000      	b.n	800a2b4 <validate+0x5c>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	6013      	str	r3, [r2, #0]
	return res;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
	...

0800a2c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b088      	sub	sp, #32
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a2d6:	f107 0310 	add.w	r3, r7, #16
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff fcd5 	bl	8009c8a <get_ldnumber>
 800a2e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	da01      	bge.n	800a2ec <f_mount+0x28>
 800a2e8:	230b      	movs	r3, #11
 800a2ea:	e02b      	b.n	800a344 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a2ec:	4a17      	ldr	r2, [pc, #92]	; (800a34c <f_mount+0x88>)
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a2fc:	69b8      	ldr	r0, [r7, #24]
 800a2fe:	f7fe fcaf 	bl	8008c60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	2200      	movs	r2, #0
 800a306:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	490d      	ldr	r1, [pc, #52]	; (800a34c <f_mount+0x88>)
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <f_mount+0x66>
 800a324:	79fb      	ldrb	r3, [r7, #7]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d001      	beq.n	800a32e <f_mount+0x6a>
 800a32a:	2300      	movs	r3, #0
 800a32c:	e00a      	b.n	800a344 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a32e:	f107 010c 	add.w	r1, r7, #12
 800a332:	f107 0308 	add.w	r3, r7, #8
 800a336:	2200      	movs	r2, #0
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff fd41 	bl	8009dc0 <find_volume>
 800a33e:	4603      	mov	r3, r0
 800a340:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a342:	7dfb      	ldrb	r3, [r7, #23]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20000d88 	.word	0x20000d88

0800a350 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b098      	sub	sp, #96	; 0x60
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	4613      	mov	r3, r2
 800a35c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <f_open+0x18>
 800a364:	2309      	movs	r3, #9
 800a366:	e1ad      	b.n	800a6c4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a368:	79fb      	ldrb	r3, [r7, #7]
 800a36a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a36e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a370:	79fa      	ldrb	r2, [r7, #7]
 800a372:	f107 0110 	add.w	r1, r7, #16
 800a376:	f107 0308 	add.w	r3, r7, #8
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff fd20 	bl	8009dc0 <find_volume>
 800a380:	4603      	mov	r3, r0
 800a382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f040 8191 	bne.w	800a6b2 <f_open+0x362>
		dj.obj.fs = fs;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	f107 0314 	add.w	r3, r7, #20
 800a39a:	4611      	mov	r1, r2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff fc03 	bl	8009ba8 <follow_path>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a3a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d11a      	bne.n	800a3e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a3b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a3b4:	b25b      	sxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	da03      	bge.n	800a3c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a3ba:	2306      	movs	r3, #6
 800a3bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a3c0:	e011      	b.n	800a3e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	f023 0301 	bic.w	r3, r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	bf14      	ite	ne
 800a3cc:	2301      	movne	r3, #1
 800a3ce:	2300      	moveq	r3, #0
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	f107 0314 	add.w	r3, r7, #20
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe faf8 	bl	80089d0 <chk_lock>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	f003 031c 	and.w	r3, r3, #28
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d07f      	beq.n	800a4f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a3f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d017      	beq.n	800a428 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a3f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d10e      	bne.n	800a41e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a400:	f7fe fb42 	bl	8008a88 <enq_lock>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d006      	beq.n	800a418 <f_open+0xc8>
 800a40a:	f107 0314 	add.w	r3, r7, #20
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff fa86 	bl	8009920 <dir_register>
 800a414:	4603      	mov	r3, r0
 800a416:	e000      	b.n	800a41a <f_open+0xca>
 800a418:	2312      	movs	r3, #18
 800a41a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	f043 0308 	orr.w	r3, r3, #8
 800a424:	71fb      	strb	r3, [r7, #7]
 800a426:	e010      	b.n	800a44a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a428:	7ebb      	ldrb	r3, [r7, #26]
 800a42a:	f003 0311 	and.w	r3, r3, #17
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <f_open+0xea>
					res = FR_DENIED;
 800a432:	2307      	movs	r3, #7
 800a434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a438:	e007      	b.n	800a44a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <f_open+0xfa>
 800a444:	2308      	movs	r3, #8
 800a446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a44a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d168      	bne.n	800a524 <f_open+0x1d4>
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	f003 0308 	and.w	r3, r3, #8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d063      	beq.n	800a524 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a45c:	f7fd ff52 	bl	8008304 <get_fattime>
 800a460:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a464:	330e      	adds	r3, #14
 800a466:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fe fa07 	bl	800887c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a470:	3316      	adds	r3, #22
 800a472:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a474:	4618      	mov	r0, r3
 800a476:	f7fe fa01 	bl	800887c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47c:	330b      	adds	r3, #11
 800a47e:	2220      	movs	r2, #32
 800a480:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a486:	4611      	mov	r1, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f7ff f958 	bl	800973e <ld_clust>
 800a48e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a494:	2200      	movs	r2, #0
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff f970 	bl	800977c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49e:	331c      	adds	r3, #28
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fe f9ea 	bl	800887c <st_dword>
					fs->wflag = 1;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d037      	beq.n	800a524 <f_open+0x1d4>
						dw = fs->winsect;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a4ba:	f107 0314 	add.w	r3, r7, #20
 800a4be:	2200      	movs	r2, #0
 800a4c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe fe83 	bl	80091ce <remove_chain>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a4ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d126      	bne.n	800a524 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe fc28 	bl	8008d30 <move_window>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4ea:	3a01      	subs	r2, #1
 800a4ec:	60da      	str	r2, [r3, #12]
 800a4ee:	e019      	b.n	800a524 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a4f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d115      	bne.n	800a524 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a4f8:	7ebb      	ldrb	r3, [r7, #26]
 800a4fa:	f003 0310 	and.w	r3, r3, #16
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d003      	beq.n	800a50a <f_open+0x1ba>
					res = FR_NO_FILE;
 800a502:	2304      	movs	r3, #4
 800a504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a508:	e00c      	b.n	800a524 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d007      	beq.n	800a524 <f_open+0x1d4>
 800a514:	7ebb      	ldrb	r3, [r7, #26]
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d002      	beq.n	800a524 <f_open+0x1d4>
						res = FR_DENIED;
 800a51e:	2307      	movs	r3, #7
 800a520:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d128      	bne.n	800a57e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	f003 0308 	and.w	r3, r3, #8
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a536:	79fb      	ldrb	r3, [r7, #7]
 800a538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a53c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a54c:	79fb      	ldrb	r3, [r7, #7]
 800a54e:	f023 0301 	bic.w	r3, r3, #1
 800a552:	2b00      	cmp	r3, #0
 800a554:	bf14      	ite	ne
 800a556:	2301      	movne	r3, #1
 800a558:	2300      	moveq	r3, #0
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	461a      	mov	r2, r3
 800a55e:	f107 0314 	add.w	r3, r7, #20
 800a562:	4611      	mov	r1, r2
 800a564:	4618      	mov	r0, r3
 800a566:	f7fe fab1 	bl	8008acc <inc_lock>
 800a56a:	4602      	mov	r2, r0
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d102      	bne.n	800a57e <f_open+0x22e>
 800a578:	2302      	movs	r3, #2
 800a57a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a57e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a582:	2b00      	cmp	r3, #0
 800a584:	f040 8095 	bne.w	800a6b2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff f8d5 	bl	800973e <ld_clust>
 800a594:	4602      	mov	r2, r0
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59c:	331c      	adds	r3, #28
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fe f92e 	bl	8008800 <ld_dword>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	88da      	ldrh	r2, [r3, #6]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	79fa      	ldrb	r2, [r7, #7]
 800a5c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3330      	adds	r3, #48	; 0x30
 800a5da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5de:	2100      	movs	r1, #0
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7fe f998 	bl	8008916 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	f003 0320 	and.w	r3, r3, #32
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d060      	beq.n	800a6b2 <f_open+0x362>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d05c      	beq.n	800a6b2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	68da      	ldr	r2, [r3, #12]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	895b      	ldrh	r3, [r3, #10]
 800a604:	025b      	lsls	r3, r3, #9
 800a606:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	657b      	str	r3, [r7, #84]	; 0x54
 800a614:	e016      	b.n	800a644 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe fc43 	bl	8008ea6 <get_fat>
 800a620:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a624:	2b01      	cmp	r3, #1
 800a626:	d802      	bhi.n	800a62e <f_open+0x2de>
 800a628:	2302      	movs	r3, #2
 800a62a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a62e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a634:	d102      	bne.n	800a63c <f_open+0x2ec>
 800a636:	2301      	movs	r3, #1
 800a638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a63c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	657b      	str	r3, [r7, #84]	; 0x54
 800a644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d103      	bne.n	800a654 <f_open+0x304>
 800a64c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a64e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a650:	429a      	cmp	r2, r3
 800a652:	d8e0      	bhi.n	800a616 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a658:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a65a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d127      	bne.n	800a6b2 <f_open+0x362>
 800a662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d022      	beq.n	800a6b2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe fbf9 	bl	8008e68 <clust2sect>
 800a676:	6478      	str	r0, [r7, #68]	; 0x44
 800a678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d103      	bne.n	800a686 <f_open+0x336>
						res = FR_INT_ERR;
 800a67e:	2302      	movs	r3, #2
 800a680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a684:	e015      	b.n	800a6b2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a688:	0a5a      	lsrs	r2, r3, #9
 800a68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a68c:	441a      	add	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	7858      	ldrb	r0, [r3, #1]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a1a      	ldr	r2, [r3, #32]
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	f7fe f837 	bl	8008714 <disk_read>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <f_open+0x362>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a6b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <f_open+0x370>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a6c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3760      	adds	r7, #96	; 0x60
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08c      	sub	sp, #48	; 0x30
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f107 0210 	add.w	r2, r7, #16
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff fdb3 	bl	800a258 <validate>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a6f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d107      	bne.n	800a710 <f_write+0x44>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	7d5b      	ldrb	r3, [r3, #21]
 800a704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <f_write+0x4a>
 800a710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a714:	e14b      	b.n	800a9ae <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	7d1b      	ldrb	r3, [r3, #20]
 800a71a:	f003 0302 	and.w	r3, r3, #2
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <f_write+0x5a>
 800a722:	2307      	movs	r3, #7
 800a724:	e143      	b.n	800a9ae <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	699a      	ldr	r2, [r3, #24]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	441a      	add	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	429a      	cmp	r2, r3
 800a734:	f080 812d 	bcs.w	800a992 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	43db      	mvns	r3, r3
 800a73e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a740:	e127      	b.n	800a992 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f040 80e3 	bne.w	800a916 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	0a5b      	lsrs	r3, r3, #9
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	8952      	ldrh	r2, [r2, #10]
 800a75a:	3a01      	subs	r2, #1
 800a75c:	4013      	ands	r3, r2
 800a75e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d143      	bne.n	800a7ee <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10c      	bne.n	800a788 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	2b00      	cmp	r3, #0
 800a778:	d11a      	bne.n	800a7b0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2100      	movs	r1, #0
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe fd8a 	bl	8009298 <create_chain>
 800a784:	62b8      	str	r0, [r7, #40]	; 0x28
 800a786:	e013      	b.n	800a7b0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d007      	beq.n	800a7a0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	699b      	ldr	r3, [r3, #24]
 800a794:	4619      	mov	r1, r3
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f7fe fe16 	bl	80093c8 <clmt_clust>
 800a79c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a79e:	e007      	b.n	800a7b0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f7fe fd75 	bl	8009298 <create_chain>
 800a7ae:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 80f2 	beq.w	800a99c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d104      	bne.n	800a7c8 <f_write+0xfc>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	755a      	strb	r2, [r3, #21]
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	e0f2      	b.n	800a9ae <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ce:	d104      	bne.n	800a7da <f_write+0x10e>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	755a      	strb	r2, [r3, #21]
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e0e9      	b.n	800a9ae <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7de:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <f_write+0x122>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ec:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	7d1b      	ldrb	r3, [r3, #20]
 800a7f2:	b25b      	sxtb	r3, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	da18      	bge.n	800a82a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	7858      	ldrb	r0, [r3, #1]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6a1a      	ldr	r2, [r3, #32]
 800a806:	2301      	movs	r3, #1
 800a808:	f7fd ffa4 	bl	8008754 <disk_write>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d004      	beq.n	800a81c <f_write+0x150>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2201      	movs	r2, #1
 800a816:	755a      	strb	r2, [r3, #21]
 800a818:	2301      	movs	r3, #1
 800a81a:	e0c8      	b.n	800a9ae <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	7d1b      	ldrb	r3, [r3, #20]
 800a820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a824:	b2da      	uxtb	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	4619      	mov	r1, r3
 800a832:	4610      	mov	r0, r2
 800a834:	f7fe fb18 	bl	8008e68 <clust2sect>
 800a838:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d104      	bne.n	800a84a <f_write+0x17e>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2202      	movs	r2, #2
 800a844:	755a      	strb	r2, [r3, #21]
 800a846:	2302      	movs	r3, #2
 800a848:	e0b1      	b.n	800a9ae <f_write+0x2e2>
			sect += csect;
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	4413      	add	r3, r2
 800a850:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	0a5b      	lsrs	r3, r3, #9
 800a856:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d03c      	beq.n	800a8d8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	4413      	add	r3, r2
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	8952      	ldrh	r2, [r2, #10]
 800a868:	4293      	cmp	r3, r2
 800a86a:	d905      	bls.n	800a878 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	895b      	ldrh	r3, [r3, #10]
 800a870:	461a      	mov	r2, r3
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	7858      	ldrb	r0, [r3, #1]
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	69f9      	ldr	r1, [r7, #28]
 800a882:	f7fd ff67 	bl	8008754 <disk_write>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d004      	beq.n	800a896 <f_write+0x1ca>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2201      	movs	r2, #1
 800a890:	755a      	strb	r2, [r3, #21]
 800a892:	2301      	movs	r3, #1
 800a894:	e08b      	b.n	800a9ae <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a1a      	ldr	r2, [r3, #32]
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	6a3a      	ldr	r2, [r7, #32]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d915      	bls.n	800a8d0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6a1a      	ldr	r2, [r3, #32]
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	025b      	lsls	r3, r3, #9
 800a8b4:	69fa      	ldr	r2, [r7, #28]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8bc:	4619      	mov	r1, r3
 800a8be:	f7fe f809 	bl	80088d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	7d1b      	ldrb	r3, [r3, #20]
 800a8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	025b      	lsls	r3, r3, #9
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a8d6:	e03f      	b.n	800a958 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d016      	beq.n	800a910 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	699a      	ldr	r2, [r3, #24]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d210      	bcs.n	800a910 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	7858      	ldrb	r0, [r3, #1]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	f7fd ff0a 	bl	8008714 <disk_read>
 800a900:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a902:	2b00      	cmp	r3, #0
 800a904:	d004      	beq.n	800a910 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	755a      	strb	r2, [r3, #21]
 800a90c:	2301      	movs	r3, #1
 800a90e:	e04e      	b.n	800a9ae <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a91e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a922:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d901      	bls.n	800a930 <f_write+0x264>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	699b      	ldr	r3, [r3, #24]
 800a93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93e:	4413      	add	r3, r2
 800a940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a942:	69f9      	ldr	r1, [r7, #28]
 800a944:	4618      	mov	r0, r3
 800a946:	f7fd ffc5 	bl	80088d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	7d1b      	ldrb	r3, [r3, #20]
 800a94e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a952:	b2da      	uxtb	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a958:	69fa      	ldr	r2, [r7, #28]
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	4413      	add	r3, r2
 800a95e:	61fb      	str	r3, [r7, #28]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	699a      	ldr	r2, [r3, #24]
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	441a      	add	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	619a      	str	r2, [r3, #24]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	429a      	cmp	r2, r3
 800a976:	bf38      	it	cc
 800a978:	461a      	movcc	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	60da      	str	r2, [r3, #12]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	441a      	add	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	f47f aed4 	bne.w	800a742 <f_write+0x76>
 800a99a:	e000      	b.n	800a99e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a99c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	7d1b      	ldrb	r3, [r3, #20]
 800a9a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3730      	adds	r7, #48	; 0x30
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b086      	sub	sp, #24
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f107 0208 	add.w	r2, r7, #8
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff fc46 	bl	800a258 <validate>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a9d0:	7dfb      	ldrb	r3, [r7, #23]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d168      	bne.n	800aaa8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	7d1b      	ldrb	r3, [r3, #20]
 800a9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d062      	beq.n	800aaa8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	7d1b      	ldrb	r3, [r3, #20]
 800a9e6:	b25b      	sxtb	r3, r3
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	da15      	bge.n	800aa18 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	7858      	ldrb	r0, [r3, #1]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1a      	ldr	r2, [r3, #32]
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	f7fd feaa 	bl	8008754 <disk_write>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <f_sync+0x54>
 800aa06:	2301      	movs	r3, #1
 800aa08:	e04f      	b.n	800aaaa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	7d1b      	ldrb	r3, [r3, #20]
 800aa0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800aa18:	f7fd fc74 	bl	8008304 <get_fattime>
 800aa1c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	4619      	mov	r1, r3
 800aa26:	4610      	mov	r0, r2
 800aa28:	f7fe f982 	bl	8008d30 <move_window>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d138      	bne.n	800aaa8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	330b      	adds	r3, #11
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	330b      	adds	r3, #11
 800aa46:	f042 0220 	orr.w	r2, r2, #32
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6818      	ldr	r0, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	461a      	mov	r2, r3
 800aa58:	68f9      	ldr	r1, [r7, #12]
 800aa5a:	f7fe fe8f 	bl	800977c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f103 021c 	add.w	r2, r3, #28
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4610      	mov	r0, r2
 800aa6c:	f7fd ff06 	bl	800887c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3316      	adds	r3, #22
 800aa74:	6939      	ldr	r1, [r7, #16]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fd ff00 	bl	800887c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3312      	adds	r3, #18
 800aa80:	2100      	movs	r1, #0
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fd fedf 	bl	8008846 <st_word>
					fs->wflag = 1;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe f97b 	bl	8008d8c <sync_fs>
 800aa96:	4603      	mov	r3, r0
 800aa98:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	7d1b      	ldrb	r3, [r3, #20]
 800aa9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b084      	sub	sp, #16
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7ff ff7b 	bl	800a9b6 <f_sync>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d118      	bne.n	800aafc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f107 0208 	add.w	r2, r7, #8
 800aad0:	4611      	mov	r1, r2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff fbc0 	bl	800a258 <validate>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10c      	bne.n	800aafc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe f87e 	bl	8008be8 <dec_lock>
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d102      	bne.n	800aafc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b090      	sub	sp, #64	; 0x40
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f107 0208 	add.w	r2, r7, #8
 800ab16:	4611      	mov	r1, r2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff fb9d 	bl	800a258 <validate>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ab24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d103      	bne.n	800ab34 <f_lseek+0x2e>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	7d5b      	ldrb	r3, [r3, #21]
 800ab30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ab34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <f_lseek+0x3c>
 800ab3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab40:	e1e6      	b.n	800af10 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 80d1 	beq.w	800acee <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab52:	d15a      	bne.n	800ac0a <f_lseek+0x104>
			tbl = fp->cltbl;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	1d1a      	adds	r2, r3, #4
 800ab5e:	627a      	str	r2, [r7, #36]	; 0x24
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	617b      	str	r3, [r7, #20]
 800ab64:	2302      	movs	r3, #2
 800ab66:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d03a      	beq.n	800abea <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	613b      	str	r3, [r7, #16]
 800ab78:	2300      	movs	r3, #0
 800ab7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	3302      	adds	r3, #2
 800ab80:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	60fb      	str	r3, [r7, #12]
 800ab86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab88:	3301      	adds	r3, #1
 800ab8a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fe f988 	bl	8008ea6 <get_fat>
 800ab96:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d804      	bhi.n	800aba8 <f_lseek+0xa2>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2202      	movs	r2, #2
 800aba2:	755a      	strb	r2, [r3, #21]
 800aba4:	2302      	movs	r3, #2
 800aba6:	e1b3      	b.n	800af10 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abae:	d104      	bne.n	800abba <f_lseek+0xb4>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	755a      	strb	r2, [r3, #21]
 800abb6:	2301      	movs	r3, #1
 800abb8:	e1aa      	b.n	800af10 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3301      	adds	r3, #1
 800abbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d0de      	beq.n	800ab82 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800abc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d809      	bhi.n	800abe0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abce:	1d1a      	adds	r2, r3, #4
 800abd0:	627a      	str	r2, [r7, #36]	; 0x24
 800abd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	1d1a      	adds	r2, r3, #4
 800abda:	627a      	str	r2, [r7, #36]	; 0x24
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d3c4      	bcc.n	800ab74 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abf0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800abf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d803      	bhi.n	800ac02 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	2200      	movs	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]
 800ac00:	e184      	b.n	800af0c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ac02:	2311      	movs	r3, #17
 800ac04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ac08:	e180      	b.n	800af0c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	683a      	ldr	r2, [r7, #0]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d902      	bls.n	800ac1a <f_lseek+0x114>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 8172 	beq.w	800af0c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7fe fbca 	bl	80093c8 <clmt_clust>
 800ac34:	4602      	mov	r2, r0
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	69db      	ldr	r3, [r3, #28]
 800ac40:	4619      	mov	r1, r3
 800ac42:	4610      	mov	r0, r2
 800ac44:	f7fe f910 	bl	8008e68 <clust2sect>
 800ac48:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d104      	bne.n	800ac5a <f_lseek+0x154>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2202      	movs	r2, #2
 800ac54:	755a      	strb	r2, [r3, #21]
 800ac56:	2302      	movs	r3, #2
 800ac58:	e15a      	b.n	800af10 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	0a5b      	lsrs	r3, r3, #9
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	8952      	ldrh	r2, [r2, #10]
 800ac64:	3a01      	subs	r2, #1
 800ac66:	4013      	ands	r3, r2
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f000 8148 	beq.w	800af0c <f_lseek+0x406>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a1b      	ldr	r3, [r3, #32]
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	f000 8142 	beq.w	800af0c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	7d1b      	ldrb	r3, [r3, #20]
 800ac8c:	b25b      	sxtb	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	da18      	bge.n	800acc4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	7858      	ldrb	r0, [r3, #1]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a1a      	ldr	r2, [r3, #32]
 800aca0:	2301      	movs	r3, #1
 800aca2:	f7fd fd57 	bl	8008754 <disk_write>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d004      	beq.n	800acb6 <f_lseek+0x1b0>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	755a      	strb	r2, [r3, #21]
 800acb2:	2301      	movs	r3, #1
 800acb4:	e12c      	b.n	800af10 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7d1b      	ldrb	r3, [r3, #20]
 800acba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	7858      	ldrb	r0, [r3, #1]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acce:	2301      	movs	r3, #1
 800acd0:	69ba      	ldr	r2, [r7, #24]
 800acd2:	f7fd fd1f 	bl	8008714 <disk_read>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d004      	beq.n	800ace6 <f_lseek+0x1e0>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	755a      	strb	r2, [r3, #21]
 800ace2:	2301      	movs	r3, #1
 800ace4:	e114      	b.n	800af10 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	621a      	str	r2, [r3, #32]
 800acec:	e10e      	b.n	800af0c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d908      	bls.n	800ad0a <f_lseek+0x204>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	7d1b      	ldrb	r3, [r3, #20]
 800acfc:	f003 0302 	and.w	r3, r3, #2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d102      	bne.n	800ad0a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	637b      	str	r3, [r7, #52]	; 0x34
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad18:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 80a7 	beq.w	800ae70 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	895b      	ldrh	r3, [r3, #10]
 800ad26:	025b      	lsls	r3, r3, #9
 800ad28:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d01b      	beq.n	800ad68 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	1e5a      	subs	r2, r3, #1
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	fbb2 f2f3 	udiv	r2, r2, r3
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	1e59      	subs	r1, r3, #1
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d30f      	bcc.n	800ad68 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ad48:	6a3b      	ldr	r3, [r7, #32]
 800ad4a:	1e5a      	subs	r2, r3, #1
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	425b      	negs	r3, r3
 800ad50:	401a      	ands	r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad66:	e022      	b.n	800adae <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d119      	bne.n	800ada8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2100      	movs	r1, #0
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe fa8d 	bl	8009298 <create_chain>
 800ad7e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d104      	bne.n	800ad90 <f_lseek+0x28a>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2202      	movs	r2, #2
 800ad8a:	755a      	strb	r2, [r3, #21]
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	e0bf      	b.n	800af10 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad96:	d104      	bne.n	800ada2 <f_lseek+0x29c>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	755a      	strb	r2, [r3, #21]
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e0b6      	b.n	800af10 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ada6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adac:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d05d      	beq.n	800ae70 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800adb4:	e03a      	b.n	800ae2c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	603b      	str	r3, [r7, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	699a      	ldr	r2, [r3, #24]
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	441a      	add	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	7d1b      	ldrb	r3, [r3, #20]
 800adce:	f003 0302 	and.w	r3, r3, #2
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00b      	beq.n	800adee <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe fa5c 	bl	8009298 <create_chain>
 800ade0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ade2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d108      	bne.n	800adfa <f_lseek+0x2f4>
							ofs = 0; break;
 800ade8:	2300      	movs	r3, #0
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	e022      	b.n	800ae34 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe f857 	bl	8008ea6 <get_fat>
 800adf8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800adfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae00:	d104      	bne.n	800ae0c <f_lseek+0x306>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	755a      	strb	r2, [r3, #21]
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e081      	b.n	800af10 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d904      	bls.n	800ae1c <f_lseek+0x316>
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d304      	bcc.n	800ae26 <f_lseek+0x320>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2202      	movs	r2, #2
 800ae20:	755a      	strb	r2, [r3, #21]
 800ae22:	2302      	movs	r3, #2
 800ae24:	e074      	b.n	800af10 <f_lseek+0x40a>
					fp->clust = clst;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae2a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d8c0      	bhi.n	800adb6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	699a      	ldr	r2, [r3, #24]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	441a      	add	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d012      	beq.n	800ae70 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe f80a 	bl	8008e68 <clust2sect>
 800ae54:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ae56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d104      	bne.n	800ae66 <f_lseek+0x360>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	755a      	strb	r2, [r3, #21]
 800ae62:	2302      	movs	r3, #2
 800ae64:	e054      	b.n	800af10 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	0a5b      	lsrs	r3, r3, #9
 800ae6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae6c:	4413      	add	r3, r2
 800ae6e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	699a      	ldr	r2, [r3, #24]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d90a      	bls.n	800ae92 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	699a      	ldr	r2, [r3, #24]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	7d1b      	ldrb	r3, [r3, #20]
 800ae88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d036      	beq.n	800af0c <f_lseek+0x406>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d031      	beq.n	800af0c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	7d1b      	ldrb	r3, [r3, #20]
 800aeac:	b25b      	sxtb	r3, r3
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	da18      	bge.n	800aee4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	7858      	ldrb	r0, [r3, #1]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a1a      	ldr	r2, [r3, #32]
 800aec0:	2301      	movs	r3, #1
 800aec2:	f7fd fc47 	bl	8008754 <disk_write>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d004      	beq.n	800aed6 <f_lseek+0x3d0>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	755a      	strb	r2, [r3, #21]
 800aed2:	2301      	movs	r3, #1
 800aed4:	e01c      	b.n	800af10 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	7d1b      	ldrb	r3, [r3, #20]
 800aeda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	7858      	ldrb	r0, [r3, #1]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aeee:	2301      	movs	r3, #1
 800aef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aef2:	f7fd fc0f 	bl	8008714 <disk_read>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d004      	beq.n	800af06 <f_lseek+0x400>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	755a      	strb	r2, [r3, #21]
 800af02:	2301      	movs	r3, #1
 800af04:	e004      	b.n	800af10 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af0a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800af0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800af10:	4618      	mov	r0, r3
 800af12:	3740      	adds	r7, #64	; 0x40
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <f_opendir+0x14>
 800af28:	2309      	movs	r3, #9
 800af2a:	e064      	b.n	800aff6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800af30:	f107 010c 	add.w	r1, r7, #12
 800af34:	463b      	mov	r3, r7
 800af36:	2200      	movs	r2, #0
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe ff41 	bl	8009dc0 <find_volume>
 800af3e:	4603      	mov	r3, r0
 800af40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af42:	7dfb      	ldrb	r3, [r7, #23]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d14f      	bne.n	800afe8 <f_opendir+0xd0>
		obj->fs = fs;
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	4619      	mov	r1, r3
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7fe fe28 	bl	8009ba8 <follow_path>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d13d      	bne.n	800afde <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af68:	b25b      	sxtb	r3, r3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	db12      	blt.n	800af94 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	799b      	ldrb	r3, [r3, #6]
 800af72:	f003 0310 	and.w	r3, r3, #16
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00a      	beq.n	800af90 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f7fe fbdb 	bl	800973e <ld_clust>
 800af88:	4602      	mov	r2, r0
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	609a      	str	r2, [r3, #8]
 800af8e:	e001      	b.n	800af94 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800af90:	2305      	movs	r3, #5
 800af92:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800af94:	7dfb      	ldrb	r3, [r7, #23]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d121      	bne.n	800afde <f_opendir+0xc6>
				obj->id = fs->id;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	88da      	ldrh	r2, [r3, #6]
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800afa2:	2100      	movs	r1, #0
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7fe fa43 	bl	8009430 <dir_sdi>
 800afaa:	4603      	mov	r3, r0
 800afac:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800afae:	7dfb      	ldrb	r3, [r7, #23]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d114      	bne.n	800afde <f_opendir+0xc6>
					if (obj->sclust) {
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00d      	beq.n	800afd8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800afbc:	2100      	movs	r1, #0
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7fd fd84 	bl	8008acc <inc_lock>
 800afc4:	4602      	mov	r2, r0
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d105      	bne.n	800afde <f_opendir+0xc6>
 800afd2:	2312      	movs	r3, #18
 800afd4:	75fb      	strb	r3, [r7, #23]
 800afd6:	e002      	b.n	800afde <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	2200      	movs	r2, #0
 800afdc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800afde:	7dfb      	ldrb	r3, [r7, #23]
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	d101      	bne.n	800afe8 <f_opendir+0xd0>
 800afe4:	2305      	movs	r3, #5
 800afe6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <f_opendir+0xdc>
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	2200      	movs	r2, #0
 800aff2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b084      	sub	sp, #16
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f107 0208 	add.w	r2, r7, #8
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f7ff f922 	bl	800a258 <validate>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d110      	bne.n	800b040 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d006      	beq.n	800b034 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fd fddc 	bl	8008be8 <dec_lock>
 800b030:	4603      	mov	r3, r0
 800b032:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d102      	bne.n	800b040 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b040:	7bfb      	ldrb	r3, [r7, #15]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b084      	sub	sp, #16
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f107 0208 	add.w	r2, r7, #8
 800b05a:	4611      	mov	r1, r2
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7ff f8fb 	bl	800a258 <validate>
 800b062:	4603      	mov	r3, r0
 800b064:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d126      	bne.n	800b0ba <f_readdir+0x70>
		if (!fno) {
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b072:	2100      	movs	r1, #0
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7fe f9db 	bl	8009430 <dir_sdi>
 800b07a:	4603      	mov	r3, r0
 800b07c:	73fb      	strb	r3, [r7, #15]
 800b07e:	e01c      	b.n	800b0ba <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b080:	2100      	movs	r1, #0
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7fe fb9a 	bl	80097bc <dir_read>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d101      	bne.n	800b096 <f_readdir+0x4c>
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10e      	bne.n	800b0ba <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7fe fc8e 	bl	80099c0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7fe fa3d 	bl	8009526 <dir_next>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	2b04      	cmp	r3, #4
 800b0b4:	d101      	bne.n	800b0ba <f_readdir+0x70>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b09e      	sub	sp, #120	; 0x78
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b0d0:	f107 010c 	add.w	r1, r7, #12
 800b0d4:	1d3b      	adds	r3, r7, #4
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fe71 	bl	8009dc0 <find_volume>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b0e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f040 808e 	bne.w	800b20e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe fd54 	bl	8009ba8 <follow_path>
 800b100:	4603      	mov	r3, r0
 800b102:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b106:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d108      	bne.n	800b120 <f_unlink+0x5c>
 800b10e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b112:	2102      	movs	r1, #2
 800b114:	4618      	mov	r0, r3
 800b116:	f7fd fc5b 	bl	80089d0 <chk_lock>
 800b11a:	4603      	mov	r3, r0
 800b11c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b120:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b124:	2b00      	cmp	r3, #0
 800b126:	d172      	bne.n	800b20e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b128:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b12c:	b25b      	sxtb	r3, r3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	da03      	bge.n	800b13a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b132:	2306      	movs	r3, #6
 800b134:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b138:	e008      	b.n	800b14c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b13a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	2b00      	cmp	r3, #0
 800b144:	d002      	beq.n	800b14c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b146:	2307      	movs	r3, #7
 800b148:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b14c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b150:	2b00      	cmp	r3, #0
 800b152:	d134      	bne.n	800b1be <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b158:	4611      	mov	r1, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe faef 	bl	800973e <ld_clust>
 800b160:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b162:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b166:	f003 0310 	and.w	r3, r3, #16
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d027      	beq.n	800b1be <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b174:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b176:	f107 0310 	add.w	r3, r7, #16
 800b17a:	2100      	movs	r1, #0
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fe f957 	bl	8009430 <dir_sdi>
 800b182:	4603      	mov	r3, r0
 800b184:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b188:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d116      	bne.n	800b1be <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b190:	f107 0310 	add.w	r3, r7, #16
 800b194:	2100      	movs	r1, #0
 800b196:	4618      	mov	r0, r3
 800b198:	f7fe fb10 	bl	80097bc <dir_read>
 800b19c:	4603      	mov	r3, r0
 800b19e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b1a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <f_unlink+0xec>
 800b1aa:	2307      	movs	r3, #7
 800b1ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b1b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b1b4:	2b04      	cmp	r3, #4
 800b1b6:	d102      	bne.n	800b1be <f_unlink+0xfa>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b1be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d123      	bne.n	800b20e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b1c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe fbda 	bl	8009984 <dir_remove>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b1d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10c      	bne.n	800b1f8 <f_unlink+0x134>
 800b1de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d009      	beq.n	800b1f8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b1e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fd ffee 	bl	80091ce <remove_chain>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b1f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d106      	bne.n	800b20e <f_unlink+0x14a>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	4618      	mov	r0, r3
 800b204:	f7fd fdc2 	bl	8008d8c <sync_fs>
 800b208:	4603      	mov	r3, r0
 800b20a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b20e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b212:	4618      	mov	r0, r3
 800b214:	3778      	adds	r7, #120	; 0x78
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b087      	sub	sp, #28
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	4613      	mov	r3, r2
 800b228:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b22a:	2301      	movs	r3, #1
 800b22c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b232:	4b1f      	ldr	r3, [pc, #124]	; (800b2b0 <FATFS_LinkDriverEx+0x94>)
 800b234:	7a5b      	ldrb	r3, [r3, #9]
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d131      	bne.n	800b2a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b23c:	4b1c      	ldr	r3, [pc, #112]	; (800b2b0 <FATFS_LinkDriverEx+0x94>)
 800b23e:	7a5b      	ldrb	r3, [r3, #9]
 800b240:	b2db      	uxtb	r3, r3
 800b242:	461a      	mov	r2, r3
 800b244:	4b1a      	ldr	r3, [pc, #104]	; (800b2b0 <FATFS_LinkDriverEx+0x94>)
 800b246:	2100      	movs	r1, #0
 800b248:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b24a:	4b19      	ldr	r3, [pc, #100]	; (800b2b0 <FATFS_LinkDriverEx+0x94>)
 800b24c:	7a5b      	ldrb	r3, [r3, #9]
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	4a17      	ldr	r2, [pc, #92]	; (800b2b0 <FATFS_LinkDriverEx+0x94>)
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b25a:	4b15      	ldr	r3, [pc, #84]	; (800b2b0 <FATFS_LinkDriverEx+0x94>)
 800b25c:	7a5b      	ldrb	r3, [r3, #9]
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	461a      	mov	r2, r3
 800b262:	4b13      	ldr	r3, [pc, #76]	; (800b2b0 <FATFS_LinkDriverEx+0x94>)
 800b264:	4413      	add	r3, r2
 800b266:	79fa      	ldrb	r2, [r7, #7]
 800b268:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b26a:	4b11      	ldr	r3, [pc, #68]	; (800b2b0 <FATFS_LinkDriverEx+0x94>)
 800b26c:	7a5b      	ldrb	r3, [r3, #9]
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	b2d1      	uxtb	r1, r2
 800b274:	4a0e      	ldr	r2, [pc, #56]	; (800b2b0 <FATFS_LinkDriverEx+0x94>)
 800b276:	7251      	strb	r1, [r2, #9]
 800b278:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b27a:	7dbb      	ldrb	r3, [r7, #22]
 800b27c:	3330      	adds	r3, #48	; 0x30
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	3301      	adds	r3, #1
 800b288:	223a      	movs	r2, #58	; 0x3a
 800b28a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	3302      	adds	r3, #2
 800b290:	222f      	movs	r2, #47	; 0x2f
 800b292:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	3303      	adds	r3, #3
 800b298:	2200      	movs	r2, #0
 800b29a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	20000db0 	.word	0x20000db0

0800b2b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b2be:	2200      	movs	r2, #0
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7ff ffaa 	bl	800b21c <FATFS_LinkDriverEx>
 800b2c8:	4603      	mov	r3, r0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
	...

0800b2d4 <__errno>:
 800b2d4:	4b01      	ldr	r3, [pc, #4]	; (800b2dc <__errno+0x8>)
 800b2d6:	6818      	ldr	r0, [r3, #0]
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	20000010 	.word	0x20000010

0800b2e0 <exit>:
 800b2e0:	b508      	push	{r3, lr}
 800b2e2:	4b07      	ldr	r3, [pc, #28]	; (800b300 <exit+0x20>)
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	b113      	cbz	r3, 800b2ee <exit+0xe>
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	f3af 8000 	nop.w
 800b2ee:	4b05      	ldr	r3, [pc, #20]	; (800b304 <exit+0x24>)
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b2f4:	b103      	cbz	r3, 800b2f8 <exit+0x18>
 800b2f6:	4798      	blx	r3
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f7f6 fac3 	bl	8001884 <_exit>
 800b2fe:	bf00      	nop
 800b300:	00000000 	.word	0x00000000
 800b304:	0800bd90 	.word	0x0800bd90

0800b308 <__libc_init_array>:
 800b308:	b570      	push	{r4, r5, r6, lr}
 800b30a:	4d0d      	ldr	r5, [pc, #52]	; (800b340 <__libc_init_array+0x38>)
 800b30c:	4c0d      	ldr	r4, [pc, #52]	; (800b344 <__libc_init_array+0x3c>)
 800b30e:	1b64      	subs	r4, r4, r5
 800b310:	10a4      	asrs	r4, r4, #2
 800b312:	2600      	movs	r6, #0
 800b314:	42a6      	cmp	r6, r4
 800b316:	d109      	bne.n	800b32c <__libc_init_array+0x24>
 800b318:	4d0b      	ldr	r5, [pc, #44]	; (800b348 <__libc_init_array+0x40>)
 800b31a:	4c0c      	ldr	r4, [pc, #48]	; (800b34c <__libc_init_array+0x44>)
 800b31c:	f000 fc9e 	bl	800bc5c <_init>
 800b320:	1b64      	subs	r4, r4, r5
 800b322:	10a4      	asrs	r4, r4, #2
 800b324:	2600      	movs	r6, #0
 800b326:	42a6      	cmp	r6, r4
 800b328:	d105      	bne.n	800b336 <__libc_init_array+0x2e>
 800b32a:	bd70      	pop	{r4, r5, r6, pc}
 800b32c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b330:	4798      	blx	r3
 800b332:	3601      	adds	r6, #1
 800b334:	e7ee      	b.n	800b314 <__libc_init_array+0xc>
 800b336:	f855 3b04 	ldr.w	r3, [r5], #4
 800b33a:	4798      	blx	r3
 800b33c:	3601      	adds	r6, #1
 800b33e:	e7f2      	b.n	800b326 <__libc_init_array+0x1e>
 800b340:	0800bdd0 	.word	0x0800bdd0
 800b344:	0800bdd0 	.word	0x0800bdd0
 800b348:	0800bdd0 	.word	0x0800bdd0
 800b34c:	0800bdd4 	.word	0x0800bdd4

0800b350 <malloc>:
 800b350:	4b02      	ldr	r3, [pc, #8]	; (800b35c <malloc+0xc>)
 800b352:	4601      	mov	r1, r0
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	f000 b87f 	b.w	800b458 <_malloc_r>
 800b35a:	bf00      	nop
 800b35c:	20000010 	.word	0x20000010

0800b360 <free>:
 800b360:	4b02      	ldr	r3, [pc, #8]	; (800b36c <free+0xc>)
 800b362:	4601      	mov	r1, r0
 800b364:	6818      	ldr	r0, [r3, #0]
 800b366:	f000 b80b 	b.w	800b380 <_free_r>
 800b36a:	bf00      	nop
 800b36c:	20000010 	.word	0x20000010

0800b370 <memset>:
 800b370:	4402      	add	r2, r0
 800b372:	4603      	mov	r3, r0
 800b374:	4293      	cmp	r3, r2
 800b376:	d100      	bne.n	800b37a <memset+0xa>
 800b378:	4770      	bx	lr
 800b37a:	f803 1b01 	strb.w	r1, [r3], #1
 800b37e:	e7f9      	b.n	800b374 <memset+0x4>

0800b380 <_free_r>:
 800b380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b382:	2900      	cmp	r1, #0
 800b384:	d044      	beq.n	800b410 <_free_r+0x90>
 800b386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b38a:	9001      	str	r0, [sp, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f1a1 0404 	sub.w	r4, r1, #4
 800b392:	bfb8      	it	lt
 800b394:	18e4      	addlt	r4, r4, r3
 800b396:	f000 f903 	bl	800b5a0 <__malloc_lock>
 800b39a:	4a1e      	ldr	r2, [pc, #120]	; (800b414 <_free_r+0x94>)
 800b39c:	9801      	ldr	r0, [sp, #4]
 800b39e:	6813      	ldr	r3, [r2, #0]
 800b3a0:	b933      	cbnz	r3, 800b3b0 <_free_r+0x30>
 800b3a2:	6063      	str	r3, [r4, #4]
 800b3a4:	6014      	str	r4, [r2, #0]
 800b3a6:	b003      	add	sp, #12
 800b3a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3ac:	f000 b8fe 	b.w	800b5ac <__malloc_unlock>
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	d908      	bls.n	800b3c6 <_free_r+0x46>
 800b3b4:	6825      	ldr	r5, [r4, #0]
 800b3b6:	1961      	adds	r1, r4, r5
 800b3b8:	428b      	cmp	r3, r1
 800b3ba:	bf01      	itttt	eq
 800b3bc:	6819      	ldreq	r1, [r3, #0]
 800b3be:	685b      	ldreq	r3, [r3, #4]
 800b3c0:	1949      	addeq	r1, r1, r5
 800b3c2:	6021      	streq	r1, [r4, #0]
 800b3c4:	e7ed      	b.n	800b3a2 <_free_r+0x22>
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	b10b      	cbz	r3, 800b3d0 <_free_r+0x50>
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	d9fa      	bls.n	800b3c6 <_free_r+0x46>
 800b3d0:	6811      	ldr	r1, [r2, #0]
 800b3d2:	1855      	adds	r5, r2, r1
 800b3d4:	42a5      	cmp	r5, r4
 800b3d6:	d10b      	bne.n	800b3f0 <_free_r+0x70>
 800b3d8:	6824      	ldr	r4, [r4, #0]
 800b3da:	4421      	add	r1, r4
 800b3dc:	1854      	adds	r4, r2, r1
 800b3de:	42a3      	cmp	r3, r4
 800b3e0:	6011      	str	r1, [r2, #0]
 800b3e2:	d1e0      	bne.n	800b3a6 <_free_r+0x26>
 800b3e4:	681c      	ldr	r4, [r3, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	6053      	str	r3, [r2, #4]
 800b3ea:	4421      	add	r1, r4
 800b3ec:	6011      	str	r1, [r2, #0]
 800b3ee:	e7da      	b.n	800b3a6 <_free_r+0x26>
 800b3f0:	d902      	bls.n	800b3f8 <_free_r+0x78>
 800b3f2:	230c      	movs	r3, #12
 800b3f4:	6003      	str	r3, [r0, #0]
 800b3f6:	e7d6      	b.n	800b3a6 <_free_r+0x26>
 800b3f8:	6825      	ldr	r5, [r4, #0]
 800b3fa:	1961      	adds	r1, r4, r5
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	bf04      	itt	eq
 800b400:	6819      	ldreq	r1, [r3, #0]
 800b402:	685b      	ldreq	r3, [r3, #4]
 800b404:	6063      	str	r3, [r4, #4]
 800b406:	bf04      	itt	eq
 800b408:	1949      	addeq	r1, r1, r5
 800b40a:	6021      	streq	r1, [r4, #0]
 800b40c:	6054      	str	r4, [r2, #4]
 800b40e:	e7ca      	b.n	800b3a6 <_free_r+0x26>
 800b410:	b003      	add	sp, #12
 800b412:	bd30      	pop	{r4, r5, pc}
 800b414:	20000dbc 	.word	0x20000dbc

0800b418 <sbrk_aligned>:
 800b418:	b570      	push	{r4, r5, r6, lr}
 800b41a:	4e0e      	ldr	r6, [pc, #56]	; (800b454 <sbrk_aligned+0x3c>)
 800b41c:	460c      	mov	r4, r1
 800b41e:	6831      	ldr	r1, [r6, #0]
 800b420:	4605      	mov	r5, r0
 800b422:	b911      	cbnz	r1, 800b42a <sbrk_aligned+0x12>
 800b424:	f000 f88c 	bl	800b540 <_sbrk_r>
 800b428:	6030      	str	r0, [r6, #0]
 800b42a:	4621      	mov	r1, r4
 800b42c:	4628      	mov	r0, r5
 800b42e:	f000 f887 	bl	800b540 <_sbrk_r>
 800b432:	1c43      	adds	r3, r0, #1
 800b434:	d00a      	beq.n	800b44c <sbrk_aligned+0x34>
 800b436:	1cc4      	adds	r4, r0, #3
 800b438:	f024 0403 	bic.w	r4, r4, #3
 800b43c:	42a0      	cmp	r0, r4
 800b43e:	d007      	beq.n	800b450 <sbrk_aligned+0x38>
 800b440:	1a21      	subs	r1, r4, r0
 800b442:	4628      	mov	r0, r5
 800b444:	f000 f87c 	bl	800b540 <_sbrk_r>
 800b448:	3001      	adds	r0, #1
 800b44a:	d101      	bne.n	800b450 <sbrk_aligned+0x38>
 800b44c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b450:	4620      	mov	r0, r4
 800b452:	bd70      	pop	{r4, r5, r6, pc}
 800b454:	20000dc0 	.word	0x20000dc0

0800b458 <_malloc_r>:
 800b458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45c:	1ccd      	adds	r5, r1, #3
 800b45e:	f025 0503 	bic.w	r5, r5, #3
 800b462:	3508      	adds	r5, #8
 800b464:	2d0c      	cmp	r5, #12
 800b466:	bf38      	it	cc
 800b468:	250c      	movcc	r5, #12
 800b46a:	2d00      	cmp	r5, #0
 800b46c:	4607      	mov	r7, r0
 800b46e:	db01      	blt.n	800b474 <_malloc_r+0x1c>
 800b470:	42a9      	cmp	r1, r5
 800b472:	d905      	bls.n	800b480 <_malloc_r+0x28>
 800b474:	230c      	movs	r3, #12
 800b476:	603b      	str	r3, [r7, #0]
 800b478:	2600      	movs	r6, #0
 800b47a:	4630      	mov	r0, r6
 800b47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b480:	4e2e      	ldr	r6, [pc, #184]	; (800b53c <_malloc_r+0xe4>)
 800b482:	f000 f88d 	bl	800b5a0 <__malloc_lock>
 800b486:	6833      	ldr	r3, [r6, #0]
 800b488:	461c      	mov	r4, r3
 800b48a:	bb34      	cbnz	r4, 800b4da <_malloc_r+0x82>
 800b48c:	4629      	mov	r1, r5
 800b48e:	4638      	mov	r0, r7
 800b490:	f7ff ffc2 	bl	800b418 <sbrk_aligned>
 800b494:	1c43      	adds	r3, r0, #1
 800b496:	4604      	mov	r4, r0
 800b498:	d14d      	bne.n	800b536 <_malloc_r+0xde>
 800b49a:	6834      	ldr	r4, [r6, #0]
 800b49c:	4626      	mov	r6, r4
 800b49e:	2e00      	cmp	r6, #0
 800b4a0:	d140      	bne.n	800b524 <_malloc_r+0xcc>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	4631      	mov	r1, r6
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	eb04 0803 	add.w	r8, r4, r3
 800b4ac:	f000 f848 	bl	800b540 <_sbrk_r>
 800b4b0:	4580      	cmp	r8, r0
 800b4b2:	d13a      	bne.n	800b52a <_malloc_r+0xd2>
 800b4b4:	6821      	ldr	r1, [r4, #0]
 800b4b6:	3503      	adds	r5, #3
 800b4b8:	1a6d      	subs	r5, r5, r1
 800b4ba:	f025 0503 	bic.w	r5, r5, #3
 800b4be:	3508      	adds	r5, #8
 800b4c0:	2d0c      	cmp	r5, #12
 800b4c2:	bf38      	it	cc
 800b4c4:	250c      	movcc	r5, #12
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	f7ff ffa5 	bl	800b418 <sbrk_aligned>
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	d02b      	beq.n	800b52a <_malloc_r+0xd2>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	442b      	add	r3, r5
 800b4d6:	6023      	str	r3, [r4, #0]
 800b4d8:	e00e      	b.n	800b4f8 <_malloc_r+0xa0>
 800b4da:	6822      	ldr	r2, [r4, #0]
 800b4dc:	1b52      	subs	r2, r2, r5
 800b4de:	d41e      	bmi.n	800b51e <_malloc_r+0xc6>
 800b4e0:	2a0b      	cmp	r2, #11
 800b4e2:	d916      	bls.n	800b512 <_malloc_r+0xba>
 800b4e4:	1961      	adds	r1, r4, r5
 800b4e6:	42a3      	cmp	r3, r4
 800b4e8:	6025      	str	r5, [r4, #0]
 800b4ea:	bf18      	it	ne
 800b4ec:	6059      	strne	r1, [r3, #4]
 800b4ee:	6863      	ldr	r3, [r4, #4]
 800b4f0:	bf08      	it	eq
 800b4f2:	6031      	streq	r1, [r6, #0]
 800b4f4:	5162      	str	r2, [r4, r5]
 800b4f6:	604b      	str	r3, [r1, #4]
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	f104 060b 	add.w	r6, r4, #11
 800b4fe:	f000 f855 	bl	800b5ac <__malloc_unlock>
 800b502:	f026 0607 	bic.w	r6, r6, #7
 800b506:	1d23      	adds	r3, r4, #4
 800b508:	1af2      	subs	r2, r6, r3
 800b50a:	d0b6      	beq.n	800b47a <_malloc_r+0x22>
 800b50c:	1b9b      	subs	r3, r3, r6
 800b50e:	50a3      	str	r3, [r4, r2]
 800b510:	e7b3      	b.n	800b47a <_malloc_r+0x22>
 800b512:	6862      	ldr	r2, [r4, #4]
 800b514:	42a3      	cmp	r3, r4
 800b516:	bf0c      	ite	eq
 800b518:	6032      	streq	r2, [r6, #0]
 800b51a:	605a      	strne	r2, [r3, #4]
 800b51c:	e7ec      	b.n	800b4f8 <_malloc_r+0xa0>
 800b51e:	4623      	mov	r3, r4
 800b520:	6864      	ldr	r4, [r4, #4]
 800b522:	e7b2      	b.n	800b48a <_malloc_r+0x32>
 800b524:	4634      	mov	r4, r6
 800b526:	6876      	ldr	r6, [r6, #4]
 800b528:	e7b9      	b.n	800b49e <_malloc_r+0x46>
 800b52a:	230c      	movs	r3, #12
 800b52c:	603b      	str	r3, [r7, #0]
 800b52e:	4638      	mov	r0, r7
 800b530:	f000 f83c 	bl	800b5ac <__malloc_unlock>
 800b534:	e7a1      	b.n	800b47a <_malloc_r+0x22>
 800b536:	6025      	str	r5, [r4, #0]
 800b538:	e7de      	b.n	800b4f8 <_malloc_r+0xa0>
 800b53a:	bf00      	nop
 800b53c:	20000dbc 	.word	0x20000dbc

0800b540 <_sbrk_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d06      	ldr	r5, [pc, #24]	; (800b55c <_sbrk_r+0x1c>)
 800b544:	2300      	movs	r3, #0
 800b546:	4604      	mov	r4, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	602b      	str	r3, [r5, #0]
 800b54c:	f7f6 f9a4 	bl	8001898 <_sbrk>
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	d102      	bne.n	800b55a <_sbrk_r+0x1a>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	b103      	cbz	r3, 800b55a <_sbrk_r+0x1a>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	20000dc4 	.word	0x20000dc4

0800b560 <siprintf>:
 800b560:	b40e      	push	{r1, r2, r3}
 800b562:	b500      	push	{lr}
 800b564:	b09c      	sub	sp, #112	; 0x70
 800b566:	ab1d      	add	r3, sp, #116	; 0x74
 800b568:	9002      	str	r0, [sp, #8]
 800b56a:	9006      	str	r0, [sp, #24]
 800b56c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b570:	4809      	ldr	r0, [pc, #36]	; (800b598 <siprintf+0x38>)
 800b572:	9107      	str	r1, [sp, #28]
 800b574:	9104      	str	r1, [sp, #16]
 800b576:	4909      	ldr	r1, [pc, #36]	; (800b59c <siprintf+0x3c>)
 800b578:	f853 2b04 	ldr.w	r2, [r3], #4
 800b57c:	9105      	str	r1, [sp, #20]
 800b57e:	6800      	ldr	r0, [r0, #0]
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	a902      	add	r1, sp, #8
 800b584:	f000 f874 	bl	800b670 <_svfiprintf_r>
 800b588:	9b02      	ldr	r3, [sp, #8]
 800b58a:	2200      	movs	r2, #0
 800b58c:	701a      	strb	r2, [r3, #0]
 800b58e:	b01c      	add	sp, #112	; 0x70
 800b590:	f85d eb04 	ldr.w	lr, [sp], #4
 800b594:	b003      	add	sp, #12
 800b596:	4770      	bx	lr
 800b598:	20000010 	.word	0x20000010
 800b59c:	ffff0208 	.word	0xffff0208

0800b5a0 <__malloc_lock>:
 800b5a0:	4801      	ldr	r0, [pc, #4]	; (800b5a8 <__malloc_lock+0x8>)
 800b5a2:	f000 baf9 	b.w	800bb98 <__retarget_lock_acquire_recursive>
 800b5a6:	bf00      	nop
 800b5a8:	20000dc8 	.word	0x20000dc8

0800b5ac <__malloc_unlock>:
 800b5ac:	4801      	ldr	r0, [pc, #4]	; (800b5b4 <__malloc_unlock+0x8>)
 800b5ae:	f000 baf4 	b.w	800bb9a <__retarget_lock_release_recursive>
 800b5b2:	bf00      	nop
 800b5b4:	20000dc8 	.word	0x20000dc8

0800b5b8 <__ssputs_r>:
 800b5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5bc:	688e      	ldr	r6, [r1, #8]
 800b5be:	429e      	cmp	r6, r3
 800b5c0:	4682      	mov	sl, r0
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	4690      	mov	r8, r2
 800b5c6:	461f      	mov	r7, r3
 800b5c8:	d838      	bhi.n	800b63c <__ssputs_r+0x84>
 800b5ca:	898a      	ldrh	r2, [r1, #12]
 800b5cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5d0:	d032      	beq.n	800b638 <__ssputs_r+0x80>
 800b5d2:	6825      	ldr	r5, [r4, #0]
 800b5d4:	6909      	ldr	r1, [r1, #16]
 800b5d6:	eba5 0901 	sub.w	r9, r5, r1
 800b5da:	6965      	ldr	r5, [r4, #20]
 800b5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	444b      	add	r3, r9
 800b5e8:	106d      	asrs	r5, r5, #1
 800b5ea:	429d      	cmp	r5, r3
 800b5ec:	bf38      	it	cc
 800b5ee:	461d      	movcc	r5, r3
 800b5f0:	0553      	lsls	r3, r2, #21
 800b5f2:	d531      	bpl.n	800b658 <__ssputs_r+0xa0>
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	f7ff ff2f 	bl	800b458 <_malloc_r>
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	b950      	cbnz	r0, 800b614 <__ssputs_r+0x5c>
 800b5fe:	230c      	movs	r3, #12
 800b600:	f8ca 3000 	str.w	r3, [sl]
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b614:	6921      	ldr	r1, [r4, #16]
 800b616:	464a      	mov	r2, r9
 800b618:	f000 fac0 	bl	800bb9c <memcpy>
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b626:	81a3      	strh	r3, [r4, #12]
 800b628:	6126      	str	r6, [r4, #16]
 800b62a:	6165      	str	r5, [r4, #20]
 800b62c:	444e      	add	r6, r9
 800b62e:	eba5 0509 	sub.w	r5, r5, r9
 800b632:	6026      	str	r6, [r4, #0]
 800b634:	60a5      	str	r5, [r4, #8]
 800b636:	463e      	mov	r6, r7
 800b638:	42be      	cmp	r6, r7
 800b63a:	d900      	bls.n	800b63e <__ssputs_r+0x86>
 800b63c:	463e      	mov	r6, r7
 800b63e:	6820      	ldr	r0, [r4, #0]
 800b640:	4632      	mov	r2, r6
 800b642:	4641      	mov	r1, r8
 800b644:	f000 fab8 	bl	800bbb8 <memmove>
 800b648:	68a3      	ldr	r3, [r4, #8]
 800b64a:	1b9b      	subs	r3, r3, r6
 800b64c:	60a3      	str	r3, [r4, #8]
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	4433      	add	r3, r6
 800b652:	6023      	str	r3, [r4, #0]
 800b654:	2000      	movs	r0, #0
 800b656:	e7db      	b.n	800b610 <__ssputs_r+0x58>
 800b658:	462a      	mov	r2, r5
 800b65a:	f000 fac7 	bl	800bbec <_realloc_r>
 800b65e:	4606      	mov	r6, r0
 800b660:	2800      	cmp	r0, #0
 800b662:	d1e1      	bne.n	800b628 <__ssputs_r+0x70>
 800b664:	6921      	ldr	r1, [r4, #16]
 800b666:	4650      	mov	r0, sl
 800b668:	f7ff fe8a 	bl	800b380 <_free_r>
 800b66c:	e7c7      	b.n	800b5fe <__ssputs_r+0x46>
	...

0800b670 <_svfiprintf_r>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	4698      	mov	r8, r3
 800b676:	898b      	ldrh	r3, [r1, #12]
 800b678:	061b      	lsls	r3, r3, #24
 800b67a:	b09d      	sub	sp, #116	; 0x74
 800b67c:	4607      	mov	r7, r0
 800b67e:	460d      	mov	r5, r1
 800b680:	4614      	mov	r4, r2
 800b682:	d50e      	bpl.n	800b6a2 <_svfiprintf_r+0x32>
 800b684:	690b      	ldr	r3, [r1, #16]
 800b686:	b963      	cbnz	r3, 800b6a2 <_svfiprintf_r+0x32>
 800b688:	2140      	movs	r1, #64	; 0x40
 800b68a:	f7ff fee5 	bl	800b458 <_malloc_r>
 800b68e:	6028      	str	r0, [r5, #0]
 800b690:	6128      	str	r0, [r5, #16]
 800b692:	b920      	cbnz	r0, 800b69e <_svfiprintf_r+0x2e>
 800b694:	230c      	movs	r3, #12
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b69c:	e0d1      	b.n	800b842 <_svfiprintf_r+0x1d2>
 800b69e:	2340      	movs	r3, #64	; 0x40
 800b6a0:	616b      	str	r3, [r5, #20]
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a6:	2320      	movs	r3, #32
 800b6a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b0:	2330      	movs	r3, #48	; 0x30
 800b6b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b85c <_svfiprintf_r+0x1ec>
 800b6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6ba:	f04f 0901 	mov.w	r9, #1
 800b6be:	4623      	mov	r3, r4
 800b6c0:	469a      	mov	sl, r3
 800b6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6c6:	b10a      	cbz	r2, 800b6cc <_svfiprintf_r+0x5c>
 800b6c8:	2a25      	cmp	r2, #37	; 0x25
 800b6ca:	d1f9      	bne.n	800b6c0 <_svfiprintf_r+0x50>
 800b6cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b6d0:	d00b      	beq.n	800b6ea <_svfiprintf_r+0x7a>
 800b6d2:	465b      	mov	r3, fp
 800b6d4:	4622      	mov	r2, r4
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f7ff ff6d 	bl	800b5b8 <__ssputs_r>
 800b6de:	3001      	adds	r0, #1
 800b6e0:	f000 80aa 	beq.w	800b838 <_svfiprintf_r+0x1c8>
 800b6e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6e6:	445a      	add	r2, fp
 800b6e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 80a2 	beq.w	800b838 <_svfiprintf_r+0x1c8>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6fe:	f10a 0a01 	add.w	sl, sl, #1
 800b702:	9304      	str	r3, [sp, #16]
 800b704:	9307      	str	r3, [sp, #28]
 800b706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b70a:	931a      	str	r3, [sp, #104]	; 0x68
 800b70c:	4654      	mov	r4, sl
 800b70e:	2205      	movs	r2, #5
 800b710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b714:	4851      	ldr	r0, [pc, #324]	; (800b85c <_svfiprintf_r+0x1ec>)
 800b716:	f7f4 fd8b 	bl	8000230 <memchr>
 800b71a:	9a04      	ldr	r2, [sp, #16]
 800b71c:	b9d8      	cbnz	r0, 800b756 <_svfiprintf_r+0xe6>
 800b71e:	06d0      	lsls	r0, r2, #27
 800b720:	bf44      	itt	mi
 800b722:	2320      	movmi	r3, #32
 800b724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b728:	0711      	lsls	r1, r2, #28
 800b72a:	bf44      	itt	mi
 800b72c:	232b      	movmi	r3, #43	; 0x2b
 800b72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b732:	f89a 3000 	ldrb.w	r3, [sl]
 800b736:	2b2a      	cmp	r3, #42	; 0x2a
 800b738:	d015      	beq.n	800b766 <_svfiprintf_r+0xf6>
 800b73a:	9a07      	ldr	r2, [sp, #28]
 800b73c:	4654      	mov	r4, sl
 800b73e:	2000      	movs	r0, #0
 800b740:	f04f 0c0a 	mov.w	ip, #10
 800b744:	4621      	mov	r1, r4
 800b746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b74a:	3b30      	subs	r3, #48	; 0x30
 800b74c:	2b09      	cmp	r3, #9
 800b74e:	d94e      	bls.n	800b7ee <_svfiprintf_r+0x17e>
 800b750:	b1b0      	cbz	r0, 800b780 <_svfiprintf_r+0x110>
 800b752:	9207      	str	r2, [sp, #28]
 800b754:	e014      	b.n	800b780 <_svfiprintf_r+0x110>
 800b756:	eba0 0308 	sub.w	r3, r0, r8
 800b75a:	fa09 f303 	lsl.w	r3, r9, r3
 800b75e:	4313      	orrs	r3, r2
 800b760:	9304      	str	r3, [sp, #16]
 800b762:	46a2      	mov	sl, r4
 800b764:	e7d2      	b.n	800b70c <_svfiprintf_r+0x9c>
 800b766:	9b03      	ldr	r3, [sp, #12]
 800b768:	1d19      	adds	r1, r3, #4
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	9103      	str	r1, [sp, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	bfbb      	ittet	lt
 800b772:	425b      	neglt	r3, r3
 800b774:	f042 0202 	orrlt.w	r2, r2, #2
 800b778:	9307      	strge	r3, [sp, #28]
 800b77a:	9307      	strlt	r3, [sp, #28]
 800b77c:	bfb8      	it	lt
 800b77e:	9204      	strlt	r2, [sp, #16]
 800b780:	7823      	ldrb	r3, [r4, #0]
 800b782:	2b2e      	cmp	r3, #46	; 0x2e
 800b784:	d10c      	bne.n	800b7a0 <_svfiprintf_r+0x130>
 800b786:	7863      	ldrb	r3, [r4, #1]
 800b788:	2b2a      	cmp	r3, #42	; 0x2a
 800b78a:	d135      	bne.n	800b7f8 <_svfiprintf_r+0x188>
 800b78c:	9b03      	ldr	r3, [sp, #12]
 800b78e:	1d1a      	adds	r2, r3, #4
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	9203      	str	r2, [sp, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	bfb8      	it	lt
 800b798:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b79c:	3402      	adds	r4, #2
 800b79e:	9305      	str	r3, [sp, #20]
 800b7a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b86c <_svfiprintf_r+0x1fc>
 800b7a4:	7821      	ldrb	r1, [r4, #0]
 800b7a6:	2203      	movs	r2, #3
 800b7a8:	4650      	mov	r0, sl
 800b7aa:	f7f4 fd41 	bl	8000230 <memchr>
 800b7ae:	b140      	cbz	r0, 800b7c2 <_svfiprintf_r+0x152>
 800b7b0:	2340      	movs	r3, #64	; 0x40
 800b7b2:	eba0 000a 	sub.w	r0, r0, sl
 800b7b6:	fa03 f000 	lsl.w	r0, r3, r0
 800b7ba:	9b04      	ldr	r3, [sp, #16]
 800b7bc:	4303      	orrs	r3, r0
 800b7be:	3401      	adds	r4, #1
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c6:	4826      	ldr	r0, [pc, #152]	; (800b860 <_svfiprintf_r+0x1f0>)
 800b7c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7cc:	2206      	movs	r2, #6
 800b7ce:	f7f4 fd2f 	bl	8000230 <memchr>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d038      	beq.n	800b848 <_svfiprintf_r+0x1d8>
 800b7d6:	4b23      	ldr	r3, [pc, #140]	; (800b864 <_svfiprintf_r+0x1f4>)
 800b7d8:	bb1b      	cbnz	r3, 800b822 <_svfiprintf_r+0x1b2>
 800b7da:	9b03      	ldr	r3, [sp, #12]
 800b7dc:	3307      	adds	r3, #7
 800b7de:	f023 0307 	bic.w	r3, r3, #7
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	9303      	str	r3, [sp, #12]
 800b7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e8:	4433      	add	r3, r6
 800b7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ec:	e767      	b.n	800b6be <_svfiprintf_r+0x4e>
 800b7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	2001      	movs	r0, #1
 800b7f6:	e7a5      	b.n	800b744 <_svfiprintf_r+0xd4>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	3401      	adds	r4, #1
 800b7fc:	9305      	str	r3, [sp, #20]
 800b7fe:	4619      	mov	r1, r3
 800b800:	f04f 0c0a 	mov.w	ip, #10
 800b804:	4620      	mov	r0, r4
 800b806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b80a:	3a30      	subs	r2, #48	; 0x30
 800b80c:	2a09      	cmp	r2, #9
 800b80e:	d903      	bls.n	800b818 <_svfiprintf_r+0x1a8>
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0c5      	beq.n	800b7a0 <_svfiprintf_r+0x130>
 800b814:	9105      	str	r1, [sp, #20]
 800b816:	e7c3      	b.n	800b7a0 <_svfiprintf_r+0x130>
 800b818:	fb0c 2101 	mla	r1, ip, r1, r2
 800b81c:	4604      	mov	r4, r0
 800b81e:	2301      	movs	r3, #1
 800b820:	e7f0      	b.n	800b804 <_svfiprintf_r+0x194>
 800b822:	ab03      	add	r3, sp, #12
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	462a      	mov	r2, r5
 800b828:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <_svfiprintf_r+0x1f8>)
 800b82a:	a904      	add	r1, sp, #16
 800b82c:	4638      	mov	r0, r7
 800b82e:	f3af 8000 	nop.w
 800b832:	1c42      	adds	r2, r0, #1
 800b834:	4606      	mov	r6, r0
 800b836:	d1d6      	bne.n	800b7e6 <_svfiprintf_r+0x176>
 800b838:	89ab      	ldrh	r3, [r5, #12]
 800b83a:	065b      	lsls	r3, r3, #25
 800b83c:	f53f af2c 	bmi.w	800b698 <_svfiprintf_r+0x28>
 800b840:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b842:	b01d      	add	sp, #116	; 0x74
 800b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b848:	ab03      	add	r3, sp, #12
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	462a      	mov	r2, r5
 800b84e:	4b06      	ldr	r3, [pc, #24]	; (800b868 <_svfiprintf_r+0x1f8>)
 800b850:	a904      	add	r1, sp, #16
 800b852:	4638      	mov	r0, r7
 800b854:	f000 f87a 	bl	800b94c <_printf_i>
 800b858:	e7eb      	b.n	800b832 <_svfiprintf_r+0x1c2>
 800b85a:	bf00      	nop
 800b85c:	0800bd94 	.word	0x0800bd94
 800b860:	0800bd9e 	.word	0x0800bd9e
 800b864:	00000000 	.word	0x00000000
 800b868:	0800b5b9 	.word	0x0800b5b9
 800b86c:	0800bd9a 	.word	0x0800bd9a

0800b870 <_printf_common>:
 800b870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b874:	4616      	mov	r6, r2
 800b876:	4699      	mov	r9, r3
 800b878:	688a      	ldr	r2, [r1, #8]
 800b87a:	690b      	ldr	r3, [r1, #16]
 800b87c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b880:	4293      	cmp	r3, r2
 800b882:	bfb8      	it	lt
 800b884:	4613      	movlt	r3, r2
 800b886:	6033      	str	r3, [r6, #0]
 800b888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b88c:	4607      	mov	r7, r0
 800b88e:	460c      	mov	r4, r1
 800b890:	b10a      	cbz	r2, 800b896 <_printf_common+0x26>
 800b892:	3301      	adds	r3, #1
 800b894:	6033      	str	r3, [r6, #0]
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	0699      	lsls	r1, r3, #26
 800b89a:	bf42      	ittt	mi
 800b89c:	6833      	ldrmi	r3, [r6, #0]
 800b89e:	3302      	addmi	r3, #2
 800b8a0:	6033      	strmi	r3, [r6, #0]
 800b8a2:	6825      	ldr	r5, [r4, #0]
 800b8a4:	f015 0506 	ands.w	r5, r5, #6
 800b8a8:	d106      	bne.n	800b8b8 <_printf_common+0x48>
 800b8aa:	f104 0a19 	add.w	sl, r4, #25
 800b8ae:	68e3      	ldr	r3, [r4, #12]
 800b8b0:	6832      	ldr	r2, [r6, #0]
 800b8b2:	1a9b      	subs	r3, r3, r2
 800b8b4:	42ab      	cmp	r3, r5
 800b8b6:	dc26      	bgt.n	800b906 <_printf_common+0x96>
 800b8b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8bc:	1e13      	subs	r3, r2, #0
 800b8be:	6822      	ldr	r2, [r4, #0]
 800b8c0:	bf18      	it	ne
 800b8c2:	2301      	movne	r3, #1
 800b8c4:	0692      	lsls	r2, r2, #26
 800b8c6:	d42b      	bmi.n	800b920 <_printf_common+0xb0>
 800b8c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8cc:	4649      	mov	r1, r9
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	47c0      	blx	r8
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	d01e      	beq.n	800b914 <_printf_common+0xa4>
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	68e5      	ldr	r5, [r4, #12]
 800b8da:	6832      	ldr	r2, [r6, #0]
 800b8dc:	f003 0306 	and.w	r3, r3, #6
 800b8e0:	2b04      	cmp	r3, #4
 800b8e2:	bf08      	it	eq
 800b8e4:	1aad      	subeq	r5, r5, r2
 800b8e6:	68a3      	ldr	r3, [r4, #8]
 800b8e8:	6922      	ldr	r2, [r4, #16]
 800b8ea:	bf0c      	ite	eq
 800b8ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8f0:	2500      	movne	r5, #0
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	bfc4      	itt	gt
 800b8f6:	1a9b      	subgt	r3, r3, r2
 800b8f8:	18ed      	addgt	r5, r5, r3
 800b8fa:	2600      	movs	r6, #0
 800b8fc:	341a      	adds	r4, #26
 800b8fe:	42b5      	cmp	r5, r6
 800b900:	d11a      	bne.n	800b938 <_printf_common+0xc8>
 800b902:	2000      	movs	r0, #0
 800b904:	e008      	b.n	800b918 <_printf_common+0xa8>
 800b906:	2301      	movs	r3, #1
 800b908:	4652      	mov	r2, sl
 800b90a:	4649      	mov	r1, r9
 800b90c:	4638      	mov	r0, r7
 800b90e:	47c0      	blx	r8
 800b910:	3001      	adds	r0, #1
 800b912:	d103      	bne.n	800b91c <_printf_common+0xac>
 800b914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91c:	3501      	adds	r5, #1
 800b91e:	e7c6      	b.n	800b8ae <_printf_common+0x3e>
 800b920:	18e1      	adds	r1, r4, r3
 800b922:	1c5a      	adds	r2, r3, #1
 800b924:	2030      	movs	r0, #48	; 0x30
 800b926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b92a:	4422      	add	r2, r4
 800b92c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b934:	3302      	adds	r3, #2
 800b936:	e7c7      	b.n	800b8c8 <_printf_common+0x58>
 800b938:	2301      	movs	r3, #1
 800b93a:	4622      	mov	r2, r4
 800b93c:	4649      	mov	r1, r9
 800b93e:	4638      	mov	r0, r7
 800b940:	47c0      	blx	r8
 800b942:	3001      	adds	r0, #1
 800b944:	d0e6      	beq.n	800b914 <_printf_common+0xa4>
 800b946:	3601      	adds	r6, #1
 800b948:	e7d9      	b.n	800b8fe <_printf_common+0x8e>
	...

0800b94c <_printf_i>:
 800b94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	7e0f      	ldrb	r7, [r1, #24]
 800b952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b954:	2f78      	cmp	r7, #120	; 0x78
 800b956:	4691      	mov	r9, r2
 800b958:	4680      	mov	r8, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	469a      	mov	sl, r3
 800b95e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b962:	d807      	bhi.n	800b974 <_printf_i+0x28>
 800b964:	2f62      	cmp	r7, #98	; 0x62
 800b966:	d80a      	bhi.n	800b97e <_printf_i+0x32>
 800b968:	2f00      	cmp	r7, #0
 800b96a:	f000 80d8 	beq.w	800bb1e <_printf_i+0x1d2>
 800b96e:	2f58      	cmp	r7, #88	; 0x58
 800b970:	f000 80a3 	beq.w	800baba <_printf_i+0x16e>
 800b974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b97c:	e03a      	b.n	800b9f4 <_printf_i+0xa8>
 800b97e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b982:	2b15      	cmp	r3, #21
 800b984:	d8f6      	bhi.n	800b974 <_printf_i+0x28>
 800b986:	a101      	add	r1, pc, #4	; (adr r1, 800b98c <_printf_i+0x40>)
 800b988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b98c:	0800b9e5 	.word	0x0800b9e5
 800b990:	0800b9f9 	.word	0x0800b9f9
 800b994:	0800b975 	.word	0x0800b975
 800b998:	0800b975 	.word	0x0800b975
 800b99c:	0800b975 	.word	0x0800b975
 800b9a0:	0800b975 	.word	0x0800b975
 800b9a4:	0800b9f9 	.word	0x0800b9f9
 800b9a8:	0800b975 	.word	0x0800b975
 800b9ac:	0800b975 	.word	0x0800b975
 800b9b0:	0800b975 	.word	0x0800b975
 800b9b4:	0800b975 	.word	0x0800b975
 800b9b8:	0800bb05 	.word	0x0800bb05
 800b9bc:	0800ba29 	.word	0x0800ba29
 800b9c0:	0800bae7 	.word	0x0800bae7
 800b9c4:	0800b975 	.word	0x0800b975
 800b9c8:	0800b975 	.word	0x0800b975
 800b9cc:	0800bb27 	.word	0x0800bb27
 800b9d0:	0800b975 	.word	0x0800b975
 800b9d4:	0800ba29 	.word	0x0800ba29
 800b9d8:	0800b975 	.word	0x0800b975
 800b9dc:	0800b975 	.word	0x0800b975
 800b9e0:	0800baef 	.word	0x0800baef
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	1d1a      	adds	r2, r3, #4
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	602a      	str	r2, [r5, #0]
 800b9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e0a3      	b.n	800bb40 <_printf_i+0x1f4>
 800b9f8:	6820      	ldr	r0, [r4, #0]
 800b9fa:	6829      	ldr	r1, [r5, #0]
 800b9fc:	0606      	lsls	r6, r0, #24
 800b9fe:	f101 0304 	add.w	r3, r1, #4
 800ba02:	d50a      	bpl.n	800ba1a <_printf_i+0xce>
 800ba04:	680e      	ldr	r6, [r1, #0]
 800ba06:	602b      	str	r3, [r5, #0]
 800ba08:	2e00      	cmp	r6, #0
 800ba0a:	da03      	bge.n	800ba14 <_printf_i+0xc8>
 800ba0c:	232d      	movs	r3, #45	; 0x2d
 800ba0e:	4276      	negs	r6, r6
 800ba10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba14:	485e      	ldr	r0, [pc, #376]	; (800bb90 <_printf_i+0x244>)
 800ba16:	230a      	movs	r3, #10
 800ba18:	e019      	b.n	800ba4e <_printf_i+0x102>
 800ba1a:	680e      	ldr	r6, [r1, #0]
 800ba1c:	602b      	str	r3, [r5, #0]
 800ba1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba22:	bf18      	it	ne
 800ba24:	b236      	sxthne	r6, r6
 800ba26:	e7ef      	b.n	800ba08 <_printf_i+0xbc>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	6820      	ldr	r0, [r4, #0]
 800ba2c:	1d19      	adds	r1, r3, #4
 800ba2e:	6029      	str	r1, [r5, #0]
 800ba30:	0601      	lsls	r1, r0, #24
 800ba32:	d501      	bpl.n	800ba38 <_printf_i+0xec>
 800ba34:	681e      	ldr	r6, [r3, #0]
 800ba36:	e002      	b.n	800ba3e <_printf_i+0xf2>
 800ba38:	0646      	lsls	r6, r0, #25
 800ba3a:	d5fb      	bpl.n	800ba34 <_printf_i+0xe8>
 800ba3c:	881e      	ldrh	r6, [r3, #0]
 800ba3e:	4854      	ldr	r0, [pc, #336]	; (800bb90 <_printf_i+0x244>)
 800ba40:	2f6f      	cmp	r7, #111	; 0x6f
 800ba42:	bf0c      	ite	eq
 800ba44:	2308      	moveq	r3, #8
 800ba46:	230a      	movne	r3, #10
 800ba48:	2100      	movs	r1, #0
 800ba4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba4e:	6865      	ldr	r5, [r4, #4]
 800ba50:	60a5      	str	r5, [r4, #8]
 800ba52:	2d00      	cmp	r5, #0
 800ba54:	bfa2      	ittt	ge
 800ba56:	6821      	ldrge	r1, [r4, #0]
 800ba58:	f021 0104 	bicge.w	r1, r1, #4
 800ba5c:	6021      	strge	r1, [r4, #0]
 800ba5e:	b90e      	cbnz	r6, 800ba64 <_printf_i+0x118>
 800ba60:	2d00      	cmp	r5, #0
 800ba62:	d04d      	beq.n	800bb00 <_printf_i+0x1b4>
 800ba64:	4615      	mov	r5, r2
 800ba66:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba6a:	fb03 6711 	mls	r7, r3, r1, r6
 800ba6e:	5dc7      	ldrb	r7, [r0, r7]
 800ba70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba74:	4637      	mov	r7, r6
 800ba76:	42bb      	cmp	r3, r7
 800ba78:	460e      	mov	r6, r1
 800ba7a:	d9f4      	bls.n	800ba66 <_printf_i+0x11a>
 800ba7c:	2b08      	cmp	r3, #8
 800ba7e:	d10b      	bne.n	800ba98 <_printf_i+0x14c>
 800ba80:	6823      	ldr	r3, [r4, #0]
 800ba82:	07de      	lsls	r6, r3, #31
 800ba84:	d508      	bpl.n	800ba98 <_printf_i+0x14c>
 800ba86:	6923      	ldr	r3, [r4, #16]
 800ba88:	6861      	ldr	r1, [r4, #4]
 800ba8a:	4299      	cmp	r1, r3
 800ba8c:	bfde      	ittt	le
 800ba8e:	2330      	movle	r3, #48	; 0x30
 800ba90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ba98:	1b52      	subs	r2, r2, r5
 800ba9a:	6122      	str	r2, [r4, #16]
 800ba9c:	f8cd a000 	str.w	sl, [sp]
 800baa0:	464b      	mov	r3, r9
 800baa2:	aa03      	add	r2, sp, #12
 800baa4:	4621      	mov	r1, r4
 800baa6:	4640      	mov	r0, r8
 800baa8:	f7ff fee2 	bl	800b870 <_printf_common>
 800baac:	3001      	adds	r0, #1
 800baae:	d14c      	bne.n	800bb4a <_printf_i+0x1fe>
 800bab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bab4:	b004      	add	sp, #16
 800bab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baba:	4835      	ldr	r0, [pc, #212]	; (800bb90 <_printf_i+0x244>)
 800babc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bac0:	6829      	ldr	r1, [r5, #0]
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bac8:	6029      	str	r1, [r5, #0]
 800baca:	061d      	lsls	r5, r3, #24
 800bacc:	d514      	bpl.n	800baf8 <_printf_i+0x1ac>
 800bace:	07df      	lsls	r7, r3, #31
 800bad0:	bf44      	itt	mi
 800bad2:	f043 0320 	orrmi.w	r3, r3, #32
 800bad6:	6023      	strmi	r3, [r4, #0]
 800bad8:	b91e      	cbnz	r6, 800bae2 <_printf_i+0x196>
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	f023 0320 	bic.w	r3, r3, #32
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	2310      	movs	r3, #16
 800bae4:	e7b0      	b.n	800ba48 <_printf_i+0xfc>
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	f043 0320 	orr.w	r3, r3, #32
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	2378      	movs	r3, #120	; 0x78
 800baf0:	4828      	ldr	r0, [pc, #160]	; (800bb94 <_printf_i+0x248>)
 800baf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800baf6:	e7e3      	b.n	800bac0 <_printf_i+0x174>
 800baf8:	0659      	lsls	r1, r3, #25
 800bafa:	bf48      	it	mi
 800bafc:	b2b6      	uxthmi	r6, r6
 800bafe:	e7e6      	b.n	800bace <_printf_i+0x182>
 800bb00:	4615      	mov	r5, r2
 800bb02:	e7bb      	b.n	800ba7c <_printf_i+0x130>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	6826      	ldr	r6, [r4, #0]
 800bb08:	6961      	ldr	r1, [r4, #20]
 800bb0a:	1d18      	adds	r0, r3, #4
 800bb0c:	6028      	str	r0, [r5, #0]
 800bb0e:	0635      	lsls	r5, r6, #24
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	d501      	bpl.n	800bb18 <_printf_i+0x1cc>
 800bb14:	6019      	str	r1, [r3, #0]
 800bb16:	e002      	b.n	800bb1e <_printf_i+0x1d2>
 800bb18:	0670      	lsls	r0, r6, #25
 800bb1a:	d5fb      	bpl.n	800bb14 <_printf_i+0x1c8>
 800bb1c:	8019      	strh	r1, [r3, #0]
 800bb1e:	2300      	movs	r3, #0
 800bb20:	6123      	str	r3, [r4, #16]
 800bb22:	4615      	mov	r5, r2
 800bb24:	e7ba      	b.n	800ba9c <_printf_i+0x150>
 800bb26:	682b      	ldr	r3, [r5, #0]
 800bb28:	1d1a      	adds	r2, r3, #4
 800bb2a:	602a      	str	r2, [r5, #0]
 800bb2c:	681d      	ldr	r5, [r3, #0]
 800bb2e:	6862      	ldr	r2, [r4, #4]
 800bb30:	2100      	movs	r1, #0
 800bb32:	4628      	mov	r0, r5
 800bb34:	f7f4 fb7c 	bl	8000230 <memchr>
 800bb38:	b108      	cbz	r0, 800bb3e <_printf_i+0x1f2>
 800bb3a:	1b40      	subs	r0, r0, r5
 800bb3c:	6060      	str	r0, [r4, #4]
 800bb3e:	6863      	ldr	r3, [r4, #4]
 800bb40:	6123      	str	r3, [r4, #16]
 800bb42:	2300      	movs	r3, #0
 800bb44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb48:	e7a8      	b.n	800ba9c <_printf_i+0x150>
 800bb4a:	6923      	ldr	r3, [r4, #16]
 800bb4c:	462a      	mov	r2, r5
 800bb4e:	4649      	mov	r1, r9
 800bb50:	4640      	mov	r0, r8
 800bb52:	47d0      	blx	sl
 800bb54:	3001      	adds	r0, #1
 800bb56:	d0ab      	beq.n	800bab0 <_printf_i+0x164>
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	079b      	lsls	r3, r3, #30
 800bb5c:	d413      	bmi.n	800bb86 <_printf_i+0x23a>
 800bb5e:	68e0      	ldr	r0, [r4, #12]
 800bb60:	9b03      	ldr	r3, [sp, #12]
 800bb62:	4298      	cmp	r0, r3
 800bb64:	bfb8      	it	lt
 800bb66:	4618      	movlt	r0, r3
 800bb68:	e7a4      	b.n	800bab4 <_printf_i+0x168>
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	4632      	mov	r2, r6
 800bb6e:	4649      	mov	r1, r9
 800bb70:	4640      	mov	r0, r8
 800bb72:	47d0      	blx	sl
 800bb74:	3001      	adds	r0, #1
 800bb76:	d09b      	beq.n	800bab0 <_printf_i+0x164>
 800bb78:	3501      	adds	r5, #1
 800bb7a:	68e3      	ldr	r3, [r4, #12]
 800bb7c:	9903      	ldr	r1, [sp, #12]
 800bb7e:	1a5b      	subs	r3, r3, r1
 800bb80:	42ab      	cmp	r3, r5
 800bb82:	dcf2      	bgt.n	800bb6a <_printf_i+0x21e>
 800bb84:	e7eb      	b.n	800bb5e <_printf_i+0x212>
 800bb86:	2500      	movs	r5, #0
 800bb88:	f104 0619 	add.w	r6, r4, #25
 800bb8c:	e7f5      	b.n	800bb7a <_printf_i+0x22e>
 800bb8e:	bf00      	nop
 800bb90:	0800bda5 	.word	0x0800bda5
 800bb94:	0800bdb6 	.word	0x0800bdb6

0800bb98 <__retarget_lock_acquire_recursive>:
 800bb98:	4770      	bx	lr

0800bb9a <__retarget_lock_release_recursive>:
 800bb9a:	4770      	bx	lr

0800bb9c <memcpy>:
 800bb9c:	440a      	add	r2, r1
 800bb9e:	4291      	cmp	r1, r2
 800bba0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bba4:	d100      	bne.n	800bba8 <memcpy+0xc>
 800bba6:	4770      	bx	lr
 800bba8:	b510      	push	{r4, lr}
 800bbaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbb2:	4291      	cmp	r1, r2
 800bbb4:	d1f9      	bne.n	800bbaa <memcpy+0xe>
 800bbb6:	bd10      	pop	{r4, pc}

0800bbb8 <memmove>:
 800bbb8:	4288      	cmp	r0, r1
 800bbba:	b510      	push	{r4, lr}
 800bbbc:	eb01 0402 	add.w	r4, r1, r2
 800bbc0:	d902      	bls.n	800bbc8 <memmove+0x10>
 800bbc2:	4284      	cmp	r4, r0
 800bbc4:	4623      	mov	r3, r4
 800bbc6:	d807      	bhi.n	800bbd8 <memmove+0x20>
 800bbc8:	1e43      	subs	r3, r0, #1
 800bbca:	42a1      	cmp	r1, r4
 800bbcc:	d008      	beq.n	800bbe0 <memmove+0x28>
 800bbce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbd6:	e7f8      	b.n	800bbca <memmove+0x12>
 800bbd8:	4402      	add	r2, r0
 800bbda:	4601      	mov	r1, r0
 800bbdc:	428a      	cmp	r2, r1
 800bbde:	d100      	bne.n	800bbe2 <memmove+0x2a>
 800bbe0:	bd10      	pop	{r4, pc}
 800bbe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbea:	e7f7      	b.n	800bbdc <memmove+0x24>

0800bbec <_realloc_r>:
 800bbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf0:	4680      	mov	r8, r0
 800bbf2:	4614      	mov	r4, r2
 800bbf4:	460e      	mov	r6, r1
 800bbf6:	b921      	cbnz	r1, 800bc02 <_realloc_r+0x16>
 800bbf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfc:	4611      	mov	r1, r2
 800bbfe:	f7ff bc2b 	b.w	800b458 <_malloc_r>
 800bc02:	b92a      	cbnz	r2, 800bc10 <_realloc_r+0x24>
 800bc04:	f7ff fbbc 	bl	800b380 <_free_r>
 800bc08:	4625      	mov	r5, r4
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc10:	f000 f81b 	bl	800bc4a <_malloc_usable_size_r>
 800bc14:	4284      	cmp	r4, r0
 800bc16:	4607      	mov	r7, r0
 800bc18:	d802      	bhi.n	800bc20 <_realloc_r+0x34>
 800bc1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc1e:	d812      	bhi.n	800bc46 <_realloc_r+0x5a>
 800bc20:	4621      	mov	r1, r4
 800bc22:	4640      	mov	r0, r8
 800bc24:	f7ff fc18 	bl	800b458 <_malloc_r>
 800bc28:	4605      	mov	r5, r0
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d0ed      	beq.n	800bc0a <_realloc_r+0x1e>
 800bc2e:	42bc      	cmp	r4, r7
 800bc30:	4622      	mov	r2, r4
 800bc32:	4631      	mov	r1, r6
 800bc34:	bf28      	it	cs
 800bc36:	463a      	movcs	r2, r7
 800bc38:	f7ff ffb0 	bl	800bb9c <memcpy>
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4640      	mov	r0, r8
 800bc40:	f7ff fb9e 	bl	800b380 <_free_r>
 800bc44:	e7e1      	b.n	800bc0a <_realloc_r+0x1e>
 800bc46:	4635      	mov	r5, r6
 800bc48:	e7df      	b.n	800bc0a <_realloc_r+0x1e>

0800bc4a <_malloc_usable_size_r>:
 800bc4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc4e:	1f18      	subs	r0, r3, #4
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	bfbc      	itt	lt
 800bc54:	580b      	ldrlt	r3, [r1, r0]
 800bc56:	18c0      	addlt	r0, r0, r3
 800bc58:	4770      	bx	lr
	...

0800bc5c <_init>:
 800bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5e:	bf00      	nop
 800bc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc62:	bc08      	pop	{r3}
 800bc64:	469e      	mov	lr, r3
 800bc66:	4770      	bx	lr

0800bc68 <_fini>:
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6a:	bf00      	nop
 800bc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc6e:	bc08      	pop	{r3}
 800bc70:	469e      	mov	lr, r3
 800bc72:	4770      	bx	lr
