
F446RE_NODO_GRABA_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800bc50  0800bc50  0001bc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bda4  0800bda4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bda4  0800bda4  0001bda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdac  0800bdac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdac  0800bdac  0001bdac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdb0  0800bdb0  0001bdb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800bdb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d58  20000074  0800be28  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800be28  00020dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fd0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003613  00000000  00000000  00038074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003b688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003ca68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d56  00000000  00000000  0003dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b27e  00000000  00000000  00063a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4fab  00000000  00000000  0007ecac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153c57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005670  00000000  00000000  00153ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc38 	.word	0x0800bc38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800bc38 	.word	0x0800bc38

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AIC3254_Init>:

/*
 * INIZIALIZE
 */

uint8_t AIC3254_Init(AIC3254_t *dev, I2C_HandleTypeDef *i2cHandle) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]

	/* Init Struct */
	dev->i2cHandle = i2cHandle;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	601a      	str	r2, [r3, #0]
	 * Set Stereo ADC with 48ksps Sample Rate and High Performance
	 */

	/* Initialize to Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f92b 	bl	8000844 <AIC3254_SendCommand>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <AIC3254_Init+0x2a>
 80005f8:	2001      	movs	r0, #1
 80005fa:	f00a fe5f 	bl	800b2bc <exit>

	/* S/W Reset to initialize all registers */

	status = AIC3254_SendCommand(dev, SW_RESET, 0x01);
 80005fe:	2201      	movs	r2, #1
 8000600:	2101      	movs	r1, #1
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f91e 	bl	8000844 <AIC3254_SendCommand>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <AIC3254_Init+0x44>
 8000612:	2001      	movs	r0, #1
 8000614:	f00a fe52 	bl	800b2bc <exit>

	/* Power up NADC divider with value 1 */

	status = AIC3254_SendCommand(dev, CSR_8, 0x81);
 8000618:	2281      	movs	r2, #129	; 0x81
 800061a:	2112      	movs	r1, #18
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f911 	bl	8000844 <AIC3254_SendCommand>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <AIC3254_Init+0x5e>
 800062c:	2001      	movs	r0, #1
 800062e:	f00a fe45 	bl	800b2bc <exit>

	/* Power up MADC divider with value 2 */

	status = AIC3254_SendCommand(dev, CSR_9, 0x82);
 8000632:	2282      	movs	r2, #130	; 0x82
 8000634:	2113      	movs	r1, #19
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f904 	bl	8000844 <AIC3254_SendCommand>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <AIC3254_Init+0x78>
 8000646:	2001      	movs	r0, #1
 8000648:	f00a fe38 	bl	800b2bc <exit>

	/* Program OSR for ADC to 128 */

	status = AIC3254_SendCommand(dev, AOSR, 0x80);
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	2114      	movs	r1, #20
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f8f7 	bl	8000844 <AIC3254_SendCommand>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <AIC3254_Init+0x92>
 8000660:	2001      	movs	r0, #1
 8000662:	f00a fe2b 	bl	800b2bc <exit>

	/* Select ADC PRB_R1 */

	status = AIC3254_SendCommand(dev, PBCR, 0x01);
 8000666:	2201      	movs	r2, #1
 8000668:	213d      	movs	r1, #61	; 0x3d
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f000 f8ea 	bl	8000844 <AIC3254_SendCommand>
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <AIC3254_Init+0xac>
 800067a:	2001      	movs	r0, #1
 800067c:	f00a fe1e 	bl	800b2bc <exit>

	/* Select Page 1 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_1);
 8000680:	2201      	movs	r2, #1
 8000682:	2100      	movs	r1, #0
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f8dd 	bl	8000844 <AIC3254_SendCommand>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <AIC3254_Init+0xc6>
 8000694:	2001      	movs	r0, #1
 8000696:	f00a fe11 	bl	800b2bc <exit>

	/* Disable Internal Crude AVdd in presence of external AVdd supply or before
	 * powering up internal AVdd LDO
	 */

	status = AIC3254_SendCommand(dev, POW_CONF, 0x08);
 800069a:	2208      	movs	r2, #8
 800069c:	2101      	movs	r1, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f8d0 	bl	8000844 <AIC3254_SendCommand>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <AIC3254_Init+0xe0>
 80006ae:	2001      	movs	r0, #1
 80006b0:	f00a fe04 	bl	800b2bc <exit>

	/* Enable Master Analog Power Control */

	status = AIC3254_SendCommand(dev, LDO_CR, 0x00);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2102      	movs	r1, #2
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f8c3 	bl	8000844 <AIC3254_SendCommand>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <AIC3254_Init+0xfa>
 80006c8:	2001      	movs	r0, #1
 80006ca:	f00a fdf7 	bl	800b2bc <exit>

	/* Set the input common mode to 0.9V */

	status = AIC3254_SendCommand(dev, CMM_CR, 0x00);
 80006ce:	2200      	movs	r2, #0
 80006d0:	210a      	movs	r1, #10
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f8b6 	bl	8000844 <AIC3254_SendCommand>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <AIC3254_Init+0x114>
 80006e2:	2001      	movs	r0, #1
 80006e4:	f00a fdea 	bl	800b2bc <exit>

	/* Select ADC PTM_R4 */

	status = AIC3254_SendCommand(dev, POW_TUN, 0x00);
 80006e8:	2200      	movs	r2, #0
 80006ea:	213d      	movs	r1, #61	; 0x3d
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f8a9 	bl	8000844 <AIC3254_SendCommand>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <AIC3254_Init+0x12e>
 80006fc:	2001      	movs	r0, #1
 80006fe:	f00a fddd 	bl	800b2bc <exit>

	/* Set MICBIAS to LDOIN - 3.3V */

	status = AIC3254_SendCommand(dev, MICBIAS_CR, 0x78);
 8000702:	2278      	movs	r2, #120	; 0x78
 8000704:	2133      	movs	r1, #51	; 0x33
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f89c 	bl	8000844 <AIC3254_SendCommand>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <AIC3254_Init+0x148>
 8000716:	2001      	movs	r0, #1
 8000718:	f00a fdd0 	bl	800b2bc <exit>

	/* Set MicPGA startup delay to 3.1ms */

	status = AIC3254_SendCommand(dev, AIQC_CR, 0x32);
 800071c:	2232      	movs	r2, #50	; 0x32
 800071e:	2147      	movs	r1, #71	; 0x47
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f88f 	bl	8000844 <AIC3254_SendCommand>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <AIC3254_Init+0x162>
 8000730:	2001      	movs	r0, #1
 8000732:	f00a fdc3 	bl	800b2bc <exit>

	/* Set the REF charging time to 40ms */

	status = AIC3254_SendCommand(dev, REF_POW_CR, 0x01);
 8000736:	2201      	movs	r2, #1
 8000738:	217b      	movs	r1, #123	; 0x7b
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f882 	bl	8000844 <AIC3254_SendCommand>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <AIC3254_Init+0x17c>
 800074a:	2001      	movs	r0, #1
 800074c:	f00a fdb6 	bl	800b2bc <exit>

	/* Route IN2L to LEFT_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, LROUTE_PCR, 0x20);
 8000750:	2220      	movs	r2, #32
 8000752:	2134      	movs	r1, #52	; 0x34
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f875 	bl	8000844 <AIC3254_SendCommand>
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <AIC3254_Init+0x196>
 8000764:	2001      	movs	r0, #1
 8000766:	f00a fda9 	bl	800b2bc <exit>

	/* Route Common Mode to LEFT_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, LROUTE_NCR, 0x20);
 800076a:	2220      	movs	r2, #32
 800076c:	2136      	movs	r1, #54	; 0x36
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f868 	bl	8000844 <AIC3254_SendCommand>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <AIC3254_Init+0x1b0>
 800077e:	2001      	movs	r0, #1
 8000780:	f00a fd9c 	bl	800b2bc <exit>

	/* Route IN1R to Right_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, RROUTE_PCR, 0x80);
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	2137      	movs	r1, #55	; 0x37
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f85b 	bl	8000844 <AIC3254_SendCommand>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <AIC3254_Init+0x1ca>
 8000798:	2001      	movs	r0, #1
 800079a:	f00a fd8f 	bl	800b2bc <exit>

	/* Route Common Mode to Right_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, RROUTE_NCR, 0x20);
 800079e:	2220      	movs	r2, #32
 80007a0:	2139      	movs	r1, #57	; 0x39
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f84e 	bl	8000844 <AIC3254_SendCommand>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <AIC3254_Init+0x1e4>
 80007b2:	2001      	movs	r0, #1
 80007b4:	f00a fd82 	bl	800b2bc <exit>

	/* Unmute Left MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, LVOLUME_CR, 0x0c);
 80007b8:	220c      	movs	r2, #12
 80007ba:	213b      	movs	r1, #59	; 0x3b
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f841 	bl	8000844 <AIC3254_SendCommand>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <AIC3254_Init+0x1fe>
 80007cc:	2001      	movs	r0, #1
 80007ce:	f00a fd75 	bl	800b2bc <exit>

	/* Unmute Right MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, RVOLUME_CR, 0x0c);
 80007d2:	220c      	movs	r2, #12
 80007d4:	213c      	movs	r1, #60	; 0x3c
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f834 	bl	8000844 <AIC3254_SendCommand>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <AIC3254_Init+0x218>
 80007e6:	2001      	movs	r0, #1
 80007e8:	f00a fd68 	bl	800b2bc <exit>

	/* Select Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f827 	bl	8000844 <AIC3254_SendCommand>
 80007f6:	4603      	mov	r3, r0
 80007f8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <AIC3254_Init+0x232>
 8000800:	2001      	movs	r0, #1
 8000802:	f00a fd5b 	bl	800b2bc <exit>

	/* Power up Left and Right ADC Channels */

	status = AIC3254_SendCommand(dev, CH_SETUP, 0xc0);
 8000806:	22c0      	movs	r2, #192	; 0xc0
 8000808:	2151      	movs	r1, #81	; 0x51
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f81a 	bl	8000844 <AIC3254_SendCommand>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <AIC3254_Init+0x24c>
 800081a:	2001      	movs	r0, #1
 800081c:	f00a fd4e 	bl	800b2bc <exit>

	/* Unmute Left and Right ADC Digital Volume Control */

	status = AIC3254_SendCommand(dev, CH_GAIN, 0x00);
 8000820:	2200      	movs	r2, #0
 8000822:	2152      	movs	r1, #82	; 0x52
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f80d 	bl	8000844 <AIC3254_SendCommand>
 800082a:	4603      	mov	r3, r0
 800082c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <AIC3254_Init+0x266>
 8000834:	2001      	movs	r0, #1
 8000836:	f00a fd41 	bl	800b2bc <exit>

	return status;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <AIC3254_SendCommand>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef AIC3254_SendCommand(AIC3254_t *dev, uint8_t Register, uint8_t Data) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af04      	add	r7, sp, #16
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
 8000850:	4613      	mov	r3, r2
 8000852:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, AIC3254_I2C_ADDR , Register, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6818      	ldr	r0, [r3, #0]
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	b29a      	uxth	r2, r3
 800085c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000860:	9302      	str	r3, [sp, #8]
 8000862:	2301      	movs	r3, #1
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	1cbb      	adds	r3, r7, #2
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	2130      	movs	r1, #48	; 0x30
 800086e:	f002 f95d 	bl	8002b2c <HAL_I2C_Mem_Write>
 8000872:	4603      	mov	r3, r0

}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b0c2      	sub	sp, #264	; 0x108
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f001 f869 	bl	8001958 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f8bb 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f000 fa27 	bl	8000cdc <MX_GPIO_Init>
  MX_DMA_Init();
 800088e:	f000 f9e7 	bl	8000c60 <MX_DMA_Init>
  MX_I2C1_Init();
 8000892:	f000 f93d 	bl	8000b10 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000896:	f000 f969 	bl	8000b6c <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 800089a:	f000 f995 	bl	8000bc8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800089e:	f007 fd0d 	bl	80082bc <MX_FATFS_Init>
  MX_CRC_Init();
 80008a2:	f000 f921 	bl	8000ae8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80008a6:	f000 f9b1 	bl	8000c0c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize CODEC */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b0:	4848      	ldr	r0, [pc, #288]	; (80009d4 <main+0x158>)
 80008b2:	f001 ffc3 	bl	800283c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f001 f8c0 	bl	8001a3c <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c2:	4844      	ldr	r0, [pc, #272]	; (80009d4 <main+0x158>)
 80008c4:	f001 ffba 	bl	800283c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f001 f8b7 	bl	8001a3c <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d4:	483f      	ldr	r0, [pc, #252]	; (80009d4 <main+0x158>)
 80008d6:	f001 ffb1 	bl	800283c <HAL_GPIO_WritePin>
  AIC3254_Init(&codec, &hi2c1);
 80008da:	493f      	ldr	r1, [pc, #252]	; (80009d8 <main+0x15c>)
 80008dc:	483f      	ldr	r0, [pc, #252]	; (80009dc <main+0x160>)
 80008de:	f7ff fe79 	bl	80005d4 <AIC3254_Init>
  /* USER CODE BEGIN WHILE */
  char filename[256];

  do
  {
	  res = f_mount(&SDFatFS, SDPath, 1);
 80008e2:	2201      	movs	r2, #1
 80008e4:	493e      	ldr	r1, [pc, #248]	; (80009e0 <main+0x164>)
 80008e6:	483f      	ldr	r0, [pc, #252]	; (80009e4 <main+0x168>)
 80008e8:	f009 fcda 	bl	800a2a0 <f_mount>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <main+0x16c>)
 80008f2:	701a      	strb	r2, [r3, #0]
  }
  while( res != FR_OK);
 80008f4:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <main+0x16c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1f2      	bne.n	80008e2 <main+0x66>

  do
  {
	  res = Format_SD();
 80008fc:	f000 fbe0 	bl	80010c0 <Format_SD>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <main+0x16c>)
 8000906:	701a      	strb	r2, [r3, #0]
  }
  while (res != FR_OK);
 8000908:	4b37      	ldr	r3, [pc, #220]	; (80009e8 <main+0x16c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f5      	bne.n	80008fc <main+0x80>

  HAL_UART_Receive_IT(&huart2, (uint8_t *) RX_data, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	4936      	ldr	r1, [pc, #216]	; (80009ec <main+0x170>)
 8000914:	4836      	ldr	r0, [pc, #216]	; (80009f0 <main+0x174>)
 8000916:	f006 f833 	bl	8006980 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000920:	4834      	ldr	r0, [pc, #208]	; (80009f4 <main+0x178>)
 8000922:	f001 ff8b 	bl	800283c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092c:	4831      	ldr	r0, [pc, #196]	; (80009f4 <main+0x178>)
 800092e:	f001 ff85 	bl	800283c <HAL_GPIO_WritePin>
  do
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000936:	482f      	ldr	r0, [pc, #188]	; (80009f4 <main+0x178>)
 8000938:	f001 ff99 	bl	800286e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800093c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000940:	482c      	ldr	r0, [pc, #176]	; (80009f4 <main+0x178>)
 8000942:	f001 ff94 	bl	800286e <HAL_GPIO_TogglePin>
	  HAL_Delay(150);
 8000946:	2096      	movs	r0, #150	; 0x96
 8000948:	f001 f878 	bl	8001a3c <HAL_Delay>
  }
  while(audio_state == CONNECTING);
 800094c:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <main+0x17c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b04      	cmp	r3, #4
 8000952:	d0ee      	beq.n	8000932 <main+0xb6>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095a:	4826      	ldr	r0, [pc, #152]	; (80009f4 <main+0x178>)
 800095c:	f001 ff6e 	bl	800283c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000966:	4823      	ldr	r0, [pc, #140]	; (80009f4 <main+0x178>)
 8000968:	f001 ff68 	bl	800283c <HAL_GPIO_WritePin>

  for (int i = 0; i < 4; i++)
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000972:	e012      	b.n	800099a <main+0x11e>
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000974:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000978:	481e      	ldr	r0, [pc, #120]	; (80009f4 <main+0x178>)
 800097a:	f001 ff78 	bl	800286e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800097e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <main+0x178>)
 8000984:	f001 ff73 	bl	800286e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000988:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098c:	f001 f856 	bl	8001a3c <HAL_Delay>
  for (int i = 0; i < 4; i++)
 8000990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000994:	3301      	adds	r3, #1
 8000996:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800099a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800099e:	2b03      	cmp	r3, #3
 80009a0:	dde8      	ble.n	8000974 <main+0xf8>
  }


  uint16_t count = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
  while (1)
  {
	  if(audio_state == STATE_START_RECORDING)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <main+0x17c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d1fb      	bne.n	80009a8 <main+0x12c>
	  {
		  HAL_Delay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f001 f843 	bl	8001a3c <HAL_Delay>
		  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 80009b6:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	f8a7 2102 	strh.w	r2, [r7, #258]	; 0x102
 80009c0:	4638      	mov	r0, r7
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <main+0x164>)
 80009c4:	490d      	ldr	r1, [pc, #52]	; (80009fc <main+0x180>)
 80009c6:	f00a fdb9 	bl	800b53c <siprintf>
		  startRecord(filename);
 80009ca:	463b      	mov	r3, r7
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fa9f 	bl	8000f10 <startRecord>
	  if(audio_state == STATE_START_RECORDING)
 80009d2:	e7e9      	b.n	80009a8 <main+0x12c>
 80009d4:	40020400 	.word	0x40020400
 80009d8:	20000098 	.word	0x20000098
 80009dc:	2000031c 	.word	0x2000031c
 80009e0:	20000b54 	.word	0x20000b54
 80009e4:	20000b58 	.word	0x20000b58
 80009e8:	20000b28 	.word	0x20000b28
 80009ec:	20000b2c 	.word	0x20000b2c
 80009f0:	200002d8 	.word	0x200002d8
 80009f4:	40020000 	.word	0x40020000
 80009f8:	20000002 	.word	0x20000002
 80009fc:	0800bc50 	.word	0x0800bc50

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2234      	movs	r2, #52	; 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00a fc9c 	bl	800b34c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <SystemClock_Config+0xe0>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <SystemClock_Config+0xe0>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <SystemClock_Config+0xe0>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <SystemClock_Config+0xe4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a4c:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <SystemClock_Config+0xe4>)
 8000a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <SystemClock_Config+0xe4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	2301      	movs	r3, #1
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a70:	2300      	movs	r3, #0
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a74:	2308      	movs	r3, #8
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a78:	23a8      	movs	r3, #168	; 0xa8
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a80:	2307      	movs	r3, #7
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 f86d 	bl	8004b6c <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a98:	f000 fbac 	bl	80011f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a9c:	f002 ff62 	bl	8003964 <HAL_PWREx_EnableOverDrive>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000aa6:	f000 fba5 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	230f      	movs	r3, #15
 8000aac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2105      	movs	r1, #5
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 ff9b 	bl	8003a04 <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ad4:	f000 fb8e 	bl	80011f4 <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3750      	adds	r7, #80	; 0x50
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40007000 	.word	0x40007000

08000ae8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_CRC_Init+0x20>)
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <MX_CRC_Init+0x24>)
 8000af0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_CRC_Init+0x20>)
 8000af4:	f001 f8d7 	bl	8001ca6 <HAL_CRC_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000afe:	f000 fb79 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000090 	.word	0x20000090
 8000b0c:	40023000 	.word	0x40023000

08000b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b16:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <MX_I2C1_Init+0x54>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b1c:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_I2C1_Init+0x58>)
 8000b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b4e:	f001 fea9 	bl	80028a4 <HAL_I2C_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b58:	f000 fb4c 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000098 	.word	0x20000098
 8000b64:	40005400 	.word	0x40005400
 8000b68:	000186a0 	.word	0x000186a0

08000b6c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <MX_I2S2_Init+0x58>)
 8000b74:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b78:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b7c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b90:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b94:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000b98:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_I2S2_Init+0x54>)
 8000bae:	f002 fad5 	bl	800315c <HAL_I2S_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000bb8:	f000 fb1c 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000ec 	.word	0x200000ec
 8000bc4:	40003800 	.word	0x40003800

08000bc8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <MX_SDIO_SD_Init+0x40>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000bec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <MX_SDIO_SD_Init+0x3c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000194 	.word	0x20000194
 8000c08:	40012c00 	.word	0x40012c00

08000c0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <MX_USART2_UART_Init+0x50>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c44:	f005 fe4f 	bl	80068e6 <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c4e:	f000 fad1 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200002d8 	.word	0x200002d8
 8000c5c:	40004400 	.word	0x40004400

08000c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_DMA_Init+0x78>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	200e      	movs	r0, #14
 8000ca4:	f000 ffc9 	bl	8001c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ca8:	200e      	movs	r0, #14
 8000caa:	f000 ffe2 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	203b      	movs	r0, #59	; 0x3b
 8000cb4:	f000 ffc1 	bl	8001c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000cb8:	203b      	movs	r0, #59	; 0x3b
 8000cba:	f000 ffda 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2045      	movs	r0, #69	; 0x45
 8000cc4:	f000 ffb9 	bl	8001c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cc8:	2045      	movs	r0, #69	; 0x45
 8000cca:	f000 ffd2 	bl	8001c72 <HAL_NVIC_EnableIRQ>

}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b3f      	ldr	r3, [pc, #252]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a3e      	ldr	r2, [pc, #248]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a37      	ldr	r2, [pc, #220]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b35      	ldr	r3, [pc, #212]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a30      	ldr	r2, [pc, #192]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a29      	ldr	r2, [pc, #164]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d84:	481c      	ldr	r0, [pc, #112]	; (8000df8 <MX_GPIO_Init+0x11c>)
 8000d86:	f001 fd59 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000d90:	481a      	ldr	r0, [pc, #104]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d92:	f001 fd53 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <MX_GPIO_Init+0x11c>)
 8000db0:	f001 fb98 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_SDIO_API_Pin */
  GPIO_InitStruct.Pin = BSP_SDIO_API_Pin;
 8000db4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_SDIO_API_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <MX_GPIO_Init+0x11c>)
 8000dca:	f001 fb8b 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000de8:	f001 fb7c 	bl	80024e4 <HAL_GPIO_Init>

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_I2S_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	uint16_t *rpt;

	rCount++;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_I2S_RxCpltCallback+0x3c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_I2S_RxCpltCallback+0x3c>)
 8000e10:	6013      	str	r3, [r2, #0]
	rpt = (rcvBuf)+(rCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_I2S_RxCpltCallback+0x3c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <HAL_I2S_RxCpltCallback+0x40>)
 8000e1c:	8812      	ldrh	r2, [r2, #0]
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_I2S_RxCpltCallback+0x44>)
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
	HAL_I2S_Receive_DMA(hi2s, rpt, DMA_READ_SIZE);
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	68f9      	ldr	r1, [r7, #12]
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f002 fa8c 	bl	800334c <HAL_I2S_Receive_DMA>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000b20 	.word	0x20000b20
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000320 	.word	0x20000320

08000e48 <fwrite_wav_header>:

FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	; 0x38
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4603      	mov	r3, r0
 8000e58:	807b      	strh	r3, [r7, #2]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	707b      	strb	r3, [r7, #1]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	703b      	strb	r3, [r7, #0]
	UINT bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000e62:	2352      	movs	r3, #82	; 0x52
 8000e64:	723b      	strb	r3, [r7, #8]
 8000e66:	2349      	movs	r3, #73	; 0x49
 8000e68:	727b      	strb	r3, [r7, #9]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000e6a:	2346      	movs	r3, #70	; 0x46
 8000e6c:	72bb      	strb	r3, [r7, #10]
 8000e6e:	2346      	movs	r3, #70	; 0x46
 8000e70:	72fb      	strb	r3, [r7, #11]
	wave_header.size = (uint32_t)0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000e76:	2357      	movs	r3, #87	; 0x57
 8000e78:	743b      	strb	r3, [r7, #16]
 8000e7a:	2341      	movs	r3, #65	; 0x41
 8000e7c:	747b      	strb	r3, [r7, #17]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000e7e:	2356      	movs	r3, #86	; 0x56
 8000e80:	74bb      	strb	r3, [r7, #18]
 8000e82:	2345      	movs	r3, #69	; 0x45
 8000e84:	74fb      	strb	r3, [r7, #19]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000e86:	2366      	movs	r3, #102	; 0x66
 8000e88:	753b      	strb	r3, [r7, #20]
 8000e8a:	236d      	movs	r3, #109	; 0x6d
 8000e8c:	757b      	strb	r3, [r7, #21]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000e8e:	2374      	movs	r3, #116	; 0x74
 8000e90:	75bb      	strb	r3, [r7, #22]
 8000e92:	2320      	movs	r3, #32
 8000e94:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt_size = 16;
 8000e96:	2310      	movs	r3, #16
 8000e98:	61bb      	str	r3, [r7, #24]
	wave_header.format = 1; // PCM
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	83bb      	strh	r3, [r7, #28]
	wave_header.channels = channels; // channels
 8000e9e:	783b      	ldrb	r3, [r7, #0]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	83fb      	strh	r3, [r7, #30]
	wave_header.sampleRate=sampleRate;  // sample rate
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	623b      	str	r3, [r7, #32]
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000ea8:	887b      	ldrh	r3, [r7, #2]
 8000eaa:	787a      	ldrb	r2, [r7, #1]
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	783a      	ldrb	r2, [r7, #0]
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	da00      	bge.n	8000ebc <fwrite_wav_header+0x74>
 8000eba:	3307      	adds	r3, #7
 8000ebc:	10db      	asrs	r3, r3, #3
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.bc =  bitsPerSample*channels/8;
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	783a      	ldrb	r2, [r7, #0]
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da00      	bge.n	8000ece <fwrite_wav_header+0x86>
 8000ecc:	3307      	adds	r3, #7
 8000ece:	10db      	asrs	r3, r3, #3
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	853b      	strh	r3, [r7, #40]	; 0x28
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000ed4:	787b      	ldrb	r3, [r7, #1]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	857b      	strh	r3, [r7, #42]	; 0x2a
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000eda:	2364      	movs	r3, #100	; 0x64
 8000edc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000ee0:	2361      	movs	r3, #97	; 0x61
 8000ee2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000ee6:	2374      	movs	r3, #116	; 0x74
 8000ee8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000eec:	2361      	movs	r3, #97	; 0x61
 8000eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	wave_header.data_size = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), &bw);
 8000ef6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000efa:	f107 0108 	add.w	r1, r7, #8
 8000efe:	222c      	movs	r2, #44	; 0x2c
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f009 fbd1 	bl	800a6a8 <f_write>
 8000f06:	4603      	mov	r3, r0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3738      	adds	r7, #56	; 0x38
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <startRecord>:

void startRecord(char *filename) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000f1c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000f20:	6018      	str	r0, [r3, #0]
	uint16_t *rpt, *wpt;
	UINT bw;
	UINT writeBytes;
	UINT skipCount=125;// skip 0.5 second
 8000f22:	237d      	movs	r3, #125	; 0x7d
 8000f24:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	FIL fp;
	FRESULT res;

	writeBytes = DMA_TxRx_SIZE*2;
 8000f28:	4b5e      	ldr	r3, [pc, #376]	; (80010a4 <startRecord+0x194>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	do
	{
		res = f_open(&fp, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000f32:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000f36:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000f3a:	f107 0010 	add.w	r0, r7, #16
 8000f3e:	220a      	movs	r2, #10
 8000f40:	6819      	ldr	r1, [r3, #0]
 8000f42:	f009 f9f3 	bl	800a32c <f_open>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
	}
	while(res != FR_OK);
 8000f4c:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1ee      	bne.n	8000f32 <startRecord+0x22>
	res = fwrite_wav_header(&fp, 48000, 32, 2);
 8000f54:	f107 0010 	add.w	r0, r7, #16
 8000f58:	2302      	movs	r3, #2
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000f60:	f7ff ff72 	bl	8000e48 <fwrite_wav_header>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f70:	484d      	ldr	r0, [pc, #308]	; (80010a8 <startRecord+0x198>)
 8000f72:	f001 fc63 	bl	800283c <HAL_GPIO_WritePin>
	audio_state = STATE_RECORDING;
 8000f76:	4b4d      	ldr	r3, [pc, #308]	; (80010ac <startRecord+0x19c>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	701a      	strb	r2, [r3, #0]
	rpt = rcvBuf;
 8000f7c:	4b4c      	ldr	r3, [pc, #304]	; (80010b0 <startRecord+0x1a0>)
 8000f7e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	wpt = rpt;
 8000f82:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000f86:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	rCount=0; wCount=0;
 8000f8a:	4b4a      	ldr	r3, [pc, #296]	; (80010b4 <startRecord+0x1a4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <startRecord+0x1a8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
	HAL_I2S_Receive_DMA(&hi2s2, rpt, DMA_READ_SIZE);
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8000f9c:	4847      	ldr	r0, [pc, #284]	; (80010bc <startRecord+0x1ac>)
 8000f9e:	f002 f9d5 	bl	800334c <HAL_I2S_Receive_DMA>

	while (1)
	{
		if (wCount < rCount ) {
 8000fa2:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <startRecord+0x1a8>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <startRecord+0x1a4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d224      	bcs.n	8000ff8 <startRecord+0xe8>
			if (rCount > skipCount)
 8000fae:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <startRecord+0x1a4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d20c      	bcs.n	8000fd4 <startRecord+0xc4>
			{
				res = f_write(&fp, wpt, writeBytes, &bw);
 8000fba:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000fbe:	f107 0010 	add.w	r0, r7, #16
 8000fc2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000fc6:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8000fca:	f009 fb6d 	bl	800a6a8 <f_write>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
			}
			 wCount++;
 8000fd4:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <startRecord+0x1a8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a37      	ldr	r2, [pc, #220]	; (80010b8 <startRecord+0x1a8>)
 8000fdc:	6013      	str	r3, [r2, #0]
			 wpt = (rcvBuf)+(wCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <startRecord+0x1a8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <startRecord+0x194>)
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	fb02 f303 	mul.w	r3, r2, r3
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4a2f      	ldr	r2, [pc, #188]	; (80010b0 <startRecord+0x1a0>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		  }

		  if (audio_state == STATE_STOP || rCount > MAX_DMA_ACCESS_COUNT)
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <startRecord+0x19c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d004      	beq.n	800100a <startRecord+0xfa>
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <startRecord+0x1a4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001008:	d9cb      	bls.n	8000fa2 <startRecord+0x92>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 800100a:	482c      	ldr	r0, [pc, #176]	; (80010bc <startRecord+0x1ac>)
 800100c:	f002 fa5a 	bl	80034c4 <HAL_I2S_DMAStop>
			  break;
 8001010:	bf00      	nop
		  }
	}
	uint32_t data_len = (wCount-1) * writeBytes;
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <startRecord+0x1a8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800101c:	fb03 f202 	mul.w	r2, r3, r2
 8001020:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001024:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001028:	601a      	str	r2, [r3, #0]
	uint32_t total_len = data_len+36;
 800102a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800102e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001038:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800103c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001040:	601a      	str	r2, [r3, #0]
	f_lseek(&fp, 4);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2104      	movs	r1, #4
 8001048:	4618      	mov	r0, r3
 800104a:	f009 fd4a 	bl	800aae2 <f_lseek>
	f_write(&fp, (uint8_t*)&total_len, 4, &bw);
 800104e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001052:	f107 0108 	add.w	r1, r7, #8
 8001056:	f107 0010 	add.w	r0, r7, #16
 800105a:	2204      	movs	r2, #4
 800105c:	f009 fb24 	bl	800a6a8 <f_write>
	f_lseek(&fp, 40);
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2128      	movs	r1, #40	; 0x28
 8001066:	4618      	mov	r0, r3
 8001068:	f009 fd3b 	bl	800aae2 <f_lseek>
	f_write(&fp, (uint8_t*)&data_len, 4, &bw);
 800106c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001070:	f107 010c 	add.w	r1, r7, #12
 8001074:	f107 0010 	add.w	r0, r7, #16
 8001078:	2204      	movs	r2, #4
 800107a:	f009 fb15 	bl	800a6a8 <f_write>
	f_close(&fp);
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4618      	mov	r0, r3
 8001084:	f009 fd03 	bl	800aa8e <f_close>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <startRecord+0x198>)
 8001090:	f001 fbd4 	bl	800283c <HAL_GPIO_WritePin>
	audio_state = STATE_STOP;
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <startRecord+0x19c>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	40020000 	.word	0x40020000
 80010ac:	20000002 	.word	0x20000002
 80010b0:	20000320 	.word	0x20000320
 80010b4:	20000b20 	.word	0x20000b20
 80010b8:	20000b24 	.word	0x20000b24
 80010bc:	200000ec 	.word	0x200000ec

080010c0 <Format_SD>:

FRESULT Format_SD (void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	; 0x38
 80010c4:	af00      	add	r7, sp, #0
    DIR dir;
    static FILINFO fno;
    static FRESULT fresult;

    char *path = malloc(20*sizeof (char));
 80010c6:	2014      	movs	r0, #20
 80010c8:	f00a f930 	bl	800b32c <malloc>
 80010cc:	4603      	mov	r3, r0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80010d0:	4a28      	ldr	r2, [pc, #160]	; (8001174 <Format_SD+0xb4>)
 80010d2:	4929      	ldr	r1, [pc, #164]	; (8001178 <Format_SD+0xb8>)
 80010d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010d6:	f00a fa31 	bl	800b53c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 ff08 	bl	800aef4 <f_opendir>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <Format_SD+0xbc>)
 80010ea:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <Format_SD+0xbc>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d136      	bne.n	8001162 <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4922      	ldr	r1, [pc, #136]	; (8001180 <Format_SD+0xc0>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f009 ff94 	bl	800b026 <f_readdir>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <Format_SD+0xbc>)
 8001104:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <Format_SD+0xbc>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d125      	bne.n	800115a <Format_SD+0x9a>
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <Format_SD+0xc0>)
 8001110:	7a5b      	ldrb	r3, [r3, #9]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d021      	beq.n	800115a <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <Format_SD+0xc0>)
 8001118:	7a1b      	ldrb	r3, [r3, #8]
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	2b00      	cmp	r3, #0
 8001120:	d011      	beq.n	8001146 <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001122:	4918      	ldr	r1, [pc, #96]	; (8001184 <Format_SD+0xc4>)
 8001124:	4818      	ldr	r0, [pc, #96]	; (8001188 <Format_SD+0xc8>)
 8001126:	f7ff f873 	bl	8000210 <strcmp>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d012      	beq.n	8001156 <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 8001130:	4814      	ldr	r0, [pc, #80]	; (8001184 <Format_SD+0xc4>)
 8001132:	f009 ffb5 	bl	800b0a0 <f_unlink>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <Format_SD+0xbc>)
 800113c:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <Format_SD+0xbc>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b07      	cmp	r3, #7
 8001144:	e7d6      	b.n	80010f4 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8001146:	480f      	ldr	r0, [pc, #60]	; (8001184 <Format_SD+0xc4>)
 8001148:	f009 ffaa 	bl	800b0a0 <f_unlink>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <Format_SD+0xbc>)
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e7ce      	b.n	80010f4 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001156:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001158:	e7cc      	b.n	80010f4 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4618      	mov	r0, r3
 800115e:	f009 ff3c 	bl	800afda <f_closedir>
    }
    free(path);
 8001162:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001164:	f00a f8ea 	bl	800b33c <free>
    return fresult;
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <Format_SD+0xbc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3738      	adds	r7, #56	; 0x38
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0800bc60 	.word	0x0800bc60
 8001178:	0800bc64 	.word	0x0800bc64
 800117c:	20000b2d 	.word	0x20000b2d
 8001180:	20000b30 	.word	0x20000b30
 8001184:	20000b39 	.word	0x20000b39
 8001188:	0800bc68 	.word	0x0800bc68

0800118c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

	switch (RX_data[0])
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_UART_RxCpltCallback+0x5c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b50      	cmp	r3, #80	; 0x50
 800119a:	d00e      	beq.n	80011ba <HAL_UART_RxCpltCallback+0x2e>
 800119c:	2b50      	cmp	r3, #80	; 0x50
 800119e:	dc18      	bgt.n	80011d2 <HAL_UART_RxCpltCallback+0x46>
 80011a0:	2b47      	cmp	r3, #71	; 0x47
 80011a2:	d006      	beq.n	80011b2 <HAL_UART_RxCpltCallback+0x26>
 80011a4:	2b47      	cmp	r3, #71	; 0x47
 80011a6:	dc14      	bgt.n	80011d2 <HAL_UART_RxCpltCallback+0x46>
 80011a8:	2b2b      	cmp	r3, #43	; 0x2b
 80011aa:	d00e      	beq.n	80011ca <HAL_UART_RxCpltCallback+0x3e>
 80011ac:	2b2e      	cmp	r3, #46	; 0x2e
 80011ae:	d008      	beq.n	80011c2 <HAL_UART_RxCpltCallback+0x36>
		break;
	case '+':
		audio_state = STATE_STOP;
		break;
	default:
		break;
 80011b0:	e00f      	b.n	80011d2 <HAL_UART_RxCpltCallback+0x46>
		audio_state = STATE_START_RECORDING;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_UART_RxCpltCallback+0x60>)
 80011b4:	2203      	movs	r2, #3
 80011b6:	701a      	strb	r2, [r3, #0]
		break;
 80011b8:	e00c      	b.n	80011d4 <HAL_UART_RxCpltCallback+0x48>
		audio_state = STATE_STOP;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_UART_RxCpltCallback+0x60>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
		break;
 80011c0:	e008      	b.n	80011d4 <HAL_UART_RxCpltCallback+0x48>
		audio_state = CONNECTING;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_UART_RxCpltCallback+0x60>)
 80011c4:	2204      	movs	r2, #4
 80011c6:	701a      	strb	r2, [r3, #0]
		break;
 80011c8:	e004      	b.n	80011d4 <HAL_UART_RxCpltCallback+0x48>
		audio_state = STATE_STOP;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_UART_RxCpltCallback+0x60>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
		break;
 80011d0:	e000      	b.n	80011d4 <HAL_UART_RxCpltCallback+0x48>
		break;
 80011d2:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *) RX_data, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	4904      	ldr	r1, [pc, #16]	; (80011e8 <HAL_UART_RxCpltCallback+0x5c>)
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_UART_RxCpltCallback+0x64>)
 80011da:	f005 fbd1 	bl	8006980 <HAL_UART_Receive_IT>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000b2c 	.word	0x20000b2c
 80011ec:	20000002 	.word	0x20000002
 80011f0:	200002d8 	.word	0x200002d8

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <HAL_MspInit+0x4c>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_MspInit+0x4c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_MspInit+0x4c>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_CRC_MspInit+0x3c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10d      	bne.n	800127e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_CRC_MspInit+0x40>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <HAL_CRC_MspInit+0x40>)
 800126c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_CRC_MspInit+0x40>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023000 	.word	0x40023000
 8001290:	40023800 	.word	0x40023800

08001294 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a19      	ldr	r2, [pc, #100]	; (8001318 <HAL_I2C_MspInit+0x84>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d12b      	bne.n	800130e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_I2C_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_I2C_MspInit+0x88>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_I2C_MspInit+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d2:	23c0      	movs	r3, #192	; 0xc0
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d6:	2312      	movs	r3, #18
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e2:	2304      	movs	r3, #4
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <HAL_I2C_MspInit+0x8c>)
 80012ee:	f001 f8f9 	bl	80024e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_I2C_MspInit+0x88>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <HAL_I2C_MspInit+0x88>)
 80012fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_I2C_MspInit+0x88>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40005400 	.word	0x40005400
 800131c:	40023800 	.word	0x40023800
 8001320:	40020400 	.word	0x40020400

08001324 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0a2      	sub	sp, #136	; 0x88
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	225c      	movs	r2, #92	; 0x5c
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f00a f801 	bl	800b34c <memset>
  if(hi2s->Instance==SPI2)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a50      	ldr	r2, [pc, #320]	; (8001490 <HAL_I2S_MspInit+0x16c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	f040 8098 	bne.w	8001486 <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800135a:	2332      	movs	r3, #50	; 0x32
 800135c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 800135e:	2302      	movs	r3, #2
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001362:	2308      	movs	r3, #8
 8001364:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001366:	2302      	movs	r3, #2
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001372:	2300      	movs	r3, #0
 8001374:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fc5c 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8001386:	f7ff ff35 	bl	80011f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_I2S_MspInit+0x170>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a40      	ldr	r2, [pc, #256]	; (8001494 <HAL_I2S_MspInit+0x170>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <HAL_I2S_MspInit+0x170>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <HAL_I2S_MspInit+0x170>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a39      	ldr	r2, [pc, #228]	; (8001494 <HAL_I2S_MspInit+0x170>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <HAL_I2S_MspInit+0x170>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <HAL_I2S_MspInit+0x170>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_I2S_MspInit+0x170>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HAL_I2S_MspInit+0x170>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80013de:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80013e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013f2:	2305      	movs	r3, #5
 80013f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013fc:	4619      	mov	r1, r3
 80013fe:	4826      	ldr	r0, [pc, #152]	; (8001498 <HAL_I2S_MspInit+0x174>)
 8001400:	f001 f870 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001416:	2305      	movs	r3, #5
 8001418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001420:	4619      	mov	r1, r3
 8001422:	481e      	ldr	r0, [pc, #120]	; (800149c <HAL_I2S_MspInit+0x178>)
 8001424:	f001 f85e 	bl	80024e4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <HAL_I2S_MspInit+0x180>)
 800142c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 8001442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001446:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 800144a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 8001452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001456:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 800146c:	f000 fc38 	bl	8001ce0 <HAL_DMA_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8001476:	f7ff febd 	bl	80011f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 800147e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_I2S_MspInit+0x17c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3788      	adds	r7, #136	; 0x88
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40003800 	.word	0x40003800
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	20000134 	.word	0x20000134
 80014a4:	40026058 	.word	0x40026058

080014a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0a2      	sub	sp, #136	; 0x88
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	225c      	movs	r2, #92	; 0x5c
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f009 ff3f 	bl	800b34c <memset>
  if(hsd->Instance==SDIO)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a7d      	ldr	r2, [pc, #500]	; (80016c8 <HAL_SD_MspInit+0x220>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	f040 80f3 	bne.w	80016c0 <HAL_SD_MspInit+0x218>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80014da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80014e0:	2300      	movs	r3, #0
 80014e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80014e4:	2300      	movs	r3, #0
 80014e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fba3 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80014f8:	f7ff fe7c 	bl	80011f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	4b72      	ldr	r3, [pc, #456]	; (80016cc <HAL_SD_MspInit+0x224>)
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001504:	4a71      	ldr	r2, [pc, #452]	; (80016cc <HAL_SD_MspInit+0x224>)
 8001506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800150a:	6453      	str	r3, [r2, #68]	; 0x44
 800150c:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <HAL_SD_MspInit+0x224>)
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	4b6b      	ldr	r3, [pc, #428]	; (80016cc <HAL_SD_MspInit+0x224>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4a6a      	ldr	r2, [pc, #424]	; (80016cc <HAL_SD_MspInit+0x224>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6313      	str	r3, [r2, #48]	; 0x30
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <HAL_SD_MspInit+0x224>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	4b64      	ldr	r3, [pc, #400]	; (80016cc <HAL_SD_MspInit+0x224>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4a63      	ldr	r2, [pc, #396]	; (80016cc <HAL_SD_MspInit+0x224>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	6313      	str	r3, [r2, #48]	; 0x30
 8001544:	4b61      	ldr	r3, [pc, #388]	; (80016cc <HAL_SD_MspInit+0x224>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001550:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001554:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155a:	2301      	movs	r3, #1
 800155c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001564:	230c      	movs	r3, #12
 8001566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800156e:	4619      	mov	r1, r3
 8001570:	4857      	ldr	r0, [pc, #348]	; (80016d0 <HAL_SD_MspInit+0x228>)
 8001572:	f000 ffb7 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800158a:	230c      	movs	r3, #12
 800158c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001594:	4619      	mov	r1, r3
 8001596:	484e      	ldr	r0, [pc, #312]	; (80016d0 <HAL_SD_MspInit+0x228>)
 8001598:	f000 ffa4 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800159c:	2304      	movs	r3, #4
 800159e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015ae:	230c      	movs	r3, #12
 80015b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015b8:	4619      	mov	r1, r3
 80015ba:	4846      	ldr	r0, [pc, #280]	; (80016d4 <HAL_SD_MspInit+0x22c>)
 80015bc:	f000 ff92 	bl	80024e4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80015c0:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <HAL_SD_MspInit+0x230>)
 80015c2:	4a46      	ldr	r2, [pc, #280]	; (80016dc <HAL_SD_MspInit+0x234>)
 80015c4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80015c6:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <HAL_SD_MspInit+0x230>)
 80015c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015cc:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ce:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <HAL_SD_MspInit+0x230>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <HAL_SD_MspInit+0x230>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_SD_MspInit+0x230>)
 80015dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_SD_MspInit+0x230>)
 80015e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015ea:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <HAL_SD_MspInit+0x230>)
 80015ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_SD_MspInit+0x230>)
 80015f4:	2220      	movs	r2, #32
 80015f6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015f8:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <HAL_SD_MspInit+0x230>)
 80015fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015fe:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_SD_MspInit+0x230>)
 8001602:	2204      	movs	r2, #4
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_SD_MspInit+0x230>)
 8001608:	2203      	movs	r2, #3
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <HAL_SD_MspInit+0x230>)
 800160e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_SD_MspInit+0x230>)
 8001616:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800161a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800161c:	482e      	ldr	r0, [pc, #184]	; (80016d8 <HAL_SD_MspInit+0x230>)
 800161e:	f000 fb5f 	bl	8001ce0 <HAL_DMA_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_SD_MspInit+0x184>
    {
      Error_Handler();
 8001628:	f7ff fde4 	bl	80011f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a2a      	ldr	r2, [pc, #168]	; (80016d8 <HAL_SD_MspInit+0x230>)
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
 8001632:	4a29      	ldr	r2, [pc, #164]	; (80016d8 <HAL_SD_MspInit+0x230>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <HAL_SD_MspInit+0x238>)
 800163a:	4a2a      	ldr	r2, [pc, #168]	; (80016e4 <HAL_SD_MspInit+0x23c>)
 800163c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <HAL_SD_MspInit+0x238>)
 8001640:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001644:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_SD_MspInit+0x238>)
 8001648:	2240      	movs	r2, #64	; 0x40
 800164a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_SD_MspInit+0x238>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_SD_MspInit+0x238>)
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_SD_MspInit+0x238>)
 800165c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001660:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <HAL_SD_MspInit+0x238>)
 8001664:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001668:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_SD_MspInit+0x238>)
 800166c:	2220      	movs	r2, #32
 800166e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_SD_MspInit+0x238>)
 8001672:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001676:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_SD_MspInit+0x238>)
 800167a:	2204      	movs	r2, #4
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_SD_MspInit+0x238>)
 8001680:	2203      	movs	r2, #3
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_SD_MspInit+0x238>)
 8001686:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_SD_MspInit+0x238>)
 800168e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001694:	4812      	ldr	r0, [pc, #72]	; (80016e0 <HAL_SD_MspInit+0x238>)
 8001696:	f000 fb23 	bl	8001ce0 <HAL_DMA_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_SD_MspInit+0x1fc>
    {
      Error_Handler();
 80016a0:	f7ff fda8 	bl	80011f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_SD_MspInit+0x238>)
 80016a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016aa:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_SD_MspInit+0x238>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2031      	movs	r0, #49	; 0x31
 80016b6:	f000 fac0 	bl	8001c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80016ba:	2031      	movs	r0, #49	; 0x31
 80016bc:	f000 fad9 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	3788      	adds	r7, #136	; 0x88
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40012c00 	.word	0x40012c00
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40020c00 	.word	0x40020c00
 80016d8:	20000218 	.word	0x20000218
 80016dc:	40026458 	.word	0x40026458
 80016e0:	20000278 	.word	0x20000278
 80016e4:	400264a0 	.word	0x400264a0

080016e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a1d      	ldr	r2, [pc, #116]	; (800177c <HAL_UART_MspInit+0x94>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d133      	bne.n	8001772 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_UART_MspInit+0x98>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <HAL_UART_MspInit+0x98>)
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_UART_MspInit+0x98>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_UART_MspInit+0x98>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_UART_MspInit+0x98>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_UART_MspInit+0x98>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001742:	230c      	movs	r3, #12
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001752:	2307      	movs	r3, #7
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <HAL_UART_MspInit+0x9c>)
 800175e:	f000 fec1 	bl	80024e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2026      	movs	r0, #38	; 0x26
 8001768:	f000 fa67 	bl	8001c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800176c:	2026      	movs	r0, #38	; 0x26
 800176e:	f000 fa80 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	; 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40004400 	.word	0x40004400
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d4:	f000 f912 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Stream3_IRQHandler+0x10>)
 80017e2:	f000 fc15 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000134 	.word	0x20000134

080017f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <USART2_IRQHandler+0x10>)
 80017f6:	f005 f8f3 	bl	80069e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002d8 	.word	0x200002d8

08001804 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <SDIO_IRQHandler+0x10>)
 800180a:	f004 f861 	bl	80058d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000194 	.word	0x20000194

08001818 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <DMA2_Stream3_IRQHandler+0x10>)
 800181e:	f000 fbf7 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000218 	.word	0x20000218

0800182c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA2_Stream6_IRQHandler+0x10>)
 8001832:	f000 fbed 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000278 	.word	0x20000278

08001840 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800184a:	f009 fd31 	bl	800b2b0 <__errno>
 800184e:	4603      	mov	r3, r0
 8001850:	2216      	movs	r2, #22
 8001852:	601a      	str	r2, [r3, #0]
	return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_exit>:

void _exit (int status)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ffe7 	bl	8001840 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001872:	e7fe      	b.n	8001872 <_exit+0x12>

08001874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a4:	f009 fd04 	bl	800b2b0 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20020000 	.word	0x20020000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	20000b48 	.word	0x20000b48
 80018dc:	20000dd0 	.word	0x20000dd0

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800193c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800190a:	490e      	ldr	r1, [pc, #56]	; (8001944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800190c:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001920:	4c0b      	ldr	r4, [pc, #44]	; (8001950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800192e:	f7ff ffd7 	bl	80018e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001932:	f009 fcd7 	bl	800b2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7fe ffa1 	bl	800087c <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800193c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001948:	0800bdb4 	.word	0x0800bdb4
  ldr r2, =_sbss
 800194c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001950:	20000dcc 	.word	0x20000dcc

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>
	...

08001958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <HAL_Init+0x40>)
 8001962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_Init+0x40>)
 800196e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_Init+0x40>)
 800197a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f94f 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	200f      	movs	r0, #15
 8001988:	f000 f808 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198c:	f7ff fc38 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x54>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f967 	bl	8001c8e <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d8:	f000 f92f 	bl	8001c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_InitTick+0x5c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000004 	.word	0x20000004
 80019f4:	2000000c 	.word	0x2000000c
 80019f8:	20000008 	.word	0x20000008

080019fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x20>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_IncTick+0x24>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	20000b4c 	.word	0x20000b4c

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000b4c 	.word	0x20000b4c

08001a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff ffee 	bl	8001a24 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a54:	d005      	beq.n	8001a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_Delay+0x44>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a62:	bf00      	nop
 8001a64:	f7ff ffde 	bl	8001a24 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8f7      	bhi.n	8001a64 <HAL_Delay+0x28>
  {
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000000c 	.word	0x2000000c

08001a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0307 	and.w	r3, r3, #7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db0b      	blt.n	8001b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	4907      	ldr	r1, [pc, #28]	; (8001b20 <__NVIC_EnableIRQ+0x38>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	2001      	movs	r0, #1
 8001b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000e100 	.word	0xe000e100

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db0a      	blt.n	8001b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	490c      	ldr	r1, [pc, #48]	; (8001b70 <__NVIC_SetPriority+0x4c>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b4c:	e00a      	b.n	8001b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4908      	ldr	r1, [pc, #32]	; (8001b74 <__NVIC_SetPriority+0x50>)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	3b04      	subs	r3, #4
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	761a      	strb	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000e100 	.word	0xe000e100
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f1c3 0307 	rsb	r3, r3, #7
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf28      	it	cs
 8001b96:	2304      	movcs	r3, #4
 8001b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d902      	bls.n	8001ba8 <NVIC_EncodePriority+0x30>
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3b03      	subs	r3, #3
 8001ba6:	e000      	b.n	8001baa <NVIC_EncodePriority+0x32>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	4313      	orrs	r3, r2
         );
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	; 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf0:	d301      	bcc.n	8001bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00f      	b.n	8001c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <SysTick_Config+0x40>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfe:	210f      	movs	r1, #15
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c04:	f7ff ff8e 	bl	8001b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <SysTick_Config+0x40>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SysTick_Config+0x40>)
 8001c10:	2207      	movs	r2, #7
 8001c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	e000e010 	.word	0xe000e010

08001c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff29 	bl	8001a84 <__NVIC_SetPriorityGrouping>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4c:	f7ff ff3e 	bl	8001acc <__NVIC_GetPriorityGrouping>
 8001c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f7ff ff8e 	bl	8001b78 <NVIC_EncodePriority>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff5d 	bl	8001b24 <__NVIC_SetPriority>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff31 	bl	8001ae8 <__NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffa2 	bl	8001be0 <SysTick_Config>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e00e      	b.n	8001cd6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	795b      	ldrb	r3, [r3, #5]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fac1 	bl	8001250 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff fe9a 	bl	8001a24 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e099      	b.n	8001e30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1c:	e00f      	b.n	8001d3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d1e:	f7ff fe81 	bl	8001a24 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d908      	bls.n	8001d3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2203      	movs	r2, #3
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e078      	b.n	8001e30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e8      	bne.n	8001d1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_DMA_Init+0x158>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d107      	bne.n	8001da8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	4313      	orrs	r3, r2
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f023 0307 	bic.w	r3, r3, #7
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d117      	bne.n	8001e02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00e      	beq.n	8001e02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fb01 	bl	80023ec <DMA_CheckFifoParam>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e016      	b.n	8001e30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fab8 	bl	8002380 <DMA_CalcBaseAndBitshift>
 8001e10:	4603      	mov	r3, r0
 8001e12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	223f      	movs	r2, #63	; 0x3f
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	f010803f 	.word	0xf010803f

08001e3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_Start_IT+0x26>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e040      	b.n	8001ee4 <HAL_DMA_Start_IT+0xa8>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d12f      	bne.n	8001ed6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fa4a 	bl	8002324 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	223f      	movs	r2, #63	; 0x3f
 8001e96:	409a      	lsls	r2, r3
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0216 	orr.w	r2, r2, #22
 8001eaa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0208 	orr.w	r2, r2, #8
 8001ec2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	e005      	b.n	8001ee2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001efa:	f7ff fd93 	bl	8001a24 <HAL_GetTick>
 8001efe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d008      	beq.n	8001f1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e052      	b.n	8001fc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0216 	bic.w	r2, r2, #22
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_DMA_Abort+0x62>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0208 	bic.w	r2, r2, #8
 8001f5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6e:	e013      	b.n	8001f98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f70:	f7ff fd58 	bl	8001a24 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d90c      	bls.n	8001f98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2203      	movs	r2, #3
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e015      	b.n	8001fc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1e4      	bne.n	8001f70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	223f      	movs	r2, #63	; 0x3f
 8001fac:	409a      	lsls	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d004      	beq.n	8001fea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00c      	b.n	8002004 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2205      	movs	r2, #5
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800201c:	4b8e      	ldr	r3, [pc, #568]	; (8002258 <HAL_DMA_IRQHandler+0x248>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a8e      	ldr	r2, [pc, #568]	; (800225c <HAL_DMA_IRQHandler+0x24c>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0a9b      	lsrs	r3, r3, #10
 8002028:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2208      	movs	r2, #8
 800203c:	409a      	lsls	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01a      	beq.n	800207c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0204 	bic.w	r2, r2, #4
 8002062:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2208      	movs	r2, #8
 800206a:	409a      	lsls	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	2201      	movs	r2, #1
 8002082:	409a      	lsls	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d012      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	2201      	movs	r2, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	2204      	movs	r2, #4
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d012      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00b      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	2204      	movs	r2, #4
 80020d6:	409a      	lsls	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	f043 0204 	orr.w	r2, r3, #4
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	2210      	movs	r2, #16
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d043      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d03c      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2210      	movs	r2, #16
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d018      	beq.n	8002152 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d108      	bne.n	8002140 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d024      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
 800213e:	e01f      	b.n	8002180 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01b      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4798      	blx	r3
 8002150:	e016      	b.n	8002180 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0208 	bic.w	r2, r2, #8
 800216e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	2220      	movs	r2, #32
 8002186:	409a      	lsls	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 808f 	beq.w	80022b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8087 	beq.w	80022b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	2220      	movs	r2, #32
 80021a8:	409a      	lsls	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d136      	bne.n	8002228 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0216 	bic.w	r2, r2, #22
 80021c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_DMA_IRQHandler+0x1da>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0208 	bic.w	r2, r2, #8
 80021f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	223f      	movs	r2, #63	; 0x3f
 8002200:	409a      	lsls	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221a:	2b00      	cmp	r3, #0
 800221c:	d07e      	beq.n	800231c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4798      	blx	r3
        }
        return;
 8002226:	e079      	b.n	800231c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01d      	beq.n	8002272 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10d      	bne.n	8002260 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	2b00      	cmp	r3, #0
 800224a:	d031      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
 8002254:	e02c      	b.n	80022b0 <HAL_DMA_IRQHandler+0x2a0>
 8002256:	bf00      	nop
 8002258:	20000004 	.word	0x20000004
 800225c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
 8002270:	e01e      	b.n	80022b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10f      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0210 	bic.w	r2, r2, #16
 800228e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d032      	beq.n	800231e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d022      	beq.n	800230a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2205      	movs	r2, #5
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	3301      	adds	r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d307      	bcc.n	80022f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f2      	bne.n	80022dc <HAL_DMA_IRQHandler+0x2cc>
 80022f6:	e000      	b.n	80022fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
 800231a:	e000      	b.n	800231e <HAL_DMA_IRQHandler+0x30e>
        return;
 800231c:	bf00      	nop
    }
  }
}
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002340:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d108      	bne.n	8002364 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002362:	e007      	b.n	8002374 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3b10      	subs	r3, #16
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <DMA_CalcBaseAndBitshift+0x68>)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d909      	bls.n	80023c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	1d1a      	adds	r2, r3, #4
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	659a      	str	r2, [r3, #88]	; 0x58
 80023c0:	e007      	b.n	80023d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ca:	f023 0303 	bic.w	r3, r3, #3
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	aaaaaaab 	.word	0xaaaaaaab
 80023e8:	0800bcd0 	.word	0x0800bcd0

080023ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d11f      	bne.n	8002446 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d856      	bhi.n	80024ba <DMA_CheckFifoParam+0xce>
 800240c:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <DMA_CheckFifoParam+0x28>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	08002425 	.word	0x08002425
 8002418:	08002437 	.word	0x08002437
 800241c:	08002425 	.word	0x08002425
 8002420:	080024bb 	.word	0x080024bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d046      	beq.n	80024be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002434:	e043      	b.n	80024be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800243e:	d140      	bne.n	80024c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002444:	e03d      	b.n	80024c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800244e:	d121      	bne.n	8002494 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d837      	bhi.n	80024c6 <DMA_CheckFifoParam+0xda>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <DMA_CheckFifoParam+0x70>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	0800246d 	.word	0x0800246d
 8002460:	08002473 	.word	0x08002473
 8002464:	0800246d 	.word	0x0800246d
 8002468:	08002485 	.word	0x08002485
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e030      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d025      	beq.n	80024ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002482:	e022      	b.n	80024ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800248c:	d11f      	bne.n	80024ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002492:	e01c      	b.n	80024ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d903      	bls.n	80024a2 <DMA_CheckFifoParam+0xb6>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d003      	beq.n	80024a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024a0:	e018      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
      break;
 80024a6:	e015      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00e      	beq.n	80024d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e00b      	b.n	80024d2 <DMA_CheckFifoParam+0xe6>
      break;
 80024ba:	bf00      	nop
 80024bc:	e00a      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024be:	bf00      	nop
 80024c0:	e008      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024c2:	bf00      	nop
 80024c4:	e006      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
 80024c8:	e004      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e002      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80024ce:	bf00      	nop
 80024d0:	e000      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
    }
  } 
  
  return status; 
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e165      	b.n	80027cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002500:	2201      	movs	r2, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	429a      	cmp	r2, r3
 800251a:	f040 8154 	bne.w	80027c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d005      	beq.n	8002536 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002532:	2b02      	cmp	r3, #2
 8002534:	d130      	bne.n	8002598 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 0201 	and.w	r2, r3, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d017      	beq.n	80025d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d123      	bne.n	8002628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	220f      	movs	r2, #15
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	08da      	lsrs	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3208      	adds	r2, #8
 8002622:	69b9      	ldr	r1, [r7, #24]
 8002624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	2203      	movs	r2, #3
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0203 	and.w	r2, r3, #3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80ae 	beq.w	80027c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b5d      	ldr	r3, [pc, #372]	; (80027e4 <HAL_GPIO_Init+0x300>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a5c      	ldr	r2, [pc, #368]	; (80027e4 <HAL_GPIO_Init+0x300>)
 8002674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <HAL_GPIO_Init+0x300>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002686:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4f      	ldr	r2, [pc, #316]	; (80027ec <HAL_GPIO_Init+0x308>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d025      	beq.n	80026fe <HAL_GPIO_Init+0x21a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4e      	ldr	r2, [pc, #312]	; (80027f0 <HAL_GPIO_Init+0x30c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01f      	beq.n	80026fa <HAL_GPIO_Init+0x216>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4d      	ldr	r2, [pc, #308]	; (80027f4 <HAL_GPIO_Init+0x310>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d019      	beq.n	80026f6 <HAL_GPIO_Init+0x212>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <HAL_GPIO_Init+0x314>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0x20e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4b      	ldr	r2, [pc, #300]	; (80027fc <HAL_GPIO_Init+0x318>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00d      	beq.n	80026ee <HAL_GPIO_Init+0x20a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_GPIO_Init+0x31c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <HAL_GPIO_Init+0x206>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a49      	ldr	r2, [pc, #292]	; (8002804 <HAL_GPIO_Init+0x320>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_GPIO_Init+0x202>
 80026e2:	2306      	movs	r3, #6
 80026e4:	e00c      	b.n	8002700 <HAL_GPIO_Init+0x21c>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00a      	b.n	8002700 <HAL_GPIO_Init+0x21c>
 80026ea:	2305      	movs	r3, #5
 80026ec:	e008      	b.n	8002700 <HAL_GPIO_Init+0x21c>
 80026ee:	2304      	movs	r3, #4
 80026f0:	e006      	b.n	8002700 <HAL_GPIO_Init+0x21c>
 80026f2:	2303      	movs	r3, #3
 80026f4:	e004      	b.n	8002700 <HAL_GPIO_Init+0x21c>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e002      	b.n	8002700 <HAL_GPIO_Init+0x21c>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_GPIO_Init+0x21c>
 80026fe:	2300      	movs	r3, #0
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	f002 0203 	and.w	r2, r2, #3
 8002706:	0092      	lsls	r2, r2, #2
 8002708:	4093      	lsls	r3, r2
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002710:	4935      	ldr	r1, [pc, #212]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	089b      	lsrs	r3, r3, #2
 8002716:	3302      	adds	r3, #2
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271e:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_GPIO_Init+0x324>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002742:	4a31      	ldr	r2, [pc, #196]	; (8002808 <HAL_GPIO_Init+0x324>)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002748:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <HAL_GPIO_Init+0x324>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800276c:	4a26      	ldr	r2, [pc, #152]	; (8002808 <HAL_GPIO_Init+0x324>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002772:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_GPIO_Init+0x324>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_GPIO_Init+0x324>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <HAL_GPIO_Init+0x324>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_GPIO_Init+0x324>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3301      	adds	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2b0f      	cmp	r3, #15
 80027d0:	f67f ae96 	bls.w	8002500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40013800 	.word	0x40013800
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40020400 	.word	0x40020400
 80027f4:	40020800 	.word	0x40020800
 80027f8:	40020c00 	.word	0x40020c00
 80027fc:	40021000 	.word	0x40021000
 8002800:	40021400 	.word	0x40021400
 8002804:	40021800 	.word	0x40021800
 8002808:	40013c00 	.word	0x40013c00

0800280c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
 8002828:	e001      	b.n	800282e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
 8002848:	4613      	mov	r3, r2
 800284a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800284c:	787b      	ldrb	r3, [r7, #1]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002858:	e003      	b.n	8002862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285a:	887b      	ldrh	r3, [r7, #2]
 800285c:	041a      	lsls	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	619a      	str	r2, [r3, #24]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002880:	887a      	ldrh	r2, [r7, #2]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	041a      	lsls	r2, r3, #16
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	43d9      	mvns	r1, r3
 800288c:	887b      	ldrh	r3, [r7, #2]
 800288e:	400b      	ands	r3, r1
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	619a      	str	r2, [r3, #24]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e12b      	b.n	8002b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fce2 	bl	8001294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002908:	f001 f96e 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 800290c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a81      	ldr	r2, [pc, #516]	; (8002b18 <HAL_I2C_Init+0x274>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d807      	bhi.n	8002928 <HAL_I2C_Init+0x84>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a80      	ldr	r2, [pc, #512]	; (8002b1c <HAL_I2C_Init+0x278>)
 800291c:	4293      	cmp	r3, r2
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e006      	b.n	8002936 <HAL_I2C_Init+0x92>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a7d      	ldr	r2, [pc, #500]	; (8002b20 <HAL_I2C_Init+0x27c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	bf94      	ite	ls
 8002930:	2301      	movls	r3, #1
 8002932:	2300      	movhi	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0e7      	b.n	8002b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a78      	ldr	r2, [pc, #480]	; (8002b24 <HAL_I2C_Init+0x280>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0c9b      	lsrs	r3, r3, #18
 8002948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a6a      	ldr	r2, [pc, #424]	; (8002b18 <HAL_I2C_Init+0x274>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d802      	bhi.n	8002978 <HAL_I2C_Init+0xd4>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3301      	adds	r3, #1
 8002976:	e009      	b.n	800298c <HAL_I2C_Init+0xe8>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	4a69      	ldr	r2, [pc, #420]	; (8002b28 <HAL_I2C_Init+0x284>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	3301      	adds	r3, #1
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800299e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	495c      	ldr	r1, [pc, #368]	; (8002b18 <HAL_I2C_Init+0x274>)
 80029a8:	428b      	cmp	r3, r1
 80029aa:	d819      	bhi.n	80029e0 <HAL_I2C_Init+0x13c>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e59      	subs	r1, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ba:	1c59      	adds	r1, r3, #1
 80029bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029c0:	400b      	ands	r3, r1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_I2C_Init+0x138>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e59      	subs	r1, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029da:	e051      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 80029dc:	2304      	movs	r3, #4
 80029de:	e04f      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d111      	bne.n	8002a0c <HAL_I2C_Init+0x168>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e012      	b.n	8002a32 <HAL_I2C_Init+0x18e>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Init+0x196>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e022      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10e      	bne.n	8002a60 <HAL_I2C_Init+0x1bc>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1e58      	subs	r0, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	440b      	add	r3, r1
 8002a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5e:	e00f      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1e58      	subs	r0, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	0099      	lsls	r1, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	6809      	ldr	r1, [r1, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6911      	ldr	r1, [r2, #16]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68d2      	ldr	r2, [r2, #12]
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	000186a0 	.word	0x000186a0
 8002b1c:	001e847f 	.word	0x001e847f
 8002b20:	003d08ff 	.word	0x003d08ff
 8002b24:	431bde83 	.word	0x431bde83
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	4608      	mov	r0, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	817b      	strh	r3, [r7, #10]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	813b      	strh	r3, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b46:	f7fe ff6d 	bl	8001a24 <HAL_GetTick>
 8002b4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	f040 80d9 	bne.w	8002d0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2319      	movs	r3, #25
 8002b60:	2201      	movs	r2, #1
 8002b62:	496d      	ldr	r1, [pc, #436]	; (8002d18 <HAL_I2C_Mem_Write+0x1ec>)
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f971 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
 8002b72:	e0cc      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_I2C_Mem_Write+0x56>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e0c5      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d007      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2221      	movs	r2, #33	; 0x21
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2240      	movs	r2, #64	; 0x40
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a4d      	ldr	r2, [pc, #308]	; (8002d1c <HAL_I2C_Mem_Write+0x1f0>)
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bea:	88f8      	ldrh	r0, [r7, #6]
 8002bec:	893a      	ldrh	r2, [r7, #8]
 8002bee:	8979      	ldrh	r1, [r7, #10]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f890 	bl	8002d20 <I2C_RequestMemoryWrite>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d052      	beq.n	8002cac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e081      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f9f2 	bl	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d107      	bne.n	8002c32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e06b      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d11b      	bne.n	8002cac <HAL_I2C_Mem_Write+0x180>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d017      	beq.n	8002cac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1aa      	bne.n	8002c0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f9de 	bl	800307a <I2C_WaitOnBTFFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d107      	bne.n	8002cdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e016      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	00100002 	.word	0x00100002
 8002d1c:	ffff0000 	.word	0xffff0000

08002d20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	817b      	strh	r3, [r7, #10]
 8002d32:	460b      	mov	r3, r1
 8002d34:	813b      	strh	r3, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f878 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00d      	beq.n	8002d7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d70:	d103      	bne.n	8002d7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e05f      	b.n	8002e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	492d      	ldr	r1, [pc, #180]	; (8002e48 <I2C_RequestMemoryWrite+0x128>)
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f8b0 	bl	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e04c      	b.n	8002e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f91a 	bl	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d107      	bne.n	8002de2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e02b      	b.n	8002e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d105      	bne.n	8002df8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dec:	893b      	ldrh	r3, [r7, #8]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	611a      	str	r2, [r3, #16]
 8002df6:	e021      	b.n	8002e3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002df8:	893b      	ldrh	r3, [r7, #8]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f8f4 	bl	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d107      	bne.n	8002e2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e005      	b.n	8002e3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e32:	893b      	ldrh	r3, [r7, #8]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	00010002 	.word	0x00010002

08002e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e5c:	e025      	b.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e64:	d021      	beq.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fddd 	bl	8001a24 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d116      	bne.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e023      	b.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10d      	bne.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	e00c      	b.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4013      	ands	r3, r2
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d0b6      	beq.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f08:	e051      	b.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f18:	d123      	bne.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f043 0204 	orr.w	r2, r3, #4
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e046      	b.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f68:	d021      	beq.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fe fd5b 	bl	8001a24 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e020      	b.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10c      	bne.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e00b      	b.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	43da      	mvns	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d18d      	bne.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003004:	e02d      	b.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f878 	bl	80030fc <I2C_IsAcknowledgeFailed>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e02d      	b.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800301c:	d021      	beq.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301e:	f7fe fd01 	bl	8001a24 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d116      	bne.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e007      	b.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	2b80      	cmp	r3, #128	; 0x80
 800306e:	d1ca      	bne.n	8003006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003086:	e02d      	b.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f837 	bl	80030fc <I2C_IsAcknowledgeFailed>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e02d      	b.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800309e:	d021      	beq.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a0:	f7fe fcc0 	bl	8001a24 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e007      	b.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d1ca      	bne.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d11b      	bne.n	800314c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800311c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f043 0204 	orr.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0e1      	b.n	8003332 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a6d      	ldr	r2, [pc, #436]	; (800333c <HAL_I2S_Init+0x1e0>)
 8003186:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7fe f8cb 	bl	8001324 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031a4:	f023 030f 	bic.w	r3, r3, #15
 80031a8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2202      	movs	r2, #2
 80031b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d06f      	beq.n	800329a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031c2:	2310      	movs	r3, #16
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	e001      	b.n	80031cc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031c8:	2320      	movs	r3, #32
 80031ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d802      	bhi.n	80031da <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a58      	ldr	r2, [pc, #352]	; (8003340 <HAL_I2S_Init+0x1e4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_I2S_Init+0x92>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a56      	ldr	r2, [pc, #344]	; (8003344 <HAL_I2S_Init+0x1e8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d104      	bne.n	80031f8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80031ee:	2001      	movs	r0, #1
 80031f0:	f001 f84c 	bl	800428c <HAL_RCCEx_GetPeriphCLKFreq>
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	e003      	b.n	8003200 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80031f8:	2002      	movs	r0, #2
 80031fa:	f001 f847 	bl	800428c <HAL_RCCEx_GetPeriphCLKFreq>
 80031fe:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d125      	bne.n	8003256 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	fbb2 f2f3 	udiv	r2, r2, r3
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	461a      	mov	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	3305      	adds	r3, #5
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e01f      	b.n	8003274 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	fbb2 f2f3 	udiv	r2, r2, r3
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	3305      	adds	r3, #5
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	e00e      	b.n	8003274 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fbb2 f2f3 	udiv	r2, r2, r3
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	461a      	mov	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	3305      	adds	r3, #5
 8003272:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4a34      	ldr	r2, [pc, #208]	; (8003348 <HAL_I2S_Init+0x1ec>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	08db      	lsrs	r3, r3, #3
 800327e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	e003      	b.n	80032a2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800329a:	2302      	movs	r3, #2
 800329c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d902      	bls.n	80032ae <HAL_I2S_Init+0x152>
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2bff      	cmp	r3, #255	; 0xff
 80032ac:	d907      	bls.n	80032be <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f043 0210 	orr.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e039      	b.n	8003332 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	ea42 0103 	orr.w	r1, r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032dc:	f023 030f 	bic.w	r3, r3, #15
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6851      	ldr	r1, [r2, #4]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6892      	ldr	r2, [r2, #8]
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	4311      	orrs	r1, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6992      	ldr	r2, [r2, #24]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003300:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b30      	cmp	r3, #48	; 0x30
 8003308:	d003      	beq.n	8003312 <HAL_I2S_Init+0x1b6>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2bb0      	cmp	r3, #176	; 0xb0
 8003310:	d107      	bne.n	8003322 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003320:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	080037dd 	.word	0x080037dd
 8003340:	40003800 	.word	0x40003800
 8003344:	40003c00 	.word	0x40003c00
 8003348:	cccccccd 	.word	0xcccccccd

0800334c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	4613      	mov	r3, r2
 8003358:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_I2S_Receive_DMA+0x1a>
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0a1      	b.n	80034ae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_I2S_Receive_DMA+0x2e>
 8003376:	2302      	movs	r3, #2
 8003378:	e099      	b.n	80034ae <HAL_I2S_Receive_DMA+0x162>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d005      	beq.n	800339a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
 8003398:	e089      	b.n	80034ae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2204      	movs	r2, #4
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d002      	beq.n	80033c6 <HAL_I2S_Receive_DMA+0x7a>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d10a      	bne.n	80033dc <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	865a      	strh	r2, [r3, #50]	; 0x32
 80033da:	e005      	b.n	80033e8 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	4a32      	ldr	r2, [pc, #200]	; (80034b8 <HAL_I2S_Receive_DMA+0x16c>)
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	4a31      	ldr	r2, [pc, #196]	; (80034bc <HAL_I2S_Receive_DMA+0x170>)
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	4a30      	ldr	r2, [pc, #192]	; (80034c0 <HAL_I2S_Receive_DMA+0x174>)
 80033fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340e:	d10a      	bne.n	8003426 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	4619      	mov	r1, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800343c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800343e:	f7fe fcfd 	bl	8001e3c <HAL_DMA_Start_IT>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00f      	beq.n	8003468 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f043 0208 	orr.w	r2, r3, #8
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e022      	b.n	80034ae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003472:	2b00      	cmp	r3, #0
 8003474:	d107      	bne.n	8003486 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003484:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	080036bb 	.word	0x080036bb
 80034bc:	08003679 	.word	0x08003679
 80034c0:	080036d7 	.word	0x080036d7

080034c4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d8:	d003      	beq.n	80034e2 <HAL_I2S_DMAStop+0x1e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d155      	bne.n	800358e <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00f      	beq.n	800350a <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fcfc 	bl	8001eec <HAL_DMA_Abort>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	f043 0208 	orr.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800350a:	2364      	movs	r3, #100	; 0x64
 800350c:	2201      	movs	r2, #1
 800350e:	2102      	movs	r1, #2
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f9ed 	bl	80038f0 <I2S_WaitFlagStateUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00b      	beq.n	8003534 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003534:	2364      	movs	r3, #100	; 0x64
 8003536:	2200      	movs	r2, #0
 8003538:	2180      	movs	r1, #128	; 0x80
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9d8 	bl	80038f0 <I2S_WaitFlagStateUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0202 	bic.w	r2, r2, #2
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	e04d      	b.n	800362a <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003596:	d004      	beq.n	80035a2 <HAL_I2S_DMAStop+0xde>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a0:	d143      	bne.n	800362a <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00f      	beq.n	80035ca <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fc9c 	bl	8001eec <HAL_DMA_Abort>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f043 0208 	orr.w	r2, r3, #8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003608:	d10c      	bne.n	8003624 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
 8003622:	e002      	b.n	800362a <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7fd fba7 	bl	8000e00 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7ff ffc1 	bl	8003650 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0203 	bic.w	r2, r2, #3
 80036f2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	f043 0208 	orr.w	r2, r3, #8
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7ff ffa5 	bl	8003664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	881a      	ldrh	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	1c9a      	adds	r2, r3, #2
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10e      	bne.n	8003776 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003766:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff63 	bl	800363c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	b292      	uxth	r2, r2
 8003792:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	1c9a      	adds	r2, r3, #2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10e      	bne.n	80037d4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fb16 	bl	8000e00 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d13a      	bne.n	800386e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d109      	bne.n	8003816 <I2S_IRQHandler+0x3a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d102      	bne.n	8003816 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ffb4 	bl	800377e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d126      	bne.n	800386e <I2S_IRQHandler+0x92>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b20      	cmp	r3, #32
 800382c:	d11f      	bne.n	800386e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800383c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f043 0202 	orr.w	r2, r3, #2
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fefb 	bl	8003664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b03      	cmp	r3, #3
 8003878:	d136      	bne.n	80038e8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b02      	cmp	r3, #2
 8003882:	d109      	bne.n	8003898 <I2S_IRQHandler+0xbc>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d102      	bne.n	8003898 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff45 	bl	8003722 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d122      	bne.n	80038e8 <I2S_IRQHandler+0x10c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d11b      	bne.n	80038e8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038be:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f043 0204 	orr.w	r2, r3, #4
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff febe 	bl	8003664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038e8:	bf00      	nop
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003900:	f7fe f890 	bl	8001a24 <HAL_GetTick>
 8003904:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003906:	e018      	b.n	800393a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390e:	d014      	beq.n	800393a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003910:	f7fe f888 	bl	8001a24 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d902      	bls.n	8003926 <I2S_WaitFlagStateUntilTimeout+0x36>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e00f      	b.n	800395a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d1d7      	bne.n	8003908 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	603b      	str	r3, [r7, #0]
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003990:	f7fe f848 	bl	8001a24 <HAL_GetTick>
 8003994:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003996:	e009      	b.n	80039ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003998:	f7fe f844 	bl	8001a24 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a6:	d901      	bls.n	80039ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e01f      	b.n	80039ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ac:	4b13      	ldr	r3, [pc, #76]	; (80039fc <HAL_PWREx_EnableOverDrive+0x98>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d1ee      	bne.n	8003998 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c0:	f7fe f830 	bl	8001a24 <HAL_GetTick>
 80039c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039c6:	e009      	b.n	80039dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039c8:	f7fe f82c 	bl	8001a24 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d6:	d901      	bls.n	80039dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e007      	b.n	80039ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_PWREx_EnableOverDrive+0x98>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e8:	d1ee      	bne.n	80039c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	420e0040 	.word	0x420e0040
 80039fc:	40007000 	.word	0x40007000
 8003a00:	420e0044 	.word	0x420e0044

08003a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0cc      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a18:	4b68      	ldr	r3, [pc, #416]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d90c      	bls.n	8003a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b65      	ldr	r3, [pc, #404]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b63      	ldr	r3, [pc, #396]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0b8      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a58:	4b59      	ldr	r3, [pc, #356]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a58      	ldr	r2, [pc, #352]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a70:	4b53      	ldr	r3, [pc, #332]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a52      	ldr	r2, [pc, #328]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a7c:	4b50      	ldr	r3, [pc, #320]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	494d      	ldr	r1, [pc, #308]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d044      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d119      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e07f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac2:	4b3f      	ldr	r3, [pc, #252]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e06f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e067      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae2:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f023 0203 	bic.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4934      	ldr	r1, [pc, #208]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af4:	f7fd ff96 	bl	8001a24 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afc:	f7fd ff92 	bl	8001a24 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e04f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 020c 	and.w	r2, r3, #12
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d1eb      	bne.n	8003afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b24:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d20c      	bcs.n	8003b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e032      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b58:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4916      	ldr	r1, [pc, #88]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	490e      	ldr	r1, [pc, #56]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8a:	f000 fdc1 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	490a      	ldr	r1, [pc, #40]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	5ccb      	ldrb	r3, [r1, r3]
 8003b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba2:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd fef6 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023c00 	.word	0x40023c00
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	0800bcb8 	.word	0x0800bcb8
 8003bc8:	20000004 	.word	0x20000004
 8003bcc:	20000008 	.word	0x20000008

08003bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000004 	.word	0x20000004

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bec:	f7ff fff0 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0a9b      	lsrs	r3, r3, #10
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4903      	ldr	r1, [pc, #12]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	0800bcc8 	.word	0x0800bcc8

08003c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c14:	f7ff ffdc 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0b5b      	lsrs	r3, r3, #13
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4903      	ldr	r1, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	0800bcc8 	.word	0x0800bcc8

08003c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	; 0x30
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003c70:	4b6f      	ldr	r3, [pc, #444]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c76:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	496c      	ldr	r1, [pc, #432]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d010      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003c9e:	4b64      	ldr	r3, [pc, #400]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	4960      	ldr	r1, [pc, #384]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d017      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ccc:	4b58      	ldr	r3, [pc, #352]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4955      	ldr	r1, [pc, #340]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003cec:	2301      	movs	r3, #1
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d08:	4b49      	ldr	r3, [pc, #292]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	4946      	ldr	r1, [pc, #280]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d26:	d101      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003d34:	2301      	movs	r3, #1
 8003d36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 808a 	beq.w	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a38      	ldr	r2, [pc, #224]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a33      	ldr	r2, [pc, #204]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6e:	f7fd fe59 	bl	8001a24 <HAL_GetTick>
 8003d72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fd fe55 	bl	8001a24 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e278      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d88:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d94:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d02f      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dac:	6a3a      	ldr	r2, [r7, #32]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d028      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc2:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dce:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d114      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fd fe23 	bl	8001a24 <HAL_GetTick>
 8003dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fd fe1f 	bl	8001a24 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e240      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df8:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ee      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e10:	d114      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e26:	4902      	ldr	r1, [pc, #8]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	608b      	str	r3, [r1, #8]
 8003e2c:	e00c      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40007000 	.word	0x40007000
 8003e38:	42470e40 	.word	0x42470e40
 8003e3c:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a49      	ldr	r2, [pc, #292]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e46:	6093      	str	r3, [r2, #8]
 8003e48:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e54:	4944      	ldr	r1, [pc, #272]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003e6c:	4b3f      	ldr	r3, [pc, #252]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e6e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8a:	4937      	ldr	r1, [pc, #220]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e9e:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eac:	492e      	ldr	r1, [pc, #184]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d011      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ec0:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	4926      	ldr	r1, [pc, #152]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	491a      	ldr	r1, [pc, #104]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d011      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f18:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f20:	4911      	ldr	r1, [pc, #68]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f30:	d101      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003f32:	2301      	movs	r3, #1
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f44:	f040 80ff 	bne.w	8004146 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f4e:	f7fd fd69 	bl	8001a24 <HAL_GetTick>
 8003f52:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f54:	e00e      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f56:	f7fd fd65 	bl	8001a24 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d907      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e188      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	424711e0 	.word	0x424711e0
 8003f70:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f74:	4b7e      	ldr	r3, [pc, #504]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ea      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d028      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d124      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fa8:	4b71      	ldr	r3, [pc, #452]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fae:	0c1b      	lsrs	r3, r3, #16
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fba:	4b6d      	ldr	r3, [pc, #436]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc0:	0e1b      	lsrs	r3, r3, #24
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	019b      	lsls	r3, r3, #6
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	071b      	lsls	r3, r3, #28
 8003fea:	4961      	ldr	r1, [pc, #388]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004010:	2b00      	cmp	r3, #0
 8004012:	d035      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800401c:	d130      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800401e:	4b54      	ldr	r3, [pc, #336]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	3301      	adds	r3, #1
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004030:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004036:	0f1b      	lsrs	r3, r3, #28
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	019b      	lsls	r3, r3, #6
 8004048:	431a      	orrs	r2, r3
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	3b01      	subs	r3, #1
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	431a      	orrs	r2, r3
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	071b      	lsls	r3, r3, #28
 8004060:	4943      	ldr	r1, [pc, #268]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004068:	4b41      	ldr	r3, [pc, #260]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800406a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800406e:	f023 021f 	bic.w	r2, r3, #31
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	3b01      	subs	r3, #1
 8004078:	493d      	ldr	r1, [pc, #244]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004088:	2b00      	cmp	r3, #0
 800408a:	d029      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004094:	d124      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004096:	4b36      	ldr	r3, [pc, #216]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040a8:	4b31      	ldr	r3, [pc, #196]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ae:	0f1b      	lsrs	r3, r3, #28
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	019b      	lsls	r3, r3, #6
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	3b01      	subs	r3, #1
 80040ca:	041b      	lsls	r3, r3, #16
 80040cc:	431a      	orrs	r2, r3
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	431a      	orrs	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	071b      	lsls	r3, r3, #28
 80040d8:	4925      	ldr	r1, [pc, #148]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d016      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	071b      	lsls	r3, r3, #28
 8004112:	4917      	ldr	r1, [pc, #92]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004120:	f7fd fc80 	bl	8001a24 <HAL_GetTick>
 8004124:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004128:	f7fd fc7c 	bl	8001a24 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e09f      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	2b01      	cmp	r3, #1
 800414a:	f040 8095 	bne.w	8004278 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004154:	f7fd fc66 	bl	8001a24 <HAL_GetTick>
 8004158:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800415a:	e00f      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800415c:	f7fd fc62 	bl	8001a24 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d908      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e085      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800
 8004174:	42470068 	.word	0x42470068
 8004178:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800417c:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004188:	d0e8      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d02b      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d127      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80041b2:	4b34      	ldr	r3, [pc, #208]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	3301      	adds	r3, #1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	431a      	orrs	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	3b01      	subs	r3, #1
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	061b      	lsls	r3, r3, #24
 80041e0:	4928      	ldr	r1, [pc, #160]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041e8:	4b26      	ldr	r3, [pc, #152]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	3b01      	subs	r3, #1
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	4922      	ldr	r1, [pc, #136]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01d      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004216:	d118      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004218:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421e:	0e1b      	lsrs	r3, r3, #24
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	019b      	lsls	r3, r3, #6
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	3b01      	subs	r3, #1
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	431a      	orrs	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	061b      	lsls	r3, r3, #24
 8004242:	4910      	ldr	r1, [pc, #64]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800424a:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004250:	f7fd fbe8 	bl	8001a24 <HAL_GetTick>
 8004254:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004256:	e008      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004258:	f7fd fbe4 	bl	8001a24 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e007      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004276:	d1ef      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3730      	adds	r7, #48	; 0x30
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800
 8004288:	42470070 	.word	0x42470070

0800428c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	2b07      	cmp	r3, #7
 80042b2:	f200 8220 	bhi.w	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080044bf 	.word	0x080044bf
 80042c0:	080045e1 	.word	0x080045e1
 80042c4:	080046f7 	.word	0x080046f7
 80042c8:	080042dd 	.word	0x080042dd
 80042cc:	080046f7 	.word	0x080046f7
 80042d0:	080046f7 	.word	0x080046f7
 80042d4:	080046f7 	.word	0x080046f7
 80042d8:	080042dd 	.word	0x080042dd
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80042dc:	4ba7      	ldr	r3, [pc, #668]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042f2:	f000 80d6 	beq.w	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042fc:	f200 80dd 	bhi.w	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004306:	f000 809f 	beq.w	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004310:	f200 80d3 	bhi.w	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431a:	d05b      	beq.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004322:	f200 80ca 	bhi.w	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800432c:	f000 80b6 	beq.w	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004336:	f200 80c0 	bhi.w	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004340:	f000 8082 	beq.w	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800434a:	f200 80b6 	bhi.w	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800435a:	d03b      	beq.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800435c:	e0ad      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800435e:	4b87      	ldr	r3, [pc, #540]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800436a:	4b84      	ldr	r3, [pc, #528]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004374:	4a82      	ldr	r2, [pc, #520]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800437e:	4b7f      	ldr	r3, [pc, #508]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004388:	4a7d      	ldr	r2, [pc, #500]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004390:	4b7a      	ldr	r3, [pc, #488]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	0e1b      	lsrs	r3, r3, #24
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800439e:	4b77      	ldr	r3, [pc, #476]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	099b      	lsrs	r3, r3, #6
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	fb03 f202 	mul.w	r2, r3, r2
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b6:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80043b8:	4b70      	ldr	r3, [pc, #448]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	3301      	adds	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	61fb      	str	r3, [r7, #28]
          break;
 80043d2:	e073      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043d4:	4b69      	ldr	r3, [pc, #420]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80043e0:	4b66      	ldr	r3, [pc, #408]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ea:	4a65      	ldr	r2, [pc, #404]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	e008      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80043f4:	4b61      	ldr	r3, [pc, #388]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80043f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043fe:	4a60      	ldr	r2, [pc, #384]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8004406:	4b5d      	ldr	r3, [pc, #372]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440c:	0e1b      	lsrs	r3, r3, #24
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8004414:	4b59      	ldr	r3, [pc, #356]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441a:	099b      	lsrs	r3, r3, #6
 800441c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	fb03 f202 	mul.w	r2, r3, r2
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800442e:	4b53      	ldr	r3, [pc, #332]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	3301      	adds	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	61fb      	str	r3, [r7, #28]
          break;
 8004446:	e039      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004448:	4b4c      	ldr	r3, [pc, #304]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004454:	4b49      	ldr	r3, [pc, #292]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800445c:	4a48      	ldr	r2, [pc, #288]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e007      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004466:	4b45      	ldr	r3, [pc, #276]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800446e:	4a44      	ldr	r2, [pc, #272]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8004476:	4b41      	ldr	r3, [pc, #260]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	0f1b      	lsrs	r3, r3, #28
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8004482:	4b3e      	ldr	r3, [pc, #248]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	fb03 f202 	mul.w	r2, r3, r2
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	61fb      	str	r3, [r7, #28]
          break;
 800449a:	e00f      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800449c:	4b39      	ldr	r3, [pc, #228]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800449e:	61fb      	str	r3, [r7, #28]
          break;
 80044a0:	e00c      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80044a2:	4b36      	ldr	r3, [pc, #216]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d102      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80044ae:	4b34      	ldr	r3, [pc, #208]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044b0:	61fb      	str	r3, [r7, #28]
          break;
 80044b2:	e003      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80044b4:	4b32      	ldr	r3, [pc, #200]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044b6:	61fb      	str	r3, [r7, #28]
          break;
 80044b8:	e000      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80044ba:	bf00      	nop
        }
      }
      break;
 80044bc:	e11b      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80044be:	4b2f      	ldr	r3, [pc, #188]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80044d0:	d075      	beq.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80044d8:	d87e      	bhi.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044e0:	d03c      	beq.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044e8:	d876      	bhi.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d006      	beq.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044f6:	d16f      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044f8:	4b22      	ldr	r3, [pc, #136]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044fa:	61fb      	str	r3, [r7, #28]
          break;
 80044fc:	e06f      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800450a:	d109      	bne.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800450e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004516:	4a1a      	ldr	r2, [pc, #104]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	e008      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004520:	4b16      	ldr	r3, [pc, #88]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800452a:	4a15      	ldr	r2, [pc, #84]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	fb02 f303 	mul.w	r3, r2, r3
 8004544:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004546:	4b0d      	ldr	r3, [pc, #52]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	0f1b      	lsrs	r3, r3, #28
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	61fb      	str	r3, [r7, #28]
          break;
 800455a:	e040      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800455c:	4b07      	ldr	r3, [pc, #28]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004568:	d10e      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800456a:	4b04      	ldr	r3, [pc, #16]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004572:	4a03      	ldr	r2, [pc, #12]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	e00d      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800457c:	40023800 	.word	0x40023800
 8004580:	00f42400 	.word	0x00f42400
 8004584:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004588:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004590:	4a5d      	ldr	r2, [pc, #372]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004598:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	099b      	lsrs	r3, r3, #6
 800459e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	fb02 f303 	mul.w	r3, r2, r3
 80045a8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80045aa:	4b56      	ldr	r3, [pc, #344]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	0f1b      	lsrs	r3, r3, #28
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	61fb      	str	r3, [r7, #28]
          break;
 80045bc:	e00f      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045be:	4b51      	ldr	r3, [pc, #324]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ca:	d102      	bne.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          {
            frequency = HSE_VALUE;
 80045cc:	4b4e      	ldr	r3, [pc, #312]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045ce:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80045d0:	e005      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x352>
            frequency = HSI_VALUE;
 80045d2:	4b4d      	ldr	r3, [pc, #308]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80045d4:	61fb      	str	r3, [r7, #28]
          break;
 80045d6:	e002      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
          break;
 80045dc:	bf00      	nop
        }
      }
      break;
 80045de:	e08a      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80045e0:	4b48      	ldr	r3, [pc, #288]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80045e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80045f2:	d06f      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80045fa:	d878      	bhi.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004602:	d03c      	beq.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800460a:	d870      	bhi.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d006      	beq.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004618:	d169      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x462>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800461a:	4b3c      	ldr	r3, [pc, #240]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800461c:	61fb      	str	r3, [r7, #28]
          break;
 800461e:	e069      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004620:	4b38      	ldr	r3, [pc, #224]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462c:	d109      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800462e:	4b35      	ldr	r3, [pc, #212]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004638:	4a33      	ldr	r2, [pc, #204]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e008      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004642:	4b30      	ldr	r3, [pc, #192]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800464c:	4a2e      	ldr	r2, [pc, #184]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004654:	4b2b      	ldr	r3, [pc, #172]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004668:	4b26      	ldr	r3, [pc, #152]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	61fb      	str	r3, [r7, #28]
          break;
 800467c:	e03a      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800467e:	4b21      	ldr	r3, [pc, #132]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468a:	d108      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800468c:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004694:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e007      	b.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x422>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80046c0:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	0f1b      	lsrs	r3, r3, #28
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	61fb      	str	r3, [r7, #28]
          break;
 80046d2:	e00f      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e0:	d102      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          {
            frequency = HSE_VALUE;
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80046e4:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80046e6:	e005      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = HSI_VALUE;
 80046e8:	4b07      	ldr	r3, [pc, #28]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80046ea:	61fb      	str	r3, [r7, #28]
          break;
 80046ec:	e002      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
          break;
 80046f2:	bf00      	nop
        }
      }
      break;
 80046f4:	bf00      	nop
    }
  }
  return frequency;
 80046f6:	69fb      	ldr	r3, [r7, #28]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3724      	adds	r7, #36	; 0x24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40023800 	.word	0x40023800
 8004708:	00f42400 	.word	0x00f42400
 800470c:	00bb8000 	.word	0x00bb8000

08004710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	b0ae      	sub	sp, #184	; 0xb8
 8004716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004736:	4bcb      	ldr	r3, [pc, #812]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x354>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b0c      	cmp	r3, #12
 8004740:	f200 8204 	bhi.w	8004b4c <HAL_RCC_GetSysClockFreq+0x43c>
 8004744:	a201      	add	r2, pc, #4	; (adr r2, 800474c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474a:	bf00      	nop
 800474c:	08004781 	.word	0x08004781
 8004750:	08004b4d 	.word	0x08004b4d
 8004754:	08004b4d 	.word	0x08004b4d
 8004758:	08004b4d 	.word	0x08004b4d
 800475c:	08004789 	.word	0x08004789
 8004760:	08004b4d 	.word	0x08004b4d
 8004764:	08004b4d 	.word	0x08004b4d
 8004768:	08004b4d 	.word	0x08004b4d
 800476c:	08004791 	.word	0x08004791
 8004770:	08004b4d 	.word	0x08004b4d
 8004774:	08004b4d 	.word	0x08004b4d
 8004778:	08004b4d 	.word	0x08004b4d
 800477c:	08004981 	.word	0x08004981
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004780:	4bb9      	ldr	r3, [pc, #740]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x358>)
 8004782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004786:	e1e5      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004788:	4bb7      	ldr	r3, [pc, #732]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x358>)
 800478a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800478e:	e1e1      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004790:	4bb4      	ldr	r3, [pc, #720]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x354>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800479c:	4bb1      	ldr	r3, [pc, #708]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x354>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d071      	beq.n	800488c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a8:	4bae      	ldr	r3, [pc, #696]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x354>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	099b      	lsrs	r3, r3, #6
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047b4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80047b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047c4:	2300      	movs	r3, #0
 80047c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047ce:	4622      	mov	r2, r4
 80047d0:	462b      	mov	r3, r5
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f04f 0100 	mov.w	r1, #0
 80047da:	0159      	lsls	r1, r3, #5
 80047dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047e0:	0150      	lsls	r0, r2, #5
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4621      	mov	r1, r4
 80047e8:	1a51      	subs	r1, r2, r1
 80047ea:	6439      	str	r1, [r7, #64]	; 0x40
 80047ec:	4629      	mov	r1, r5
 80047ee:	eb63 0301 	sbc.w	r3, r3, r1
 80047f2:	647b      	str	r3, [r7, #68]	; 0x44
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004800:	4649      	mov	r1, r9
 8004802:	018b      	lsls	r3, r1, #6
 8004804:	4641      	mov	r1, r8
 8004806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800480a:	4641      	mov	r1, r8
 800480c:	018a      	lsls	r2, r1, #6
 800480e:	4641      	mov	r1, r8
 8004810:	1a51      	subs	r1, r2, r1
 8004812:	63b9      	str	r1, [r7, #56]	; 0x38
 8004814:	4649      	mov	r1, r9
 8004816:	eb63 0301 	sbc.w	r3, r3, r1
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004828:	4649      	mov	r1, r9
 800482a:	00cb      	lsls	r3, r1, #3
 800482c:	4641      	mov	r1, r8
 800482e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004832:	4641      	mov	r1, r8
 8004834:	00ca      	lsls	r2, r1, #3
 8004836:	4610      	mov	r0, r2
 8004838:	4619      	mov	r1, r3
 800483a:	4603      	mov	r3, r0
 800483c:	4622      	mov	r2, r4
 800483e:	189b      	adds	r3, r3, r2
 8004840:	633b      	str	r3, [r7, #48]	; 0x30
 8004842:	462b      	mov	r3, r5
 8004844:	460a      	mov	r2, r1
 8004846:	eb42 0303 	adc.w	r3, r2, r3
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004858:	4629      	mov	r1, r5
 800485a:	028b      	lsls	r3, r1, #10
 800485c:	4621      	mov	r1, r4
 800485e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004862:	4621      	mov	r1, r4
 8004864:	028a      	lsls	r2, r1, #10
 8004866:	4610      	mov	r0, r2
 8004868:	4619      	mov	r1, r3
 800486a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800486e:	2200      	movs	r2, #0
 8004870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004878:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800487c:	f7fb fd28 	bl	80002d0 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4613      	mov	r3, r2
 8004886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800488a:	e067      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488c:	4b75      	ldr	r3, [pc, #468]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x354>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	099b      	lsrs	r3, r3, #6
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004898:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800489c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80048a6:	2300      	movs	r3, #0
 80048a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80048ae:	4622      	mov	r2, r4
 80048b0:	462b      	mov	r3, r5
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	0159      	lsls	r1, r3, #5
 80048bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c0:	0150      	lsls	r0, r2, #5
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4621      	mov	r1, r4
 80048c8:	1a51      	subs	r1, r2, r1
 80048ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80048cc:	4629      	mov	r1, r5
 80048ce:	eb63 0301 	sbc.w	r3, r3, r1
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80048e0:	4649      	mov	r1, r9
 80048e2:	018b      	lsls	r3, r1, #6
 80048e4:	4641      	mov	r1, r8
 80048e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ea:	4641      	mov	r1, r8
 80048ec:	018a      	lsls	r2, r1, #6
 80048ee:	4641      	mov	r1, r8
 80048f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80048f4:	4649      	mov	r1, r9
 80048f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004906:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800490a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800490e:	4692      	mov	sl, r2
 8004910:	469b      	mov	fp, r3
 8004912:	4623      	mov	r3, r4
 8004914:	eb1a 0303 	adds.w	r3, sl, r3
 8004918:	623b      	str	r3, [r7, #32]
 800491a:	462b      	mov	r3, r5
 800491c:	eb4b 0303 	adc.w	r3, fp, r3
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800492e:	4629      	mov	r1, r5
 8004930:	028b      	lsls	r3, r1, #10
 8004932:	4621      	mov	r1, r4
 8004934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004938:	4621      	mov	r1, r4
 800493a:	028a      	lsls	r2, r1, #10
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004944:	2200      	movs	r2, #0
 8004946:	673b      	str	r3, [r7, #112]	; 0x70
 8004948:	677a      	str	r2, [r7, #116]	; 0x74
 800494a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800494e:	f7fb fcbf 	bl	80002d0 <__aeabi_uldivmod>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4613      	mov	r3, r2
 8004958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800495c:	4b41      	ldr	r3, [pc, #260]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x354>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	3301      	adds	r3, #1
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800496e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800497e:	e0e9      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004980:	4b38      	ldr	r3, [pc, #224]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x354>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800498c:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x354>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d069      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004998:	4b32      	ldr	r3, [pc, #200]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x354>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	2200      	movs	r2, #0
 80049a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049aa:	663b      	str	r3, [r7, #96]	; 0x60
 80049ac:	2300      	movs	r3, #0
 80049ae:	667b      	str	r3, [r7, #100]	; 0x64
 80049b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80049b4:	4622      	mov	r2, r4
 80049b6:	462b      	mov	r3, r5
 80049b8:	f04f 0000 	mov.w	r0, #0
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	0159      	lsls	r1, r3, #5
 80049c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c6:	0150      	lsls	r0, r2, #5
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4621      	mov	r1, r4
 80049ce:	1a51      	subs	r1, r2, r1
 80049d0:	61b9      	str	r1, [r7, #24]
 80049d2:	4629      	mov	r1, r5
 80049d4:	eb63 0301 	sbc.w	r3, r3, r1
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80049e6:	4659      	mov	r1, fp
 80049e8:	018b      	lsls	r3, r1, #6
 80049ea:	4651      	mov	r1, sl
 80049ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049f0:	4651      	mov	r1, sl
 80049f2:	018a      	lsls	r2, r1, #6
 80049f4:	4651      	mov	r1, sl
 80049f6:	ebb2 0801 	subs.w	r8, r2, r1
 80049fa:	4659      	mov	r1, fp
 80049fc:	eb63 0901 	sbc.w	r9, r3, r1
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a14:	4690      	mov	r8, r2
 8004a16:	4699      	mov	r9, r3
 8004a18:	4623      	mov	r3, r4
 8004a1a:	eb18 0303 	adds.w	r3, r8, r3
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	462b      	mov	r3, r5
 8004a22:	eb49 0303 	adc.w	r3, r9, r3
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a34:	4629      	mov	r1, r5
 8004a36:	028b      	lsls	r3, r1, #10
 8004a38:	4621      	mov	r1, r4
 8004a3a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a3e:	4621      	mov	r1, r4
 8004a40:	028a      	lsls	r2, r1, #10
 8004a42:	4610      	mov	r0, r2
 8004a44:	4619      	mov	r1, r3
 8004a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a54:	f7fb fc3c 	bl	80002d0 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a62:	e063      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x41c>
 8004a64:	40023800 	.word	0x40023800
 8004a68:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6c:	4b3d      	ldr	r3, [pc, #244]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x454>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	099b      	lsrs	r3, r3, #6
 8004a72:	2200      	movs	r2, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	4611      	mov	r1, r2
 8004a78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a7c:	653b      	str	r3, [r7, #80]	; 0x50
 8004a7e:	2300      	movs	r3, #0
 8004a80:	657b      	str	r3, [r7, #84]	; 0x54
 8004a82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004a86:	4642      	mov	r2, r8
 8004a88:	464b      	mov	r3, r9
 8004a8a:	f04f 0000 	mov.w	r0, #0
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	0159      	lsls	r1, r3, #5
 8004a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a98:	0150      	lsls	r0, r2, #5
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	1a51      	subs	r1, r2, r1
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ab8:	4659      	mov	r1, fp
 8004aba:	018b      	lsls	r3, r1, #6
 8004abc:	4651      	mov	r1, sl
 8004abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	018a      	lsls	r2, r1, #6
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	1a54      	subs	r4, r2, r1
 8004aca:	4659      	mov	r1, fp
 8004acc:	eb63 0501 	sbc.w	r5, r3, r1
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	00eb      	lsls	r3, r5, #3
 8004ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ade:	00e2      	lsls	r2, r4, #3
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	461d      	mov	r5, r3
 8004ae4:	4643      	mov	r3, r8
 8004ae6:	18e3      	adds	r3, r4, r3
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	464b      	mov	r3, r9
 8004aec:	eb45 0303 	adc.w	r3, r5, r3
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004afe:	4629      	mov	r1, r5
 8004b00:	028b      	lsls	r3, r1, #10
 8004b02:	4621      	mov	r1, r4
 8004b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b08:	4621      	mov	r1, r4
 8004b0a:	028a      	lsls	r2, r1, #10
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b14:	2200      	movs	r2, #0
 8004b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b1e:	f7fb fbd7 	bl	80002d0 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4613      	mov	r3, r2
 8004b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x454>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	0f1b      	lsrs	r3, r3, #28
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b4a:	e003      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	37b8      	adds	r7, #184	; 0xb8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800
 8004b68:	00f42400 	.word	0x00f42400

08004b6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e28d      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8083 	beq.w	8004c92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b8c:	4b94      	ldr	r3, [pc, #592]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 030c 	and.w	r3, r3, #12
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d019      	beq.n	8004bcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b98:	4b91      	ldr	r3, [pc, #580]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ba4:	4b8e      	ldr	r3, [pc, #568]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb0:	d00c      	beq.n	8004bcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bb2:	4b8b      	ldr	r3, [pc, #556]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	d112      	bne.n	8004be4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bbe:	4b88      	ldr	r3, [pc, #544]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bca:	d10b      	bne.n	8004be4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	4b84      	ldr	r3, [pc, #528]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d05b      	beq.n	8004c90 <HAL_RCC_OscConfig+0x124>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d157      	bne.n	8004c90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e25a      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bec:	d106      	bne.n	8004bfc <HAL_RCC_OscConfig+0x90>
 8004bee:	4b7c      	ldr	r3, [pc, #496]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a7b      	ldr	r2, [pc, #492]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e01d      	b.n	8004c38 <HAL_RCC_OscConfig+0xcc>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCC_OscConfig+0xb4>
 8004c06:	4b76      	ldr	r3, [pc, #472]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a75      	ldr	r2, [pc, #468]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	4b73      	ldr	r3, [pc, #460]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a72      	ldr	r2, [pc, #456]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCC_OscConfig+0xcc>
 8004c20:	4b6f      	ldr	r3, [pc, #444]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a6e      	ldr	r2, [pc, #440]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b6c      	ldr	r3, [pc, #432]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a6b      	ldr	r2, [pc, #428]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d013      	beq.n	8004c68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fc fef0 	bl	8001a24 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fc feec 	bl	8001a24 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e21f      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b61      	ldr	r3, [pc, #388]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0xdc>
 8004c66:	e014      	b.n	8004c92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fc fedc 	bl	8001a24 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fc fed8 	bl	8001a24 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	; 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e20b      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c82:	4b57      	ldr	r3, [pc, #348]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x104>
 8004c8e:	e000      	b.n	8004c92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d06f      	beq.n	8004d7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c9e:	4b50      	ldr	r3, [pc, #320]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d017      	beq.n	8004cda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004caa:	4b4d      	ldr	r3, [pc, #308]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d105      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cb6:	4b4a      	ldr	r3, [pc, #296]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc2:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cca:	2b0c      	cmp	r3, #12
 8004ccc:	d11c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cce:	4b44      	ldr	r3, [pc, #272]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cda:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x186>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e1d3      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf2:	4b3b      	ldr	r3, [pc, #236]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4937      	ldr	r1, [pc, #220]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d06:	e03a      	b.n	8004d7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d020      	beq.n	8004d52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d10:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <HAL_RCC_OscConfig+0x278>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d16:	f7fc fe85 	bl	8001a24 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1e:	f7fc fe81 	bl	8001a24 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e1b4      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d30:	4b2b      	ldr	r3, [pc, #172]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3c:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4925      	ldr	r1, [pc, #148]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	600b      	str	r3, [r1, #0]
 8004d50:	e015      	b.n	8004d7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <HAL_RCC_OscConfig+0x278>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fc fe64 	bl	8001a24 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d60:	f7fc fe60 	bl	8001a24 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e193      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d72:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d036      	beq.n	8004df8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d016      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <HAL_RCC_OscConfig+0x27c>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fc fe44 	bl	8001a24 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da0:	f7fc fe40 	bl	8001a24 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e173      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_OscConfig+0x274>)
 8004db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x234>
 8004dbe:	e01b      	b.n	8004df8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <HAL_RCC_OscConfig+0x27c>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc6:	f7fc fe2d 	bl	8001a24 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dcc:	e00e      	b.n	8004dec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dce:	f7fc fe29 	bl	8001a24 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d907      	bls.n	8004dec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e15c      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
 8004de0:	40023800 	.word	0x40023800
 8004de4:	42470000 	.word	0x42470000
 8004de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dec:	4b8a      	ldr	r3, [pc, #552]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ea      	bne.n	8004dce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8097 	beq.w	8004f34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0a:	4b83      	ldr	r3, [pc, #524]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	4b7f      	ldr	r3, [pc, #508]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	4a7e      	ldr	r2, [pc, #504]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6413      	str	r3, [r2, #64]	; 0x40
 8004e26:	4b7c      	ldr	r3, [pc, #496]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	4b79      	ldr	r3, [pc, #484]	; (800501c <HAL_RCC_OscConfig+0x4b0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d118      	bne.n	8004e74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e42:	4b76      	ldr	r3, [pc, #472]	; (800501c <HAL_RCC_OscConfig+0x4b0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a75      	ldr	r2, [pc, #468]	; (800501c <HAL_RCC_OscConfig+0x4b0>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4e:	f7fc fde9 	bl	8001a24 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e56:	f7fc fde5 	bl	8001a24 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e118      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e68:	4b6c      	ldr	r3, [pc, #432]	; (800501c <HAL_RCC_OscConfig+0x4b0>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d106      	bne.n	8004e8a <HAL_RCC_OscConfig+0x31e>
 8004e7c:	4b66      	ldr	r3, [pc, #408]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a65      	ldr	r2, [pc, #404]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6713      	str	r3, [r2, #112]	; 0x70
 8004e88:	e01c      	b.n	8004ec4 <HAL_RCC_OscConfig+0x358>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x340>
 8004e92:	4b61      	ldr	r3, [pc, #388]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	4a60      	ldr	r2, [pc, #384]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004e98:	f043 0304 	orr.w	r3, r3, #4
 8004e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9e:	4b5e      	ldr	r3, [pc, #376]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	4a5d      	ldr	r2, [pc, #372]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x358>
 8004eac:	4b5a      	ldr	r3, [pc, #360]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	4a59      	ldr	r2, [pc, #356]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb8:	4b57      	ldr	r3, [pc, #348]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	4a56      	ldr	r2, [pc, #344]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004ebe:	f023 0304 	bic.w	r3, r3, #4
 8004ec2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d015      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ecc:	f7fc fdaa 	bl	8001a24 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed4:	f7fc fda6 	bl	8001a24 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e0d7      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eea:	4b4b      	ldr	r3, [pc, #300]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ee      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x368>
 8004ef6:	e014      	b.n	8004f22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef8:	f7fc fd94 	bl	8001a24 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f00:	f7fc fd90 	bl	8001a24 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e0c1      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f16:	4b40      	ldr	r3, [pc, #256]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ee      	bne.n	8004f00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4b3b      	ldr	r3, [pc, #236]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	4a3a      	ldr	r2, [pc, #232]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80ad 	beq.w	8005098 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f3e:	4b36      	ldr	r3, [pc, #216]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d060      	beq.n	800500c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d145      	bne.n	8004fde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f52:	4b33      	ldr	r3, [pc, #204]	; (8005020 <HAL_RCC_OscConfig+0x4b4>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fc fd64 	bl	8001a24 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fc fd60 	bl	8001a24 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e093      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f72:	4b29      	ldr	r3, [pc, #164]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	019b      	lsls	r3, r3, #6
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	3b01      	subs	r3, #1
 8004f98:	041b      	lsls	r3, r3, #16
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	071b      	lsls	r3, r3, #28
 8004faa:	491b      	ldr	r1, [pc, #108]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb0:	4b1b      	ldr	r3, [pc, #108]	; (8005020 <HAL_RCC_OscConfig+0x4b4>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb6:	f7fc fd35 	bl	8001a24 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fbe:	f7fc fd31 	bl	8001a24 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e064      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd0:	4b11      	ldr	r3, [pc, #68]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x452>
 8004fdc:	e05c      	b.n	8005098 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fde:	4b10      	ldr	r3, [pc, #64]	; (8005020 <HAL_RCC_OscConfig+0x4b4>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fc fd1e 	bl	8001a24 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fc fd1a 	bl	8001a24 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e04d      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_RCC_OscConfig+0x4ac>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x480>
 800500a:	e045      	b.n	8005098 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d107      	bne.n	8005024 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e040      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
 8005018:	40023800 	.word	0x40023800
 800501c:	40007000 	.word	0x40007000
 8005020:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005024:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <HAL_RCC_OscConfig+0x538>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d030      	beq.n	8005094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503c:	429a      	cmp	r2, r3
 800503e:	d129      	bne.n	8005094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504a:	429a      	cmp	r2, r3
 800504c:	d122      	bne.n	8005094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005054:	4013      	ands	r3, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800505a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800505c:	4293      	cmp	r3, r2
 800505e:	d119      	bne.n	8005094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	3b01      	subs	r3, #1
 800506e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d10f      	bne.n	8005094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005080:	429a      	cmp	r2, r3
 8005082:	d107      	bne.n	8005094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d001      	beq.n	8005098 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800

080050a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e022      	b.n	8005100 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d105      	bne.n	80050d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fc f9eb 	bl	80014a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2203      	movs	r2, #3
 80050d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f814 	bl	8005108 <HAL_SD_InitCard>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e00a      	b.n	8005100 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005108:	b5b0      	push	{r4, r5, r7, lr}
 800510a:	b08e      	sub	sp, #56	; 0x38
 800510c:	af04      	add	r7, sp, #16
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005124:	2376      	movs	r3, #118	; 0x76
 8005126:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681d      	ldr	r5, [r3, #0]
 800512c:	466c      	mov	r4, sp
 800512e:	f107 0314 	add.w	r3, r7, #20
 8005132:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800513a:	f107 0308 	add.w	r3, r7, #8
 800513e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005140:	4628      	mov	r0, r5
 8005142:	f002 fb47 	bl	80077d4 <SDIO_Init>
 8005146:	4603      	mov	r3, r0
 8005148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800514c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e04f      	b.n	80051f8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005158:	4b29      	ldr	r3, [pc, #164]	; (8005200 <HAL_SD_InitCard+0xf8>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f002 fb7f 	bl	8007866 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005168:	4b25      	ldr	r3, [pc, #148]	; (8005200 <HAL_SD_InitCard+0xf8>)
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800516e:	2002      	movs	r0, #2
 8005170:	f7fc fc64 	bl	8001a3c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f001 f8f1 	bl	800635c <SD_PowerON>
 800517a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e02e      	b.n	80051f8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 f810 	bl	80061c0 <SD_InitCard>
 80051a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00b      	beq.n	80051c0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e01b      	b.n	80051f8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051c8:	4618      	mov	r0, r3
 80051ca:	f002 fbde 	bl	800798a <SDMMC_CmdBlockLength>
 80051ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00f      	beq.n	80051f6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <HAL_SD_InitCard+0xfc>)
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3728      	adds	r7, #40	; 0x28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005200:	422580a0 	.word	0x422580a0
 8005204:	004005ff 	.word	0x004005ff

08005208 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b092      	sub	sp, #72	; 0x48
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005216:	f7fc fc05 	bl	8001a24 <HAL_GetTick>
 800521a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d107      	bne.n	800523a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e1bd      	b.n	80055b6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	f040 81b0 	bne.w	80055a8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800524e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	441a      	add	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005258:	429a      	cmp	r2, r3
 800525a:	d907      	bls.n	800526c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e1a4      	b.n	80055b6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2203      	movs	r2, #3
 8005270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2200      	movs	r2, #0
 800527a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	2b01      	cmp	r3, #1
 8005282:	d002      	beq.n	800528a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	025b      	lsls	r3, r3, #9
 8005288:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800528a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800528e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	025b      	lsls	r3, r3, #9
 8005294:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005296:	2390      	movs	r3, #144	; 0x90
 8005298:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800529a:	2302      	movs	r3, #2
 800529c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800529e:	2300      	movs	r3, #0
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80052a2:	2301      	movs	r3, #1
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f107 0214 	add.w	r2, r7, #20
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f002 fb3e 	bl	8007932 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d90a      	bls.n	80052d2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2202      	movs	r2, #2
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052c8:	4618      	mov	r0, r3
 80052ca:	f002 fba2 	bl	8007a12 <SDMMC_CmdReadMultiBlock>
 80052ce:	6478      	str	r0, [r7, #68]	; 0x44
 80052d0:	e009      	b.n	80052e6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052de:	4618      	mov	r0, r3
 80052e0:	f002 fb75 	bl	80079ce <SDMMC_CmdReadSingleBlock>
 80052e4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80052e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d012      	beq.n	8005312 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a7a      	ldr	r2, [pc, #488]	; (80054dc <HAL_SD_ReadBlocks+0x2d4>)
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fa:	431a      	orrs	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e151      	b.n	80055b6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005316:	e061      	b.n	80053dc <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d03c      	beq.n	80053a0 <HAL_SD_ReadBlocks+0x198>
 8005326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d039      	beq.n	80053a0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800532c:	2300      	movs	r3, #0
 800532e:	643b      	str	r3, [r7, #64]	; 0x40
 8005330:	e033      	b.n	800539a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f002 fa77 	bl	800782a <SDIO_ReadFIFO>
 800533c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	b2da      	uxtb	r2, r3
 8005342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005344:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	3301      	adds	r3, #1
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800534c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534e:	3b01      	subs	r3, #1
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	b2da      	uxtb	r2, r3
 8005358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	3301      	adds	r3, #1
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005364:	3b01      	subs	r3, #1
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	0c1b      	lsrs	r3, r3, #16
 800536c:	b2da      	uxtb	r2, r3
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005374:	3301      	adds	r3, #1
 8005376:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537a:	3b01      	subs	r3, #1
 800537c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	0e1b      	lsrs	r3, r3, #24
 8005382:	b2da      	uxtb	r2, r3
 8005384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005386:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538a:	3301      	adds	r3, #1
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800538e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005390:	3b01      	subs	r3, #1
 8005392:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005396:	3301      	adds	r3, #1
 8005398:	643b      	str	r3, [r7, #64]	; 0x40
 800539a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539c:	2b07      	cmp	r3, #7
 800539e:	d9c8      	bls.n	8005332 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80053a0:	f7fc fb40 	bl	8001a24 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d902      	bls.n	80053b6 <HAL_SD_ReadBlocks+0x1ae>
 80053b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d112      	bne.n	80053dc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a48      	ldr	r2, [pc, #288]	; (80054dc <HAL_SD_ReadBlocks+0x2d4>)
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e0ec      	b.n	80055b6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d096      	beq.n	8005318 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d022      	beq.n	800543e <HAL_SD_ReadBlocks+0x236>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d91f      	bls.n	800543e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	2b03      	cmp	r3, #3
 8005404:	d01b      	beq.n	800543e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f002 fb68 	bl	8007ae0 <SDMMC_CmdStopTransfer>
 8005410:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005414:	2b00      	cmp	r3, #0
 8005416:	d012      	beq.n	800543e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <HAL_SD_ReadBlocks+0x2d4>)
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005426:	431a      	orrs	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e0bb      	b.n	80055b6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d012      	beq.n	8005472 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a22      	ldr	r2, [pc, #136]	; (80054dc <HAL_SD_ReadBlocks+0x2d4>)
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	f043 0208 	orr.w	r2, r3, #8
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0a1      	b.n	80055b6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a15      	ldr	r2, [pc, #84]	; (80054dc <HAL_SD_ReadBlocks+0x2d4>)
 8005486:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	f043 0202 	orr.w	r2, r3, #2
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e087      	b.n	80055b6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d064      	beq.n	800557e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a08      	ldr	r2, [pc, #32]	; (80054dc <HAL_SD_ReadBlocks+0x2d4>)
 80054ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e06d      	b.n	80055b6 <HAL_SD_ReadBlocks+0x3ae>
 80054da:	bf00      	nop
 80054dc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f002 f9a0 	bl	800782a <SDIO_ReadFIFO>
 80054ea:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	3301      	adds	r3, #1
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80054fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fc:	3b01      	subs	r3, #1
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	b2da      	uxtb	r2, r3
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005508:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550c:	3301      	adds	r3, #1
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005512:	3b01      	subs	r3, #1
 8005514:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	b2da      	uxtb	r2, r3
 800551c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	3301      	adds	r3, #1
 8005524:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005528:	3b01      	subs	r3, #1
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552e:	0e1b      	lsrs	r3, r3, #24
 8005530:	b2da      	uxtb	r2, r3
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	3301      	adds	r3, #1
 800553a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800553c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553e:	3b01      	subs	r3, #1
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005542:	f7fc fa6f 	bl	8001a24 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800554e:	429a      	cmp	r2, r3
 8005550:	d902      	bls.n	8005558 <HAL_SD_ReadBlocks+0x350>
 8005552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005554:	2b00      	cmp	r3, #0
 8005556:	d112      	bne.n	800557e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a18      	ldr	r2, [pc, #96]	; (80055c0 <HAL_SD_ReadBlocks+0x3b8>)
 800555e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e01b      	b.n	80055b6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_SD_ReadBlocks+0x38a>
 800558c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1a6      	bne.n	80054e0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f240 523a 	movw	r2, #1338	; 0x53a
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	e006      	b.n	80055b6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
  }
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3748      	adds	r7, #72	; 0x48
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	004005ff 	.word	0x004005ff

080055c4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b092      	sub	sp, #72	; 0x48
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80055d2:	f7fc fa27 	bl	8001a24 <HAL_GetTick>
 80055d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e165      	b.n	80058c2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b01      	cmp	r3, #1
 8005600:	f040 8158 	bne.w	80058b4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800560a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	441a      	add	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005614:	429a      	cmp	r2, r3
 8005616:	d907      	bls.n	8005628 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e14c      	b.n	80058c2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2203      	movs	r2, #3
 800562c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2200      	movs	r2, #0
 8005636:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563c:	2b01      	cmp	r3, #1
 800563e:	d002      	beq.n	8005646 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	025b      	lsls	r3, r3, #9
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800564a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	025b      	lsls	r3, r3, #9
 8005650:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005652:	2390      	movs	r3, #144	; 0x90
 8005654:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005656:	2300      	movs	r3, #0
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800565a:	2300      	movs	r3, #0
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800565e:	2301      	movs	r3, #1
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f107 0218 	add.w	r2, r7, #24
 800566a:	4611      	mov	r1, r2
 800566c:	4618      	mov	r0, r3
 800566e:	f002 f960 	bl	8007932 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d90a      	bls.n	800568e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005684:	4618      	mov	r0, r3
 8005686:	f002 fa08 	bl	8007a9a <SDMMC_CmdWriteMultiBlock>
 800568a:	6478      	str	r0, [r7, #68]	; 0x44
 800568c:	e009      	b.n	80056a2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2210      	movs	r2, #16
 8005692:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800569a:	4618      	mov	r0, r3
 800569c:	f002 f9db 	bl	8007a56 <SDMMC_CmdWriteSingleBlock>
 80056a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80056a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d012      	beq.n	80056ce <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a87      	ldr	r2, [pc, #540]	; (80058cc <HAL_SD_WriteBlocks+0x308>)
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b6:	431a      	orrs	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e0f9      	b.n	80058c2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80056d2:	e065      	b.n	80057a0 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d040      	beq.n	8005764 <HAL_SD_WriteBlocks+0x1a0>
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d03d      	beq.n	8005764 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80056e8:	2300      	movs	r3, #0
 80056ea:	643b      	str	r3, [r7, #64]	; 0x40
 80056ec:	e037      	b.n	800575e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80056ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	3301      	adds	r3, #1
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fc:	3b01      	subs	r3, #1
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	021a      	lsls	r2, r3, #8
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	3301      	adds	r3, #1
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005714:	3b01      	subs	r3, #1
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	041a      	lsls	r2, r3, #16
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	3301      	adds	r3, #1
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572c:	3b01      	subs	r3, #1
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	061a      	lsls	r2, r3, #24
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	3301      	adds	r3, #1
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005744:	3b01      	subs	r3, #1
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f107 0214 	add.w	r2, r7, #20
 8005750:	4611      	mov	r1, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f002 f876 	bl	8007844 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575a:	3301      	adds	r3, #1
 800575c:	643b      	str	r3, [r7, #64]	; 0x40
 800575e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005760:	2b07      	cmp	r3, #7
 8005762:	d9c4      	bls.n	80056ee <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005764:	f7fc f95e 	bl	8001a24 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005770:	429a      	cmp	r2, r3
 8005772:	d902      	bls.n	800577a <HAL_SD_WriteBlocks+0x1b6>
 8005774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005776:	2b00      	cmp	r3, #0
 8005778:	d112      	bne.n	80057a0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a53      	ldr	r2, [pc, #332]	; (80058cc <HAL_SD_WriteBlocks+0x308>)
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005788:	431a      	orrs	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e090      	b.n	80058c2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d092      	beq.n	80056d4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d022      	beq.n	8005802 <HAL_SD_WriteBlocks+0x23e>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d91f      	bls.n	8005802 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d01b      	beq.n	8005802 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f002 f986 	bl	8007ae0 <SDMMC_CmdStopTransfer>
 80057d4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80057d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d012      	beq.n	8005802 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a3a      	ldr	r2, [pc, #232]	; (80058cc <HAL_SD_WriteBlocks+0x308>)
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ea:	431a      	orrs	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e05f      	b.n	80058c2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d012      	beq.n	8005836 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2d      	ldr	r2, [pc, #180]	; (80058cc <HAL_SD_WriteBlocks+0x308>)
 8005816:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	f043 0208 	orr.w	r2, r3, #8
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e045      	b.n	80058c2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d012      	beq.n	800586a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a20      	ldr	r2, [pc, #128]	; (80058cc <HAL_SD_WriteBlocks+0x308>)
 800584a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	f043 0202 	orr.w	r2, r3, #2
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e02b      	b.n	80058c2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d012      	beq.n	800589e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a13      	ldr	r2, [pc, #76]	; (80058cc <HAL_SD_WriteBlocks+0x308>)
 800587e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	f043 0210 	orr.w	r2, r3, #16
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e011      	b.n	80058c2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	e006      	b.n	80058c2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
  }
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3748      	adds	r7, #72	; 0x48
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	004005ff 	.word	0x004005ff

080058d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <HAL_SD_IRQHandler+0x2e>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 ff4f 	bl	800679a <SD_Read_IT>
 80058fc:	e155      	b.n	8005baa <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 808f 	beq.w	8005a2c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005916:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8005926:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800592a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d039      	beq.n	80059ba <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <HAL_SD_IRQHandler+0x8a>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d011      	beq.n	800597e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f002 f8be 	bl	8007ae0 <SDMMC_CmdStopTransfer>
 8005964:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f91f 	bl	8005bbc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f240 523a 	movw	r2, #1338	; 0x53a
 8005986:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <HAL_SD_IRQHandler+0xda>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f002 fd34 	bl	8008418 <HAL_SD_RxCpltCallback>
 80059b0:	e0fb      	b.n	8005baa <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f002 fd26 	bl	8008404 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80059b8:	e0f7      	b.n	8005baa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80f2 	beq.w	8005baa <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d011      	beq.n	80059f4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f002 f883 	bl	8007ae0 <SDMMC_CmdStopTransfer>
 80059da:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f8e4 	bl	8005bbc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 80d5 	bne.w	8005baa <HAL_SD_IRQHandler+0x2da>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f040 80cf 	bne.w	8005baa <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0208 	bic.w	r2, r2, #8
 8005a1a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f002 fced 	bl	8008404 <HAL_SD_TxCpltCallback>
}
 8005a2a:	e0be      	b.n	8005baa <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <HAL_SD_IRQHandler+0x17c>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fef9 	bl	800683c <SD_Write_IT>
 8005a4a:	e0ae      	b.n	8005baa <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a52:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 80a7 	beq.w	8005baa <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	f043 0202 	orr.w	r2, r3, #2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	f043 0208 	orr.w	r2, r3, #8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	f043 0220 	orr.w	r2, r3, #32
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	f043 0210 	orr.w	r2, r3, #16
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f240 523a 	movw	r2, #1338	; 0x53a
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005adc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 fffc 	bl	8007ae0 <SDMMC_CmdStopTransfer>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f855 	bl	8005bbc <HAL_SD_ErrorCallback>
}
 8005b12:	e04a      	b.n	8005baa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d045      	beq.n	8005baa <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <HAL_SD_IRQHandler+0x262>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d011      	beq.n	8005b56 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b36:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <HAL_SD_IRQHandler+0x2e4>)
 8005b38:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fc fa44 	bl	8001fcc <HAL_DMA_Abort_IT>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d02f      	beq.n	8005baa <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fac8 	bl	80060e4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b54:	e029      	b.n	8005baa <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <HAL_SD_IRQHandler+0x29a>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d011      	beq.n	8005b8e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	4a12      	ldr	r2, [pc, #72]	; (8005bb8 <HAL_SD_IRQHandler+0x2e8>)
 8005b70:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fc fa28 	bl	8001fcc <HAL_DMA_Abort_IT>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d013      	beq.n	8005baa <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fae3 	bl	8006152 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b8c:	e00d      	b.n	8005baa <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f002 fc24 	bl	80083f0 <HAL_SD_AbortCallback>
}
 8005ba8:	e7ff      	b.n	8005baa <HAL_SD_IRQHandler+0x2da>
 8005baa:	bf00      	nop
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	080060e5 	.word	0x080060e5
 8005bb8:	08006153 	.word	0x08006153

08005bbc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bde:	0f9b      	lsrs	r3, r3, #30
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bea:	0e9b      	lsrs	r3, r3, #26
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfc:	0e1b      	lsrs	r3, r3, #24
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c0e:	0c1b      	lsrs	r3, r3, #16
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c30:	0d1b      	lsrs	r3, r3, #20
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3c:	0c1b      	lsrs	r3, r3, #16
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c4e:	0bdb      	lsrs	r3, r3, #15
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c60:	0b9b      	lsrs	r3, r3, #14
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c72:	0b5b      	lsrs	r3, r3, #13
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c84:	0b1b      	lsrs	r3, r3, #12
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d163      	bne.n	8005d68 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca4:	009a      	lsls	r2, r3, #2
 8005ca6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005caa:	4013      	ands	r3, r2
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005cb0:	0f92      	lsrs	r2, r2, #30
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cbc:	0edb      	lsrs	r3, r3, #27
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cce:	0e1b      	lsrs	r3, r3, #24
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce0:	0d5b      	lsrs	r3, r3, #21
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf2:	0c9b      	lsrs	r3, r3, #18
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d04:	0bdb      	lsrs	r3, r3, #15
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	7e1b      	ldrb	r3, [r3, #24]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	3302      	adds	r3, #2
 8005d28:	2201      	movs	r2, #1
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d32:	fb03 f202 	mul.w	r2, r3, r2
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	7a1b      	ldrb	r3, [r3, #8]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	2201      	movs	r2, #1
 8005d46:	409a      	lsls	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d54:	0a52      	lsrs	r2, r2, #9
 8005d56:	fb03 f202 	mul.w	r2, r3, r2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d64:	661a      	str	r2, [r3, #96]	; 0x60
 8005d66:	e031      	b.n	8005dcc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d11d      	bne.n	8005dac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d74:	041b      	lsls	r3, r3, #16
 8005d76:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	431a      	orrs	r2, r3
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	029a      	lsls	r2, r3, #10
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	661a      	str	r2, [r3, #96]	; 0x60
 8005daa:	e00f      	b.n	8005dcc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a58      	ldr	r2, [pc, #352]	; (8005f14 <HAL_SD_GetCardCSD+0x344>)
 8005db2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e09d      	b.n	8005f08 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd0:	0b9b      	lsrs	r3, r3, #14
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de2:	09db      	lsrs	r3, r3, #7
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	0fdb      	lsrs	r3, r3, #31
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e10:	0f5b      	lsrs	r3, r3, #29
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0303 	and.w	r3, r3, #3
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	0e9b      	lsrs	r3, r3, #26
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	0d9b      	lsrs	r3, r3, #22
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	0d5b      	lsrs	r3, r3, #21
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e76:	0bdb      	lsrs	r3, r3, #15
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8a:	0b9b      	lsrs	r3, r3, #14
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	0b5b      	lsrs	r3, r3, #13
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	0b1b      	lsrs	r3, r3, #12
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	0a9b      	lsrs	r3, r3, #10
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	0a1b      	lsrs	r3, r3, #8
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	004005ff 	.word	0x004005ff

08005f18 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005f70:	b5b0      	push	{r4, r5, r7, lr}
 8005f72:	b08e      	sub	sp, #56	; 0x38
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2203      	movs	r2, #3
 8005f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d02e      	beq.n	8005fee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f96:	d106      	bne.n	8005fa6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
 8005fa4:	e029      	b.n	8005ffa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fac:	d10a      	bne.n	8005fc4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa8a 	bl	80064c8 <SD_WideBus_Enable>
 8005fb4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
 8005fc2:	e01a      	b.n	8005ffa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fac7 	bl	800655e <SD_WideBus_Disable>
 8005fd0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
 8005fde:	e00c      	b.n	8005ffa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38
 8005fec:	e005      	b.n	8005ffa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a26      	ldr	r2, [pc, #152]	; (80060a0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006018:	e01f      	b.n	800605a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681d      	ldr	r5, [r3, #0]
 8006040:	466c      	mov	r4, sp
 8006042:	f107 0314 	add.w	r3, r7, #20
 8006046:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800604a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800604e:	f107 0308 	add.w	r3, r7, #8
 8006052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006054:	4628      	mov	r0, r5
 8006056:	f001 fbbd 	bl	80077d4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006062:	4618      	mov	r0, r3
 8006064:	f001 fc91 	bl	800798a <SDMMC_CmdBlockLength>
 8006068:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a0a      	ldr	r2, [pc, #40]	; (80060a0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006076:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006096:	4618      	mov	r0, r3
 8006098:	3728      	adds	r7, #40	; 0x28
 800609a:	46bd      	mov	sp, r7
 800609c:	bdb0      	pop	{r4, r5, r7, pc}
 800609e:	bf00      	nop
 80060a0:	004005ff 	.word	0x004005ff

080060a4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80060b0:	f107 030c 	add.w	r3, r7, #12
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f9de 	bl	8006478 <SD_SendStatus>
 80060bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	0a5b      	lsrs	r3, r3, #9
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80060da:	693b      	ldr	r3, [r7, #16]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f7ff ffd1 	bl	80060a4 <HAL_SD_GetCardState>
 8006102:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b06      	cmp	r3, #6
 8006116:	d002      	beq.n	800611e <SD_DMATxAbort+0x3a>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b05      	cmp	r3, #5
 800611c:	d10a      	bne.n	8006134 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f001 fcdc 	bl	8007ae0 <SDMMC_CmdStopTransfer>
 8006128:	4602      	mov	r2, r0
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	431a      	orrs	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f002 f957 	bl	80083f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006142:	e002      	b.n	800614a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff fd39 	bl	8005bbc <HAL_SD_ErrorCallback>
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f240 523a 	movw	r2, #1338	; 0x53a
 8006168:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff ff9a 	bl	80060a4 <HAL_SD_GetCardState>
 8006170:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b06      	cmp	r3, #6
 8006184:	d002      	beq.n	800618c <SD_DMARxAbort+0x3a>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b05      	cmp	r3, #5
 800618a:	d10a      	bne.n	80061a2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f001 fca5 	bl	8007ae0 <SDMMC_CmdStopTransfer>
 8006196:	4602      	mov	r2, r0
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	431a      	orrs	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d103      	bne.n	80061b2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f002 f920 	bl	80083f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80061b0:	e002      	b.n	80061b8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7ff fd02 	bl	8005bbc <HAL_SD_ErrorCallback>
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061c0:	b5b0      	push	{r4, r5, r7, lr}
 80061c2:	b094      	sub	sp, #80	; 0x50
 80061c4:	af04      	add	r7, sp, #16
 80061c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80061c8:	2301      	movs	r3, #1
 80061ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f001 fb56 	bl	8007882 <SDIO_GetPowerState>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061e0:	e0b8      	b.n	8006354 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d02f      	beq.n	800624a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 fd80 	bl	8007cf4 <SDMMC_CmdSendCID>
 80061f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <SD_InitCard+0x40>
    {
      return errorstate;
 80061fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fe:	e0a9      	b.n	8006354 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f001 fb80 	bl	800790c <SDIO_GetResponse>
 800620c:	4602      	mov	r2, r0
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2104      	movs	r1, #4
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fb77 	bl	800790c <SDIO_GetResponse>
 800621e:	4602      	mov	r2, r0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2108      	movs	r1, #8
 800622a:	4618      	mov	r0, r3
 800622c:	f001 fb6e 	bl	800790c <SDIO_GetResponse>
 8006230:	4602      	mov	r2, r0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	210c      	movs	r1, #12
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fb65 	bl	800790c <SDIO_GetResponse>
 8006242:	4602      	mov	r2, r0
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624e:	2b03      	cmp	r3, #3
 8006250:	d00d      	beq.n	800626e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f107 020e 	add.w	r2, r7, #14
 800625a:	4611      	mov	r1, r2
 800625c:	4618      	mov	r0, r3
 800625e:	f001 fd86 	bl	8007d6e <SDMMC_CmdSetRelAdd>
 8006262:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <SD_InitCard+0xae>
    {
      return errorstate;
 800626a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626c:	e072      	b.n	8006354 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	2b03      	cmp	r3, #3
 8006274:	d036      	beq.n	80062e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006276:	89fb      	ldrh	r3, [r7, #14]
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	4619      	mov	r1, r3
 800628a:	4610      	mov	r0, r2
 800628c:	f001 fd50 	bl	8007d30 <SDMMC_CmdSendCSD>
 8006290:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629a:	e05b      	b.n	8006354 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2100      	movs	r1, #0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 fb32 	bl	800790c <SDIO_GetResponse>
 80062a8:	4602      	mov	r2, r0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2104      	movs	r1, #4
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 fb29 	bl	800790c <SDIO_GetResponse>
 80062ba:	4602      	mov	r2, r0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2108      	movs	r1, #8
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 fb20 	bl	800790c <SDIO_GetResponse>
 80062cc:	4602      	mov	r2, r0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	210c      	movs	r1, #12
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 fb17 	bl	800790c <SDIO_GetResponse>
 80062de:	4602      	mov	r2, r0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2104      	movs	r1, #4
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 fb0e 	bl	800790c <SDIO_GetResponse>
 80062f0:	4603      	mov	r3, r0
 80062f2:	0d1a      	lsrs	r2, r3, #20
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80062f8:	f107 0310 	add.w	r3, r7, #16
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff fc66 	bl	8005bd0 <HAL_SD_GetCardCSD>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800630a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800630e:	e021      	b.n	8006354 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6819      	ldr	r1, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	041b      	lsls	r3, r3, #16
 800631a:	2200      	movs	r2, #0
 800631c:	461c      	mov	r4, r3
 800631e:	4615      	mov	r5, r2
 8006320:	4622      	mov	r2, r4
 8006322:	462b      	mov	r3, r5
 8006324:	4608      	mov	r0, r1
 8006326:	f001 fbfd 	bl	8007b24 <SDMMC_CmdSelDesel>
 800632a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800632c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <SD_InitCard+0x176>
  {
    return errorstate;
 8006332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006334:	e00e      	b.n	8006354 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681d      	ldr	r5, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	466c      	mov	r4, sp
 800633e:	f103 0210 	add.w	r2, r3, #16
 8006342:	ca07      	ldmia	r2, {r0, r1, r2}
 8006344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006348:	3304      	adds	r3, #4
 800634a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800634c:	4628      	mov	r0, r5
 800634e:	f001 fa41 	bl	80077d4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3740      	adds	r7, #64	; 0x40
 8006358:	46bd      	mov	sp, r7
 800635a:	bdb0      	pop	{r4, r5, r7, pc}

0800635c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	2300      	movs	r3, #0
 800636e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f001 fbf8 	bl	8007b6a <SDMMC_CmdGoIdleState>
 800637a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	e072      	b.n	800646c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f001 fc0b 	bl	8007ba6 <SDMMC_CmdOperCond>
 8006390:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00d      	beq.n	80063b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 fbe1 	bl	8007b6a <SDMMC_CmdGoIdleState>
 80063a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	e05b      	b.n	800646c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d137      	bne.n	8006432 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 fc0b 	bl	8007be4 <SDMMC_CmdAppCommand>
 80063ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d02d      	beq.n	8006432 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063da:	e047      	b.n	800646c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fbfe 	bl	8007be4 <SDMMC_CmdAppCommand>
 80063e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	e03b      	b.n	800646c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	491e      	ldr	r1, [pc, #120]	; (8006474 <SD_PowerON+0x118>)
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fc14 	bl	8007c28 <SDMMC_CmdAppOperCommand>
 8006400:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006408:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800640c:	e02e      	b.n	800646c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2100      	movs	r1, #0
 8006414:	4618      	mov	r0, r3
 8006416:	f001 fa79 	bl	800790c <SDIO_GetResponse>
 800641a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	0fdb      	lsrs	r3, r3, #31
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <SD_PowerON+0xcc>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <SD_PowerON+0xce>
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]

    count++;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	3301      	adds	r3, #1
 8006430:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006438:	4293      	cmp	r3, r2
 800643a:	d802      	bhi.n	8006442 <SD_PowerON+0xe6>
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0cc      	beq.n	80063dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006448:	4293      	cmp	r3, r2
 800644a:	d902      	bls.n	8006452 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800644c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006450:	e00c      	b.n	800646c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	645a      	str	r2, [r3, #68]	; 0x44
 8006462:	e002      	b.n	800646a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	c1100000 	.word	0xc1100000

08006478 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800648c:	e018      	b.n	80064c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006496:	041b      	lsls	r3, r3, #16
 8006498:	4619      	mov	r1, r3
 800649a:	4610      	mov	r0, r2
 800649c:	f001 fc88 	bl	8007db0 <SDMMC_CmdSendStatus>
 80064a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	e009      	b.n	80064c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2100      	movs	r1, #0
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 fa2a 	bl	800790c <SDIO_GetResponse>
 80064b8:	4602      	mov	r2, r0
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	2300      	movs	r3, #0
 80064d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 fa14 	bl	800790c <SDIO_GetResponse>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ee:	d102      	bne.n	80064f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064f4:	e02f      	b.n	8006556 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064f6:	f107 030c 	add.w	r3, r7, #12
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f879 	bl	80065f4 <SD_FindSCR>
 8006502:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	e023      	b.n	8006556 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01c      	beq.n	8006552 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006520:	041b      	lsls	r3, r3, #16
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f001 fb5d 	bl	8007be4 <SDMMC_CmdAppCommand>
 800652a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	e00f      	b.n	8006556 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2102      	movs	r1, #2
 800653c:	4618      	mov	r0, r3
 800653e:	f001 fb96 	bl	8007c6e <SDMMC_CmdBusWidth>
 8006542:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	e003      	b.n	8006556 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800654e:	2300      	movs	r3, #0
 8006550:	e001      	b.n	8006556 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006552:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b086      	sub	sp, #24
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	2300      	movs	r3, #0
 800656c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2100      	movs	r1, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f001 f9c9 	bl	800790c <SDIO_GetResponse>
 800657a:	4603      	mov	r3, r0
 800657c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006584:	d102      	bne.n	800658c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800658a:	e02f      	b.n	80065ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800658c:	f107 030c 	add.w	r3, r7, #12
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f82e 	bl	80065f4 <SD_FindSCR>
 8006598:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	e023      	b.n	80065ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01c      	beq.n	80065e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	4619      	mov	r1, r3
 80065ba:	4610      	mov	r0, r2
 80065bc:	f001 fb12 	bl	8007be4 <SDMMC_CmdAppCommand>
 80065c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	e00f      	b.n	80065ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2100      	movs	r1, #0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f001 fb4b 	bl	8007c6e <SDMMC_CmdBusWidth>
 80065d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	e003      	b.n	80065ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e001      	b.n	80065ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80065e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80065f4:	b590      	push	{r4, r7, lr}
 80065f6:	b08f      	sub	sp, #60	; 0x3c
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80065fe:	f7fb fa11 	bl	8001a24 <HAL_GetTick>
 8006602:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006608:	2300      	movs	r3, #0
 800660a:	60bb      	str	r3, [r7, #8]
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2108      	movs	r1, #8
 800661a:	4618      	mov	r0, r3
 800661c:	f001 f9b5 	bl	800798a <SDMMC_CmdBlockLength>
 8006620:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <SD_FindSCR+0x38>
  {
    return errorstate;
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	e0b2      	b.n	8006792 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006634:	041b      	lsls	r3, r3, #16
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f001 fad3 	bl	8007be4 <SDMMC_CmdAppCommand>
 800663e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <SD_FindSCR+0x56>
  {
    return errorstate;
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	e0a3      	b.n	8006792 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800664a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800664e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006650:	2308      	movs	r3, #8
 8006652:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006654:	2330      	movs	r3, #48	; 0x30
 8006656:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006658:	2302      	movs	r3, #2
 800665a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800665c:	2300      	movs	r3, #0
 800665e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006660:	2301      	movs	r3, #1
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f107 0210 	add.w	r2, r7, #16
 800666c:	4611      	mov	r1, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f001 f95f 	bl	8007932 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fb1a 	bl	8007cb2 <SDMMC_CmdSendSCR>
 800667e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	2b00      	cmp	r3, #0
 8006684:	d02a      	beq.n	80066dc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	e083      	b.n	8006792 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00f      	beq.n	80066b8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6819      	ldr	r1, [r3, #0]
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	f107 0208 	add.w	r2, r7, #8
 80066a4:	18d4      	adds	r4, r2, r3
 80066a6:	4608      	mov	r0, r1
 80066a8:	f001 f8bf 	bl	800782a <SDIO_ReadFIFO>
 80066ac:	4603      	mov	r3, r0
 80066ae:	6023      	str	r3, [r4, #0]
      index++;
 80066b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b2:	3301      	adds	r3, #1
 80066b4:	637b      	str	r3, [r7, #52]	; 0x34
 80066b6:	e006      	b.n	80066c6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d012      	beq.n	80066ec <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80066c6:	f7fb f9ad 	bl	8001a24 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d4:	d102      	bne.n	80066dc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80066d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066da:	e05a      	b.n	8006792 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0cf      	beq.n	800668a <SD_FindSCR+0x96>
 80066ea:	e000      	b.n	80066ee <SD_FindSCR+0xfa>
      break;
 80066ec:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2208      	movs	r2, #8
 8006702:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006704:	2308      	movs	r3, #8
 8006706:	e044      	b.n	8006792 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2202      	movs	r2, #2
 800671c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800671e:	2302      	movs	r3, #2
 8006720:	e037      	b.n	8006792 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2220      	movs	r2, #32
 8006736:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006738:	2320      	movs	r3, #32
 800673a:	e02a      	b.n	8006792 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f240 523a 	movw	r2, #1338	; 0x53a
 8006744:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	061a      	lsls	r2, r3, #24
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006752:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	0a1b      	lsrs	r3, r3, #8
 8006758:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800675c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	0e1b      	lsrs	r3, r3, #24
 8006762:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	601a      	str	r2, [r3, #0]
    scr++;
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	3304      	adds	r3, #4
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	061a      	lsls	r2, r3, #24
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800677a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	0a1b      	lsrs	r3, r3, #8
 8006780:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006784:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	0e1b      	lsrs	r3, r3, #24
 800678a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	373c      	adds	r7, #60	; 0x3c
 8006796:	46bd      	mov	sp, r7
 8006798:	bd90      	pop	{r4, r7, pc}

0800679a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b086      	sub	sp, #24
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d03f      	beq.n	8006834 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	e033      	b.n	8006822 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 f833 	bl	800782a <SDIO_ReadFIFO>
 80067c4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	0a1b      	lsrs	r3, r3, #8
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	0c1b      	lsrs	r3, r3, #16
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	3b01      	subs	r3, #1
 8006804:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	0e1b      	lsrs	r3, r3, #24
 800680a:	b2da      	uxtb	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	3b01      	subs	r3, #1
 800681a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	3301      	adds	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b07      	cmp	r3, #7
 8006826:	d9c8      	bls.n	80067ba <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006834:	bf00      	nop
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d043      	beq.n	80068de <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	e037      	b.n	80068cc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	3b01      	subs	r3, #1
 800686c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	021a      	lsls	r2, r3, #8
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4313      	orrs	r3, r2
 8006878:	60bb      	str	r3, [r7, #8]
      tmp++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3b01      	subs	r3, #1
 8006884:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	041a      	lsls	r2, r3, #16
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4313      	orrs	r3, r2
 8006890:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3301      	adds	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3b01      	subs	r3, #1
 800689c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	061a      	lsls	r2, r3, #24
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f107 0208 	add.w	r2, r7, #8
 80068be:	4611      	mov	r1, r2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 ffbf 	bl	8007844 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	3301      	adds	r3, #1
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2b07      	cmp	r3, #7
 80068d0:	d9c4      	bls.n	800685c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80068de:	bf00      	nop
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e03f      	b.n	8006978 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7fa feeb 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2224      	movs	r2, #36	; 0x24
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006928:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fcde 	bl	80072ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691a      	ldr	r2, [r3, #16]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800693e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695a      	ldr	r2, [r3, #20]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800694e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800695e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b20      	cmp	r3, #32
 8006998:	d11d      	bne.n	80069d6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <HAL_UART_Receive_IT+0x26>
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e016      	b.n	80069d8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_UART_Receive_IT+0x38>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e00f      	b.n	80069d8 <HAL_UART_Receive_IT+0x58>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	461a      	mov	r2, r3
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fab5 	bl	8006f3c <UART_Start_Receive_IT>
 80069d2:	4603      	mov	r3, r0
 80069d4:	e000      	b.n	80069d8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80069d6:	2302      	movs	r3, #2
  }
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b0ba      	sub	sp, #232	; 0xe8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10f      	bne.n	8006a46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d009      	beq.n	8006a46 <HAL_UART_IRQHandler+0x66>
 8006a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fb99 	bl	8007176 <UART_Receive_IT>
      return;
 8006a44:	e256      	b.n	8006ef4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80de 	beq.w	8006c0c <HAL_UART_IRQHandler+0x22c>
 8006a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80d1 	beq.w	8006c0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <HAL_UART_IRQHandler+0xae>
 8006a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f043 0201 	orr.w	r2, r3, #1
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <HAL_UART_IRQHandler+0xd2>
 8006a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f043 0202 	orr.w	r2, r3, #2
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xf6>
 8006abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	f043 0204 	orr.w	r2, r3, #4
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d011      	beq.n	8006b06 <HAL_UART_IRQHandler+0x126>
 8006ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d105      	bne.n	8006afa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f043 0208 	orr.w	r2, r3, #8
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 81ed 	beq.w	8006eea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_UART_IRQHandler+0x14e>
 8006b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fb24 	bl	8007176 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b38:	2b40      	cmp	r3, #64	; 0x40
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2301      	moveq	r3, #1
 8006b3e:	2300      	movne	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d103      	bne.n	8006b5a <HAL_UART_IRQHandler+0x17a>
 8006b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d04f      	beq.n	8006bfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa2c 	bl	8006fb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6a:	2b40      	cmp	r3, #64	; 0x40
 8006b6c:	d141      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3314      	adds	r3, #20
 8006b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3314      	adds	r3, #20
 8006b96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1d9      	bne.n	8006b6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d013      	beq.n	8006bea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	4a7d      	ldr	r2, [pc, #500]	; (8006dbc <HAL_UART_IRQHandler+0x3dc>)
 8006bc8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fb f9fc 	bl	8001fcc <HAL_DMA_Abort_IT>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d016      	beq.n	8006c08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006be4:	4610      	mov	r0, r2
 8006be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be8:	e00e      	b.n	8006c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f990 	bl	8006f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	e00a      	b.n	8006c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f98c 	bl	8006f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf8:	e006      	b.n	8006c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f988 	bl	8006f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c06:	e170      	b.n	8006eea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c08:	bf00      	nop
    return;
 8006c0a:	e16e      	b.n	8006eea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	f040 814a 	bne.w	8006eaa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 8143 	beq.w	8006eaa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 813c 	beq.w	8006eaa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	60bb      	str	r3, [r7, #8]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	60bb      	str	r3, [r7, #8]
 8006c46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c52:	2b40      	cmp	r3, #64	; 0x40
 8006c54:	f040 80b4 	bne.w	8006dc0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8140 	beq.w	8006eee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c76:	429a      	cmp	r2, r3
 8006c78:	f080 8139 	bcs.w	8006eee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c8e:	f000 8088 	beq.w	8006da2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	330c      	adds	r3, #12
 8006c98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006cbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1d9      	bne.n	8006c92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3314      	adds	r3, #20
 8006ce4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cf0:	f023 0301 	bic.w	r3, r3, #1
 8006cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3314      	adds	r3, #20
 8006cfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e1      	bne.n	8006cde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3314      	adds	r3, #20
 8006d20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3314      	adds	r3, #20
 8006d3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e3      	bne.n	8006d1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	330c      	adds	r3, #12
 8006d66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d72:	f023 0310 	bic.w	r3, r3, #16
 8006d76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	330c      	adds	r3, #12
 8006d80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d84:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e3      	bne.n	8006d60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fb f8a5 	bl	8001eec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8b6 	bl	8006f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006db8:	e099      	b.n	8006eee <HAL_UART_IRQHandler+0x50e>
 8006dba:	bf00      	nop
 8006dbc:	0800707f 	.word	0x0800707f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 808b 	beq.w	8006ef2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8086 	beq.w	8006ef2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	330c      	adds	r3, #12
 8006dec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	330c      	adds	r3, #12
 8006e06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e0a:	647a      	str	r2, [r7, #68]	; 0x44
 8006e0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e3      	bne.n	8006de6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3314      	adds	r3, #20
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	f023 0301 	bic.w	r3, r3, #1
 8006e34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e42:	633a      	str	r2, [r7, #48]	; 0x30
 8006e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e3      	bne.n	8006e1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0310 	bic.w	r3, r3, #16
 8006e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e88:	61fa      	str	r2, [r7, #28]
 8006e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	69b9      	ldr	r1, [r7, #24]
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	617b      	str	r3, [r7, #20]
   return(result);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e3      	bne.n	8006e64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f83e 	bl	8006f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ea8:	e023      	b.n	8006ef2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <HAL_UART_IRQHandler+0x4ea>
 8006eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f8ef 	bl	80070a6 <UART_Transmit_IT>
    return;
 8006ec8:	e014      	b.n	8006ef4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00e      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x514>
 8006ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d008      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f92f 	bl	8007146 <UART_EndTransmit_IT>
    return;
 8006ee8:	e004      	b.n	8006ef4 <HAL_UART_IRQHandler+0x514>
    return;
 8006eea:	bf00      	nop
 8006eec:	e002      	b.n	8006ef4 <HAL_UART_IRQHandler+0x514>
      return;
 8006eee:	bf00      	nop
 8006ef0:	e000      	b.n	8006ef4 <HAL_UART_IRQHandler+0x514>
      return;
 8006ef2:	bf00      	nop
  }
}
 8006ef4:	37e8      	adds	r7, #232	; 0xe8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop

08006efc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	88fa      	ldrh	r2, [r7, #6]
 8006f54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	88fa      	ldrh	r2, [r7, #6]
 8006f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2222      	movs	r2, #34	; 0x22
 8006f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695a      	ldr	r2, [r3, #20]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0201 	orr.w	r2, r2, #1
 8006f98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f042 0220 	orr.w	r2, r2, #32
 8006fa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b095      	sub	sp, #84	; 0x54
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	330c      	adds	r3, #12
 8006fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fe0:	643a      	str	r2, [r7, #64]	; 0x40
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e5      	bne.n	8006fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3314      	adds	r3, #20
 8006ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	61fb      	str	r3, [r7, #28]
   return(result);
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	f023 0301 	bic.w	r3, r3, #1
 800700a:	64bb      	str	r3, [r7, #72]	; 0x48
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3314      	adds	r3, #20
 8007012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800701a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e5      	bne.n	8006ff4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	2b01      	cmp	r3, #1
 800702e:	d119      	bne.n	8007064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f023 0310 	bic.w	r3, r3, #16
 8007046:	647b      	str	r3, [r7, #68]	; 0x44
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	330c      	adds	r3, #12
 800704e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007050:	61ba      	str	r2, [r7, #24]
 8007052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6979      	ldr	r1, [r7, #20]
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	613b      	str	r3, [r7, #16]
   return(result);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e5      	bne.n	8007030 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007072:	bf00      	nop
 8007074:	3754      	adds	r7, #84	; 0x54
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff ff39 	bl	8006f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b085      	sub	sp, #20
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b21      	cmp	r3, #33	; 0x21
 80070b8:	d13e      	bne.n	8007138 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c2:	d114      	bne.n	80070ee <UART_Transmit_IT+0x48>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d110      	bne.n	80070ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	1c9a      	adds	r2, r3, #2
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	621a      	str	r2, [r3, #32]
 80070ec:	e008      	b.n	8007100 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	1c59      	adds	r1, r3, #1
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6211      	str	r1, [r2, #32]
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29b      	uxth	r3, r3
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	4619      	mov	r1, r3
 800710e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10f      	bne.n	8007134 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007122:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007132:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	e000      	b.n	800713a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007138:	2302      	movs	r3, #2
  }
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800715c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff fec8 	bl	8006efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b08c      	sub	sp, #48	; 0x30
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b22      	cmp	r3, #34	; 0x22
 8007188:	f040 80ab 	bne.w	80072e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007194:	d117      	bne.n	80071c6 <UART_Receive_IT+0x50>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d113      	bne.n	80071c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	1c9a      	adds	r2, r3, #2
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28
 80071c4:	e026      	b.n	8007214 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d8:	d007      	beq.n	80071ea <UART_Receive_IT+0x74>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10a      	bne.n	80071f8 <UART_Receive_IT+0x82>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d106      	bne.n	80071f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	e008      	b.n	800720a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007204:	b2da      	uxtb	r2, r3
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29b      	uxth	r3, r3
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4619      	mov	r1, r3
 8007222:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007224:	2b00      	cmp	r3, #0
 8007226:	d15a      	bne.n	80072de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0220 	bic.w	r2, r2, #32
 8007236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695a      	ldr	r2, [r3, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	2b01      	cmp	r3, #1
 8007266:	d135      	bne.n	80072d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	613b      	str	r3, [r7, #16]
   return(result);
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f023 0310 	bic.w	r3, r3, #16
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	330c      	adds	r3, #12
 800728c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728e:	623a      	str	r2, [r7, #32]
 8007290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	69f9      	ldr	r1, [r7, #28]
 8007294:	6a3a      	ldr	r2, [r7, #32]
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	61bb      	str	r3, [r7, #24]
   return(result);
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e5      	bne.n	800726e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0310 	and.w	r3, r3, #16
 80072ac:	2b10      	cmp	r3, #16
 80072ae:	d10a      	bne.n	80072c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff fe29 	bl	8006f24 <HAL_UARTEx_RxEventCallback>
 80072d2:	e002      	b.n	80072da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7f9 ff59 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	e002      	b.n	80072e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	e000      	b.n	80072e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80072e2:	2302      	movs	r3, #2
  }
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3730      	adds	r7, #48	; 0x30
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072f0:	b0c0      	sub	sp, #256	; 0x100
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007308:	68d9      	ldr	r1, [r3, #12]
 800730a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	ea40 0301 	orr.w	r3, r0, r1
 8007314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	431a      	orrs	r2, r3
 8007324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	431a      	orrs	r2, r3
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007344:	f021 010c 	bic.w	r1, r1, #12
 8007348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007352:	430b      	orrs	r3, r1
 8007354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007366:	6999      	ldr	r1, [r3, #24]
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	ea40 0301 	orr.w	r3, r0, r1
 8007372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	4b8f      	ldr	r3, [pc, #572]	; (80075b8 <UART_SetConfig+0x2cc>)
 800737c:	429a      	cmp	r2, r3
 800737e:	d005      	beq.n	800738c <UART_SetConfig+0xa0>
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4b8d      	ldr	r3, [pc, #564]	; (80075bc <UART_SetConfig+0x2d0>)
 8007388:	429a      	cmp	r2, r3
 800738a:	d104      	bne.n	8007396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800738c:	f7fc fc40 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8007390:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007394:	e003      	b.n	800739e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007396:	f7fc fc27 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 800739a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a8:	f040 810c 	bne.w	80075c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073b0:	2200      	movs	r2, #0
 80073b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80073ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073be:	4622      	mov	r2, r4
 80073c0:	462b      	mov	r3, r5
 80073c2:	1891      	adds	r1, r2, r2
 80073c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80073c6:	415b      	adcs	r3, r3
 80073c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073ce:	4621      	mov	r1, r4
 80073d0:	eb12 0801 	adds.w	r8, r2, r1
 80073d4:	4629      	mov	r1, r5
 80073d6:	eb43 0901 	adc.w	r9, r3, r1
 80073da:	f04f 0200 	mov.w	r2, #0
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073ee:	4690      	mov	r8, r2
 80073f0:	4699      	mov	r9, r3
 80073f2:	4623      	mov	r3, r4
 80073f4:	eb18 0303 	adds.w	r3, r8, r3
 80073f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073fc:	462b      	mov	r3, r5
 80073fe:	eb49 0303 	adc.w	r3, r9, r3
 8007402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007412:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800741a:	460b      	mov	r3, r1
 800741c:	18db      	adds	r3, r3, r3
 800741e:	653b      	str	r3, [r7, #80]	; 0x50
 8007420:	4613      	mov	r3, r2
 8007422:	eb42 0303 	adc.w	r3, r2, r3
 8007426:	657b      	str	r3, [r7, #84]	; 0x54
 8007428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800742c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007430:	f7f8 ff4e 	bl	80002d0 <__aeabi_uldivmod>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4b61      	ldr	r3, [pc, #388]	; (80075c0 <UART_SetConfig+0x2d4>)
 800743a:	fba3 2302 	umull	r2, r3, r3, r2
 800743e:	095b      	lsrs	r3, r3, #5
 8007440:	011c      	lsls	r4, r3, #4
 8007442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007446:	2200      	movs	r2, #0
 8007448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800744c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007454:	4642      	mov	r2, r8
 8007456:	464b      	mov	r3, r9
 8007458:	1891      	adds	r1, r2, r2
 800745a:	64b9      	str	r1, [r7, #72]	; 0x48
 800745c:	415b      	adcs	r3, r3
 800745e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007464:	4641      	mov	r1, r8
 8007466:	eb12 0a01 	adds.w	sl, r2, r1
 800746a:	4649      	mov	r1, r9
 800746c:	eb43 0b01 	adc.w	fp, r3, r1
 8007470:	f04f 0200 	mov.w	r2, #0
 8007474:	f04f 0300 	mov.w	r3, #0
 8007478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800747c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007484:	4692      	mov	sl, r2
 8007486:	469b      	mov	fp, r3
 8007488:	4643      	mov	r3, r8
 800748a:	eb1a 0303 	adds.w	r3, sl, r3
 800748e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007492:	464b      	mov	r3, r9
 8007494:	eb4b 0303 	adc.w	r3, fp, r3
 8007498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80074ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80074b0:	460b      	mov	r3, r1
 80074b2:	18db      	adds	r3, r3, r3
 80074b4:	643b      	str	r3, [r7, #64]	; 0x40
 80074b6:	4613      	mov	r3, r2
 80074b8:	eb42 0303 	adc.w	r3, r2, r3
 80074bc:	647b      	str	r3, [r7, #68]	; 0x44
 80074be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074c6:	f7f8 ff03 	bl	80002d0 <__aeabi_uldivmod>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4611      	mov	r1, r2
 80074d0:	4b3b      	ldr	r3, [pc, #236]	; (80075c0 <UART_SetConfig+0x2d4>)
 80074d2:	fba3 2301 	umull	r2, r3, r3, r1
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	2264      	movs	r2, #100	; 0x64
 80074da:	fb02 f303 	mul.w	r3, r2, r3
 80074de:	1acb      	subs	r3, r1, r3
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074e6:	4b36      	ldr	r3, [pc, #216]	; (80075c0 <UART_SetConfig+0x2d4>)
 80074e8:	fba3 2302 	umull	r2, r3, r3, r2
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074f4:	441c      	add	r4, r3
 80074f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007500:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007508:	4642      	mov	r2, r8
 800750a:	464b      	mov	r3, r9
 800750c:	1891      	adds	r1, r2, r2
 800750e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007510:	415b      	adcs	r3, r3
 8007512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007518:	4641      	mov	r1, r8
 800751a:	1851      	adds	r1, r2, r1
 800751c:	6339      	str	r1, [r7, #48]	; 0x30
 800751e:	4649      	mov	r1, r9
 8007520:	414b      	adcs	r3, r1
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007530:	4659      	mov	r1, fp
 8007532:	00cb      	lsls	r3, r1, #3
 8007534:	4651      	mov	r1, sl
 8007536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800753a:	4651      	mov	r1, sl
 800753c:	00ca      	lsls	r2, r1, #3
 800753e:	4610      	mov	r0, r2
 8007540:	4619      	mov	r1, r3
 8007542:	4603      	mov	r3, r0
 8007544:	4642      	mov	r2, r8
 8007546:	189b      	adds	r3, r3, r2
 8007548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800754c:	464b      	mov	r3, r9
 800754e:	460a      	mov	r2, r1
 8007550:	eb42 0303 	adc.w	r3, r2, r3
 8007554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007564:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800756c:	460b      	mov	r3, r1
 800756e:	18db      	adds	r3, r3, r3
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
 8007572:	4613      	mov	r3, r2
 8007574:	eb42 0303 	adc.w	r3, r2, r3
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800757a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800757e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007582:	f7f8 fea5 	bl	80002d0 <__aeabi_uldivmod>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <UART_SetConfig+0x2d4>)
 800758c:	fba3 1302 	umull	r1, r3, r3, r2
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	2164      	movs	r1, #100	; 0x64
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	3332      	adds	r3, #50	; 0x32
 800759e:	4a08      	ldr	r2, [pc, #32]	; (80075c0 <UART_SetConfig+0x2d4>)
 80075a0:	fba2 2303 	umull	r2, r3, r2, r3
 80075a4:	095b      	lsrs	r3, r3, #5
 80075a6:	f003 0207 	and.w	r2, r3, #7
 80075aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4422      	add	r2, r4
 80075b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075b4:	e105      	b.n	80077c2 <UART_SetConfig+0x4d6>
 80075b6:	bf00      	nop
 80075b8:	40011000 	.word	0x40011000
 80075bc:	40011400 	.word	0x40011400
 80075c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80075d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075d6:	4642      	mov	r2, r8
 80075d8:	464b      	mov	r3, r9
 80075da:	1891      	adds	r1, r2, r2
 80075dc:	6239      	str	r1, [r7, #32]
 80075de:	415b      	adcs	r3, r3
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
 80075e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075e6:	4641      	mov	r1, r8
 80075e8:	1854      	adds	r4, r2, r1
 80075ea:	4649      	mov	r1, r9
 80075ec:	eb43 0501 	adc.w	r5, r3, r1
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	00eb      	lsls	r3, r5, #3
 80075fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075fe:	00e2      	lsls	r2, r4, #3
 8007600:	4614      	mov	r4, r2
 8007602:	461d      	mov	r5, r3
 8007604:	4643      	mov	r3, r8
 8007606:	18e3      	adds	r3, r4, r3
 8007608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800760c:	464b      	mov	r3, r9
 800760e:	eb45 0303 	adc.w	r3, r5, r3
 8007612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	f04f 0300 	mov.w	r3, #0
 800762e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007632:	4629      	mov	r1, r5
 8007634:	008b      	lsls	r3, r1, #2
 8007636:	4621      	mov	r1, r4
 8007638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800763c:	4621      	mov	r1, r4
 800763e:	008a      	lsls	r2, r1, #2
 8007640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007644:	f7f8 fe44 	bl	80002d0 <__aeabi_uldivmod>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4b60      	ldr	r3, [pc, #384]	; (80077d0 <UART_SetConfig+0x4e4>)
 800764e:	fba3 2302 	umull	r2, r3, r3, r2
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	011c      	lsls	r4, r3, #4
 8007656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800765a:	2200      	movs	r2, #0
 800765c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007668:	4642      	mov	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	1891      	adds	r1, r2, r2
 800766e:	61b9      	str	r1, [r7, #24]
 8007670:	415b      	adcs	r3, r3
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007678:	4641      	mov	r1, r8
 800767a:	1851      	adds	r1, r2, r1
 800767c:	6139      	str	r1, [r7, #16]
 800767e:	4649      	mov	r1, r9
 8007680:	414b      	adcs	r3, r1
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007690:	4659      	mov	r1, fp
 8007692:	00cb      	lsls	r3, r1, #3
 8007694:	4651      	mov	r1, sl
 8007696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800769a:	4651      	mov	r1, sl
 800769c:	00ca      	lsls	r2, r1, #3
 800769e:	4610      	mov	r0, r2
 80076a0:	4619      	mov	r1, r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	4642      	mov	r2, r8
 80076a6:	189b      	adds	r3, r3, r2
 80076a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076ac:	464b      	mov	r3, r9
 80076ae:	460a      	mov	r2, r1
 80076b0:	eb42 0303 	adc.w	r3, r2, r3
 80076b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80076c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076c4:	f04f 0200 	mov.w	r2, #0
 80076c8:	f04f 0300 	mov.w	r3, #0
 80076cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80076d0:	4649      	mov	r1, r9
 80076d2:	008b      	lsls	r3, r1, #2
 80076d4:	4641      	mov	r1, r8
 80076d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076da:	4641      	mov	r1, r8
 80076dc:	008a      	lsls	r2, r1, #2
 80076de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076e2:	f7f8 fdf5 	bl	80002d0 <__aeabi_uldivmod>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4b39      	ldr	r3, [pc, #228]	; (80077d0 <UART_SetConfig+0x4e4>)
 80076ec:	fba3 1302 	umull	r1, r3, r3, r2
 80076f0:	095b      	lsrs	r3, r3, #5
 80076f2:	2164      	movs	r1, #100	; 0x64
 80076f4:	fb01 f303 	mul.w	r3, r1, r3
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	3332      	adds	r3, #50	; 0x32
 80076fe:	4a34      	ldr	r2, [pc, #208]	; (80077d0 <UART_SetConfig+0x4e4>)
 8007700:	fba2 2303 	umull	r2, r3, r2, r3
 8007704:	095b      	lsrs	r3, r3, #5
 8007706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800770a:	441c      	add	r4, r3
 800770c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007710:	2200      	movs	r2, #0
 8007712:	673b      	str	r3, [r7, #112]	; 0x70
 8007714:	677a      	str	r2, [r7, #116]	; 0x74
 8007716:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800771a:	4642      	mov	r2, r8
 800771c:	464b      	mov	r3, r9
 800771e:	1891      	adds	r1, r2, r2
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	415b      	adcs	r3, r3
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800772a:	4641      	mov	r1, r8
 800772c:	1851      	adds	r1, r2, r1
 800772e:	6039      	str	r1, [r7, #0]
 8007730:	4649      	mov	r1, r9
 8007732:	414b      	adcs	r3, r1
 8007734:	607b      	str	r3, [r7, #4]
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	f04f 0300 	mov.w	r3, #0
 800773e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007742:	4659      	mov	r1, fp
 8007744:	00cb      	lsls	r3, r1, #3
 8007746:	4651      	mov	r1, sl
 8007748:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800774c:	4651      	mov	r1, sl
 800774e:	00ca      	lsls	r2, r1, #3
 8007750:	4610      	mov	r0, r2
 8007752:	4619      	mov	r1, r3
 8007754:	4603      	mov	r3, r0
 8007756:	4642      	mov	r2, r8
 8007758:	189b      	adds	r3, r3, r2
 800775a:	66bb      	str	r3, [r7, #104]	; 0x68
 800775c:	464b      	mov	r3, r9
 800775e:	460a      	mov	r2, r1
 8007760:	eb42 0303 	adc.w	r3, r2, r3
 8007764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	663b      	str	r3, [r7, #96]	; 0x60
 8007770:	667a      	str	r2, [r7, #100]	; 0x64
 8007772:	f04f 0200 	mov.w	r2, #0
 8007776:	f04f 0300 	mov.w	r3, #0
 800777a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800777e:	4649      	mov	r1, r9
 8007780:	008b      	lsls	r3, r1, #2
 8007782:	4641      	mov	r1, r8
 8007784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007788:	4641      	mov	r1, r8
 800778a:	008a      	lsls	r2, r1, #2
 800778c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007790:	f7f8 fd9e 	bl	80002d0 <__aeabi_uldivmod>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <UART_SetConfig+0x4e4>)
 800779a:	fba3 1302 	umull	r1, r3, r3, r2
 800779e:	095b      	lsrs	r3, r3, #5
 80077a0:	2164      	movs	r1, #100	; 0x64
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	3332      	adds	r3, #50	; 0x32
 80077ac:	4a08      	ldr	r2, [pc, #32]	; (80077d0 <UART_SetConfig+0x4e4>)
 80077ae:	fba2 2303 	umull	r2, r3, r2, r3
 80077b2:	095b      	lsrs	r3, r3, #5
 80077b4:	f003 020f 	and.w	r2, r3, #15
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4422      	add	r2, r4
 80077c0:	609a      	str	r2, [r3, #8]
}
 80077c2:	bf00      	nop
 80077c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077c8:	46bd      	mov	sp, r7
 80077ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077ce:	bf00      	nop
 80077d0:	51eb851f 	.word	0x51eb851f

080077d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80077d4:	b084      	sub	sp, #16
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	f107 001c 	add.w	r0, r7, #28
 80077e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80077ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80077ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80077ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80077f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80077f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80077fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80077fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800780e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	b004      	add	sp, #16
 8007828:	4770      	bx	lr

0800782a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2203      	movs	r2, #3
 8007872:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0303 	and.w	r3, r3, #3
}
 8007892:	4618      	mov	r0, r3
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078bc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80078c2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80078c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80078d8:	f023 030f 	bic.w	r3, r3, #15
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	431a      	orrs	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	b2db      	uxtb	r3, r3
}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3314      	adds	r3, #20
 800791a:	461a      	mov	r2, r3
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	4413      	add	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
}  
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007958:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800795e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007964:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800797c:	2300      	movs	r3, #0

}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b088      	sub	sp, #32
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007998:	2310      	movs	r3, #16
 800799a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079aa:	f107 0308 	add.w	r3, r7, #8
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff ff74 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80079b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ba:	2110      	movs	r1, #16
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa19 	bl	8007df4 <SDMMC_GetCmdResp1>
 80079c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079c4:	69fb      	ldr	r3, [r7, #28]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3720      	adds	r7, #32
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b088      	sub	sp, #32
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80079dc:	2311      	movs	r3, #17
 80079de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079e0:	2340      	movs	r3, #64	; 0x40
 80079e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079e4:	2300      	movs	r3, #0
 80079e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ee:	f107 0308 	add.w	r3, r7, #8
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff ff52 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80079fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80079fe:	2111      	movs	r1, #17
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f9f7 	bl	8007df4 <SDMMC_GetCmdResp1>
 8007a06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a08:	69fb      	ldr	r3, [r7, #28]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b088      	sub	sp, #32
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007a20:	2312      	movs	r3, #18
 8007a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a24:	2340      	movs	r3, #64	; 0x40
 8007a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a32:	f107 0308 	add.w	r3, r7, #8
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff ff30 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a42:	2112      	movs	r1, #18
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f9d5 	bl	8007df4 <SDMMC_GetCmdResp1>
 8007a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b088      	sub	sp, #32
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007a64:	2318      	movs	r3, #24
 8007a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a68:	2340      	movs	r3, #64	; 0x40
 8007a6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a76:	f107 0308 	add.w	r3, r7, #8
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff ff0e 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a86:	2118      	movs	r1, #24
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f9b3 	bl	8007df4 <SDMMC_GetCmdResp1>
 8007a8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a90:	69fb      	ldr	r3, [r7, #28]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b088      	sub	sp, #32
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007aa8:	2319      	movs	r3, #25
 8007aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007aac:	2340      	movs	r3, #64	; 0x40
 8007aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007aba:	f107 0308 	add.w	r3, r7, #8
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff feec 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aca:	2119      	movs	r1, #25
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f991 	bl	8007df4 <SDMMC_GetCmdResp1>
 8007ad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3720      	adds	r7, #32
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007aec:	230c      	movs	r3, #12
 8007aee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007af0:	2340      	movs	r3, #64	; 0x40
 8007af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007af4:	2300      	movs	r3, #0
 8007af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007afc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007afe:	f107 0308 	add.w	r3, r7, #8
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff feca 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007b0a:	4a05      	ldr	r2, [pc, #20]	; (8007b20 <SDMMC_CmdStopTransfer+0x40>)
 8007b0c:	210c      	movs	r1, #12
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f970 	bl	8007df4 <SDMMC_GetCmdResp1>
 8007b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b16:	69fb      	ldr	r3, [r7, #28]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3720      	adds	r7, #32
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	05f5e100 	.word	0x05f5e100

08007b24 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08a      	sub	sp, #40	; 0x28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007b34:	2307      	movs	r3, #7
 8007b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b38:	2340      	movs	r3, #64	; 0x40
 8007b3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b44:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b46:	f107 0310 	add.w	r3, r7, #16
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f7ff fea6 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b56:	2107      	movs	r1, #7
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f94b 	bl	8007df4 <SDMMC_GetCmdResp1>
 8007b5e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3728      	adds	r7, #40	; 0x28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b088      	sub	sp, #32
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007b76:	2300      	movs	r3, #0
 8007b78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b88:	f107 0308 	add.w	r3, r7, #8
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff fe85 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fb65 	bl	8008264 <SDMMC_GetCmdError>
 8007b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b088      	sub	sp, #32
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007bae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007bb4:	2308      	movs	r3, #8
 8007bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bc6:	f107 0308 	add.w	r3, r7, #8
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff fe66 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 faf8 	bl	80081c8 <SDMMC_GetCmdResp7>
 8007bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bda:	69fb      	ldr	r3, [r7, #28]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3720      	adds	r7, #32
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007bf2:	2337      	movs	r3, #55	; 0x37
 8007bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bf6:	2340      	movs	r3, #64	; 0x40
 8007bf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c04:	f107 0308 	add.w	r3, r7, #8
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff fe47 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c14:	2137      	movs	r1, #55	; 0x37
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8ec 	bl	8007df4 <SDMMC_GetCmdResp1>
 8007c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3720      	adds	r7, #32
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007c3e:	2329      	movs	r3, #41	; 0x29
 8007c40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c42:	2340      	movs	r3, #64	; 0x40
 8007c44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c50:	f107 0308 	add.w	r3, r7, #8
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7ff fe21 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f9ff 	bl	8008060 <SDMMC_GetCmdResp3>
 8007c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c64:	69fb      	ldr	r3, [r7, #28]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3720      	adds	r7, #32
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b088      	sub	sp, #32
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007c7c:	2306      	movs	r3, #6
 8007c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c80:	2340      	movs	r3, #64	; 0x40
 8007c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c8e:	f107 0308 	add.w	r3, r7, #8
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff fe02 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c9e:	2106      	movs	r1, #6
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f8a7 	bl	8007df4 <SDMMC_GetCmdResp1>
 8007ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3720      	adds	r7, #32
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b088      	sub	sp, #32
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007cbe:	2333      	movs	r3, #51	; 0x33
 8007cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cc2:	2340      	movs	r3, #64	; 0x40
 8007cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cd0:	f107 0308 	add.w	r3, r7, #8
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff fde1 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce0:	2133      	movs	r1, #51	; 0x33
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f886 	bl	8007df4 <SDMMC_GetCmdResp1>
 8007ce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cea:	69fb      	ldr	r3, [r7, #28]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007d00:	2302      	movs	r3, #2
 8007d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007d04:	23c0      	movs	r3, #192	; 0xc0
 8007d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d12:	f107 0308 	add.w	r3, r7, #8
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff fdc0 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f956 	bl	8007fd0 <SDMMC_GetCmdResp2>
 8007d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d26:	69fb      	ldr	r3, [r7, #28]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3720      	adds	r7, #32
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007d3e:	2309      	movs	r3, #9
 8007d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007d42:	23c0      	movs	r3, #192	; 0xc0
 8007d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff fda1 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f937 	bl	8007fd0 <SDMMC_GetCmdResp2>
 8007d62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d64:	69fb      	ldr	r3, [r7, #28]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3720      	adds	r7, #32
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b088      	sub	sp, #32
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d80:	2340      	movs	r3, #64	; 0x40
 8007d82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d8e:	f107 0308 	add.w	r3, r7, #8
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff fd82 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	2103      	movs	r1, #3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f99c 	bl	80080dc <SDMMC_GetCmdResp6>
 8007da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007da6:	69fb      	ldr	r3, [r7, #28]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3720      	adds	r7, #32
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007dbe:	230d      	movs	r3, #13
 8007dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dc2:	2340      	movs	r3, #64	; 0x40
 8007dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dd0:	f107 0308 	add.w	r3, r7, #8
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fd61 	bl	800789e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de0:	210d      	movs	r1, #13
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f806 	bl	8007df4 <SDMMC_GetCmdResp1>
 8007de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dea:	69fb      	ldr	r3, [r7, #28]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3720      	adds	r7, #32
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007e02:	4b70      	ldr	r3, [pc, #448]	; (8007fc4 <SDMMC_GetCmdResp1+0x1d0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a70      	ldr	r2, [pc, #448]	; (8007fc8 <SDMMC_GetCmdResp1+0x1d4>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	0a5a      	lsrs	r2, r3, #9
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	61fa      	str	r2, [r7, #28]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e24:	e0c9      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0ef      	beq.n	8007e16 <SDMMC_GetCmdResp1+0x22>
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1ea      	bne.n	8007e16 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2204      	movs	r2, #4
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e52:	2304      	movs	r3, #4
 8007e54:	e0b1      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d004      	beq.n	8007e6c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e0a6      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	22c5      	movs	r2, #197	; 0xc5
 8007e70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7ff fd3d 	bl	80078f2 <SDIO_GetCommandResponse>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d001      	beq.n	8007e86 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e099      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007e86:	2100      	movs	r1, #0
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff fd3f 	bl	800790c <SDIO_GetResponse>
 8007e8e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	4b4e      	ldr	r3, [pc, #312]	; (8007fcc <SDMMC_GetCmdResp1+0x1d8>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e08d      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	da02      	bge.n	8007eaa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ea8:	e087      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	e080      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007ec2:	2380      	movs	r3, #128	; 0x80
 8007ec4:	e079      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ed4:	e071      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ee4:	e069      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ef4:	e061      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f04:	e059      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f14:	e051      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f24:	e049      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007f30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f34:	e041      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f44:	e039      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f54:	e031      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007f60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007f64:	e029      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007f70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f74:	e021      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007f80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f84:	e019      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007f90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f94:	e011      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007fa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007fa4:	e009      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007fb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007fb4:	e001      	b.n	8007fba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3720      	adds	r7, #32
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000004 	.word	0x20000004
 8007fc8:	10624dd3 	.word	0x10624dd3
 8007fcc:	fdffe008 	.word	0xfdffe008

08007fd0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fd8:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <SDMMC_GetCmdResp2+0x88>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1f      	ldr	r2, [pc, #124]	; (800805c <SDMMC_GetCmdResp2+0x8c>)
 8007fde:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe2:	0a5b      	lsrs	r3, r3, #9
 8007fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe8:	fb02 f303 	mul.w	r3, r2, r3
 8007fec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	1e5a      	subs	r2, r3, #1
 8007ff2:	60fa      	str	r2, [r7, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d102      	bne.n	8007ffe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ffc:	e026      	b.n	800804c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008002:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0ef      	beq.n	8007fee <SDMMC_GetCmdResp2+0x1e>
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1ea      	bne.n	8007fee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d004      	beq.n	800802e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2204      	movs	r2, #4
 8008028:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800802a:	2304      	movs	r3, #4
 800802c:	e00e      	b.n	800804c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d004      	beq.n	8008044 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008040:	2301      	movs	r3, #1
 8008042:	e003      	b.n	800804c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	22c5      	movs	r2, #197	; 0xc5
 8008048:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	20000004 	.word	0x20000004
 800805c:	10624dd3 	.word	0x10624dd3

08008060 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008068:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <SDMMC_GetCmdResp3+0x74>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a1a      	ldr	r2, [pc, #104]	; (80080d8 <SDMMC_GetCmdResp3+0x78>)
 800806e:	fba2 2303 	umull	r2, r3, r2, r3
 8008072:	0a5b      	lsrs	r3, r3, #9
 8008074:	f241 3288 	movw	r2, #5000	; 0x1388
 8008078:	fb02 f303 	mul.w	r3, r2, r3
 800807c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1e5a      	subs	r2, r3, #1
 8008082:	60fa      	str	r2, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008088:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800808c:	e01b      	b.n	80080c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008092:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0ef      	beq.n	800807e <SDMMC_GetCmdResp3+0x1e>
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1ea      	bne.n	800807e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d004      	beq.n	80080be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2204      	movs	r2, #4
 80080b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080ba:	2304      	movs	r3, #4
 80080bc:	e003      	b.n	80080c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	22c5      	movs	r2, #197	; 0xc5
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000004 	.word	0x20000004
 80080d8:	10624dd3 	.word	0x10624dd3

080080dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	460b      	mov	r3, r1
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080ea:	4b35      	ldr	r3, [pc, #212]	; (80081c0 <SDMMC_GetCmdResp6+0xe4>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a35      	ldr	r2, [pc, #212]	; (80081c4 <SDMMC_GetCmdResp6+0xe8>)
 80080f0:	fba2 2303 	umull	r2, r3, r2, r3
 80080f4:	0a5b      	lsrs	r3, r3, #9
 80080f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080fa:	fb02 f303 	mul.w	r3, r2, r3
 80080fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	1e5a      	subs	r2, r3, #1
 8008104:	61fa      	str	r2, [r7, #28]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d102      	bne.n	8008110 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800810a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800810e:	e052      	b.n	80081b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008114:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0ef      	beq.n	8008100 <SDMMC_GetCmdResp6+0x24>
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1ea      	bne.n	8008100 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2204      	movs	r2, #4
 800813a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800813c:	2304      	movs	r3, #4
 800813e:	e03a      	b.n	80081b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b00      	cmp	r3, #0
 800814a:	d004      	beq.n	8008156 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008152:	2301      	movs	r3, #1
 8008154:	e02f      	b.n	80081b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7ff fbcb 	bl	80078f2 <SDIO_GetCommandResponse>
 800815c:	4603      	mov	r3, r0
 800815e:	461a      	mov	r2, r3
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	4293      	cmp	r3, r2
 8008164:	d001      	beq.n	800816a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008166:	2301      	movs	r3, #1
 8008168:	e025      	b.n	80081b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	22c5      	movs	r2, #197	; 0xc5
 800816e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008170:	2100      	movs	r1, #0
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7ff fbca 	bl	800790c <SDIO_GetResponse>
 8008178:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d106      	bne.n	8008192 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	0c1b      	lsrs	r3, r3, #16
 8008188:	b29a      	uxth	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800818e:	2300      	movs	r3, #0
 8008190:	e011      	b.n	80081b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800819c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081a0:	e009      	b.n	80081b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80081ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081b0:	e001      	b.n	80081b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80081b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3720      	adds	r7, #32
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000004 	.word	0x20000004
 80081c4:	10624dd3 	.word	0x10624dd3

080081c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081d0:	4b22      	ldr	r3, [pc, #136]	; (800825c <SDMMC_GetCmdResp7+0x94>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a22      	ldr	r2, [pc, #136]	; (8008260 <SDMMC_GetCmdResp7+0x98>)
 80081d6:	fba2 2303 	umull	r2, r3, r2, r3
 80081da:	0a5b      	lsrs	r3, r3, #9
 80081dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e0:	fb02 f303 	mul.w	r3, r2, r3
 80081e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	1e5a      	subs	r2, r3, #1
 80081ea:	60fa      	str	r2, [r7, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081f4:	e02c      	b.n	8008250 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0ef      	beq.n	80081e6 <SDMMC_GetCmdResp7+0x1e>
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1ea      	bne.n	80081e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	2b00      	cmp	r3, #0
 800821a:	d004      	beq.n	8008226 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2204      	movs	r2, #4
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008222:	2304      	movs	r3, #4
 8008224:	e014      	b.n	8008250 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d004      	beq.n	800823c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008238:	2301      	movs	r3, #1
 800823a:	e009      	b.n	8008250 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2240      	movs	r2, #64	; 0x40
 800824c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800824e:	2300      	movs	r3, #0
  
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	20000004 	.word	0x20000004
 8008260:	10624dd3 	.word	0x10624dd3

08008264 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800826c:	4b11      	ldr	r3, [pc, #68]	; (80082b4 <SDMMC_GetCmdError+0x50>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a11      	ldr	r2, [pc, #68]	; (80082b8 <SDMMC_GetCmdError+0x54>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	0a5b      	lsrs	r3, r3, #9
 8008278:	f241 3288 	movw	r2, #5000	; 0x1388
 800827c:	fb02 f303 	mul.w	r3, r2, r3
 8008280:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	60fa      	str	r2, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d102      	bne.n	8008292 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800828c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008290:	e009      	b.n	80082a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0f1      	beq.n	8008282 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	22c5      	movs	r2, #197	; 0xc5
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20000004 	.word	0x20000004
 80082b8:	10624dd3 	.word	0x10624dd3

080082bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80082c0:	4904      	ldr	r1, [pc, #16]	; (80082d4 <MX_FATFS_Init+0x18>)
 80082c2:	4805      	ldr	r0, [pc, #20]	; (80082d8 <MX_FATFS_Init+0x1c>)
 80082c4:	f002 ffe4 	bl	800b290 <FATFS_LinkDriver>
 80082c8:	4603      	mov	r3, r0
 80082ca:	461a      	mov	r2, r3
 80082cc:	4b03      	ldr	r3, [pc, #12]	; (80082dc <MX_FATFS_Init+0x20>)
 80082ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80082d0:	bf00      	nop
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000b54 	.word	0x20000b54
 80082d8:	0800bcd8 	.word	0x0800bcd8
 80082dc:	20000b50 	.word	0x20000b50

080082e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80082e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80082fa:	f000 f8ac 	bl	8008456 <BSP_SD_IsDetected>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b01      	cmp	r3, #1
 8008302:	d001      	beq.n	8008308 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e012      	b.n	800832e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008308:	480b      	ldr	r0, [pc, #44]	; (8008338 <BSP_SD_Init+0x48>)
 800830a:	f7fc fecd 	bl	80050a8 <HAL_SD_Init>
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d109      	bne.n	800832c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008318:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800831c:	4806      	ldr	r0, [pc, #24]	; (8008338 <BSP_SD_Init+0x48>)
 800831e:	f7fd fe27 	bl	8005f70 <HAL_SD_ConfigWideBusOperation>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800832c:	79fb      	ldrb	r3, [r7, #7]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000194 	.word	0x20000194

0800833c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af02      	add	r7, sp, #8
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	68f9      	ldr	r1, [r7, #12]
 8008358:	4806      	ldr	r0, [pc, #24]	; (8008374 <BSP_SD_ReadBlocks+0x38>)
 800835a:	f7fc ff55 	bl	8005208 <HAL_SD_ReadBlocks>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000194 	.word	0x20000194

08008378 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af02      	add	r7, sp, #8
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	68f9      	ldr	r1, [r7, #12]
 8008394:	4806      	ldr	r0, [pc, #24]	; (80083b0 <BSP_SD_WriteBlocks+0x38>)
 8008396:	f7fd f915 	bl	80055c4 <HAL_SD_WriteBlocks>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000194 	.word	0x20000194

080083b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80083b8:	4805      	ldr	r0, [pc, #20]	; (80083d0 <BSP_SD_GetCardState+0x1c>)
 80083ba:	f7fd fe73 	bl	80060a4 <HAL_SD_GetCardState>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	bf14      	ite	ne
 80083c4:	2301      	movne	r3, #1
 80083c6:	2300      	moveq	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000194 	.word	0x20000194

080083d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4803      	ldr	r0, [pc, #12]	; (80083ec <BSP_SD_GetCardInfo+0x18>)
 80083e0:	f7fd fd9a 	bl	8005f18 <HAL_SD_GetCardInfo>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20000194 	.word	0x20000194

080083f0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80083f8:	f000 f818 	bl	800842c <BSP_SD_AbortCallback>
}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800840c:	f000 f815 	bl	800843a <BSP_SD_WriteCpltCallback>
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008420:	f000 f812 	bl	8008448 <BSP_SD_ReadCpltCallback>
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0

}
 8008430:	bf00      	nop
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800843a:	b480      	push	{r7}
 800843c:	af00      	add	r7, sp, #0

}
 800843e:	bf00      	nop
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0

}
 800844c:	bf00      	nop
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800845c:	2301      	movs	r3, #1
 800845e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008460:	f000 f80c 	bl	800847c <BSP_PlatformIsDetected>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800846a:	2300      	movs	r3, #0
 800846c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	b2db      	uxtb	r3, r3
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
	...

0800847c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008482:	2301      	movs	r3, #1
 8008484:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800848a:	4806      	ldr	r0, [pc, #24]	; (80084a4 <BSP_PlatformIsDetected+0x28>)
 800848c:	f7fa f9be 	bl	800280c <HAL_GPIO_ReadPin>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008496:	2300      	movs	r3, #0
 8008498:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800849a:	79fb      	ldrb	r3, [r7, #7]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	40020400 	.word	0x40020400

080084a8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80084b2:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <SD_CheckStatus+0x38>)
 80084b4:	2201      	movs	r2, #1
 80084b6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80084b8:	f7ff ff7c 	bl	80083b4 <BSP_SD_GetCardState>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d107      	bne.n	80084d2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80084c2:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <SD_CheckStatus+0x38>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f023 0301 	bic.w	r3, r3, #1
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <SD_CheckStatus+0x38>)
 80084d0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80084d2:	4b03      	ldr	r3, [pc, #12]	; (80084e0 <SD_CheckStatus+0x38>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	b2db      	uxtb	r3, r3
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	2000000d 	.word	0x2000000d

080084e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80084ee:	4b0b      	ldr	r3, [pc, #44]	; (800851c <SD_initialize+0x38>)
 80084f0:	2201      	movs	r2, #1
 80084f2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80084f4:	f7ff fefc 	bl	80082f0 <BSP_SD_Init>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d107      	bne.n	800850e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff ffd1 	bl	80084a8 <SD_CheckStatus>
 8008506:	4603      	mov	r3, r0
 8008508:	461a      	mov	r2, r3
 800850a:	4b04      	ldr	r3, [pc, #16]	; (800851c <SD_initialize+0x38>)
 800850c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800850e:	4b03      	ldr	r3, [pc, #12]	; (800851c <SD_initialize+0x38>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	b2db      	uxtb	r3, r3
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	2000000d 	.word	0x2000000d

08008520 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff ffbb 	bl	80084a8 <SD_CheckStatus>
 8008532:	4603      	mov	r3, r0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	607a      	str	r2, [r7, #4]
 8008546:	603b      	str	r3, [r7, #0]
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	68b8      	ldr	r0, [r7, #8]
 800855a:	f7ff feef 	bl	800833c <BSP_SD_ReadBlocks>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d107      	bne.n	8008574 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008564:	bf00      	nop
 8008566:	f7ff ff25 	bl	80083b4 <BSP_SD_GetCardState>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1fa      	bne.n	8008566 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008574:	7dfb      	ldrb	r3, [r7, #23]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b086      	sub	sp, #24
 8008582:	af00      	add	r7, sp, #0
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
 800858a:	4603      	mov	r3, r0
 800858c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	6879      	ldr	r1, [r7, #4]
 800859a:	68b8      	ldr	r0, [r7, #8]
 800859c:	f7ff feec 	bl	8008378 <BSP_SD_WriteBlocks>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d107      	bne.n	80085b6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80085a6:	bf00      	nop
 80085a8:	f7ff ff04 	bl	80083b4 <BSP_SD_GetCardState>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1fa      	bne.n	80085a8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08c      	sub	sp, #48	; 0x30
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	603a      	str	r2, [r7, #0]
 80085ca:	71fb      	strb	r3, [r7, #7]
 80085cc:	460b      	mov	r3, r1
 80085ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80085d6:	4b25      	ldr	r3, [pc, #148]	; (800866c <SD_ioctl+0xac>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <SD_ioctl+0x28>
 80085e4:	2303      	movs	r3, #3
 80085e6:	e03c      	b.n	8008662 <SD_ioctl+0xa2>

  switch (cmd)
 80085e8:	79bb      	ldrb	r3, [r7, #6]
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d834      	bhi.n	8008658 <SD_ioctl+0x98>
 80085ee:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <SD_ioctl+0x34>)
 80085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f4:	08008605 	.word	0x08008605
 80085f8:	0800860d 	.word	0x0800860d
 80085fc:	08008625 	.word	0x08008625
 8008600:	0800863f 	.word	0x0800863f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800860a:	e028      	b.n	800865e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800860c:	f107 030c 	add.w	r3, r7, #12
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fedf 	bl	80083d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008622:	e01c      	b.n	800865e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008624:	f107 030c 	add.w	r3, r7, #12
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff fed3 	bl	80083d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	b29a      	uxth	r2, r3
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800863c:	e00f      	b.n	800865e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800863e:	f107 030c 	add.w	r3, r7, #12
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff fec6 	bl	80083d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	0a5a      	lsrs	r2, r3, #9
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008656:	e002      	b.n	800865e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008658:	2304      	movs	r3, #4
 800865a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800865e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008662:	4618      	mov	r0, r3
 8008664:	3730      	adds	r7, #48	; 0x30
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	2000000d 	.word	0x2000000d

08008670 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	4a08      	ldr	r2, [pc, #32]	; (80086a0 <disk_status+0x30>)
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	79fa      	ldrb	r2, [r7, #7]
 8008688:	4905      	ldr	r1, [pc, #20]	; (80086a0 <disk_status+0x30>)
 800868a:	440a      	add	r2, r1
 800868c:	7a12      	ldrb	r2, [r2, #8]
 800868e:	4610      	mov	r0, r2
 8008690:	4798      	blx	r3
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008696:	7bfb      	ldrb	r3, [r7, #15]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20000db0 	.word	0x20000db0

080086a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	4603      	mov	r3, r0
 80086ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80086b2:	79fb      	ldrb	r3, [r7, #7]
 80086b4:	4a0d      	ldr	r2, [pc, #52]	; (80086ec <disk_initialize+0x48>)
 80086b6:	5cd3      	ldrb	r3, [r2, r3]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d111      	bne.n	80086e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80086bc:	79fb      	ldrb	r3, [r7, #7]
 80086be:	4a0b      	ldr	r2, [pc, #44]	; (80086ec <disk_initialize+0x48>)
 80086c0:	2101      	movs	r1, #1
 80086c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	4a09      	ldr	r2, [pc, #36]	; (80086ec <disk_initialize+0x48>)
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	79fa      	ldrb	r2, [r7, #7]
 80086d2:	4906      	ldr	r1, [pc, #24]	; (80086ec <disk_initialize+0x48>)
 80086d4:	440a      	add	r2, r1
 80086d6:	7a12      	ldrb	r2, [r2, #8]
 80086d8:	4610      	mov	r0, r2
 80086da:	4798      	blx	r3
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20000db0 	.word	0x20000db0

080086f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80086f0:	b590      	push	{r4, r7, lr}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	4603      	mov	r3, r0
 80086fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	4a0a      	ldr	r2, [pc, #40]	; (800872c <disk_read+0x3c>)
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	689c      	ldr	r4, [r3, #8]
 800870c:	7bfb      	ldrb	r3, [r7, #15]
 800870e:	4a07      	ldr	r2, [pc, #28]	; (800872c <disk_read+0x3c>)
 8008710:	4413      	add	r3, r2
 8008712:	7a18      	ldrb	r0, [r3, #8]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	68b9      	ldr	r1, [r7, #8]
 800871a:	47a0      	blx	r4
 800871c:	4603      	mov	r3, r0
 800871e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008720:	7dfb      	ldrb	r3, [r7, #23]
}
 8008722:	4618      	mov	r0, r3
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	bd90      	pop	{r4, r7, pc}
 800872a:	bf00      	nop
 800872c:	20000db0 	.word	0x20000db0

08008730 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008730:	b590      	push	{r4, r7, lr}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	4a0a      	ldr	r2, [pc, #40]	; (800876c <disk_write+0x3c>)
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	68dc      	ldr	r4, [r3, #12]
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	4a07      	ldr	r2, [pc, #28]	; (800876c <disk_write+0x3c>)
 8008750:	4413      	add	r3, r2
 8008752:	7a18      	ldrb	r0, [r3, #8]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	47a0      	blx	r4
 800875c:	4603      	mov	r3, r0
 800875e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008760:	7dfb      	ldrb	r3, [r7, #23]
}
 8008762:	4618      	mov	r0, r3
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	bd90      	pop	{r4, r7, pc}
 800876a:	bf00      	nop
 800876c:	20000db0 	.word	0x20000db0

08008770 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	603a      	str	r2, [r7, #0]
 800877a:	71fb      	strb	r3, [r7, #7]
 800877c:	460b      	mov	r3, r1
 800877e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	4a09      	ldr	r2, [pc, #36]	; (80087a8 <disk_ioctl+0x38>)
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	79fa      	ldrb	r2, [r7, #7]
 800878e:	4906      	ldr	r1, [pc, #24]	; (80087a8 <disk_ioctl+0x38>)
 8008790:	440a      	add	r2, r1
 8008792:	7a10      	ldrb	r0, [r2, #8]
 8008794:	79b9      	ldrb	r1, [r7, #6]
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	4798      	blx	r3
 800879a:	4603      	mov	r3, r0
 800879c:	73fb      	strb	r3, [r7, #15]
  return res;
 800879e:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	20000db0 	.word	0x20000db0

080087ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3301      	adds	r3, #1
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80087bc:	89fb      	ldrh	r3, [r7, #14]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	b21a      	sxth	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	b21b      	sxth	r3, r3
 80087c8:	4313      	orrs	r3, r2
 80087ca:	b21b      	sxth	r3, r3
 80087cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80087ce:	89fb      	ldrh	r3, [r7, #14]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3303      	adds	r3, #3
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	021b      	lsls	r3, r3, #8
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	3202      	adds	r2, #2
 80087f4:	7812      	ldrb	r2, [r2, #0]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	3201      	adds	r2, #1
 8008802:	7812      	ldrb	r2, [r2, #0]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	021b      	lsls	r3, r3, #8
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	7812      	ldrb	r2, [r2, #0]
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]
	return rv;
 8008814:	68fb      	ldr	r3, [r7, #12]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	887a      	ldrh	r2, [r7, #2]
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]
 800883a:	887b      	ldrh	r3, [r7, #2]
 800883c:	0a1b      	lsrs	r3, r3, #8
 800883e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	607a      	str	r2, [r7, #4]
 8008846:	887a      	ldrh	r2, [r7, #2]
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	701a      	strb	r2, [r3, #0]
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	0a1b      	lsrs	r3, r3, #8
 8008872:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	607a      	str	r2, [r7, #4]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	b2d2      	uxtb	r2, r2
 800887e:	701a      	strb	r2, [r3, #0]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	0a1b      	lsrs	r3, r3, #8
 8008884:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	0a1b      	lsrs	r3, r3, #8
 8008896:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	607a      	str	r2, [r7, #4]
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	b2d2      	uxtb	r2, r2
 80088a2:	701a      	strb	r2, [r3, #0]
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00d      	beq.n	80088e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	1c53      	adds	r3, r2, #1
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	1c59      	adds	r1, r3, #1
 80088d4:	6179      	str	r1, [r7, #20]
 80088d6:	7812      	ldrb	r2, [r2, #0]
 80088d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3b01      	subs	r3, #1
 80088de:	607b      	str	r3, [r7, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1f1      	bne.n	80088ca <mem_cpy+0x1a>
	}
}
 80088e6:	bf00      	nop
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80088f2:	b480      	push	{r7}
 80088f4:	b087      	sub	sp, #28
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	617a      	str	r2, [r7, #20]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3b01      	subs	r3, #1
 8008912:	607b      	str	r3, [r7, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f3      	bne.n	8008902 <mem_set+0x10>
}
 800891a:	bf00      	nop
 800891c:	bf00      	nop
 800891e:	371c      	adds	r7, #28
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008928:	b480      	push	{r7}
 800892a:	b089      	sub	sp, #36	; 0x24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	61fb      	str	r3, [r7, #28]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	61fa      	str	r2, [r7, #28]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4619      	mov	r1, r3
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	1c5a      	adds	r2, r3, #1
 800894e:	61ba      	str	r2, [r7, #24]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	1acb      	subs	r3, r1, r3
 8008954:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3b01      	subs	r3, #1
 800895a:	607b      	str	r3, [r7, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <mem_cmp+0x40>
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0eb      	beq.n	8008940 <mem_cmp+0x18>

	return r;
 8008968:	697b      	ldr	r3, [r7, #20]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3724      	adds	r7, #36	; 0x24
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008980:	e002      	b.n	8008988 <chk_chr+0x12>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	3301      	adds	r3, #1
 8008986:	607b      	str	r3, [r7, #4]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <chk_chr+0x26>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	4293      	cmp	r3, r2
 800899a:	d1f2      	bne.n	8008982 <chk_chr+0xc>
	return *str;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	781b      	ldrb	r3, [r3, #0]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80089b6:	2300      	movs	r3, #0
 80089b8:	60bb      	str	r3, [r7, #8]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	e029      	b.n	8008a14 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80089c0:	4a27      	ldr	r2, [pc, #156]	; (8008a60 <chk_lock+0xb4>)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	4413      	add	r3, r2
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d01d      	beq.n	8008a0a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089ce:	4a24      	ldr	r2, [pc, #144]	; (8008a60 <chk_lock+0xb4>)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	4413      	add	r3, r2
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d116      	bne.n	8008a0e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80089e0:	4a1f      	ldr	r2, [pc, #124]	; (8008a60 <chk_lock+0xb4>)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	4413      	add	r3, r2
 80089e8:	3304      	adds	r3, #4
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d10c      	bne.n	8008a0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80089f4:	4a1a      	ldr	r2, [pc, #104]	; (8008a60 <chk_lock+0xb4>)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	4413      	add	r3, r2
 80089fc:	3308      	adds	r3, #8
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d102      	bne.n	8008a0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a08:	e007      	b.n	8008a1a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3301      	adds	r3, #1
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d9d2      	bls.n	80089c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d109      	bne.n	8008a34 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <chk_lock+0x80>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d101      	bne.n	8008a30 <chk_lock+0x84>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	e010      	b.n	8008a52 <chk_lock+0xa6>
 8008a30:	2312      	movs	r3, #18
 8008a32:	e00e      	b.n	8008a52 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d108      	bne.n	8008a4c <chk_lock+0xa0>
 8008a3a:	4a09      	ldr	r2, [pc, #36]	; (8008a60 <chk_lock+0xb4>)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	011b      	lsls	r3, r3, #4
 8008a40:	4413      	add	r3, r2
 8008a42:	330c      	adds	r3, #12
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a4a:	d101      	bne.n	8008a50 <chk_lock+0xa4>
 8008a4c:	2310      	movs	r3, #16
 8008a4e:	e000      	b.n	8008a52 <chk_lock+0xa6>
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	20000d90 	.word	0x20000d90

08008a64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	607b      	str	r3, [r7, #4]
 8008a6e:	e002      	b.n	8008a76 <enq_lock+0x12>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3301      	adds	r3, #1
 8008a74:	607b      	str	r3, [r7, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d806      	bhi.n	8008a8a <enq_lock+0x26>
 8008a7c:	4a09      	ldr	r2, [pc, #36]	; (8008aa4 <enq_lock+0x40>)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	4413      	add	r3, r2
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f2      	bne.n	8008a70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	bf14      	ite	ne
 8008a90:	2301      	movne	r3, #1
 8008a92:	2300      	moveq	r3, #0
 8008a94:	b2db      	uxtb	r3, r3
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	20000d90 	.word	0x20000d90

08008aa8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	e01f      	b.n	8008af8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008ab8:	4a41      	ldr	r2, [pc, #260]	; (8008bc0 <inc_lock+0x118>)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	011b      	lsls	r3, r3, #4
 8008abe:	4413      	add	r3, r2
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d113      	bne.n	8008af2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008aca:	4a3d      	ldr	r2, [pc, #244]	; (8008bc0 <inc_lock+0x118>)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	4413      	add	r3, r2
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d109      	bne.n	8008af2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008ade:	4a38      	ldr	r2, [pc, #224]	; (8008bc0 <inc_lock+0x118>)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d006      	beq.n	8008b00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3301      	adds	r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d9dc      	bls.n	8008ab8 <inc_lock+0x10>
 8008afe:	e000      	b.n	8008b02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008b00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d132      	bne.n	8008b6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	e002      	b.n	8008b14 <inc_lock+0x6c>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3301      	adds	r3, #1
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d806      	bhi.n	8008b28 <inc_lock+0x80>
 8008b1a:	4a29      	ldr	r2, [pc, #164]	; (8008bc0 <inc_lock+0x118>)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	4413      	add	r3, r2
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1f2      	bne.n	8008b0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d101      	bne.n	8008b32 <inc_lock+0x8a>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e040      	b.n	8008bb4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	4922      	ldr	r1, [pc, #136]	; (8008bc0 <inc_lock+0x118>)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	440b      	add	r3, r1
 8008b3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	491e      	ldr	r1, [pc, #120]	; (8008bc0 <inc_lock+0x118>)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	011b      	lsls	r3, r3, #4
 8008b4a:	440b      	add	r3, r1
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	695a      	ldr	r2, [r3, #20]
 8008b54:	491a      	ldr	r1, [pc, #104]	; (8008bc0 <inc_lock+0x118>)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	011b      	lsls	r3, r3, #4
 8008b5a:	440b      	add	r3, r1
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008b60:	4a17      	ldr	r2, [pc, #92]	; (8008bc0 <inc_lock+0x118>)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	4413      	add	r3, r2
 8008b68:	330c      	adds	r3, #12
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d009      	beq.n	8008b88 <inc_lock+0xe0>
 8008b74:	4a12      	ldr	r2, [pc, #72]	; (8008bc0 <inc_lock+0x118>)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	4413      	add	r3, r2
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <inc_lock+0xe0>
 8008b84:	2300      	movs	r3, #0
 8008b86:	e015      	b.n	8008bb4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d108      	bne.n	8008ba0 <inc_lock+0xf8>
 8008b8e:	4a0c      	ldr	r2, [pc, #48]	; (8008bc0 <inc_lock+0x118>)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	4413      	add	r3, r2
 8008b96:	330c      	adds	r3, #12
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	e001      	b.n	8008ba4 <inc_lock+0xfc>
 8008ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ba4:	4906      	ldr	r1, [pc, #24]	; (8008bc0 <inc_lock+0x118>)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	011b      	lsls	r3, r3, #4
 8008baa:	440b      	add	r3, r1
 8008bac:	330c      	adds	r3, #12
 8008bae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3301      	adds	r3, #1
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	20000d90 	.word	0x20000d90

08008bc4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	607b      	str	r3, [r7, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d825      	bhi.n	8008c24 <dec_lock+0x60>
		n = Files[i].ctr;
 8008bd8:	4a17      	ldr	r2, [pc, #92]	; (8008c38 <dec_lock+0x74>)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	4413      	add	r3, r2
 8008be0:	330c      	adds	r3, #12
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008be6:	89fb      	ldrh	r3, [r7, #14]
 8008be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bec:	d101      	bne.n	8008bf2 <dec_lock+0x2e>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008bf2:	89fb      	ldrh	r3, [r7, #14]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <dec_lock+0x3a>
 8008bf8:	89fb      	ldrh	r3, [r7, #14]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008bfe:	4a0e      	ldr	r2, [pc, #56]	; (8008c38 <dec_lock+0x74>)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	011b      	lsls	r3, r3, #4
 8008c04:	4413      	add	r3, r2
 8008c06:	330c      	adds	r3, #12
 8008c08:	89fa      	ldrh	r2, [r7, #14]
 8008c0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008c0c:	89fb      	ldrh	r3, [r7, #14]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d105      	bne.n	8008c1e <dec_lock+0x5a>
 8008c12:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <dec_lock+0x74>)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	011b      	lsls	r3, r3, #4
 8008c18:	4413      	add	r3, r2
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	737b      	strb	r3, [r7, #13]
 8008c22:	e001      	b.n	8008c28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008c24:	2302      	movs	r3, #2
 8008c26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008c28:	7b7b      	ldrb	r3, [r7, #13]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	20000d90 	.word	0x20000d90

08008c3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	e010      	b.n	8008c6c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008c4a:	4a0d      	ldr	r2, [pc, #52]	; (8008c80 <clear_lock+0x44>)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	4413      	add	r3, r2
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d105      	bne.n	8008c66 <clear_lock+0x2a>
 8008c5a:	4a09      	ldr	r2, [pc, #36]	; (8008c80 <clear_lock+0x44>)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	011b      	lsls	r3, r3, #4
 8008c60:	4413      	add	r3, r2
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d9eb      	bls.n	8008c4a <clear_lock+0xe>
	}
}
 8008c72:	bf00      	nop
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	20000d90 	.word	0x20000d90

08008c84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	78db      	ldrb	r3, [r3, #3]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d034      	beq.n	8008d02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	7858      	ldrb	r0, [r3, #1]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ca8:	2301      	movs	r3, #1
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	f7ff fd40 	bl	8008730 <disk_write>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <sync_window+0x38>
			res = FR_DISK_ERR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	73fb      	strb	r3, [r7, #15]
 8008cba:	e022      	b.n	8008d02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	1ad2      	subs	r2, r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d217      	bcs.n	8008d02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	789b      	ldrb	r3, [r3, #2]
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	e010      	b.n	8008cfc <sync_window+0x78>
					wsect += fs->fsize;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	7858      	ldrb	r0, [r3, #1]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cee:	2301      	movs	r3, #1
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	f7ff fd1d 	bl	8008730 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d8eb      	bhi.n	8008cda <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d01b      	beq.n	8008d5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff ffad 	bl	8008c84 <sync_window>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d113      	bne.n	8008d5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7858      	ldrb	r0, [r3, #1]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d3e:	2301      	movs	r3, #1
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	f7ff fcd5 	bl	80086f0 <disk_read>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d004      	beq.n	8008d56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff ff87 	bl	8008c84 <sync_window>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d158      	bne.n	8008e32 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d148      	bne.n	8008e1a <sync_fs+0xb2>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	791b      	ldrb	r3, [r3, #4]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d144      	bne.n	8008e1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3330      	adds	r3, #48	; 0x30
 8008d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff fda9 	bl	80088f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3330      	adds	r3, #48	; 0x30
 8008da4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008da8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7ff fd38 	bl	8008822 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3330      	adds	r3, #48	; 0x30
 8008db6:	4921      	ldr	r1, [pc, #132]	; (8008e3c <sync_fs+0xd4>)
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7ff fd4d 	bl	8008858 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3330      	adds	r3, #48	; 0x30
 8008dc2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008dc6:	491e      	ldr	r1, [pc, #120]	; (8008e40 <sync_fs+0xd8>)
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff fd45 	bl	8008858 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3330      	adds	r3, #48	; 0x30
 8008dd2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f7ff fd3b 	bl	8008858 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3330      	adds	r3, #48	; 0x30
 8008de6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	4619      	mov	r1, r3
 8008df0:	4610      	mov	r0, r2
 8008df2:	f7ff fd31 	bl	8008858 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7858      	ldrb	r0, [r3, #1]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f7ff fc8e 	bl	8008730 <disk_write>
			fs->fsi_flag = 0;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	785b      	ldrb	r3, [r3, #1]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	2100      	movs	r1, #0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff fca4 	bl	8008770 <disk_ioctl>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <sync_fs+0xca>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	41615252 	.word	0x41615252
 8008e40:	61417272 	.word	0x61417272

08008e44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	3b02      	subs	r3, #2
 8008e52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	3b02      	subs	r3, #2
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d301      	bcc.n	8008e64 <clust2sect+0x20>
 8008e60:	2300      	movs	r3, #0
 8008e62:	e008      	b.n	8008e76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	895b      	ldrh	r3, [r3, #10]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	fb03 f202 	mul.w	r2, r3, r2
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	4413      	add	r3, r2
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b086      	sub	sp, #24
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d904      	bls.n	8008ea2 <get_fat+0x20>
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d302      	bcc.n	8008ea8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	e08f      	b.n	8008fc8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d062      	beq.n	8008f7c <get_fat+0xfa>
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	dc7c      	bgt.n	8008fb4 <get_fat+0x132>
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d002      	beq.n	8008ec4 <get_fat+0x42>
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d042      	beq.n	8008f48 <get_fat+0xc6>
 8008ec2:	e077      	b.n	8008fb4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	6a1a      	ldr	r2, [r3, #32]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	0a5b      	lsrs	r3, r3, #9
 8008eda:	4413      	add	r3, r2
 8008edc:	4619      	mov	r1, r3
 8008ede:	6938      	ldr	r0, [r7, #16]
 8008ee0:	f7ff ff14 	bl	8008d0c <move_window>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d167      	bne.n	8008fba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	60fa      	str	r2, [r7, #12]
 8008ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008efc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	6a1a      	ldr	r2, [r3, #32]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	0a5b      	lsrs	r3, r3, #9
 8008f06:	4413      	add	r3, r2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6938      	ldr	r0, [r7, #16]
 8008f0c:	f7ff fefe 	bl	8008d0c <move_window>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d153      	bne.n	8008fbe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	461a      	mov	r2, r3
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <get_fat+0xbc>
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	091b      	lsrs	r3, r3, #4
 8008f3c:	e002      	b.n	8008f44 <get_fat+0xc2>
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f44:	617b      	str	r3, [r7, #20]
			break;
 8008f46:	e03f      	b.n	8008fc8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6a1a      	ldr	r2, [r3, #32]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	0a1b      	lsrs	r3, r3, #8
 8008f50:	4413      	add	r3, r2
 8008f52:	4619      	mov	r1, r3
 8008f54:	6938      	ldr	r0, [r7, #16]
 8008f56:	f7ff fed9 	bl	8008d0c <move_window>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d130      	bne.n	8008fc2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008f6e:	4413      	add	r3, r2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7ff fc1b 	bl	80087ac <ld_word>
 8008f76:	4603      	mov	r3, r0
 8008f78:	617b      	str	r3, [r7, #20]
			break;
 8008f7a:	e025      	b.n	8008fc8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	6a1a      	ldr	r2, [r3, #32]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	09db      	lsrs	r3, r3, #7
 8008f84:	4413      	add	r3, r2
 8008f86:	4619      	mov	r1, r3
 8008f88:	6938      	ldr	r0, [r7, #16]
 8008f8a:	f7ff febf 	bl	8008d0c <move_window>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d118      	bne.n	8008fc6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008fa2:	4413      	add	r3, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff fc19 	bl	80087dc <ld_dword>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008fb0:	617b      	str	r3, [r7, #20]
			break;
 8008fb2:	e009      	b.n	8008fc8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	e006      	b.n	8008fc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fba:	bf00      	nop
 8008fbc:	e004      	b.n	8008fc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fbe:	bf00      	nop
 8008fc0:	e002      	b.n	8008fc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fc6:	bf00      	nop
		}
	}

	return val;
 8008fc8:	697b      	ldr	r3, [r7, #20]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008fd2:	b590      	push	{r4, r7, lr}
 8008fd4:	b089      	sub	sp, #36	; 0x24
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008fde:	2302      	movs	r3, #2
 8008fe0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	f240 80d2 	bls.w	800918e <put_fat+0x1bc>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	f080 80cc 	bcs.w	800918e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	f000 8096 	beq.w	800912c <put_fat+0x15a>
 8009000:	2b03      	cmp	r3, #3
 8009002:	f300 80cd 	bgt.w	80091a0 <put_fat+0x1ce>
 8009006:	2b01      	cmp	r3, #1
 8009008:	d002      	beq.n	8009010 <put_fat+0x3e>
 800900a:	2b02      	cmp	r3, #2
 800900c:	d06e      	beq.n	80090ec <put_fat+0x11a>
 800900e:	e0c7      	b.n	80091a0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	61bb      	str	r3, [r7, #24]
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	085b      	lsrs	r3, r3, #1
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	4413      	add	r3, r2
 800901c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6a1a      	ldr	r2, [r3, #32]
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	0a5b      	lsrs	r3, r3, #9
 8009026:	4413      	add	r3, r2
 8009028:	4619      	mov	r1, r3
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7ff fe6e 	bl	8008d0c <move_window>
 8009030:	4603      	mov	r3, r0
 8009032:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009034:	7ffb      	ldrb	r3, [r7, #31]
 8009036:	2b00      	cmp	r3, #0
 8009038:	f040 80ab 	bne.w	8009192 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	1c59      	adds	r1, r3, #1
 8009046:	61b9      	str	r1, [r7, #24]
 8009048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904c:	4413      	add	r3, r2
 800904e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00d      	beq.n	8009076 <put_fat+0xa4>
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	b25b      	sxtb	r3, r3
 8009060:	f003 030f 	and.w	r3, r3, #15
 8009064:	b25a      	sxtb	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	b25b      	sxtb	r3, r3
 800906e:	4313      	orrs	r3, r2
 8009070:	b25b      	sxtb	r3, r3
 8009072:	b2db      	uxtb	r3, r3
 8009074:	e001      	b.n	800907a <put_fat+0xa8>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2201      	movs	r2, #1
 8009082:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	0a5b      	lsrs	r3, r3, #9
 800908c:	4413      	add	r3, r2
 800908e:	4619      	mov	r1, r3
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f7ff fe3b 	bl	8008d0c <move_window>
 8009096:	4603      	mov	r3, r0
 8009098:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800909a:	7ffb      	ldrb	r3, [r7, #31]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d17a      	bne.n	8009196 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ac:	4413      	add	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <put_fat+0xf0>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	091b      	lsrs	r3, r3, #4
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	e00e      	b.n	80090e0 <put_fat+0x10e>
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	b25b      	sxtb	r3, r3
 80090c8:	f023 030f 	bic.w	r3, r3, #15
 80090cc:	b25a      	sxtb	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	0a1b      	lsrs	r3, r3, #8
 80090d2:	b25b      	sxtb	r3, r3
 80090d4:	f003 030f 	and.w	r3, r3, #15
 80090d8:	b25b      	sxtb	r3, r3
 80090da:	4313      	orrs	r3, r2
 80090dc:	b25b      	sxtb	r3, r3
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2201      	movs	r2, #1
 80090e8:	70da      	strb	r2, [r3, #3]
			break;
 80090ea:	e059      	b.n	80091a0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6a1a      	ldr	r2, [r3, #32]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	0a1b      	lsrs	r3, r3, #8
 80090f4:	4413      	add	r3, r2
 80090f6:	4619      	mov	r1, r3
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f7ff fe07 	bl	8008d0c <move_window>
 80090fe:	4603      	mov	r3, r0
 8009100:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009102:	7ffb      	ldrb	r3, [r7, #31]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d148      	bne.n	800919a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009116:	4413      	add	r3, r2
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	b292      	uxth	r2, r2
 800911c:	4611      	mov	r1, r2
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fb7f 	bl	8008822 <st_word>
			fs->wflag = 1;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2201      	movs	r2, #1
 8009128:	70da      	strb	r2, [r3, #3]
			break;
 800912a:	e039      	b.n	80091a0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6a1a      	ldr	r2, [r3, #32]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	09db      	lsrs	r3, r3, #7
 8009134:	4413      	add	r3, r2
 8009136:	4619      	mov	r1, r3
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f7ff fde7 	bl	8008d0c <move_window>
 800913e:	4603      	mov	r3, r0
 8009140:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009142:	7ffb      	ldrb	r3, [r7, #31]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d12a      	bne.n	800919e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800915c:	4413      	add	r3, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff fb3c 	bl	80087dc <ld_dword>
 8009164:	4603      	mov	r3, r0
 8009166:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800916a:	4323      	orrs	r3, r4
 800916c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800917c:	4413      	add	r3, r2
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	4618      	mov	r0, r3
 8009182:	f7ff fb69 	bl	8008858 <st_dword>
			fs->wflag = 1;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	70da      	strb	r2, [r3, #3]
			break;
 800918c:	e008      	b.n	80091a0 <put_fat+0x1ce>
		}
	}
 800918e:	bf00      	nop
 8009190:	e006      	b.n	80091a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009192:	bf00      	nop
 8009194:	e004      	b.n	80091a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009196:	bf00      	nop
 8009198:	e002      	b.n	80091a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800919a:	bf00      	nop
 800919c:	e000      	b.n	80091a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800919e:	bf00      	nop
	return res;
 80091a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3724      	adds	r7, #36	; 0x24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd90      	pop	{r4, r7, pc}

080091aa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b088      	sub	sp, #32
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d904      	bls.n	80091d0 <remove_chain+0x26>
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d301      	bcc.n	80091d4 <remove_chain+0x2a>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e04b      	b.n	800926c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00c      	beq.n	80091f4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80091da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	69b8      	ldr	r0, [r7, #24]
 80091e2:	f7ff fef6 	bl	8008fd2 <put_fat>
 80091e6:	4603      	mov	r3, r0
 80091e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80091ea:	7ffb      	ldrb	r3, [r7, #31]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <remove_chain+0x4a>
 80091f0:	7ffb      	ldrb	r3, [r7, #31]
 80091f2:	e03b      	b.n	800926c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80091f4:	68b9      	ldr	r1, [r7, #8]
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7ff fe43 	bl	8008e82 <get_fat>
 80091fc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d031      	beq.n	8009268 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <remove_chain+0x64>
 800920a:	2302      	movs	r3, #2
 800920c:	e02e      	b.n	800926c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009214:	d101      	bne.n	800921a <remove_chain+0x70>
 8009216:	2301      	movs	r3, #1
 8009218:	e028      	b.n	800926c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800921a:	2200      	movs	r2, #0
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	69b8      	ldr	r0, [r7, #24]
 8009220:	f7ff fed7 	bl	8008fd2 <put_fat>
 8009224:	4603      	mov	r3, r0
 8009226:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009228:	7ffb      	ldrb	r3, [r7, #31]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <remove_chain+0x88>
 800922e:	7ffb      	ldrb	r3, [r7, #31]
 8009230:	e01c      	b.n	800926c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	691a      	ldr	r2, [r3, #16]
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	3b02      	subs	r3, #2
 800923c:	429a      	cmp	r2, r3
 800923e:	d20b      	bcs.n	8009258 <remove_chain+0xae>
			fs->free_clst++;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	791b      	ldrb	r3, [r3, #4]
 800924e:	f043 0301 	orr.w	r3, r3, #1
 8009252:	b2da      	uxtb	r2, r3
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	429a      	cmp	r2, r3
 8009264:	d3c6      	bcc.n	80091f4 <remove_chain+0x4a>
 8009266:	e000      	b.n	800926a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009268:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3720      	adds	r7, #32
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10d      	bne.n	80092a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d004      	beq.n	80092a0 <create_chain+0x2c>
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	429a      	cmp	r2, r3
 800929e:	d31b      	bcc.n	80092d8 <create_chain+0x64>
 80092a0:	2301      	movs	r3, #1
 80092a2:	61bb      	str	r3, [r7, #24]
 80092a4:	e018      	b.n	80092d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff fdea 	bl	8008e82 <get_fat>
 80092ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d801      	bhi.n	80092ba <create_chain+0x46>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e070      	b.n	800939c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c0:	d101      	bne.n	80092c6 <create_chain+0x52>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	e06a      	b.n	800939c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d201      	bcs.n	80092d4 <create_chain+0x60>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	e063      	b.n	800939c <create_chain+0x128>
		scl = clst;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	3301      	adds	r3, #1
 80092e0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	69fa      	ldr	r2, [r7, #28]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d307      	bcc.n	80092fc <create_chain+0x88>
				ncl = 2;
 80092ec:	2302      	movs	r3, #2
 80092ee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80092f0:	69fa      	ldr	r2, [r7, #28]
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d901      	bls.n	80092fc <create_chain+0x88>
 80092f8:	2300      	movs	r3, #0
 80092fa:	e04f      	b.n	800939c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80092fc:	69f9      	ldr	r1, [r7, #28]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff fdbf 	bl	8008e82 <get_fat>
 8009304:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00e      	beq.n	800932a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d003      	beq.n	800931a <create_chain+0xa6>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009318:	d101      	bne.n	800931e <create_chain+0xaa>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	e03e      	b.n	800939c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800931e:	69fa      	ldr	r2, [r7, #28]
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	429a      	cmp	r2, r3
 8009324:	d1da      	bne.n	80092dc <create_chain+0x68>
 8009326:	2300      	movs	r3, #0
 8009328:	e038      	b.n	800939c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800932a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800932c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009330:	69f9      	ldr	r1, [r7, #28]
 8009332:	6938      	ldr	r0, [r7, #16]
 8009334:	f7ff fe4d 	bl	8008fd2 <put_fat>
 8009338:	4603      	mov	r3, r0
 800933a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d109      	bne.n	8009356 <create_chain+0xe2>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d006      	beq.n	8009356 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009348:	69fa      	ldr	r2, [r7, #28]
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6938      	ldr	r0, [r7, #16]
 800934e:	f7ff fe40 	bl	8008fd2 <put_fat>
 8009352:	4603      	mov	r3, r0
 8009354:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d116      	bne.n	800938a <create_chain+0x116>
		fs->last_clst = ncl;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	69fa      	ldr	r2, [r7, #28]
 8009360:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	691a      	ldr	r2, [r3, #16]
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	3b02      	subs	r3, #2
 800936c:	429a      	cmp	r2, r3
 800936e:	d804      	bhi.n	800937a <create_chain+0x106>
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	1e5a      	subs	r2, r3, #1
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	791b      	ldrb	r3, [r3, #4]
 800937e:	f043 0301 	orr.w	r3, r3, #1
 8009382:	b2da      	uxtb	r2, r3
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	711a      	strb	r2, [r3, #4]
 8009388:	e007      	b.n	800939a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d102      	bne.n	8009396 <create_chain+0x122>
 8009390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009394:	e000      	b.n	8009398 <create_chain+0x124>
 8009396:	2301      	movs	r3, #1
 8009398:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800939a:	69fb      	ldr	r3, [r7, #28]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3720      	adds	r7, #32
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	3304      	adds	r3, #4
 80093ba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	0a5b      	lsrs	r3, r3, #9
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	8952      	ldrh	r2, [r2, #10]
 80093c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80093c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1d1a      	adds	r2, r3, #4
 80093ce:	613a      	str	r2, [r7, #16]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <clmt_clust+0x3a>
 80093da:	2300      	movs	r3, #0
 80093dc:	e010      	b.n	8009400 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d307      	bcc.n	80093f6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	3304      	adds	r3, #4
 80093f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093f4:	e7e9      	b.n	80093ca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80093f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	4413      	add	r3, r2
}
 8009400:	4618      	mov	r0, r3
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009422:	d204      	bcs.n	800942e <dir_sdi+0x22>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	f003 031f 	and.w	r3, r3, #31
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <dir_sdi+0x26>
		return FR_INT_ERR;
 800942e:	2302      	movs	r3, #2
 8009430:	e063      	b.n	80094fa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d106      	bne.n	8009452 <dir_sdi+0x46>
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b02      	cmp	r3, #2
 800944a:	d902      	bls.n	8009452 <dir_sdi+0x46>
		clst = fs->dirbase;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10c      	bne.n	8009472 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	095b      	lsrs	r3, r3, #5
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	8912      	ldrh	r2, [r2, #8]
 8009460:	4293      	cmp	r3, r2
 8009462:	d301      	bcc.n	8009468 <dir_sdi+0x5c>
 8009464:	2302      	movs	r3, #2
 8009466:	e048      	b.n	80094fa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	61da      	str	r2, [r3, #28]
 8009470:	e029      	b.n	80094c6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	895b      	ldrh	r3, [r3, #10]
 8009476:	025b      	lsls	r3, r3, #9
 8009478:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800947a:	e019      	b.n	80094b0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6979      	ldr	r1, [r7, #20]
 8009480:	4618      	mov	r0, r3
 8009482:	f7ff fcfe 	bl	8008e82 <get_fat>
 8009486:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800948e:	d101      	bne.n	8009494 <dir_sdi+0x88>
 8009490:	2301      	movs	r3, #1
 8009492:	e032      	b.n	80094fa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d904      	bls.n	80094a4 <dir_sdi+0x98>
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d301      	bcc.n	80094a8 <dir_sdi+0x9c>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e028      	b.n	80094fa <dir_sdi+0xee>
			ofs -= csz;
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d2e1      	bcs.n	800947c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80094b8:	6979      	ldr	r1, [r7, #20]
 80094ba:	6938      	ldr	r0, [r7, #16]
 80094bc:	f7ff fcc2 	bl	8008e44 <clust2sect>
 80094c0:	4602      	mov	r2, r0
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <dir_sdi+0xcc>
 80094d4:	2302      	movs	r3, #2
 80094d6:	e010      	b.n	80094fa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	69da      	ldr	r2, [r3, #28]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	0a5b      	lsrs	r3, r3, #9
 80094e0:	441a      	add	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f2:	441a      	add	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b086      	sub	sp, #24
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	3320      	adds	r3, #32
 8009518:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <dir_next+0x28>
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009528:	d301      	bcc.n	800952e <dir_next+0x2c>
 800952a:	2304      	movs	r3, #4
 800952c:	e0aa      	b.n	8009684 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009534:	2b00      	cmp	r3, #0
 8009536:	f040 8098 	bne.w	800966a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10b      	bne.n	8009564 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	095b      	lsrs	r3, r3, #5
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	8912      	ldrh	r2, [r2, #8]
 8009554:	4293      	cmp	r3, r2
 8009556:	f0c0 8088 	bcc.w	800966a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	61da      	str	r2, [r3, #28]
 8009560:	2304      	movs	r3, #4
 8009562:	e08f      	b.n	8009684 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	0a5b      	lsrs	r3, r3, #9
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	8952      	ldrh	r2, [r2, #10]
 800956c:	3a01      	subs	r2, #1
 800956e:	4013      	ands	r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d17a      	bne.n	800966a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f7ff fc80 	bl	8008e82 <get_fat>
 8009582:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d801      	bhi.n	800958e <dir_next+0x8c>
 800958a:	2302      	movs	r3, #2
 800958c:	e07a      	b.n	8009684 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009594:	d101      	bne.n	800959a <dir_next+0x98>
 8009596:	2301      	movs	r3, #1
 8009598:	e074      	b.n	8009684 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d358      	bcc.n	8009656 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d104      	bne.n	80095b4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	61da      	str	r2, [r3, #28]
 80095b0:	2304      	movs	r3, #4
 80095b2:	e067      	b.n	8009684 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7ff fe59 	bl	8009274 <create_chain>
 80095c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <dir_next+0xcc>
 80095ca:	2307      	movs	r3, #7
 80095cc:	e05a      	b.n	8009684 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d101      	bne.n	80095d8 <dir_next+0xd6>
 80095d4:	2302      	movs	r3, #2
 80095d6:	e055      	b.n	8009684 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095de:	d101      	bne.n	80095e4 <dir_next+0xe2>
 80095e0:	2301      	movs	r3, #1
 80095e2:	e04f      	b.n	8009684 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff fb4d 	bl	8008c84 <sync_window>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <dir_next+0xf2>
 80095f0:	2301      	movs	r3, #1
 80095f2:	e047      	b.n	8009684 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	3330      	adds	r3, #48	; 0x30
 80095f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095fc:	2100      	movs	r1, #0
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff f977 	bl	80088f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009604:	2300      	movs	r3, #0
 8009606:	613b      	str	r3, [r7, #16]
 8009608:	6979      	ldr	r1, [r7, #20]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7ff fc1a 	bl	8008e44 <clust2sect>
 8009610:	4602      	mov	r2, r0
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	62da      	str	r2, [r3, #44]	; 0x2c
 8009616:	e012      	b.n	800963e <dir_next+0x13c>
						fs->wflag = 1;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f7ff fb30 	bl	8008c84 <sync_window>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <dir_next+0x12c>
 800962a:	2301      	movs	r3, #1
 800962c:	e02a      	b.n	8009684 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	3301      	adds	r3, #1
 8009632:	613b      	str	r3, [r7, #16]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	62da      	str	r2, [r3, #44]	; 0x2c
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	895b      	ldrh	r3, [r3, #10]
 8009642:	461a      	mov	r2, r3
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	4293      	cmp	r3, r2
 8009648:	d3e6      	bcc.n	8009618 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	1ad2      	subs	r2, r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800965c:	6979      	ldr	r1, [r7, #20]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7ff fbf0 	bl	8008e44 <clust2sect>
 8009664:	4602      	mov	r2, r0
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967c:	441a      	add	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800969c:	2100      	movs	r1, #0
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff feb4 	bl	800940c <dir_sdi>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d12b      	bne.n	8009706 <dir_alloc+0x7a>
		n = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	4619      	mov	r1, r3
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7ff fb27 	bl	8008d0c <move_window>
 80096be:	4603      	mov	r3, r0
 80096c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d11d      	bne.n	8009704 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	2be5      	cmp	r3, #229	; 0xe5
 80096d0:	d004      	beq.n	80096dc <dir_alloc+0x50>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d107      	bne.n	80096ec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	3301      	adds	r3, #1
 80096e0:	613b      	str	r3, [r7, #16]
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d102      	bne.n	80096f0 <dir_alloc+0x64>
 80096ea:	e00c      	b.n	8009706 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80096ec:	2300      	movs	r3, #0
 80096ee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80096f0:	2101      	movs	r1, #1
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff ff05 	bl	8009502 <dir_next>
 80096f8:	4603      	mov	r3, r0
 80096fa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0d7      	beq.n	80096b2 <dir_alloc+0x26>
 8009702:	e000      	b.n	8009706 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009704:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	2b04      	cmp	r3, #4
 800970a:	d101      	bne.n	8009710 <dir_alloc+0x84>
 800970c:	2307      	movs	r3, #7
 800970e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	331a      	adds	r3, #26
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff f83f 	bl	80087ac <ld_word>
 800972e:	4603      	mov	r3, r0
 8009730:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b03      	cmp	r3, #3
 8009738:	d109      	bne.n	800974e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	3314      	adds	r3, #20
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff f834 	bl	80087ac <ld_word>
 8009744:	4603      	mov	r3, r0
 8009746:	041b      	lsls	r3, r3, #16
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800974e:	68fb      	ldr	r3, [r7, #12]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	331a      	adds	r3, #26
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	b292      	uxth	r2, r2
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff f857 	bl	8008822 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d109      	bne.n	8009790 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f103 0214 	add.w	r2, r3, #20
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	0c1b      	lsrs	r3, r3, #16
 8009786:	b29b      	uxth	r3, r3
 8009788:	4619      	mov	r1, r3
 800978a:	4610      	mov	r0, r2
 800978c:	f7ff f849 	bl	8008822 <st_word>
	}
}
 8009790:	bf00      	nop
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80097a2:	2304      	movs	r3, #4
 80097a4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80097ac:	e03c      	b.n	8009828 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6938      	ldr	r0, [r7, #16]
 80097b6:	f7ff faa9 	bl	8008d0c <move_window>
 80097ba:	4603      	mov	r3, r0
 80097bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80097be:	7dfb      	ldrb	r3, [r7, #23]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d136      	bne.n	8009832 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a1b      	ldr	r3, [r3, #32]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d102      	bne.n	80097d8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80097d2:	2304      	movs	r3, #4
 80097d4:	75fb      	strb	r3, [r7, #23]
 80097d6:	e031      	b.n	800983c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	330b      	adds	r3, #11
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097e4:	73bb      	strb	r3, [r7, #14]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	7bba      	ldrb	r2, [r7, #14]
 80097ea:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	2be5      	cmp	r3, #229	; 0xe5
 80097f0:	d011      	beq.n	8009816 <dir_read+0x7e>
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	2b2e      	cmp	r3, #46	; 0x2e
 80097f6:	d00e      	beq.n	8009816 <dir_read+0x7e>
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	2b0f      	cmp	r3, #15
 80097fc:	d00b      	beq.n	8009816 <dir_read+0x7e>
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	f023 0320 	bic.w	r3, r3, #32
 8009804:	2b08      	cmp	r3, #8
 8009806:	bf0c      	ite	eq
 8009808:	2301      	moveq	r3, #1
 800980a:	2300      	movne	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	461a      	mov	r2, r3
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	4293      	cmp	r3, r2
 8009814:	d00f      	beq.n	8009836 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009816:	2100      	movs	r1, #0
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff fe72 	bl	8009502 <dir_next>
 800981e:	4603      	mov	r3, r0
 8009820:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009822:	7dfb      	ldrb	r3, [r7, #23]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d108      	bne.n	800983a <dir_read+0xa2>
	while (dp->sect) {
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1be      	bne.n	80097ae <dir_read+0x16>
 8009830:	e004      	b.n	800983c <dir_read+0xa4>
		if (res != FR_OK) break;
 8009832:	bf00      	nop
 8009834:	e002      	b.n	800983c <dir_read+0xa4>
				break;
 8009836:	bf00      	nop
 8009838:	e000      	b.n	800983c <dir_read+0xa4>
		if (res != FR_OK) break;
 800983a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800983c:	7dfb      	ldrb	r3, [r7, #23]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <dir_read+0xb0>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	61da      	str	r2, [r3, #28]
	return res;
 8009848:	7dfb      	ldrb	r3, [r7, #23]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b086      	sub	sp, #24
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009860:	2100      	movs	r1, #0
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff fdd2 	bl	800940c <dir_sdi>
 8009868:	4603      	mov	r3, r0
 800986a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <dir_find+0x24>
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	e03e      	b.n	80098f4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	4619      	mov	r1, r3
 800987c:	6938      	ldr	r0, [r7, #16]
 800987e:	f7ff fa45 	bl	8008d0c <move_window>
 8009882:	4603      	mov	r3, r0
 8009884:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d12f      	bne.n	80098ec <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d102      	bne.n	80098a0 <dir_find+0x4e>
 800989a:	2304      	movs	r3, #4
 800989c:	75fb      	strb	r3, [r7, #23]
 800989e:	e028      	b.n	80098f2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	330b      	adds	r3, #11
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	330b      	adds	r3, #11
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	f003 0308 	and.w	r3, r3, #8
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <dir_find+0x86>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a18      	ldr	r0, [r3, #32]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3324      	adds	r3, #36	; 0x24
 80098ca:	220b      	movs	r2, #11
 80098cc:	4619      	mov	r1, r3
 80098ce:	f7ff f82b 	bl	8008928 <mem_cmp>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80098d8:	2100      	movs	r1, #0
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff fe11 	bl	8009502 <dir_next>
 80098e0:	4603      	mov	r3, r0
 80098e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0c5      	beq.n	8009876 <dir_find+0x24>
 80098ea:	e002      	b.n	80098f2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80098ec:	bf00      	nop
 80098ee:	e000      	b.n	80098f2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80098f0:	bf00      	nop

	return res;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800990a:	2101      	movs	r1, #1
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff febd 	bl	800968c <dir_alloc>
 8009912:	4603      	mov	r3, r0
 8009914:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11c      	bne.n	8009956 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	4619      	mov	r1, r3
 8009922:	68b8      	ldr	r0, [r7, #8]
 8009924:	f7ff f9f2 	bl	8008d0c <move_window>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d111      	bne.n	8009956 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	2220      	movs	r2, #32
 8009938:	2100      	movs	r1, #0
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe ffd9 	bl	80088f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a18      	ldr	r0, [r3, #32]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3324      	adds	r3, #36	; 0x24
 8009948:	220b      	movs	r2, #11
 800994a:	4619      	mov	r1, r3
 800994c:	f7fe ffb0 	bl	80088b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2201      	movs	r2, #1
 8009954:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	4619      	mov	r1, r3
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7ff f9c9 	bl	8008d0c <move_window>
 800997a:	4603      	mov	r3, r0
 800997c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800997e:	7afb      	ldrb	r3, [r7, #11]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d106      	bne.n	8009992 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	22e5      	movs	r2, #229	; 0xe5
 800998a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2201      	movs	r2, #1
 8009990:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8009992:	7afb      	ldrb	r3, [r7, #11]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2200      	movs	r2, #0
 80099aa:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d04e      	beq.n	8009a52 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	613b      	str	r3, [r7, #16]
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80099bc:	e021      	b.n	8009a02 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a1a      	ldr	r2, [r3, #32]
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	1c59      	adds	r1, r3, #1
 80099c6:	6179      	str	r1, [r7, #20]
 80099c8:	4413      	add	r3, r2
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	d100      	bne.n	80099d6 <get_fileinfo+0x3a>
 80099d4:	e015      	b.n	8009a02 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	2b05      	cmp	r3, #5
 80099da:	d101      	bne.n	80099e0 <get_fileinfo+0x44>
 80099dc:	23e5      	movs	r3, #229	; 0xe5
 80099de:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2b09      	cmp	r3, #9
 80099e4:	d106      	bne.n	80099f4 <get_fileinfo+0x58>
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	613a      	str	r2, [r7, #16]
 80099ec:	683a      	ldr	r2, [r7, #0]
 80099ee:	4413      	add	r3, r2
 80099f0:	222e      	movs	r2, #46	; 0x2e
 80099f2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	613a      	str	r2, [r7, #16]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	4413      	add	r3, r2
 80099fe:	7bfa      	ldrb	r2, [r7, #15]
 8009a00:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2b0a      	cmp	r3, #10
 8009a06:	d9da      	bls.n	80099be <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3309      	adds	r3, #9
 8009a10:	2200      	movs	r2, #0
 8009a12:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	7ada      	ldrb	r2, [r3, #11]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	331c      	adds	r3, #28
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe fed9 	bl	80087dc <ld_dword>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	3316      	adds	r3, #22
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe fed0 	bl	80087dc <ld_dword>
 8009a3c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	80da      	strh	r2, [r3, #6]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	0c1b      	lsrs	r3, r3, #16
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	809a      	strh	r2, [r3, #4]
 8009a50:	e000      	b.n	8009a54 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009a52:	bf00      	nop
}
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3324      	adds	r3, #36	; 0x24
 8009a70:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009a72:	220b      	movs	r2, #11
 8009a74:	2120      	movs	r1, #32
 8009a76:	68b8      	ldr	r0, [r7, #8]
 8009a78:	f7fe ff3b 	bl	80088f2 <mem_set>
	si = i = 0; ni = 8;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	613b      	str	r3, [r7, #16]
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	61fb      	str	r3, [r7, #28]
 8009a84:	2308      	movs	r3, #8
 8009a86:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	61fa      	str	r2, [r7, #28]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	4413      	add	r3, r2
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a96:	7efb      	ldrb	r3, [r7, #27]
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	d94e      	bls.n	8009b3a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009a9c:	7efb      	ldrb	r3, [r7, #27]
 8009a9e:	2b2f      	cmp	r3, #47	; 0x2f
 8009aa0:	d006      	beq.n	8009ab0 <create_name+0x54>
 8009aa2:	7efb      	ldrb	r3, [r7, #27]
 8009aa4:	2b5c      	cmp	r3, #92	; 0x5c
 8009aa6:	d110      	bne.n	8009aca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009aa8:	e002      	b.n	8009ab0 <create_name+0x54>
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	3301      	adds	r3, #1
 8009aae:	61fb      	str	r3, [r7, #28]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	2b2f      	cmp	r3, #47	; 0x2f
 8009aba:	d0f6      	beq.n	8009aaa <create_name+0x4e>
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ac6:	d0f0      	beq.n	8009aaa <create_name+0x4e>
			break;
 8009ac8:	e038      	b.n	8009b3c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009aca:	7efb      	ldrb	r3, [r7, #27]
 8009acc:	2b2e      	cmp	r3, #46	; 0x2e
 8009ace:	d003      	beq.n	8009ad8 <create_name+0x7c>
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d30c      	bcc.n	8009af2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2b0b      	cmp	r3, #11
 8009adc:	d002      	beq.n	8009ae4 <create_name+0x88>
 8009ade:	7efb      	ldrb	r3, [r7, #27]
 8009ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ae2:	d001      	beq.n	8009ae8 <create_name+0x8c>
 8009ae4:	2306      	movs	r3, #6
 8009ae6:	e044      	b.n	8009b72 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009ae8:	2308      	movs	r3, #8
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	230b      	movs	r3, #11
 8009aee:	617b      	str	r3, [r7, #20]
			continue;
 8009af0:	e022      	b.n	8009b38 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009af2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	da04      	bge.n	8009b04 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009afa:	7efb      	ldrb	r3, [r7, #27]
 8009afc:	3b80      	subs	r3, #128	; 0x80
 8009afe:	4a1f      	ldr	r2, [pc, #124]	; (8009b7c <create_name+0x120>)
 8009b00:	5cd3      	ldrb	r3, [r2, r3]
 8009b02:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009b04:	7efb      	ldrb	r3, [r7, #27]
 8009b06:	4619      	mov	r1, r3
 8009b08:	481d      	ldr	r0, [pc, #116]	; (8009b80 <create_name+0x124>)
 8009b0a:	f7fe ff34 	bl	8008976 <chk_chr>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <create_name+0xbc>
 8009b14:	2306      	movs	r3, #6
 8009b16:	e02c      	b.n	8009b72 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009b18:	7efb      	ldrb	r3, [r7, #27]
 8009b1a:	2b60      	cmp	r3, #96	; 0x60
 8009b1c:	d905      	bls.n	8009b2a <create_name+0xce>
 8009b1e:	7efb      	ldrb	r3, [r7, #27]
 8009b20:	2b7a      	cmp	r3, #122	; 0x7a
 8009b22:	d802      	bhi.n	8009b2a <create_name+0xce>
 8009b24:	7efb      	ldrb	r3, [r7, #27]
 8009b26:	3b20      	subs	r3, #32
 8009b28:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	613a      	str	r2, [r7, #16]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	4413      	add	r3, r2
 8009b34:	7efa      	ldrb	r2, [r7, #27]
 8009b36:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009b38:	e7a6      	b.n	8009a88 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009b3a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	441a      	add	r2, r3
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <create_name+0xf4>
 8009b4c:	2306      	movs	r3, #6
 8009b4e:	e010      	b.n	8009b72 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2be5      	cmp	r3, #229	; 0xe5
 8009b56:	d102      	bne.n	8009b5e <create_name+0x102>
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2205      	movs	r2, #5
 8009b5c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009b5e:	7efb      	ldrb	r3, [r7, #27]
 8009b60:	2b20      	cmp	r3, #32
 8009b62:	d801      	bhi.n	8009b68 <create_name+0x10c>
 8009b64:	2204      	movs	r2, #4
 8009b66:	e000      	b.n	8009b6a <create_name+0x10e>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	330b      	adds	r3, #11
 8009b6e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009b70:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3720      	adds	r7, #32
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	0800bcec 	.word	0x0800bcec
 8009b80:	0800bc74 	.word	0x0800bc74

08009b84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009b98:	e002      	b.n	8009ba0 <follow_path+0x1c>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b2f      	cmp	r3, #47	; 0x2f
 8009ba6:	d0f8      	beq.n	8009b9a <follow_path+0x16>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	2b5c      	cmp	r3, #92	; 0x5c
 8009bae:	d0f4      	beq.n	8009b9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	2b1f      	cmp	r3, #31
 8009bbc:	d80a      	bhi.n	8009bd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2280      	movs	r2, #128	; 0x80
 8009bc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff fc1f 	bl	800940c <dir_sdi>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	75fb      	strb	r3, [r7, #23]
 8009bd2:	e043      	b.n	8009c5c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009bd4:	463b      	mov	r3, r7
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff ff3f 	bl	8009a5c <create_name>
 8009bde:	4603      	mov	r3, r0
 8009be0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d134      	bne.n	8009c52 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff fe32 	bl	8009852 <dir_find>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009bf8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d127      	bne.n	8009c56 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	f003 0304 	and.w	r3, r3, #4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d122      	bne.n	8009c56 <follow_path+0xd2>
 8009c10:	2305      	movs	r3, #5
 8009c12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009c14:	e01f      	b.n	8009c56 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c16:	7afb      	ldrb	r3, [r7, #11]
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d11c      	bne.n	8009c5a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	799b      	ldrb	r3, [r3, #6]
 8009c24:	f003 0310 	and.w	r3, r3, #16
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009c2c:	2305      	movs	r3, #5
 8009c2e:	75fb      	strb	r3, [r7, #23]
 8009c30:	e014      	b.n	8009c5c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c40:	4413      	add	r3, r2
 8009c42:	4619      	mov	r1, r3
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f7ff fd68 	bl	800971a <ld_clust>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c50:	e7c0      	b.n	8009bd4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009c52:	bf00      	nop
 8009c54:	e002      	b.n	8009c5c <follow_path+0xd8>
				break;
 8009c56:	bf00      	nop
 8009c58:	e000      	b.n	8009c5c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c5a:	bf00      	nop
			}
		}
	}

	return res;
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b087      	sub	sp, #28
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c72:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d031      	beq.n	8009ce0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	617b      	str	r3, [r7, #20]
 8009c82:	e002      	b.n	8009c8a <get_ldnumber+0x24>
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	3301      	adds	r3, #1
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b20      	cmp	r3, #32
 8009c90:	d903      	bls.n	8009c9a <get_ldnumber+0x34>
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	2b3a      	cmp	r3, #58	; 0x3a
 8009c98:	d1f4      	bne.n	8009c84 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2b3a      	cmp	r3, #58	; 0x3a
 8009ca0:	d11c      	bne.n	8009cdc <get_ldnumber+0x76>
			tp = *path;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	60fa      	str	r2, [r7, #12]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	3b30      	subs	r3, #48	; 0x30
 8009cb2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2b09      	cmp	r3, #9
 8009cb8:	d80e      	bhi.n	8009cd8 <get_ldnumber+0x72>
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d10a      	bne.n	8009cd8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d107      	bne.n	8009cd8 <get_ldnumber+0x72>
					vol = (int)i;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	e002      	b.n	8009ce2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009cdc:	2300      	movs	r3, #0
 8009cde:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009ce0:	693b      	ldr	r3, [r7, #16]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
	...

08009cf0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	70da      	strb	r2, [r3, #3]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d06:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7fe fffe 	bl	8008d0c <move_window>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <check_fs+0x2a>
 8009d16:	2304      	movs	r3, #4
 8009d18:	e038      	b.n	8009d8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3330      	adds	r3, #48	; 0x30
 8009d1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fd42 	bl	80087ac <ld_word>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d001      	beq.n	8009d38 <check_fs+0x48>
 8009d34:	2303      	movs	r3, #3
 8009d36:	e029      	b.n	8009d8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d3e:	2be9      	cmp	r3, #233	; 0xe9
 8009d40:	d009      	beq.n	8009d56 <check_fs+0x66>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d48:	2beb      	cmp	r3, #235	; 0xeb
 8009d4a:	d11e      	bne.n	8009d8a <check_fs+0x9a>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009d52:	2b90      	cmp	r3, #144	; 0x90
 8009d54:	d119      	bne.n	8009d8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3330      	adds	r3, #48	; 0x30
 8009d5a:	3336      	adds	r3, #54	; 0x36
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fe fd3d 	bl	80087dc <ld_dword>
 8009d62:	4603      	mov	r3, r0
 8009d64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d68:	4a0a      	ldr	r2, [pc, #40]	; (8009d94 <check_fs+0xa4>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d101      	bne.n	8009d72 <check_fs+0x82>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e00c      	b.n	8009d8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3330      	adds	r3, #48	; 0x30
 8009d76:	3352      	adds	r3, #82	; 0x52
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe fd2f 	bl	80087dc <ld_dword>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4a05      	ldr	r2, [pc, #20]	; (8009d98 <check_fs+0xa8>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d101      	bne.n	8009d8a <check_fs+0x9a>
 8009d86:	2300      	movs	r3, #0
 8009d88:	e000      	b.n	8009d8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009d8a:	2302      	movs	r3, #2
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	00544146 	.word	0x00544146
 8009d98:	33544146 	.word	0x33544146

08009d9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b096      	sub	sp, #88	; 0x58
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7ff ff58 	bl	8009c66 <get_ldnumber>
 8009db6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da01      	bge.n	8009dc2 <find_volume+0x26>
 8009dbe:	230b      	movs	r3, #11
 8009dc0:	e22d      	b.n	800a21e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009dc2:	4aa1      	ldr	r2, [pc, #644]	; (800a048 <find_volume+0x2ac>)
 8009dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <find_volume+0x3a>
 8009dd2:	230c      	movs	r3, #12
 8009dd4:	e223      	b.n	800a21e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009ddc:	79fb      	ldrb	r3, [r7, #7]
 8009dde:	f023 0301 	bic.w	r3, r3, #1
 8009de2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d01a      	beq.n	8009e22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dee:	785b      	ldrb	r3, [r3, #1]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe fc3d 	bl	8008670 <disk_status>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009dfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10c      	bne.n	8009e22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009e08:	79fb      	ldrb	r3, [r7, #7]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d007      	beq.n	8009e1e <find_volume+0x82>
 8009e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009e1a:	230a      	movs	r3, #10
 8009e1c:	e1ff      	b.n	800a21e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009e1e:	2300      	movs	r3, #0
 8009e20:	e1fd      	b.n	800a21e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e24:	2200      	movs	r2, #0
 8009e26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fe fc35 	bl	80086a4 <disk_initialize>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009e40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e1e6      	b.n	800a21e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d007      	beq.n	8009e66 <find_volume+0xca>
 8009e56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009e62:	230a      	movs	r3, #10
 8009e64:	e1db      	b.n	800a21e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009e6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e6e:	f7ff ff3f 	bl	8009cf0 <check_fs>
 8009e72:	4603      	mov	r3, r0
 8009e74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009e78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d149      	bne.n	8009f14 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e80:	2300      	movs	r3, #0
 8009e82:	643b      	str	r3, [r7, #64]	; 0x40
 8009e84:	e01e      	b.n	8009ec4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e8e:	011b      	lsls	r3, r3, #4
 8009e90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009e94:	4413      	add	r3, r2
 8009e96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d006      	beq.n	8009eb0 <find_volume+0x114>
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fc98 	bl	80087dc <ld_dword>
 8009eac:	4602      	mov	r2, r0
 8009eae:	e000      	b.n	8009eb2 <find_volume+0x116>
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	3358      	adds	r3, #88	; 0x58
 8009eb8:	443b      	add	r3, r7
 8009eba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8009ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d9dd      	bls.n	8009e86 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009eca:	2300      	movs	r3, #0
 8009ecc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <find_volume+0x13e>
 8009ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	3358      	adds	r3, #88	; 0x58
 8009ee0:	443b      	add	r3, r7
 8009ee2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009ee6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d005      	beq.n	8009efa <find_volume+0x15e>
 8009eee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ef0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ef2:	f7ff fefd 	bl	8009cf0 <check_fs>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	e000      	b.n	8009efc <find_volume+0x160>
 8009efa:	2303      	movs	r3, #3
 8009efc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009f00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d905      	bls.n	8009f14 <find_volume+0x178>
 8009f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8009f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d9e2      	bls.n	8009eda <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d101      	bne.n	8009f20 <find_volume+0x184>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e17e      	b.n	800a21e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d901      	bls.n	8009f2c <find_volume+0x190>
 8009f28:	230d      	movs	r3, #13
 8009f2a:	e178      	b.n	800a21e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	3330      	adds	r3, #48	; 0x30
 8009f30:	330b      	adds	r3, #11
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fc3a 	bl	80087ac <ld_word>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f3e:	d001      	beq.n	8009f44 <find_volume+0x1a8>
 8009f40:	230d      	movs	r3, #13
 8009f42:	e16c      	b.n	800a21e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f46:	3330      	adds	r3, #48	; 0x30
 8009f48:	3316      	adds	r3, #22
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fc2e 	bl	80087ac <ld_word>
 8009f50:	4603      	mov	r3, r0
 8009f52:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d106      	bne.n	8009f68 <find_volume+0x1cc>
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5c:	3330      	adds	r3, #48	; 0x30
 8009f5e:	3324      	adds	r3, #36	; 0x24
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fe fc3b 	bl	80087dc <ld_dword>
 8009f66:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f6c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7a:	789b      	ldrb	r3, [r3, #2]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d005      	beq.n	8009f8c <find_volume+0x1f0>
 8009f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f82:	789b      	ldrb	r3, [r3, #2]
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d001      	beq.n	8009f8c <find_volume+0x1f0>
 8009f88:	230d      	movs	r3, #13
 8009f8a:	e148      	b.n	800a21e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8e:	789b      	ldrb	r3, [r3, #2]
 8009f90:	461a      	mov	r2, r3
 8009f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f94:	fb02 f303 	mul.w	r3, r2, r3
 8009f98:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	895b      	ldrh	r3, [r3, #10]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d008      	beq.n	8009fc0 <find_volume+0x224>
 8009fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb0:	895b      	ldrh	r3, [r3, #10]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	895b      	ldrh	r3, [r3, #10]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	4013      	ands	r3, r2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <find_volume+0x228>
 8009fc0:	230d      	movs	r3, #13
 8009fc2:	e12c      	b.n	800a21e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	3330      	adds	r3, #48	; 0x30
 8009fc8:	3311      	adds	r3, #17
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fbee 	bl	80087ac <ld_word>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	891b      	ldrh	r3, [r3, #8]
 8009fdc:	f003 030f 	and.w	r3, r3, #15
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <find_volume+0x24e>
 8009fe6:	230d      	movs	r3, #13
 8009fe8:	e119      	b.n	800a21e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	3330      	adds	r3, #48	; 0x30
 8009fee:	3313      	adds	r3, #19
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fe fbdb 	bl	80087ac <ld_word>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d106      	bne.n	800a00e <find_volume+0x272>
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	3330      	adds	r3, #48	; 0x30
 800a004:	3320      	adds	r3, #32
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe fbe8 	bl	80087dc <ld_dword>
 800a00c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	3330      	adds	r3, #48	; 0x30
 800a012:	330e      	adds	r3, #14
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fbc9 	bl	80087ac <ld_word>
 800a01a:	4603      	mov	r3, r0
 800a01c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a01e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <find_volume+0x28c>
 800a024:	230d      	movs	r3, #13
 800a026:	e0fa      	b.n	800a21e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a028:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a02c:	4413      	add	r3, r2
 800a02e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a030:	8912      	ldrh	r2, [r2, #8]
 800a032:	0912      	lsrs	r2, r2, #4
 800a034:	b292      	uxth	r2, r2
 800a036:	4413      	add	r3, r2
 800a038:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a03a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	429a      	cmp	r2, r3
 800a040:	d204      	bcs.n	800a04c <find_volume+0x2b0>
 800a042:	230d      	movs	r3, #13
 800a044:	e0eb      	b.n	800a21e <find_volume+0x482>
 800a046:	bf00      	nop
 800a048:	20000d88 	.word	0x20000d88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a04c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a054:	8952      	ldrh	r2, [r2, #10]
 800a056:	fbb3 f3f2 	udiv	r3, r3, r2
 800a05a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <find_volume+0x2ca>
 800a062:	230d      	movs	r3, #13
 800a064:	e0db      	b.n	800a21e <find_volume+0x482>
		fmt = FS_FAT32;
 800a066:	2303      	movs	r3, #3
 800a068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a072:	4293      	cmp	r3, r2
 800a074:	d802      	bhi.n	800a07c <find_volume+0x2e0>
 800a076:	2302      	movs	r3, #2
 800a078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a082:	4293      	cmp	r3, r2
 800a084:	d802      	bhi.n	800a08c <find_volume+0x2f0>
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	1c9a      	adds	r2, r3, #2
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a098:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a09a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a09c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a09e:	441a      	add	r2, r3
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a0a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	441a      	add	r2, r3
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a0ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d11e      	bne.n	800a0f4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	3330      	adds	r3, #48	; 0x30
 800a0ba:	332a      	adds	r3, #42	; 0x2a
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe fb75 	bl	80087ac <ld_word>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <find_volume+0x330>
 800a0c8:	230d      	movs	r3, #13
 800a0ca:	e0a8      	b.n	800a21e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	891b      	ldrh	r3, [r3, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <find_volume+0x33c>
 800a0d4:	230d      	movs	r3, #13
 800a0d6:	e0a2      	b.n	800a21e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0da:	3330      	adds	r3, #48	; 0x30
 800a0dc:	332c      	adds	r3, #44	; 0x2c
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fb7c 	bl	80087dc <ld_dword>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	647b      	str	r3, [r7, #68]	; 0x44
 800a0f2:	e01f      	b.n	800a134 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	891b      	ldrh	r3, [r3, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <find_volume+0x364>
 800a0fc:	230d      	movs	r3, #13
 800a0fe:	e08e      	b.n	800a21e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a102:	6a1a      	ldr	r2, [r3, #32]
 800a104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a106:	441a      	add	r2, r3
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a10c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a110:	2b02      	cmp	r3, #2
 800a112:	d103      	bne.n	800a11c <find_volume+0x380>
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	005b      	lsls	r3, r3, #1
 800a11a:	e00a      	b.n	800a132 <find_volume+0x396>
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	695a      	ldr	r2, [r3, #20]
 800a120:	4613      	mov	r3, r2
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	4413      	add	r3, r2
 800a126:	085a      	lsrs	r2, r3, #1
 800a128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a132:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	699a      	ldr	r2, [r3, #24]
 800a138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a13a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a13e:	0a5b      	lsrs	r3, r3, #9
 800a140:	429a      	cmp	r2, r3
 800a142:	d201      	bcs.n	800a148 <find_volume+0x3ac>
 800a144:	230d      	movs	r3, #13
 800a146:	e06a      	b.n	800a21e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a14e:	611a      	str	r2, [r3, #16]
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	691a      	ldr	r2, [r3, #16]
 800a154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a156:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	2280      	movs	r2, #128	; 0x80
 800a15c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a15e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a162:	2b03      	cmp	r3, #3
 800a164:	d149      	bne.n	800a1fa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a168:	3330      	adds	r3, #48	; 0x30
 800a16a:	3330      	adds	r3, #48	; 0x30
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe fb1d 	bl	80087ac <ld_word>
 800a172:	4603      	mov	r3, r0
 800a174:	2b01      	cmp	r3, #1
 800a176:	d140      	bne.n	800a1fa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a17a:	3301      	adds	r3, #1
 800a17c:	4619      	mov	r1, r3
 800a17e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a180:	f7fe fdc4 	bl	8008d0c <move_window>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d137      	bne.n	800a1fa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	2200      	movs	r2, #0
 800a18e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	3330      	adds	r3, #48	; 0x30
 800a194:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe fb07 	bl	80087ac <ld_word>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d127      	bne.n	800a1fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ac:	3330      	adds	r3, #48	; 0x30
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fb14 	bl	80087dc <ld_dword>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	4a1c      	ldr	r2, [pc, #112]	; (800a228 <find_volume+0x48c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d11e      	bne.n	800a1fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1be:	3330      	adds	r3, #48	; 0x30
 800a1c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fe fb09 	bl	80087dc <ld_dword>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	4a17      	ldr	r2, [pc, #92]	; (800a22c <find_volume+0x490>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d113      	bne.n	800a1fa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d4:	3330      	adds	r3, #48	; 0x30
 800a1d6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fe fafe 	bl	80087dc <ld_dword>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e8:	3330      	adds	r3, #48	; 0x30
 800a1ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe faf4 	bl	80087dc <ld_dword>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a200:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a202:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <find_volume+0x494>)
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	3301      	adds	r3, #1
 800a208:	b29a      	uxth	r2, r3
 800a20a:	4b09      	ldr	r3, [pc, #36]	; (800a230 <find_volume+0x494>)
 800a20c:	801a      	strh	r2, [r3, #0]
 800a20e:	4b08      	ldr	r3, [pc, #32]	; (800a230 <find_volume+0x494>)
 800a210:	881a      	ldrh	r2, [r3, #0]
 800a212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a214:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a216:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a218:	f7fe fd10 	bl	8008c3c <clear_lock>
#endif
	return FR_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3758      	adds	r7, #88	; 0x58
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	41615252 	.word	0x41615252
 800a22c:	61417272 	.word	0x61417272
 800a230:	20000d8c 	.word	0x20000d8c

0800a234 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a23e:	2309      	movs	r3, #9
 800a240:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d01c      	beq.n	800a282 <validate+0x4e>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d018      	beq.n	800a282 <validate+0x4e>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d013      	beq.n	800a282 <validate+0x4e>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	889a      	ldrh	r2, [r3, #4]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	88db      	ldrh	r3, [r3, #6]
 800a264:	429a      	cmp	r2, r3
 800a266:	d10c      	bne.n	800a282 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	785b      	ldrb	r3, [r3, #1]
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe f9fe 	bl	8008670 <disk_status>
 800a274:	4603      	mov	r3, r0
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <validate+0x4e>
			res = FR_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <validate+0x5a>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	e000      	b.n	800a290 <validate+0x5c>
 800a28e:	2300      	movs	r3, #0
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	6013      	str	r3, [r2, #0]
	return res;
 800a294:	7bfb      	ldrb	r3, [r7, #15]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
	...

0800a2a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a2b2:	f107 0310 	add.w	r3, r7, #16
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff fcd5 	bl	8009c66 <get_ldnumber>
 800a2bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	da01      	bge.n	800a2c8 <f_mount+0x28>
 800a2c4:	230b      	movs	r3, #11
 800a2c6:	e02b      	b.n	800a320 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a2c8:	4a17      	ldr	r2, [pc, #92]	; (800a328 <f_mount+0x88>)
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d005      	beq.n	800a2e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a2d8:	69b8      	ldr	r0, [r7, #24]
 800a2da:	f7fe fcaf 	bl	8008c3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	490d      	ldr	r1, [pc, #52]	; (800a328 <f_mount+0x88>)
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <f_mount+0x66>
 800a300:	79fb      	ldrb	r3, [r7, #7]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d001      	beq.n	800a30a <f_mount+0x6a>
 800a306:	2300      	movs	r3, #0
 800a308:	e00a      	b.n	800a320 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a30a:	f107 010c 	add.w	r1, r7, #12
 800a30e:	f107 0308 	add.w	r3, r7, #8
 800a312:	2200      	movs	r2, #0
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff fd41 	bl	8009d9c <find_volume>
 800a31a:	4603      	mov	r3, r0
 800a31c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	20000d88 	.word	0x20000d88

0800a32c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b098      	sub	sp, #96	; 0x60
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <f_open+0x18>
 800a340:	2309      	movs	r3, #9
 800a342:	e1ad      	b.n	800a6a0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a344:	79fb      	ldrb	r3, [r7, #7]
 800a346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a34a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a34c:	79fa      	ldrb	r2, [r7, #7]
 800a34e:	f107 0110 	add.w	r1, r7, #16
 800a352:	f107 0308 	add.w	r3, r7, #8
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff fd20 	bl	8009d9c <find_volume>
 800a35c:	4603      	mov	r3, r0
 800a35e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a366:	2b00      	cmp	r3, #0
 800a368:	f040 8191 	bne.w	800a68e <f_open+0x362>
		dj.obj.fs = fs;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	f107 0314 	add.w	r3, r7, #20
 800a376:	4611      	mov	r1, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff fc03 	bl	8009b84 <follow_path>
 800a37e:	4603      	mov	r3, r0
 800a380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d11a      	bne.n	800a3c2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a38c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a390:	b25b      	sxtb	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	da03      	bge.n	800a39e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a396:	2306      	movs	r3, #6
 800a398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a39c:	e011      	b.n	800a3c2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	f023 0301 	bic.w	r3, r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	bf14      	ite	ne
 800a3a8:	2301      	movne	r3, #1
 800a3aa:	2300      	moveq	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f107 0314 	add.w	r3, r7, #20
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe faf8 	bl	80089ac <chk_lock>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	f003 031c 	and.w	r3, r3, #28
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d07f      	beq.n	800a4cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a3cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d017      	beq.n	800a404 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a3d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d10e      	bne.n	800a3fa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a3dc:	f7fe fb42 	bl	8008a64 <enq_lock>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d006      	beq.n	800a3f4 <f_open+0xc8>
 800a3e6:	f107 0314 	add.w	r3, r7, #20
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff fa86 	bl	80098fc <dir_register>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	e000      	b.n	800a3f6 <f_open+0xca>
 800a3f4:	2312      	movs	r3, #18
 800a3f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
 800a3fc:	f043 0308 	orr.w	r3, r3, #8
 800a400:	71fb      	strb	r3, [r7, #7]
 800a402:	e010      	b.n	800a426 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a404:	7ebb      	ldrb	r3, [r7, #26]
 800a406:	f003 0311 	and.w	r3, r3, #17
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <f_open+0xea>
					res = FR_DENIED;
 800a40e:	2307      	movs	r3, #7
 800a410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a414:	e007      	b.n	800a426 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	f003 0304 	and.w	r3, r3, #4
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <f_open+0xfa>
 800a420:	2308      	movs	r3, #8
 800a422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d168      	bne.n	800a500 <f_open+0x1d4>
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	f003 0308 	and.w	r3, r3, #8
 800a434:	2b00      	cmp	r3, #0
 800a436:	d063      	beq.n	800a500 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a438:	f7fd ff52 	bl	80082e0 <get_fattime>
 800a43c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a440:	330e      	adds	r3, #14
 800a442:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe fa07 	bl	8008858 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44c:	3316      	adds	r3, #22
 800a44e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe fa01 	bl	8008858 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a458:	330b      	adds	r3, #11
 800a45a:	2220      	movs	r2, #32
 800a45c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a462:	4611      	mov	r1, r2
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff f958 	bl	800971a <ld_clust>
 800a46a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a470:	2200      	movs	r2, #0
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff f970 	bl	8009758 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47a:	331c      	adds	r3, #28
 800a47c:	2100      	movs	r1, #0
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe f9ea 	bl	8008858 <st_dword>
					fs->wflag = 1;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	2201      	movs	r2, #1
 800a488:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d037      	beq.n	800a500 <f_open+0x1d4>
						dw = fs->winsect;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a496:	f107 0314 	add.w	r3, r7, #20
 800a49a:	2200      	movs	r2, #0
 800a49c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fe83 	bl	80091aa <remove_chain>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a4aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d126      	bne.n	800a500 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fc28 	bl	8008d0c <move_window>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4c6:	3a01      	subs	r2, #1
 800a4c8:	60da      	str	r2, [r3, #12]
 800a4ca:	e019      	b.n	800a500 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a4cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d115      	bne.n	800a500 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a4d4:	7ebb      	ldrb	r3, [r7, #26]
 800a4d6:	f003 0310 	and.w	r3, r3, #16
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a4de:	2304      	movs	r3, #4
 800a4e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a4e4:	e00c      	b.n	800a500 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	f003 0302 	and.w	r3, r3, #2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d007      	beq.n	800a500 <f_open+0x1d4>
 800a4f0:	7ebb      	ldrb	r3, [r7, #26]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d002      	beq.n	800a500 <f_open+0x1d4>
						res = FR_DENIED;
 800a4fa:	2307      	movs	r3, #7
 800a4fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a504:	2b00      	cmp	r3, #0
 800a506:	d128      	bne.n	800a55a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	f003 0308 	and.w	r3, r3, #8
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a518:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a528:	79fb      	ldrb	r3, [r7, #7]
 800a52a:	f023 0301 	bic.w	r3, r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bf14      	ite	ne
 800a532:	2301      	movne	r3, #1
 800a534:	2300      	moveq	r3, #0
 800a536:	b2db      	uxtb	r3, r3
 800a538:	461a      	mov	r2, r3
 800a53a:	f107 0314 	add.w	r3, r7, #20
 800a53e:	4611      	mov	r1, r2
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe fab1 	bl	8008aa8 <inc_lock>
 800a546:	4602      	mov	r2, r0
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d102      	bne.n	800a55a <f_open+0x22e>
 800a554:	2302      	movs	r3, #2
 800a556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a55a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f040 8095 	bne.w	800a68e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a568:	4611      	mov	r1, r2
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7ff f8d5 	bl	800971a <ld_clust>
 800a570:	4602      	mov	r2, r0
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a578:	331c      	adds	r3, #28
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe f92e 	bl	80087dc <ld_dword>
 800a580:	4602      	mov	r2, r0
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	88da      	ldrh	r2, [r3, #6]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	79fa      	ldrb	r2, [r7, #7]
 800a59e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3330      	adds	r3, #48	; 0x30
 800a5b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe f998 	bl	80088f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a5c2:	79fb      	ldrb	r3, [r7, #7]
 800a5c4:	f003 0320 	and.w	r3, r3, #32
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d060      	beq.n	800a68e <f_open+0x362>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d05c      	beq.n	800a68e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	895b      	ldrh	r3, [r3, #10]
 800a5e0:	025b      	lsls	r3, r3, #9
 800a5e2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	657b      	str	r3, [r7, #84]	; 0x54
 800a5f0:	e016      	b.n	800a620 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe fc43 	bl	8008e82 <get_fat>
 800a5fc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a5fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a600:	2b01      	cmp	r3, #1
 800a602:	d802      	bhi.n	800a60a <f_open+0x2de>
 800a604:	2302      	movs	r3, #2
 800a606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a60a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a60c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a610:	d102      	bne.n	800a618 <f_open+0x2ec>
 800a612:	2301      	movs	r3, #1
 800a614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a61a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	657b      	str	r3, [r7, #84]	; 0x54
 800a620:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a624:	2b00      	cmp	r3, #0
 800a626:	d103      	bne.n	800a630 <f_open+0x304>
 800a628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d8e0      	bhi.n	800a5f2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a634:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d127      	bne.n	800a68e <f_open+0x362>
 800a63e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a644:	2b00      	cmp	r3, #0
 800a646:	d022      	beq.n	800a68e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe fbf9 	bl	8008e44 <clust2sect>
 800a652:	6478      	str	r0, [r7, #68]	; 0x44
 800a654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a656:	2b00      	cmp	r3, #0
 800a658:	d103      	bne.n	800a662 <f_open+0x336>
						res = FR_INT_ERR;
 800a65a:	2302      	movs	r3, #2
 800a65c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a660:	e015      	b.n	800a68e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a664:	0a5a      	lsrs	r2, r3, #9
 800a666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a668:	441a      	add	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	7858      	ldrb	r0, [r3, #1]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a1a      	ldr	r2, [r3, #32]
 800a67c:	2301      	movs	r3, #1
 800a67e:	f7fe f837 	bl	80086f0 <disk_read>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d002      	beq.n	800a68e <f_open+0x362>
 800a688:	2301      	movs	r3, #1
 800a68a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a68e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <f_open+0x370>
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a69c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3760      	adds	r7, #96	; 0x60
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08c      	sub	sp, #48	; 0x30
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f107 0210 	add.w	r2, r7, #16
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7ff fdb3 	bl	800a234 <validate>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a6d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d107      	bne.n	800a6ec <f_write+0x44>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	7d5b      	ldrb	r3, [r3, #21]
 800a6e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a6e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <f_write+0x4a>
 800a6ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6f0:	e14b      	b.n	800a98a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	7d1b      	ldrb	r3, [r3, #20]
 800a6f6:	f003 0302 	and.w	r3, r3, #2
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <f_write+0x5a>
 800a6fe:	2307      	movs	r3, #7
 800a700:	e143      	b.n	800a98a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	699a      	ldr	r2, [r3, #24]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	441a      	add	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	429a      	cmp	r2, r3
 800a710:	f080 812d 	bcs.w	800a96e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	43db      	mvns	r3, r3
 800a71a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a71c:	e127      	b.n	800a96e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a726:	2b00      	cmp	r3, #0
 800a728:	f040 80e3 	bne.w	800a8f2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	0a5b      	lsrs	r3, r3, #9
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	8952      	ldrh	r2, [r2, #10]
 800a736:	3a01      	subs	r2, #1
 800a738:	4013      	ands	r3, r2
 800a73a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d143      	bne.n	800a7ca <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10c      	bne.n	800a764 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	2b00      	cmp	r3, #0
 800a754:	d11a      	bne.n	800a78c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2100      	movs	r1, #0
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe fd8a 	bl	8009274 <create_chain>
 800a760:	62b8      	str	r0, [r7, #40]	; 0x28
 800a762:	e013      	b.n	800a78c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d007      	beq.n	800a77c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	4619      	mov	r1, r3
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f7fe fe16 	bl	80093a4 <clmt_clust>
 800a778:	62b8      	str	r0, [r7, #40]	; 0x28
 800a77a:	e007      	b.n	800a78c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	4619      	mov	r1, r3
 800a784:	4610      	mov	r0, r2
 800a786:	f7fe fd75 	bl	8009274 <create_chain>
 800a78a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 80f2 	beq.w	800a978 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a796:	2b01      	cmp	r3, #1
 800a798:	d104      	bne.n	800a7a4 <f_write+0xfc>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2202      	movs	r2, #2
 800a79e:	755a      	strb	r2, [r3, #21]
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	e0f2      	b.n	800a98a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7aa:	d104      	bne.n	800a7b6 <f_write+0x10e>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	755a      	strb	r2, [r3, #21]
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e0e9      	b.n	800a98a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ba:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d102      	bne.n	800a7ca <f_write+0x122>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	7d1b      	ldrb	r3, [r3, #20]
 800a7ce:	b25b      	sxtb	r3, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	da18      	bge.n	800a806 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	7858      	ldrb	r0, [r3, #1]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6a1a      	ldr	r2, [r3, #32]
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	f7fd ffa4 	bl	8008730 <disk_write>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d004      	beq.n	800a7f8 <f_write+0x150>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	755a      	strb	r2, [r3, #21]
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e0c8      	b.n	800a98a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	7d1b      	ldrb	r3, [r3, #20]
 800a7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a800:	b2da      	uxtb	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	69db      	ldr	r3, [r3, #28]
 800a80c:	4619      	mov	r1, r3
 800a80e:	4610      	mov	r0, r2
 800a810:	f7fe fb18 	bl	8008e44 <clust2sect>
 800a814:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d104      	bne.n	800a826 <f_write+0x17e>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2202      	movs	r2, #2
 800a820:	755a      	strb	r2, [r3, #21]
 800a822:	2302      	movs	r3, #2
 800a824:	e0b1      	b.n	800a98a <f_write+0x2e2>
			sect += csect;
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	4413      	add	r3, r2
 800a82c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	0a5b      	lsrs	r3, r3, #9
 800a832:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d03c      	beq.n	800a8b4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	4413      	add	r3, r2
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	8952      	ldrh	r2, [r2, #10]
 800a844:	4293      	cmp	r3, r2
 800a846:	d905      	bls.n	800a854 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	895b      	ldrh	r3, [r3, #10]
 800a84c:	461a      	mov	r2, r3
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	7858      	ldrb	r0, [r3, #1]
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	69f9      	ldr	r1, [r7, #28]
 800a85e:	f7fd ff67 	bl	8008730 <disk_write>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d004      	beq.n	800a872 <f_write+0x1ca>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2201      	movs	r2, #1
 800a86c:	755a      	strb	r2, [r3, #21]
 800a86e:	2301      	movs	r3, #1
 800a870:	e08b      	b.n	800a98a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6a1a      	ldr	r2, [r3, #32]
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	6a3a      	ldr	r2, [r7, #32]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d915      	bls.n	800a8ac <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6a1a      	ldr	r2, [r3, #32]
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	025b      	lsls	r3, r3, #9
 800a890:	69fa      	ldr	r2, [r7, #28]
 800a892:	4413      	add	r3, r2
 800a894:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a898:	4619      	mov	r1, r3
 800a89a:	f7fe f809 	bl	80088b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	7d1b      	ldrb	r3, [r3, #20]
 800a8a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	025b      	lsls	r3, r3, #9
 800a8b0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a8b2:	e03f      	b.n	800a934 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d016      	beq.n	800a8ec <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	699a      	ldr	r2, [r3, #24]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d210      	bcs.n	800a8ec <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	7858      	ldrb	r0, [r3, #1]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	f7fd ff0a 	bl	80086f0 <disk_read>
 800a8dc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d004      	beq.n	800a8ec <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	755a      	strb	r2, [r3, #21]
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e04e      	b.n	800a98a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8fa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a8fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	429a      	cmp	r2, r3
 800a906:	d901      	bls.n	800a90c <f_write+0x264>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a91a:	4413      	add	r3, r2
 800a91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a91e:	69f9      	ldr	r1, [r7, #28]
 800a920:	4618      	mov	r0, r3
 800a922:	f7fd ffc5 	bl	80088b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	7d1b      	ldrb	r3, [r3, #20]
 800a92a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a934:	69fa      	ldr	r2, [r7, #28]
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	4413      	add	r3, r2
 800a93a:	61fb      	str	r3, [r7, #28]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	699a      	ldr	r2, [r3, #24]
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	441a      	add	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	619a      	str	r2, [r3, #24]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	68da      	ldr	r2, [r3, #12]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	429a      	cmp	r2, r3
 800a952:	bf38      	it	cc
 800a954:	461a      	movcc	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	60da      	str	r2, [r3, #12]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a960:	441a      	add	r2, r3
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	f47f aed4 	bne.w	800a71e <f_write+0x76>
 800a976:	e000      	b.n	800a97a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a978:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	7d1b      	ldrb	r3, [r3, #20]
 800a97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a982:	b2da      	uxtb	r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3730      	adds	r7, #48	; 0x30
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b086      	sub	sp, #24
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f107 0208 	add.w	r2, r7, #8
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff fc46 	bl	800a234 <validate>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d168      	bne.n	800aa84 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	7d1b      	ldrb	r3, [r3, #20]
 800a9b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d062      	beq.n	800aa84 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	7d1b      	ldrb	r3, [r3, #20]
 800a9c2:	b25b      	sxtb	r3, r3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	da15      	bge.n	800a9f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	7858      	ldrb	r0, [r3, #1]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a1a      	ldr	r2, [r3, #32]
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	f7fd feaa 	bl	8008730 <disk_write>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <f_sync+0x54>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e04f      	b.n	800aa86 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	7d1b      	ldrb	r3, [r3, #20]
 800a9ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a9f4:	f7fd fc74 	bl	80082e0 <get_fattime>
 800a9f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f7fe f982 	bl	8008d0c <move_window>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d138      	bne.n	800aa84 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa16:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	330b      	adds	r3, #11
 800aa1c:	781a      	ldrb	r2, [r3, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	330b      	adds	r3, #11
 800aa22:	f042 0220 	orr.w	r2, r2, #32
 800aa26:	b2d2      	uxtb	r2, r2
 800aa28:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	461a      	mov	r2, r3
 800aa34:	68f9      	ldr	r1, [r7, #12]
 800aa36:	f7fe fe8f 	bl	8009758 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f103 021c 	add.w	r2, r3, #28
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f7fd ff06 	bl	8008858 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3316      	adds	r3, #22
 800aa50:	6939      	ldr	r1, [r7, #16]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fd ff00 	bl	8008858 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3312      	adds	r3, #18
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fd fedf 	bl	8008822 <st_word>
					fs->wflag = 1;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2201      	movs	r2, #1
 800aa68:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe f97b 	bl	8008d68 <sync_fs>
 800aa72:	4603      	mov	r3, r0
 800aa74:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	7d1b      	ldrb	r3, [r3, #20]
 800aa7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7ff ff7b 	bl	800a992 <f_sync>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d118      	bne.n	800aad8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f107 0208 	add.w	r2, r7, #8
 800aaac:	4611      	mov	r1, r2
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7ff fbc0 	bl	800a234 <validate>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10c      	bne.n	800aad8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe f87e 	bl	8008bc4 <dec_lock>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d102      	bne.n	800aad8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b090      	sub	sp, #64	; 0x40
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f107 0208 	add.w	r2, r7, #8
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7ff fb9d 	bl	800a234 <validate>
 800aafa:	4603      	mov	r3, r0
 800aafc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ab00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d103      	bne.n	800ab10 <f_lseek+0x2e>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	7d5b      	ldrb	r3, [r3, #21]
 800ab0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ab10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <f_lseek+0x3c>
 800ab18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab1c:	e1e6      	b.n	800aeec <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f000 80d1 	beq.w	800acca <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab2e:	d15a      	bne.n	800abe6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab34:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	1d1a      	adds	r2, r3, #4
 800ab3a:	627a      	str	r2, [r7, #36]	; 0x24
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	617b      	str	r3, [r7, #20]
 800ab40:	2302      	movs	r3, #2
 800ab42:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d03a      	beq.n	800abc6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ab50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab52:	613b      	str	r3, [r7, #16]
 800ab54:	2300      	movs	r3, #0
 800ab56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	3302      	adds	r3, #2
 800ab5c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	60fb      	str	r3, [r7, #12]
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	3301      	adds	r3, #1
 800ab66:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fe f988 	bl	8008e82 <get_fat>
 800ab72:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d804      	bhi.n	800ab84 <f_lseek+0xa2>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	755a      	strb	r2, [r3, #21]
 800ab80:	2302      	movs	r3, #2
 800ab82:	e1b3      	b.n	800aeec <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab8a:	d104      	bne.n	800ab96 <f_lseek+0xb4>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	755a      	strb	r2, [r3, #21]
 800ab92:	2301      	movs	r3, #1
 800ab94:	e1aa      	b.n	800aeec <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d0de      	beq.n	800ab5e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800aba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d809      	bhi.n	800abbc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	1d1a      	adds	r2, r3, #4
 800abac:	627a      	str	r2, [r7, #36]	; 0x24
 800abae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb0:	601a      	str	r2, [r3, #0]
 800abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb4:	1d1a      	adds	r2, r3, #4
 800abb6:	627a      	str	r2, [r7, #36]	; 0x24
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d3c4      	bcc.n	800ab50 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abcc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800abce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d803      	bhi.n	800abde <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	e184      	b.n	800aee8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800abde:	2311      	movs	r3, #17
 800abe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800abe4:	e180      	b.n	800aee8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d902      	bls.n	800abf6 <f_lseek+0x114>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f000 8172 	beq.w	800aee8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7fe fbca 	bl	80093a4 <clmt_clust>
 800ac10:	4602      	mov	r2, r0
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	69db      	ldr	r3, [r3, #28]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	4610      	mov	r0, r2
 800ac20:	f7fe f910 	bl	8008e44 <clust2sect>
 800ac24:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d104      	bne.n	800ac36 <f_lseek+0x154>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	755a      	strb	r2, [r3, #21]
 800ac32:	2302      	movs	r3, #2
 800ac34:	e15a      	b.n	800aeec <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	0a5b      	lsrs	r3, r3, #9
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	8952      	ldrh	r2, [r2, #10]
 800ac40:	3a01      	subs	r2, #1
 800ac42:	4013      	ands	r3, r2
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	4413      	add	r3, r2
 800ac48:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f000 8148 	beq.w	800aee8 <f_lseek+0x406>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a1b      	ldr	r3, [r3, #32]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	f000 8142 	beq.w	800aee8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	7d1b      	ldrb	r3, [r3, #20]
 800ac68:	b25b      	sxtb	r3, r3
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	da18      	bge.n	800aca0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	7858      	ldrb	r0, [r3, #1]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a1a      	ldr	r2, [r3, #32]
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	f7fd fd57 	bl	8008730 <disk_write>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d004      	beq.n	800ac92 <f_lseek+0x1b0>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	755a      	strb	r2, [r3, #21]
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e12c      	b.n	800aeec <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	7d1b      	ldrb	r3, [r3, #20]
 800ac96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	7858      	ldrb	r0, [r3, #1]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acaa:	2301      	movs	r3, #1
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	f7fd fd1f 	bl	80086f0 <disk_read>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d004      	beq.n	800acc2 <f_lseek+0x1e0>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	755a      	strb	r2, [r3, #21]
 800acbe:	2301      	movs	r3, #1
 800acc0:	e114      	b.n	800aeec <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	69ba      	ldr	r2, [r7, #24]
 800acc6:	621a      	str	r2, [r3, #32]
 800acc8:	e10e      	b.n	800aee8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d908      	bls.n	800ace6 <f_lseek+0x204>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	7d1b      	ldrb	r3, [r3, #20]
 800acd8:	f003 0302 	and.w	r3, r3, #2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	637b      	str	r3, [r7, #52]	; 0x34
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acf4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80a7 	beq.w	800ae4c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	895b      	ldrh	r3, [r3, #10]
 800ad02:	025b      	lsls	r3, r3, #9
 800ad04:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d01b      	beq.n	800ad44 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	1e5a      	subs	r2, r3, #1
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	fbb2 f2f3 	udiv	r2, r2, r3
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	1e59      	subs	r1, r3, #1
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d30f      	bcc.n	800ad44 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	1e5a      	subs	r2, r3, #1
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	425b      	negs	r3, r3
 800ad2c:	401a      	ands	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	69db      	ldr	r3, [r3, #28]
 800ad40:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad42:	e022      	b.n	800ad8a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d119      	bne.n	800ad84 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2100      	movs	r1, #0
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fe fa8d 	bl	8009274 <create_chain>
 800ad5a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d104      	bne.n	800ad6c <f_lseek+0x28a>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2202      	movs	r2, #2
 800ad66:	755a      	strb	r2, [r3, #21]
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e0bf      	b.n	800aeec <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad72:	d104      	bne.n	800ad7e <f_lseek+0x29c>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	755a      	strb	r2, [r3, #21]
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e0b6      	b.n	800aeec <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad82:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad88:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d05d      	beq.n	800ae4c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ad90:	e03a      	b.n	800ae08 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	603b      	str	r3, [r7, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	699a      	ldr	r2, [r3, #24]
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	441a      	add	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	7d1b      	ldrb	r3, [r3, #20]
 800adaa:	f003 0302 	and.w	r3, r3, #2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00b      	beq.n	800adca <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe fa5c 	bl	8009274 <create_chain>
 800adbc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800adbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d108      	bne.n	800add6 <f_lseek+0x2f4>
							ofs = 0; break;
 800adc4:	2300      	movs	r3, #0
 800adc6:	603b      	str	r3, [r7, #0]
 800adc8:	e022      	b.n	800ae10 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe f857 	bl	8008e82 <get_fat>
 800add4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800add6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800addc:	d104      	bne.n	800ade8 <f_lseek+0x306>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	755a      	strb	r2, [r3, #21]
 800ade4:	2301      	movs	r3, #1
 800ade6:	e081      	b.n	800aeec <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	2b01      	cmp	r3, #1
 800adec:	d904      	bls.n	800adf8 <f_lseek+0x316>
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d304      	bcc.n	800ae02 <f_lseek+0x320>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2202      	movs	r2, #2
 800adfc:	755a      	strb	r2, [r3, #21]
 800adfe:	2302      	movs	r3, #2
 800ae00:	e074      	b.n	800aeec <f_lseek+0x40a>
					fp->clust = clst;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae06:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d8c0      	bhi.n	800ad92 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	699a      	ldr	r2, [r3, #24]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	441a      	add	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d012      	beq.n	800ae4c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe f80a 	bl	8008e44 <clust2sect>
 800ae30:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ae32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d104      	bne.n	800ae42 <f_lseek+0x360>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	755a      	strb	r2, [r3, #21]
 800ae3e:	2302      	movs	r3, #2
 800ae40:	e054      	b.n	800aeec <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	0a5b      	lsrs	r3, r3, #9
 800ae46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae48:	4413      	add	r3, r2
 800ae4a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	699a      	ldr	r2, [r3, #24]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d90a      	bls.n	800ae6e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	699a      	ldr	r2, [r3, #24]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	7d1b      	ldrb	r3, [r3, #20]
 800ae64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d036      	beq.n	800aee8 <f_lseek+0x406>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d031      	beq.n	800aee8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	7d1b      	ldrb	r3, [r3, #20]
 800ae88:	b25b      	sxtb	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	da18      	bge.n	800aec0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	7858      	ldrb	r0, [r3, #1]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a1a      	ldr	r2, [r3, #32]
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f7fd fc47 	bl	8008730 <disk_write>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d004      	beq.n	800aeb2 <f_lseek+0x3d0>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	755a      	strb	r2, [r3, #21]
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e01c      	b.n	800aeec <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	7d1b      	ldrb	r3, [r3, #20]
 800aeb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	7858      	ldrb	r0, [r3, #1]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aeca:	2301      	movs	r3, #1
 800aecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aece:	f7fd fc0f 	bl	80086f0 <disk_read>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d004      	beq.n	800aee2 <f_lseek+0x400>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	755a      	strb	r2, [r3, #21]
 800aede:	2301      	movs	r3, #1
 800aee0:	e004      	b.n	800aeec <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aee6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800aee8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3740      	adds	r7, #64	; 0x40
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <f_opendir+0x14>
 800af04:	2309      	movs	r3, #9
 800af06:	e064      	b.n	800afd2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800af0c:	f107 010c 	add.w	r1, r7, #12
 800af10:	463b      	mov	r3, r7
 800af12:	2200      	movs	r2, #0
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe ff41 	bl	8009d9c <find_volume>
 800af1a:	4603      	mov	r3, r0
 800af1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af1e:	7dfb      	ldrb	r3, [r7, #23]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d14f      	bne.n	800afc4 <f_opendir+0xd0>
		obj->fs = fs;
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7fe fe28 	bl	8009b84 <follow_path>
 800af34:	4603      	mov	r3, r0
 800af36:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800af38:	7dfb      	ldrb	r3, [r7, #23]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d13d      	bne.n	800afba <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af44:	b25b      	sxtb	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	db12      	blt.n	800af70 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	799b      	ldrb	r3, [r3, #6]
 800af4e:	f003 0310 	and.w	r3, r3, #16
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00a      	beq.n	800af6c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a1b      	ldr	r3, [r3, #32]
 800af5c:	4619      	mov	r1, r3
 800af5e:	4610      	mov	r0, r2
 800af60:	f7fe fbdb 	bl	800971a <ld_clust>
 800af64:	4602      	mov	r2, r0
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	609a      	str	r2, [r3, #8]
 800af6a:	e001      	b.n	800af70 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800af6c:	2305      	movs	r3, #5
 800af6e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800af70:	7dfb      	ldrb	r3, [r7, #23]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d121      	bne.n	800afba <f_opendir+0xc6>
				obj->id = fs->id;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	88da      	ldrh	r2, [r3, #6]
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800af7e:	2100      	movs	r1, #0
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7fe fa43 	bl	800940c <dir_sdi>
 800af86:	4603      	mov	r3, r0
 800af88:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800af8a:	7dfb      	ldrb	r3, [r7, #23]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d114      	bne.n	800afba <f_opendir+0xc6>
					if (obj->sclust) {
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00d      	beq.n	800afb4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800af98:	2100      	movs	r1, #0
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7fd fd84 	bl	8008aa8 <inc_lock>
 800afa0:	4602      	mov	r2, r0
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d105      	bne.n	800afba <f_opendir+0xc6>
 800afae:	2312      	movs	r3, #18
 800afb0:	75fb      	strb	r3, [r7, #23]
 800afb2:	e002      	b.n	800afba <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	2200      	movs	r2, #0
 800afb8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800afba:	7dfb      	ldrb	r3, [r7, #23]
 800afbc:	2b04      	cmp	r3, #4
 800afbe:	d101      	bne.n	800afc4 <f_opendir+0xd0>
 800afc0:	2305      	movs	r3, #5
 800afc2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800afc4:	7dfb      	ldrb	r3, [r7, #23]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d002      	beq.n	800afd0 <f_opendir+0xdc>
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2200      	movs	r2, #0
 800afce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f107 0208 	add.w	r2, r7, #8
 800afe8:	4611      	mov	r1, r2
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff f922 	bl	800a234 <validate>
 800aff0:	4603      	mov	r3, r0
 800aff2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d110      	bne.n	800b01c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d006      	beq.n	800b010 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	4618      	mov	r0, r3
 800b008:	f7fd fddc 	bl	8008bc4 <dec_lock>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d102      	bne.n	800b01c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b084      	sub	sp, #16
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f107 0208 	add.w	r2, r7, #8
 800b036:	4611      	mov	r1, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff f8fb 	bl	800a234 <validate>
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d126      	bne.n	800b096 <f_readdir+0x70>
		if (!fno) {
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d106      	bne.n	800b05c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b04e:	2100      	movs	r1, #0
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7fe f9db 	bl	800940c <dir_sdi>
 800b056:	4603      	mov	r3, r0
 800b058:	73fb      	strb	r3, [r7, #15]
 800b05a:	e01c      	b.n	800b096 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b05c:	2100      	movs	r1, #0
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7fe fb9a 	bl	8009798 <dir_read>
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	d101      	bne.n	800b072 <f_readdir+0x4c>
 800b06e:	2300      	movs	r3, #0
 800b070:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b072:	7bfb      	ldrb	r3, [r7, #15]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10e      	bne.n	800b096 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7fe fc8e 	bl	800999c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b080:	2100      	movs	r1, #0
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7fe fa3d 	bl	8009502 <dir_next>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d101      	bne.n	800b096 <f_readdir+0x70>
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b096:	7bfb      	ldrb	r3, [r7, #15]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b09e      	sub	sp, #120	; 0x78
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b0ac:	f107 010c 	add.w	r1, r7, #12
 800b0b0:	1d3b      	adds	r3, r7, #4
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fe fe71 	bl	8009d9c <find_volume>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b0c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f040 808e 	bne.w	800b1ea <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fe fd54 	bl	8009b84 <follow_path>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b0e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d108      	bne.n	800b0fc <f_unlink+0x5c>
 800b0ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0ee:	2102      	movs	r1, #2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fd fc5b 	bl	80089ac <chk_lock>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b0fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b100:	2b00      	cmp	r3, #0
 800b102:	d172      	bne.n	800b1ea <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b104:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b108:	b25b      	sxtb	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	da03      	bge.n	800b116 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b10e:	2306      	movs	r3, #6
 800b110:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b114:	e008      	b.n	800b128 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b116:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b122:	2307      	movs	r3, #7
 800b124:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b128:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d134      	bne.n	800b19a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b134:	4611      	mov	r1, r2
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe faef 	bl	800971a <ld_clust>
 800b13c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b13e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b142:	f003 0310 	and.w	r3, r3, #16
 800b146:	2b00      	cmp	r3, #0
 800b148:	d027      	beq.n	800b19a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b14e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b150:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b152:	f107 0310 	add.w	r3, r7, #16
 800b156:	2100      	movs	r1, #0
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fe f957 	bl	800940c <dir_sdi>
 800b15e:	4603      	mov	r3, r0
 800b160:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b164:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d116      	bne.n	800b19a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b16c:	f107 0310 	add.w	r3, r7, #16
 800b170:	2100      	movs	r1, #0
 800b172:	4618      	mov	r0, r3
 800b174:	f7fe fb10 	bl	8009798 <dir_read>
 800b178:	4603      	mov	r3, r0
 800b17a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b17e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b182:	2b00      	cmp	r3, #0
 800b184:	d102      	bne.n	800b18c <f_unlink+0xec>
 800b186:	2307      	movs	r3, #7
 800b188:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b18c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b190:	2b04      	cmp	r3, #4
 800b192:	d102      	bne.n	800b19a <f_unlink+0xfa>
 800b194:	2300      	movs	r3, #0
 800b196:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b19a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d123      	bne.n	800b1ea <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b1a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe fbda 	bl	8009960 <dir_remove>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b1b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10c      	bne.n	800b1d4 <f_unlink+0x134>
 800b1ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d009      	beq.n	800b1d4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b1c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fd ffee 	bl	80091aa <remove_chain>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b1d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d106      	bne.n	800b1ea <f_unlink+0x14a>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fd fdc2 	bl	8008d68 <sync_fs>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b1ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3778      	adds	r7, #120	; 0x78
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
	...

0800b1f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	4613      	mov	r3, r2
 800b204:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b206:	2301      	movs	r3, #1
 800b208:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b20e:	4b1f      	ldr	r3, [pc, #124]	; (800b28c <FATFS_LinkDriverEx+0x94>)
 800b210:	7a5b      	ldrb	r3, [r3, #9]
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	d131      	bne.n	800b27c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b218:	4b1c      	ldr	r3, [pc, #112]	; (800b28c <FATFS_LinkDriverEx+0x94>)
 800b21a:	7a5b      	ldrb	r3, [r3, #9]
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	461a      	mov	r2, r3
 800b220:	4b1a      	ldr	r3, [pc, #104]	; (800b28c <FATFS_LinkDriverEx+0x94>)
 800b222:	2100      	movs	r1, #0
 800b224:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b226:	4b19      	ldr	r3, [pc, #100]	; (800b28c <FATFS_LinkDriverEx+0x94>)
 800b228:	7a5b      	ldrb	r3, [r3, #9]
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	4a17      	ldr	r2, [pc, #92]	; (800b28c <FATFS_LinkDriverEx+0x94>)
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b236:	4b15      	ldr	r3, [pc, #84]	; (800b28c <FATFS_LinkDriverEx+0x94>)
 800b238:	7a5b      	ldrb	r3, [r3, #9]
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	461a      	mov	r2, r3
 800b23e:	4b13      	ldr	r3, [pc, #76]	; (800b28c <FATFS_LinkDriverEx+0x94>)
 800b240:	4413      	add	r3, r2
 800b242:	79fa      	ldrb	r2, [r7, #7]
 800b244:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b246:	4b11      	ldr	r3, [pc, #68]	; (800b28c <FATFS_LinkDriverEx+0x94>)
 800b248:	7a5b      	ldrb	r3, [r3, #9]
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	1c5a      	adds	r2, r3, #1
 800b24e:	b2d1      	uxtb	r1, r2
 800b250:	4a0e      	ldr	r2, [pc, #56]	; (800b28c <FATFS_LinkDriverEx+0x94>)
 800b252:	7251      	strb	r1, [r2, #9]
 800b254:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b256:	7dbb      	ldrb	r3, [r7, #22]
 800b258:	3330      	adds	r3, #48	; 0x30
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	3301      	adds	r3, #1
 800b264:	223a      	movs	r2, #58	; 0x3a
 800b266:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	3302      	adds	r3, #2
 800b26c:	222f      	movs	r2, #47	; 0x2f
 800b26e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	3303      	adds	r3, #3
 800b274:	2200      	movs	r2, #0
 800b276:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b278:	2300      	movs	r3, #0
 800b27a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b27c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	371c      	adds	r7, #28
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	20000db0 	.word	0x20000db0

0800b290 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b29a:	2200      	movs	r2, #0
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff ffaa 	bl	800b1f8 <FATFS_LinkDriverEx>
 800b2a4:	4603      	mov	r3, r0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <__errno>:
 800b2b0:	4b01      	ldr	r3, [pc, #4]	; (800b2b8 <__errno+0x8>)
 800b2b2:	6818      	ldr	r0, [r3, #0]
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	20000010 	.word	0x20000010

0800b2bc <exit>:
 800b2bc:	b508      	push	{r3, lr}
 800b2be:	4b07      	ldr	r3, [pc, #28]	; (800b2dc <exit+0x20>)
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	b113      	cbz	r3, 800b2ca <exit+0xe>
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	f3af 8000 	nop.w
 800b2ca:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <exit+0x24>)
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b2d0:	b103      	cbz	r3, 800b2d4 <exit+0x18>
 800b2d2:	4798      	blx	r3
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f7f6 fac3 	bl	8001860 <_exit>
 800b2da:	bf00      	nop
 800b2dc:	00000000 	.word	0x00000000
 800b2e0:	0800bd6c 	.word	0x0800bd6c

0800b2e4 <__libc_init_array>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	4d0d      	ldr	r5, [pc, #52]	; (800b31c <__libc_init_array+0x38>)
 800b2e8:	4c0d      	ldr	r4, [pc, #52]	; (800b320 <__libc_init_array+0x3c>)
 800b2ea:	1b64      	subs	r4, r4, r5
 800b2ec:	10a4      	asrs	r4, r4, #2
 800b2ee:	2600      	movs	r6, #0
 800b2f0:	42a6      	cmp	r6, r4
 800b2f2:	d109      	bne.n	800b308 <__libc_init_array+0x24>
 800b2f4:	4d0b      	ldr	r5, [pc, #44]	; (800b324 <__libc_init_array+0x40>)
 800b2f6:	4c0c      	ldr	r4, [pc, #48]	; (800b328 <__libc_init_array+0x44>)
 800b2f8:	f000 fc9e 	bl	800bc38 <_init>
 800b2fc:	1b64      	subs	r4, r4, r5
 800b2fe:	10a4      	asrs	r4, r4, #2
 800b300:	2600      	movs	r6, #0
 800b302:	42a6      	cmp	r6, r4
 800b304:	d105      	bne.n	800b312 <__libc_init_array+0x2e>
 800b306:	bd70      	pop	{r4, r5, r6, pc}
 800b308:	f855 3b04 	ldr.w	r3, [r5], #4
 800b30c:	4798      	blx	r3
 800b30e:	3601      	adds	r6, #1
 800b310:	e7ee      	b.n	800b2f0 <__libc_init_array+0xc>
 800b312:	f855 3b04 	ldr.w	r3, [r5], #4
 800b316:	4798      	blx	r3
 800b318:	3601      	adds	r6, #1
 800b31a:	e7f2      	b.n	800b302 <__libc_init_array+0x1e>
 800b31c:	0800bdac 	.word	0x0800bdac
 800b320:	0800bdac 	.word	0x0800bdac
 800b324:	0800bdac 	.word	0x0800bdac
 800b328:	0800bdb0 	.word	0x0800bdb0

0800b32c <malloc>:
 800b32c:	4b02      	ldr	r3, [pc, #8]	; (800b338 <malloc+0xc>)
 800b32e:	4601      	mov	r1, r0
 800b330:	6818      	ldr	r0, [r3, #0]
 800b332:	f000 b87f 	b.w	800b434 <_malloc_r>
 800b336:	bf00      	nop
 800b338:	20000010 	.word	0x20000010

0800b33c <free>:
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <free+0xc>)
 800b33e:	4601      	mov	r1, r0
 800b340:	6818      	ldr	r0, [r3, #0]
 800b342:	f000 b80b 	b.w	800b35c <_free_r>
 800b346:	bf00      	nop
 800b348:	20000010 	.word	0x20000010

0800b34c <memset>:
 800b34c:	4402      	add	r2, r0
 800b34e:	4603      	mov	r3, r0
 800b350:	4293      	cmp	r3, r2
 800b352:	d100      	bne.n	800b356 <memset+0xa>
 800b354:	4770      	bx	lr
 800b356:	f803 1b01 	strb.w	r1, [r3], #1
 800b35a:	e7f9      	b.n	800b350 <memset+0x4>

0800b35c <_free_r>:
 800b35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b35e:	2900      	cmp	r1, #0
 800b360:	d044      	beq.n	800b3ec <_free_r+0x90>
 800b362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b366:	9001      	str	r0, [sp, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f1a1 0404 	sub.w	r4, r1, #4
 800b36e:	bfb8      	it	lt
 800b370:	18e4      	addlt	r4, r4, r3
 800b372:	f000 f903 	bl	800b57c <__malloc_lock>
 800b376:	4a1e      	ldr	r2, [pc, #120]	; (800b3f0 <_free_r+0x94>)
 800b378:	9801      	ldr	r0, [sp, #4]
 800b37a:	6813      	ldr	r3, [r2, #0]
 800b37c:	b933      	cbnz	r3, 800b38c <_free_r+0x30>
 800b37e:	6063      	str	r3, [r4, #4]
 800b380:	6014      	str	r4, [r2, #0]
 800b382:	b003      	add	sp, #12
 800b384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b388:	f000 b8fe 	b.w	800b588 <__malloc_unlock>
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	d908      	bls.n	800b3a2 <_free_r+0x46>
 800b390:	6825      	ldr	r5, [r4, #0]
 800b392:	1961      	adds	r1, r4, r5
 800b394:	428b      	cmp	r3, r1
 800b396:	bf01      	itttt	eq
 800b398:	6819      	ldreq	r1, [r3, #0]
 800b39a:	685b      	ldreq	r3, [r3, #4]
 800b39c:	1949      	addeq	r1, r1, r5
 800b39e:	6021      	streq	r1, [r4, #0]
 800b3a0:	e7ed      	b.n	800b37e <_free_r+0x22>
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	b10b      	cbz	r3, 800b3ac <_free_r+0x50>
 800b3a8:	42a3      	cmp	r3, r4
 800b3aa:	d9fa      	bls.n	800b3a2 <_free_r+0x46>
 800b3ac:	6811      	ldr	r1, [r2, #0]
 800b3ae:	1855      	adds	r5, r2, r1
 800b3b0:	42a5      	cmp	r5, r4
 800b3b2:	d10b      	bne.n	800b3cc <_free_r+0x70>
 800b3b4:	6824      	ldr	r4, [r4, #0]
 800b3b6:	4421      	add	r1, r4
 800b3b8:	1854      	adds	r4, r2, r1
 800b3ba:	42a3      	cmp	r3, r4
 800b3bc:	6011      	str	r1, [r2, #0]
 800b3be:	d1e0      	bne.n	800b382 <_free_r+0x26>
 800b3c0:	681c      	ldr	r4, [r3, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	6053      	str	r3, [r2, #4]
 800b3c6:	4421      	add	r1, r4
 800b3c8:	6011      	str	r1, [r2, #0]
 800b3ca:	e7da      	b.n	800b382 <_free_r+0x26>
 800b3cc:	d902      	bls.n	800b3d4 <_free_r+0x78>
 800b3ce:	230c      	movs	r3, #12
 800b3d0:	6003      	str	r3, [r0, #0]
 800b3d2:	e7d6      	b.n	800b382 <_free_r+0x26>
 800b3d4:	6825      	ldr	r5, [r4, #0]
 800b3d6:	1961      	adds	r1, r4, r5
 800b3d8:	428b      	cmp	r3, r1
 800b3da:	bf04      	itt	eq
 800b3dc:	6819      	ldreq	r1, [r3, #0]
 800b3de:	685b      	ldreq	r3, [r3, #4]
 800b3e0:	6063      	str	r3, [r4, #4]
 800b3e2:	bf04      	itt	eq
 800b3e4:	1949      	addeq	r1, r1, r5
 800b3e6:	6021      	streq	r1, [r4, #0]
 800b3e8:	6054      	str	r4, [r2, #4]
 800b3ea:	e7ca      	b.n	800b382 <_free_r+0x26>
 800b3ec:	b003      	add	sp, #12
 800b3ee:	bd30      	pop	{r4, r5, pc}
 800b3f0:	20000dbc 	.word	0x20000dbc

0800b3f4 <sbrk_aligned>:
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	4e0e      	ldr	r6, [pc, #56]	; (800b430 <sbrk_aligned+0x3c>)
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	6831      	ldr	r1, [r6, #0]
 800b3fc:	4605      	mov	r5, r0
 800b3fe:	b911      	cbnz	r1, 800b406 <sbrk_aligned+0x12>
 800b400:	f000 f88c 	bl	800b51c <_sbrk_r>
 800b404:	6030      	str	r0, [r6, #0]
 800b406:	4621      	mov	r1, r4
 800b408:	4628      	mov	r0, r5
 800b40a:	f000 f887 	bl	800b51c <_sbrk_r>
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	d00a      	beq.n	800b428 <sbrk_aligned+0x34>
 800b412:	1cc4      	adds	r4, r0, #3
 800b414:	f024 0403 	bic.w	r4, r4, #3
 800b418:	42a0      	cmp	r0, r4
 800b41a:	d007      	beq.n	800b42c <sbrk_aligned+0x38>
 800b41c:	1a21      	subs	r1, r4, r0
 800b41e:	4628      	mov	r0, r5
 800b420:	f000 f87c 	bl	800b51c <_sbrk_r>
 800b424:	3001      	adds	r0, #1
 800b426:	d101      	bne.n	800b42c <sbrk_aligned+0x38>
 800b428:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b42c:	4620      	mov	r0, r4
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
 800b430:	20000dc0 	.word	0x20000dc0

0800b434 <_malloc_r>:
 800b434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b438:	1ccd      	adds	r5, r1, #3
 800b43a:	f025 0503 	bic.w	r5, r5, #3
 800b43e:	3508      	adds	r5, #8
 800b440:	2d0c      	cmp	r5, #12
 800b442:	bf38      	it	cc
 800b444:	250c      	movcc	r5, #12
 800b446:	2d00      	cmp	r5, #0
 800b448:	4607      	mov	r7, r0
 800b44a:	db01      	blt.n	800b450 <_malloc_r+0x1c>
 800b44c:	42a9      	cmp	r1, r5
 800b44e:	d905      	bls.n	800b45c <_malloc_r+0x28>
 800b450:	230c      	movs	r3, #12
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	2600      	movs	r6, #0
 800b456:	4630      	mov	r0, r6
 800b458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b45c:	4e2e      	ldr	r6, [pc, #184]	; (800b518 <_malloc_r+0xe4>)
 800b45e:	f000 f88d 	bl	800b57c <__malloc_lock>
 800b462:	6833      	ldr	r3, [r6, #0]
 800b464:	461c      	mov	r4, r3
 800b466:	bb34      	cbnz	r4, 800b4b6 <_malloc_r+0x82>
 800b468:	4629      	mov	r1, r5
 800b46a:	4638      	mov	r0, r7
 800b46c:	f7ff ffc2 	bl	800b3f4 <sbrk_aligned>
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	4604      	mov	r4, r0
 800b474:	d14d      	bne.n	800b512 <_malloc_r+0xde>
 800b476:	6834      	ldr	r4, [r6, #0]
 800b478:	4626      	mov	r6, r4
 800b47a:	2e00      	cmp	r6, #0
 800b47c:	d140      	bne.n	800b500 <_malloc_r+0xcc>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	4631      	mov	r1, r6
 800b482:	4638      	mov	r0, r7
 800b484:	eb04 0803 	add.w	r8, r4, r3
 800b488:	f000 f848 	bl	800b51c <_sbrk_r>
 800b48c:	4580      	cmp	r8, r0
 800b48e:	d13a      	bne.n	800b506 <_malloc_r+0xd2>
 800b490:	6821      	ldr	r1, [r4, #0]
 800b492:	3503      	adds	r5, #3
 800b494:	1a6d      	subs	r5, r5, r1
 800b496:	f025 0503 	bic.w	r5, r5, #3
 800b49a:	3508      	adds	r5, #8
 800b49c:	2d0c      	cmp	r5, #12
 800b49e:	bf38      	it	cc
 800b4a0:	250c      	movcc	r5, #12
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	f7ff ffa5 	bl	800b3f4 <sbrk_aligned>
 800b4aa:	3001      	adds	r0, #1
 800b4ac:	d02b      	beq.n	800b506 <_malloc_r+0xd2>
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	442b      	add	r3, r5
 800b4b2:	6023      	str	r3, [r4, #0]
 800b4b4:	e00e      	b.n	800b4d4 <_malloc_r+0xa0>
 800b4b6:	6822      	ldr	r2, [r4, #0]
 800b4b8:	1b52      	subs	r2, r2, r5
 800b4ba:	d41e      	bmi.n	800b4fa <_malloc_r+0xc6>
 800b4bc:	2a0b      	cmp	r2, #11
 800b4be:	d916      	bls.n	800b4ee <_malloc_r+0xba>
 800b4c0:	1961      	adds	r1, r4, r5
 800b4c2:	42a3      	cmp	r3, r4
 800b4c4:	6025      	str	r5, [r4, #0]
 800b4c6:	bf18      	it	ne
 800b4c8:	6059      	strne	r1, [r3, #4]
 800b4ca:	6863      	ldr	r3, [r4, #4]
 800b4cc:	bf08      	it	eq
 800b4ce:	6031      	streq	r1, [r6, #0]
 800b4d0:	5162      	str	r2, [r4, r5]
 800b4d2:	604b      	str	r3, [r1, #4]
 800b4d4:	4638      	mov	r0, r7
 800b4d6:	f104 060b 	add.w	r6, r4, #11
 800b4da:	f000 f855 	bl	800b588 <__malloc_unlock>
 800b4de:	f026 0607 	bic.w	r6, r6, #7
 800b4e2:	1d23      	adds	r3, r4, #4
 800b4e4:	1af2      	subs	r2, r6, r3
 800b4e6:	d0b6      	beq.n	800b456 <_malloc_r+0x22>
 800b4e8:	1b9b      	subs	r3, r3, r6
 800b4ea:	50a3      	str	r3, [r4, r2]
 800b4ec:	e7b3      	b.n	800b456 <_malloc_r+0x22>
 800b4ee:	6862      	ldr	r2, [r4, #4]
 800b4f0:	42a3      	cmp	r3, r4
 800b4f2:	bf0c      	ite	eq
 800b4f4:	6032      	streq	r2, [r6, #0]
 800b4f6:	605a      	strne	r2, [r3, #4]
 800b4f8:	e7ec      	b.n	800b4d4 <_malloc_r+0xa0>
 800b4fa:	4623      	mov	r3, r4
 800b4fc:	6864      	ldr	r4, [r4, #4]
 800b4fe:	e7b2      	b.n	800b466 <_malloc_r+0x32>
 800b500:	4634      	mov	r4, r6
 800b502:	6876      	ldr	r6, [r6, #4]
 800b504:	e7b9      	b.n	800b47a <_malloc_r+0x46>
 800b506:	230c      	movs	r3, #12
 800b508:	603b      	str	r3, [r7, #0]
 800b50a:	4638      	mov	r0, r7
 800b50c:	f000 f83c 	bl	800b588 <__malloc_unlock>
 800b510:	e7a1      	b.n	800b456 <_malloc_r+0x22>
 800b512:	6025      	str	r5, [r4, #0]
 800b514:	e7de      	b.n	800b4d4 <_malloc_r+0xa0>
 800b516:	bf00      	nop
 800b518:	20000dbc 	.word	0x20000dbc

0800b51c <_sbrk_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d06      	ldr	r5, [pc, #24]	; (800b538 <_sbrk_r+0x1c>)
 800b520:	2300      	movs	r3, #0
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	602b      	str	r3, [r5, #0]
 800b528:	f7f6 f9a4 	bl	8001874 <_sbrk>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_sbrk_r+0x1a>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_sbrk_r+0x1a>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	20000dc4 	.word	0x20000dc4

0800b53c <siprintf>:
 800b53c:	b40e      	push	{r1, r2, r3}
 800b53e:	b500      	push	{lr}
 800b540:	b09c      	sub	sp, #112	; 0x70
 800b542:	ab1d      	add	r3, sp, #116	; 0x74
 800b544:	9002      	str	r0, [sp, #8]
 800b546:	9006      	str	r0, [sp, #24]
 800b548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b54c:	4809      	ldr	r0, [pc, #36]	; (800b574 <siprintf+0x38>)
 800b54e:	9107      	str	r1, [sp, #28]
 800b550:	9104      	str	r1, [sp, #16]
 800b552:	4909      	ldr	r1, [pc, #36]	; (800b578 <siprintf+0x3c>)
 800b554:	f853 2b04 	ldr.w	r2, [r3], #4
 800b558:	9105      	str	r1, [sp, #20]
 800b55a:	6800      	ldr	r0, [r0, #0]
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	a902      	add	r1, sp, #8
 800b560:	f000 f874 	bl	800b64c <_svfiprintf_r>
 800b564:	9b02      	ldr	r3, [sp, #8]
 800b566:	2200      	movs	r2, #0
 800b568:	701a      	strb	r2, [r3, #0]
 800b56a:	b01c      	add	sp, #112	; 0x70
 800b56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b570:	b003      	add	sp, #12
 800b572:	4770      	bx	lr
 800b574:	20000010 	.word	0x20000010
 800b578:	ffff0208 	.word	0xffff0208

0800b57c <__malloc_lock>:
 800b57c:	4801      	ldr	r0, [pc, #4]	; (800b584 <__malloc_lock+0x8>)
 800b57e:	f000 baf9 	b.w	800bb74 <__retarget_lock_acquire_recursive>
 800b582:	bf00      	nop
 800b584:	20000dc8 	.word	0x20000dc8

0800b588 <__malloc_unlock>:
 800b588:	4801      	ldr	r0, [pc, #4]	; (800b590 <__malloc_unlock+0x8>)
 800b58a:	f000 baf4 	b.w	800bb76 <__retarget_lock_release_recursive>
 800b58e:	bf00      	nop
 800b590:	20000dc8 	.word	0x20000dc8

0800b594 <__ssputs_r>:
 800b594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b598:	688e      	ldr	r6, [r1, #8]
 800b59a:	429e      	cmp	r6, r3
 800b59c:	4682      	mov	sl, r0
 800b59e:	460c      	mov	r4, r1
 800b5a0:	4690      	mov	r8, r2
 800b5a2:	461f      	mov	r7, r3
 800b5a4:	d838      	bhi.n	800b618 <__ssputs_r+0x84>
 800b5a6:	898a      	ldrh	r2, [r1, #12]
 800b5a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5ac:	d032      	beq.n	800b614 <__ssputs_r+0x80>
 800b5ae:	6825      	ldr	r5, [r4, #0]
 800b5b0:	6909      	ldr	r1, [r1, #16]
 800b5b2:	eba5 0901 	sub.w	r9, r5, r1
 800b5b6:	6965      	ldr	r5, [r4, #20]
 800b5b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	444b      	add	r3, r9
 800b5c4:	106d      	asrs	r5, r5, #1
 800b5c6:	429d      	cmp	r5, r3
 800b5c8:	bf38      	it	cc
 800b5ca:	461d      	movcc	r5, r3
 800b5cc:	0553      	lsls	r3, r2, #21
 800b5ce:	d531      	bpl.n	800b634 <__ssputs_r+0xa0>
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f7ff ff2f 	bl	800b434 <_malloc_r>
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	b950      	cbnz	r0, 800b5f0 <__ssputs_r+0x5c>
 800b5da:	230c      	movs	r3, #12
 800b5dc:	f8ca 3000 	str.w	r3, [sl]
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f0:	6921      	ldr	r1, [r4, #16]
 800b5f2:	464a      	mov	r2, r9
 800b5f4:	f000 fac0 	bl	800bb78 <memcpy>
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	6126      	str	r6, [r4, #16]
 800b606:	6165      	str	r5, [r4, #20]
 800b608:	444e      	add	r6, r9
 800b60a:	eba5 0509 	sub.w	r5, r5, r9
 800b60e:	6026      	str	r6, [r4, #0]
 800b610:	60a5      	str	r5, [r4, #8]
 800b612:	463e      	mov	r6, r7
 800b614:	42be      	cmp	r6, r7
 800b616:	d900      	bls.n	800b61a <__ssputs_r+0x86>
 800b618:	463e      	mov	r6, r7
 800b61a:	6820      	ldr	r0, [r4, #0]
 800b61c:	4632      	mov	r2, r6
 800b61e:	4641      	mov	r1, r8
 800b620:	f000 fab8 	bl	800bb94 <memmove>
 800b624:	68a3      	ldr	r3, [r4, #8]
 800b626:	1b9b      	subs	r3, r3, r6
 800b628:	60a3      	str	r3, [r4, #8]
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	4433      	add	r3, r6
 800b62e:	6023      	str	r3, [r4, #0]
 800b630:	2000      	movs	r0, #0
 800b632:	e7db      	b.n	800b5ec <__ssputs_r+0x58>
 800b634:	462a      	mov	r2, r5
 800b636:	f000 fac7 	bl	800bbc8 <_realloc_r>
 800b63a:	4606      	mov	r6, r0
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d1e1      	bne.n	800b604 <__ssputs_r+0x70>
 800b640:	6921      	ldr	r1, [r4, #16]
 800b642:	4650      	mov	r0, sl
 800b644:	f7ff fe8a 	bl	800b35c <_free_r>
 800b648:	e7c7      	b.n	800b5da <__ssputs_r+0x46>
	...

0800b64c <_svfiprintf_r>:
 800b64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b650:	4698      	mov	r8, r3
 800b652:	898b      	ldrh	r3, [r1, #12]
 800b654:	061b      	lsls	r3, r3, #24
 800b656:	b09d      	sub	sp, #116	; 0x74
 800b658:	4607      	mov	r7, r0
 800b65a:	460d      	mov	r5, r1
 800b65c:	4614      	mov	r4, r2
 800b65e:	d50e      	bpl.n	800b67e <_svfiprintf_r+0x32>
 800b660:	690b      	ldr	r3, [r1, #16]
 800b662:	b963      	cbnz	r3, 800b67e <_svfiprintf_r+0x32>
 800b664:	2140      	movs	r1, #64	; 0x40
 800b666:	f7ff fee5 	bl	800b434 <_malloc_r>
 800b66a:	6028      	str	r0, [r5, #0]
 800b66c:	6128      	str	r0, [r5, #16]
 800b66e:	b920      	cbnz	r0, 800b67a <_svfiprintf_r+0x2e>
 800b670:	230c      	movs	r3, #12
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b678:	e0d1      	b.n	800b81e <_svfiprintf_r+0x1d2>
 800b67a:	2340      	movs	r3, #64	; 0x40
 800b67c:	616b      	str	r3, [r5, #20]
 800b67e:	2300      	movs	r3, #0
 800b680:	9309      	str	r3, [sp, #36]	; 0x24
 800b682:	2320      	movs	r3, #32
 800b684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b688:	f8cd 800c 	str.w	r8, [sp, #12]
 800b68c:	2330      	movs	r3, #48	; 0x30
 800b68e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b838 <_svfiprintf_r+0x1ec>
 800b692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b696:	f04f 0901 	mov.w	r9, #1
 800b69a:	4623      	mov	r3, r4
 800b69c:	469a      	mov	sl, r3
 800b69e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6a2:	b10a      	cbz	r2, 800b6a8 <_svfiprintf_r+0x5c>
 800b6a4:	2a25      	cmp	r2, #37	; 0x25
 800b6a6:	d1f9      	bne.n	800b69c <_svfiprintf_r+0x50>
 800b6a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b6ac:	d00b      	beq.n	800b6c6 <_svfiprintf_r+0x7a>
 800b6ae:	465b      	mov	r3, fp
 800b6b0:	4622      	mov	r2, r4
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	4638      	mov	r0, r7
 800b6b6:	f7ff ff6d 	bl	800b594 <__ssputs_r>
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	f000 80aa 	beq.w	800b814 <_svfiprintf_r+0x1c8>
 800b6c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c2:	445a      	add	r2, fp
 800b6c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b6c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f000 80a2 	beq.w	800b814 <_svfiprintf_r+0x1c8>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6da:	f10a 0a01 	add.w	sl, sl, #1
 800b6de:	9304      	str	r3, [sp, #16]
 800b6e0:	9307      	str	r3, [sp, #28]
 800b6e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6e6:	931a      	str	r3, [sp, #104]	; 0x68
 800b6e8:	4654      	mov	r4, sl
 800b6ea:	2205      	movs	r2, #5
 800b6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f0:	4851      	ldr	r0, [pc, #324]	; (800b838 <_svfiprintf_r+0x1ec>)
 800b6f2:	f7f4 fd9d 	bl	8000230 <memchr>
 800b6f6:	9a04      	ldr	r2, [sp, #16]
 800b6f8:	b9d8      	cbnz	r0, 800b732 <_svfiprintf_r+0xe6>
 800b6fa:	06d0      	lsls	r0, r2, #27
 800b6fc:	bf44      	itt	mi
 800b6fe:	2320      	movmi	r3, #32
 800b700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b704:	0711      	lsls	r1, r2, #28
 800b706:	bf44      	itt	mi
 800b708:	232b      	movmi	r3, #43	; 0x2b
 800b70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b70e:	f89a 3000 	ldrb.w	r3, [sl]
 800b712:	2b2a      	cmp	r3, #42	; 0x2a
 800b714:	d015      	beq.n	800b742 <_svfiprintf_r+0xf6>
 800b716:	9a07      	ldr	r2, [sp, #28]
 800b718:	4654      	mov	r4, sl
 800b71a:	2000      	movs	r0, #0
 800b71c:	f04f 0c0a 	mov.w	ip, #10
 800b720:	4621      	mov	r1, r4
 800b722:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b726:	3b30      	subs	r3, #48	; 0x30
 800b728:	2b09      	cmp	r3, #9
 800b72a:	d94e      	bls.n	800b7ca <_svfiprintf_r+0x17e>
 800b72c:	b1b0      	cbz	r0, 800b75c <_svfiprintf_r+0x110>
 800b72e:	9207      	str	r2, [sp, #28]
 800b730:	e014      	b.n	800b75c <_svfiprintf_r+0x110>
 800b732:	eba0 0308 	sub.w	r3, r0, r8
 800b736:	fa09 f303 	lsl.w	r3, r9, r3
 800b73a:	4313      	orrs	r3, r2
 800b73c:	9304      	str	r3, [sp, #16]
 800b73e:	46a2      	mov	sl, r4
 800b740:	e7d2      	b.n	800b6e8 <_svfiprintf_r+0x9c>
 800b742:	9b03      	ldr	r3, [sp, #12]
 800b744:	1d19      	adds	r1, r3, #4
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	9103      	str	r1, [sp, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	bfbb      	ittet	lt
 800b74e:	425b      	neglt	r3, r3
 800b750:	f042 0202 	orrlt.w	r2, r2, #2
 800b754:	9307      	strge	r3, [sp, #28]
 800b756:	9307      	strlt	r3, [sp, #28]
 800b758:	bfb8      	it	lt
 800b75a:	9204      	strlt	r2, [sp, #16]
 800b75c:	7823      	ldrb	r3, [r4, #0]
 800b75e:	2b2e      	cmp	r3, #46	; 0x2e
 800b760:	d10c      	bne.n	800b77c <_svfiprintf_r+0x130>
 800b762:	7863      	ldrb	r3, [r4, #1]
 800b764:	2b2a      	cmp	r3, #42	; 0x2a
 800b766:	d135      	bne.n	800b7d4 <_svfiprintf_r+0x188>
 800b768:	9b03      	ldr	r3, [sp, #12]
 800b76a:	1d1a      	adds	r2, r3, #4
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	9203      	str	r2, [sp, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	bfb8      	it	lt
 800b774:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b778:	3402      	adds	r4, #2
 800b77a:	9305      	str	r3, [sp, #20]
 800b77c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b848 <_svfiprintf_r+0x1fc>
 800b780:	7821      	ldrb	r1, [r4, #0]
 800b782:	2203      	movs	r2, #3
 800b784:	4650      	mov	r0, sl
 800b786:	f7f4 fd53 	bl	8000230 <memchr>
 800b78a:	b140      	cbz	r0, 800b79e <_svfiprintf_r+0x152>
 800b78c:	2340      	movs	r3, #64	; 0x40
 800b78e:	eba0 000a 	sub.w	r0, r0, sl
 800b792:	fa03 f000 	lsl.w	r0, r3, r0
 800b796:	9b04      	ldr	r3, [sp, #16]
 800b798:	4303      	orrs	r3, r0
 800b79a:	3401      	adds	r4, #1
 800b79c:	9304      	str	r3, [sp, #16]
 800b79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a2:	4826      	ldr	r0, [pc, #152]	; (800b83c <_svfiprintf_r+0x1f0>)
 800b7a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7a8:	2206      	movs	r2, #6
 800b7aa:	f7f4 fd41 	bl	8000230 <memchr>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d038      	beq.n	800b824 <_svfiprintf_r+0x1d8>
 800b7b2:	4b23      	ldr	r3, [pc, #140]	; (800b840 <_svfiprintf_r+0x1f4>)
 800b7b4:	bb1b      	cbnz	r3, 800b7fe <_svfiprintf_r+0x1b2>
 800b7b6:	9b03      	ldr	r3, [sp, #12]
 800b7b8:	3307      	adds	r3, #7
 800b7ba:	f023 0307 	bic.w	r3, r3, #7
 800b7be:	3308      	adds	r3, #8
 800b7c0:	9303      	str	r3, [sp, #12]
 800b7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c4:	4433      	add	r3, r6
 800b7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c8:	e767      	b.n	800b69a <_svfiprintf_r+0x4e>
 800b7ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	e7a5      	b.n	800b720 <_svfiprintf_r+0xd4>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	3401      	adds	r4, #1
 800b7d8:	9305      	str	r3, [sp, #20]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	f04f 0c0a 	mov.w	ip, #10
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7e6:	3a30      	subs	r2, #48	; 0x30
 800b7e8:	2a09      	cmp	r2, #9
 800b7ea:	d903      	bls.n	800b7f4 <_svfiprintf_r+0x1a8>
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d0c5      	beq.n	800b77c <_svfiprintf_r+0x130>
 800b7f0:	9105      	str	r1, [sp, #20]
 800b7f2:	e7c3      	b.n	800b77c <_svfiprintf_r+0x130>
 800b7f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e7f0      	b.n	800b7e0 <_svfiprintf_r+0x194>
 800b7fe:	ab03      	add	r3, sp, #12
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	462a      	mov	r2, r5
 800b804:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <_svfiprintf_r+0x1f8>)
 800b806:	a904      	add	r1, sp, #16
 800b808:	4638      	mov	r0, r7
 800b80a:	f3af 8000 	nop.w
 800b80e:	1c42      	adds	r2, r0, #1
 800b810:	4606      	mov	r6, r0
 800b812:	d1d6      	bne.n	800b7c2 <_svfiprintf_r+0x176>
 800b814:	89ab      	ldrh	r3, [r5, #12]
 800b816:	065b      	lsls	r3, r3, #25
 800b818:	f53f af2c 	bmi.w	800b674 <_svfiprintf_r+0x28>
 800b81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b81e:	b01d      	add	sp, #116	; 0x74
 800b820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b824:	ab03      	add	r3, sp, #12
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	462a      	mov	r2, r5
 800b82a:	4b06      	ldr	r3, [pc, #24]	; (800b844 <_svfiprintf_r+0x1f8>)
 800b82c:	a904      	add	r1, sp, #16
 800b82e:	4638      	mov	r0, r7
 800b830:	f000 f87a 	bl	800b928 <_printf_i>
 800b834:	e7eb      	b.n	800b80e <_svfiprintf_r+0x1c2>
 800b836:	bf00      	nop
 800b838:	0800bd70 	.word	0x0800bd70
 800b83c:	0800bd7a 	.word	0x0800bd7a
 800b840:	00000000 	.word	0x00000000
 800b844:	0800b595 	.word	0x0800b595
 800b848:	0800bd76 	.word	0x0800bd76

0800b84c <_printf_common>:
 800b84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b850:	4616      	mov	r6, r2
 800b852:	4699      	mov	r9, r3
 800b854:	688a      	ldr	r2, [r1, #8]
 800b856:	690b      	ldr	r3, [r1, #16]
 800b858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b85c:	4293      	cmp	r3, r2
 800b85e:	bfb8      	it	lt
 800b860:	4613      	movlt	r3, r2
 800b862:	6033      	str	r3, [r6, #0]
 800b864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b868:	4607      	mov	r7, r0
 800b86a:	460c      	mov	r4, r1
 800b86c:	b10a      	cbz	r2, 800b872 <_printf_common+0x26>
 800b86e:	3301      	adds	r3, #1
 800b870:	6033      	str	r3, [r6, #0]
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	0699      	lsls	r1, r3, #26
 800b876:	bf42      	ittt	mi
 800b878:	6833      	ldrmi	r3, [r6, #0]
 800b87a:	3302      	addmi	r3, #2
 800b87c:	6033      	strmi	r3, [r6, #0]
 800b87e:	6825      	ldr	r5, [r4, #0]
 800b880:	f015 0506 	ands.w	r5, r5, #6
 800b884:	d106      	bne.n	800b894 <_printf_common+0x48>
 800b886:	f104 0a19 	add.w	sl, r4, #25
 800b88a:	68e3      	ldr	r3, [r4, #12]
 800b88c:	6832      	ldr	r2, [r6, #0]
 800b88e:	1a9b      	subs	r3, r3, r2
 800b890:	42ab      	cmp	r3, r5
 800b892:	dc26      	bgt.n	800b8e2 <_printf_common+0x96>
 800b894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b898:	1e13      	subs	r3, r2, #0
 800b89a:	6822      	ldr	r2, [r4, #0]
 800b89c:	bf18      	it	ne
 800b89e:	2301      	movne	r3, #1
 800b8a0:	0692      	lsls	r2, r2, #26
 800b8a2:	d42b      	bmi.n	800b8fc <_printf_common+0xb0>
 800b8a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	47c0      	blx	r8
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	d01e      	beq.n	800b8f0 <_printf_common+0xa4>
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	68e5      	ldr	r5, [r4, #12]
 800b8b6:	6832      	ldr	r2, [r6, #0]
 800b8b8:	f003 0306 	and.w	r3, r3, #6
 800b8bc:	2b04      	cmp	r3, #4
 800b8be:	bf08      	it	eq
 800b8c0:	1aad      	subeq	r5, r5, r2
 800b8c2:	68a3      	ldr	r3, [r4, #8]
 800b8c4:	6922      	ldr	r2, [r4, #16]
 800b8c6:	bf0c      	ite	eq
 800b8c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8cc:	2500      	movne	r5, #0
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	bfc4      	itt	gt
 800b8d2:	1a9b      	subgt	r3, r3, r2
 800b8d4:	18ed      	addgt	r5, r5, r3
 800b8d6:	2600      	movs	r6, #0
 800b8d8:	341a      	adds	r4, #26
 800b8da:	42b5      	cmp	r5, r6
 800b8dc:	d11a      	bne.n	800b914 <_printf_common+0xc8>
 800b8de:	2000      	movs	r0, #0
 800b8e0:	e008      	b.n	800b8f4 <_printf_common+0xa8>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4652      	mov	r2, sl
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	47c0      	blx	r8
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	d103      	bne.n	800b8f8 <_printf_common+0xac>
 800b8f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f8:	3501      	adds	r5, #1
 800b8fa:	e7c6      	b.n	800b88a <_printf_common+0x3e>
 800b8fc:	18e1      	adds	r1, r4, r3
 800b8fe:	1c5a      	adds	r2, r3, #1
 800b900:	2030      	movs	r0, #48	; 0x30
 800b902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b906:	4422      	add	r2, r4
 800b908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b90c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b910:	3302      	adds	r3, #2
 800b912:	e7c7      	b.n	800b8a4 <_printf_common+0x58>
 800b914:	2301      	movs	r3, #1
 800b916:	4622      	mov	r2, r4
 800b918:	4649      	mov	r1, r9
 800b91a:	4638      	mov	r0, r7
 800b91c:	47c0      	blx	r8
 800b91e:	3001      	adds	r0, #1
 800b920:	d0e6      	beq.n	800b8f0 <_printf_common+0xa4>
 800b922:	3601      	adds	r6, #1
 800b924:	e7d9      	b.n	800b8da <_printf_common+0x8e>
	...

0800b928 <_printf_i>:
 800b928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b92c:	7e0f      	ldrb	r7, [r1, #24]
 800b92e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b930:	2f78      	cmp	r7, #120	; 0x78
 800b932:	4691      	mov	r9, r2
 800b934:	4680      	mov	r8, r0
 800b936:	460c      	mov	r4, r1
 800b938:	469a      	mov	sl, r3
 800b93a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b93e:	d807      	bhi.n	800b950 <_printf_i+0x28>
 800b940:	2f62      	cmp	r7, #98	; 0x62
 800b942:	d80a      	bhi.n	800b95a <_printf_i+0x32>
 800b944:	2f00      	cmp	r7, #0
 800b946:	f000 80d8 	beq.w	800bafa <_printf_i+0x1d2>
 800b94a:	2f58      	cmp	r7, #88	; 0x58
 800b94c:	f000 80a3 	beq.w	800ba96 <_printf_i+0x16e>
 800b950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b958:	e03a      	b.n	800b9d0 <_printf_i+0xa8>
 800b95a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b95e:	2b15      	cmp	r3, #21
 800b960:	d8f6      	bhi.n	800b950 <_printf_i+0x28>
 800b962:	a101      	add	r1, pc, #4	; (adr r1, 800b968 <_printf_i+0x40>)
 800b964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b968:	0800b9c1 	.word	0x0800b9c1
 800b96c:	0800b9d5 	.word	0x0800b9d5
 800b970:	0800b951 	.word	0x0800b951
 800b974:	0800b951 	.word	0x0800b951
 800b978:	0800b951 	.word	0x0800b951
 800b97c:	0800b951 	.word	0x0800b951
 800b980:	0800b9d5 	.word	0x0800b9d5
 800b984:	0800b951 	.word	0x0800b951
 800b988:	0800b951 	.word	0x0800b951
 800b98c:	0800b951 	.word	0x0800b951
 800b990:	0800b951 	.word	0x0800b951
 800b994:	0800bae1 	.word	0x0800bae1
 800b998:	0800ba05 	.word	0x0800ba05
 800b99c:	0800bac3 	.word	0x0800bac3
 800b9a0:	0800b951 	.word	0x0800b951
 800b9a4:	0800b951 	.word	0x0800b951
 800b9a8:	0800bb03 	.word	0x0800bb03
 800b9ac:	0800b951 	.word	0x0800b951
 800b9b0:	0800ba05 	.word	0x0800ba05
 800b9b4:	0800b951 	.word	0x0800b951
 800b9b8:	0800b951 	.word	0x0800b951
 800b9bc:	0800bacb 	.word	0x0800bacb
 800b9c0:	682b      	ldr	r3, [r5, #0]
 800b9c2:	1d1a      	adds	r2, r3, #4
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	602a      	str	r2, [r5, #0]
 800b9c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e0a3      	b.n	800bb1c <_printf_i+0x1f4>
 800b9d4:	6820      	ldr	r0, [r4, #0]
 800b9d6:	6829      	ldr	r1, [r5, #0]
 800b9d8:	0606      	lsls	r6, r0, #24
 800b9da:	f101 0304 	add.w	r3, r1, #4
 800b9de:	d50a      	bpl.n	800b9f6 <_printf_i+0xce>
 800b9e0:	680e      	ldr	r6, [r1, #0]
 800b9e2:	602b      	str	r3, [r5, #0]
 800b9e4:	2e00      	cmp	r6, #0
 800b9e6:	da03      	bge.n	800b9f0 <_printf_i+0xc8>
 800b9e8:	232d      	movs	r3, #45	; 0x2d
 800b9ea:	4276      	negs	r6, r6
 800b9ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9f0:	485e      	ldr	r0, [pc, #376]	; (800bb6c <_printf_i+0x244>)
 800b9f2:	230a      	movs	r3, #10
 800b9f4:	e019      	b.n	800ba2a <_printf_i+0x102>
 800b9f6:	680e      	ldr	r6, [r1, #0]
 800b9f8:	602b      	str	r3, [r5, #0]
 800b9fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9fe:	bf18      	it	ne
 800ba00:	b236      	sxthne	r6, r6
 800ba02:	e7ef      	b.n	800b9e4 <_printf_i+0xbc>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	6820      	ldr	r0, [r4, #0]
 800ba08:	1d19      	adds	r1, r3, #4
 800ba0a:	6029      	str	r1, [r5, #0]
 800ba0c:	0601      	lsls	r1, r0, #24
 800ba0e:	d501      	bpl.n	800ba14 <_printf_i+0xec>
 800ba10:	681e      	ldr	r6, [r3, #0]
 800ba12:	e002      	b.n	800ba1a <_printf_i+0xf2>
 800ba14:	0646      	lsls	r6, r0, #25
 800ba16:	d5fb      	bpl.n	800ba10 <_printf_i+0xe8>
 800ba18:	881e      	ldrh	r6, [r3, #0]
 800ba1a:	4854      	ldr	r0, [pc, #336]	; (800bb6c <_printf_i+0x244>)
 800ba1c:	2f6f      	cmp	r7, #111	; 0x6f
 800ba1e:	bf0c      	ite	eq
 800ba20:	2308      	moveq	r3, #8
 800ba22:	230a      	movne	r3, #10
 800ba24:	2100      	movs	r1, #0
 800ba26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba2a:	6865      	ldr	r5, [r4, #4]
 800ba2c:	60a5      	str	r5, [r4, #8]
 800ba2e:	2d00      	cmp	r5, #0
 800ba30:	bfa2      	ittt	ge
 800ba32:	6821      	ldrge	r1, [r4, #0]
 800ba34:	f021 0104 	bicge.w	r1, r1, #4
 800ba38:	6021      	strge	r1, [r4, #0]
 800ba3a:	b90e      	cbnz	r6, 800ba40 <_printf_i+0x118>
 800ba3c:	2d00      	cmp	r5, #0
 800ba3e:	d04d      	beq.n	800badc <_printf_i+0x1b4>
 800ba40:	4615      	mov	r5, r2
 800ba42:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba46:	fb03 6711 	mls	r7, r3, r1, r6
 800ba4a:	5dc7      	ldrb	r7, [r0, r7]
 800ba4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba50:	4637      	mov	r7, r6
 800ba52:	42bb      	cmp	r3, r7
 800ba54:	460e      	mov	r6, r1
 800ba56:	d9f4      	bls.n	800ba42 <_printf_i+0x11a>
 800ba58:	2b08      	cmp	r3, #8
 800ba5a:	d10b      	bne.n	800ba74 <_printf_i+0x14c>
 800ba5c:	6823      	ldr	r3, [r4, #0]
 800ba5e:	07de      	lsls	r6, r3, #31
 800ba60:	d508      	bpl.n	800ba74 <_printf_i+0x14c>
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	6861      	ldr	r1, [r4, #4]
 800ba66:	4299      	cmp	r1, r3
 800ba68:	bfde      	ittt	le
 800ba6a:	2330      	movle	r3, #48	; 0x30
 800ba6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ba74:	1b52      	subs	r2, r2, r5
 800ba76:	6122      	str	r2, [r4, #16]
 800ba78:	f8cd a000 	str.w	sl, [sp]
 800ba7c:	464b      	mov	r3, r9
 800ba7e:	aa03      	add	r2, sp, #12
 800ba80:	4621      	mov	r1, r4
 800ba82:	4640      	mov	r0, r8
 800ba84:	f7ff fee2 	bl	800b84c <_printf_common>
 800ba88:	3001      	adds	r0, #1
 800ba8a:	d14c      	bne.n	800bb26 <_printf_i+0x1fe>
 800ba8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba90:	b004      	add	sp, #16
 800ba92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba96:	4835      	ldr	r0, [pc, #212]	; (800bb6c <_printf_i+0x244>)
 800ba98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba9c:	6829      	ldr	r1, [r5, #0]
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	f851 6b04 	ldr.w	r6, [r1], #4
 800baa4:	6029      	str	r1, [r5, #0]
 800baa6:	061d      	lsls	r5, r3, #24
 800baa8:	d514      	bpl.n	800bad4 <_printf_i+0x1ac>
 800baaa:	07df      	lsls	r7, r3, #31
 800baac:	bf44      	itt	mi
 800baae:	f043 0320 	orrmi.w	r3, r3, #32
 800bab2:	6023      	strmi	r3, [r4, #0]
 800bab4:	b91e      	cbnz	r6, 800babe <_printf_i+0x196>
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	f023 0320 	bic.w	r3, r3, #32
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	2310      	movs	r3, #16
 800bac0:	e7b0      	b.n	800ba24 <_printf_i+0xfc>
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	f043 0320 	orr.w	r3, r3, #32
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	2378      	movs	r3, #120	; 0x78
 800bacc:	4828      	ldr	r0, [pc, #160]	; (800bb70 <_printf_i+0x248>)
 800bace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bad2:	e7e3      	b.n	800ba9c <_printf_i+0x174>
 800bad4:	0659      	lsls	r1, r3, #25
 800bad6:	bf48      	it	mi
 800bad8:	b2b6      	uxthmi	r6, r6
 800bada:	e7e6      	b.n	800baaa <_printf_i+0x182>
 800badc:	4615      	mov	r5, r2
 800bade:	e7bb      	b.n	800ba58 <_printf_i+0x130>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	6826      	ldr	r6, [r4, #0]
 800bae4:	6961      	ldr	r1, [r4, #20]
 800bae6:	1d18      	adds	r0, r3, #4
 800bae8:	6028      	str	r0, [r5, #0]
 800baea:	0635      	lsls	r5, r6, #24
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	d501      	bpl.n	800baf4 <_printf_i+0x1cc>
 800baf0:	6019      	str	r1, [r3, #0]
 800baf2:	e002      	b.n	800bafa <_printf_i+0x1d2>
 800baf4:	0670      	lsls	r0, r6, #25
 800baf6:	d5fb      	bpl.n	800baf0 <_printf_i+0x1c8>
 800baf8:	8019      	strh	r1, [r3, #0]
 800bafa:	2300      	movs	r3, #0
 800bafc:	6123      	str	r3, [r4, #16]
 800bafe:	4615      	mov	r5, r2
 800bb00:	e7ba      	b.n	800ba78 <_printf_i+0x150>
 800bb02:	682b      	ldr	r3, [r5, #0]
 800bb04:	1d1a      	adds	r2, r3, #4
 800bb06:	602a      	str	r2, [r5, #0]
 800bb08:	681d      	ldr	r5, [r3, #0]
 800bb0a:	6862      	ldr	r2, [r4, #4]
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f7f4 fb8e 	bl	8000230 <memchr>
 800bb14:	b108      	cbz	r0, 800bb1a <_printf_i+0x1f2>
 800bb16:	1b40      	subs	r0, r0, r5
 800bb18:	6060      	str	r0, [r4, #4]
 800bb1a:	6863      	ldr	r3, [r4, #4]
 800bb1c:	6123      	str	r3, [r4, #16]
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb24:	e7a8      	b.n	800ba78 <_printf_i+0x150>
 800bb26:	6923      	ldr	r3, [r4, #16]
 800bb28:	462a      	mov	r2, r5
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	47d0      	blx	sl
 800bb30:	3001      	adds	r0, #1
 800bb32:	d0ab      	beq.n	800ba8c <_printf_i+0x164>
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	079b      	lsls	r3, r3, #30
 800bb38:	d413      	bmi.n	800bb62 <_printf_i+0x23a>
 800bb3a:	68e0      	ldr	r0, [r4, #12]
 800bb3c:	9b03      	ldr	r3, [sp, #12]
 800bb3e:	4298      	cmp	r0, r3
 800bb40:	bfb8      	it	lt
 800bb42:	4618      	movlt	r0, r3
 800bb44:	e7a4      	b.n	800ba90 <_printf_i+0x168>
 800bb46:	2301      	movs	r3, #1
 800bb48:	4632      	mov	r2, r6
 800bb4a:	4649      	mov	r1, r9
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	47d0      	blx	sl
 800bb50:	3001      	adds	r0, #1
 800bb52:	d09b      	beq.n	800ba8c <_printf_i+0x164>
 800bb54:	3501      	adds	r5, #1
 800bb56:	68e3      	ldr	r3, [r4, #12]
 800bb58:	9903      	ldr	r1, [sp, #12]
 800bb5a:	1a5b      	subs	r3, r3, r1
 800bb5c:	42ab      	cmp	r3, r5
 800bb5e:	dcf2      	bgt.n	800bb46 <_printf_i+0x21e>
 800bb60:	e7eb      	b.n	800bb3a <_printf_i+0x212>
 800bb62:	2500      	movs	r5, #0
 800bb64:	f104 0619 	add.w	r6, r4, #25
 800bb68:	e7f5      	b.n	800bb56 <_printf_i+0x22e>
 800bb6a:	bf00      	nop
 800bb6c:	0800bd81 	.word	0x0800bd81
 800bb70:	0800bd92 	.word	0x0800bd92

0800bb74 <__retarget_lock_acquire_recursive>:
 800bb74:	4770      	bx	lr

0800bb76 <__retarget_lock_release_recursive>:
 800bb76:	4770      	bx	lr

0800bb78 <memcpy>:
 800bb78:	440a      	add	r2, r1
 800bb7a:	4291      	cmp	r1, r2
 800bb7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bb80:	d100      	bne.n	800bb84 <memcpy+0xc>
 800bb82:	4770      	bx	lr
 800bb84:	b510      	push	{r4, lr}
 800bb86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb8e:	4291      	cmp	r1, r2
 800bb90:	d1f9      	bne.n	800bb86 <memcpy+0xe>
 800bb92:	bd10      	pop	{r4, pc}

0800bb94 <memmove>:
 800bb94:	4288      	cmp	r0, r1
 800bb96:	b510      	push	{r4, lr}
 800bb98:	eb01 0402 	add.w	r4, r1, r2
 800bb9c:	d902      	bls.n	800bba4 <memmove+0x10>
 800bb9e:	4284      	cmp	r4, r0
 800bba0:	4623      	mov	r3, r4
 800bba2:	d807      	bhi.n	800bbb4 <memmove+0x20>
 800bba4:	1e43      	subs	r3, r0, #1
 800bba6:	42a1      	cmp	r1, r4
 800bba8:	d008      	beq.n	800bbbc <memmove+0x28>
 800bbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbb2:	e7f8      	b.n	800bba6 <memmove+0x12>
 800bbb4:	4402      	add	r2, r0
 800bbb6:	4601      	mov	r1, r0
 800bbb8:	428a      	cmp	r2, r1
 800bbba:	d100      	bne.n	800bbbe <memmove+0x2a>
 800bbbc:	bd10      	pop	{r4, pc}
 800bbbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbc6:	e7f7      	b.n	800bbb8 <memmove+0x24>

0800bbc8 <_realloc_r>:
 800bbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbcc:	4680      	mov	r8, r0
 800bbce:	4614      	mov	r4, r2
 800bbd0:	460e      	mov	r6, r1
 800bbd2:	b921      	cbnz	r1, 800bbde <_realloc_r+0x16>
 800bbd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd8:	4611      	mov	r1, r2
 800bbda:	f7ff bc2b 	b.w	800b434 <_malloc_r>
 800bbde:	b92a      	cbnz	r2, 800bbec <_realloc_r+0x24>
 800bbe0:	f7ff fbbc 	bl	800b35c <_free_r>
 800bbe4:	4625      	mov	r5, r4
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbec:	f000 f81b 	bl	800bc26 <_malloc_usable_size_r>
 800bbf0:	4284      	cmp	r4, r0
 800bbf2:	4607      	mov	r7, r0
 800bbf4:	d802      	bhi.n	800bbfc <_realloc_r+0x34>
 800bbf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbfa:	d812      	bhi.n	800bc22 <_realloc_r+0x5a>
 800bbfc:	4621      	mov	r1, r4
 800bbfe:	4640      	mov	r0, r8
 800bc00:	f7ff fc18 	bl	800b434 <_malloc_r>
 800bc04:	4605      	mov	r5, r0
 800bc06:	2800      	cmp	r0, #0
 800bc08:	d0ed      	beq.n	800bbe6 <_realloc_r+0x1e>
 800bc0a:	42bc      	cmp	r4, r7
 800bc0c:	4622      	mov	r2, r4
 800bc0e:	4631      	mov	r1, r6
 800bc10:	bf28      	it	cs
 800bc12:	463a      	movcs	r2, r7
 800bc14:	f7ff ffb0 	bl	800bb78 <memcpy>
 800bc18:	4631      	mov	r1, r6
 800bc1a:	4640      	mov	r0, r8
 800bc1c:	f7ff fb9e 	bl	800b35c <_free_r>
 800bc20:	e7e1      	b.n	800bbe6 <_realloc_r+0x1e>
 800bc22:	4635      	mov	r5, r6
 800bc24:	e7df      	b.n	800bbe6 <_realloc_r+0x1e>

0800bc26 <_malloc_usable_size_r>:
 800bc26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc2a:	1f18      	subs	r0, r3, #4
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	bfbc      	itt	lt
 800bc30:	580b      	ldrlt	r3, [r1, r0]
 800bc32:	18c0      	addlt	r0, r0, r3
 800bc34:	4770      	bx	lr
	...

0800bc38 <_init>:
 800bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3a:	bf00      	nop
 800bc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc3e:	bc08      	pop	{r3}
 800bc40:	469e      	mov	lr, r3
 800bc42:	4770      	bx	lr

0800bc44 <_fini>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	bf00      	nop
 800bc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4a:	bc08      	pop	{r3}
 800bc4c:	469e      	mov	lr, r3
 800bc4e:	4770      	bx	lr
