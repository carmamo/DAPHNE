
F446RE_BLINK_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000343c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003618  08003618  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003620  08003620  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003624  08003624  00013624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003634  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003634  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca5f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b32  00000000  00000000  0002ca9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002f090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e86  00000000  00000000  0002fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df49  00000000  00000000  00050946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c82b4  00000000  00000000  0005e88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126b43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc0  00000000  00000000  00126b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080035e8 	.word	0x080035e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080035e8 	.word	0x080035e8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb8a 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f820 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f926 	bl	8000764 <MX_GPIO_Init>
  MX_CRC_Init();
 8000518:	f000 f88a 	bl	8000630 <MX_CRC_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f8f8 	bl	8000710 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000520:	f000 f89a 	bl	8000658 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000524:	f000 f8c6 	bl	80006b4 <MX_I2S2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <main+0x48>)
 800052e:	f000 febe 	bl	80012ae <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000536:	f000 fbe7 	bl	8000d08 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800053a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <main+0x48>)
 8000540:	f000 feb5 	bl	80012ae <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000548:	f000 fbde 	bl	8000d08 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800054c:	e7ec      	b.n	8000528 <main+0x20>
 800054e:	bf00      	nop
 8000550:	40020000 	.word	0x40020000

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 f838 	bl	80035d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <SystemClock_Config+0xd4>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a29      	ldr	r2, [pc, #164]	; (8000628 <SystemClock_Config+0xd4>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <SystemClock_Config+0xd4>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000594:	2300      	movs	r3, #0
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <SystemClock_Config+0xd8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a22      	ldr	r2, [pc, #136]	; (800062c <SystemClock_Config+0xd8>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <SystemClock_Config+0xd8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005cc:	2332      	movs	r3, #50	; 0x32
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fa75 	bl	8002ad0 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005ec:	f000 f932 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2101      	movs	r1, #1
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f9aa 	bl	8001968 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800061a:	f000 f91b 	bl	8000854 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_CRC_Init+0x20>)
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <MX_CRC_Init+0x24>)
 8000638:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_CRC_Init+0x20>)
 800063c:	f000 fc6d 	bl	8000f1a <HAL_CRC_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000646:	f000 f905 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000028 	.word	0x20000028
 8000654:	40023000 	.word	0x40023000

08000658 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_I2C1_Init+0x50>)
 800065e:	4a13      	ldr	r2, [pc, #76]	; (80006ac <MX_I2C1_Init+0x54>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000664:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_I2C1_Init+0x58>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800067a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000696:	f000 fe25 	bl	80012e4 <HAL_I2C_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a0:	f000 f8d8 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000030 	.word	0x20000030
 80006ac:	40005400 	.word	0x40005400
 80006b0:	000186a0 	.word	0x000186a0

080006b4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_I2S2_Init+0x54>)
 80006ba:	4a14      	ldr	r2, [pc, #80]	; (800070c <MX_I2S2_Init+0x58>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2S2_Init+0x54>)
 80006c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_I2S2_Init+0x54>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_I2S2_Init+0x54>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_I2S2_Init+0x54>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_I2S2_Init+0x54>)
 80006dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006e0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_I2S2_Init+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_I2S2_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_I2S2_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_I2S2_Init+0x54>)
 80006f6:	f000 ff39 	bl	800156c <HAL_I2S_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000700:	f000 f8a8 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000084 	.word	0x20000084
 800070c:	40003800 	.word	0x40003800

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f002 fc60 	bl	800300c <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f87f 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000cc 	.word	0x200000cc
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <MX_GPIO_Init+0xe4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a31      	ldr	r2, [pc, #196]	; (8000848 <MX_GPIO_Init+0xe4>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <MX_GPIO_Init+0xe4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_GPIO_Init+0xe4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a2a      	ldr	r2, [pc, #168]	; (8000848 <MX_GPIO_Init+0xe4>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_GPIO_Init+0xe4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_GPIO_Init+0xe4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <MX_GPIO_Init+0xe4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_GPIO_Init+0xe4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_GPIO_Init+0xe4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a1c      	ldr	r2, [pc, #112]	; (8000848 <MX_GPIO_Init+0xe4>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_GPIO_Init+0xe4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80007f0:	4816      	ldr	r0, [pc, #88]	; (800084c <MX_GPIO_Init+0xe8>)
 80007f2:	f000 fd43 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fc:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_GPIO_Init+0xec>)
 80007fe:	f000 fd3d 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10;
 8000802:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0xe8>)
 800081c:	f000 fb9a 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_GPIO_Init+0xec>)
 800083a:	f000 fb8b 	bl	8000f54 <HAL_GPIO_Init>

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000
 8000850:	40020400 	.word	0x40020400

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800085c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000860:	4808      	ldr	r0, [pc, #32]	; (8000884 <Error_Handler+0x30>)
 8000862:	f000 fd24 	bl	80012ae <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800086a:	f000 fa4d 	bl	8000d08 <HAL_Delay>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800086e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <Error_Handler+0x30>)
 8000874:	f000 fd1b 	bl	80012ae <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800087c:	f000 fa44 	bl	8000d08 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000880:	e7ec      	b.n	800085c <Error_Handler+0x8>
 8000882:	bf00      	nop
 8000884:	40020000 	.word	0x40020000

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008c6:	2007      	movs	r0, #7
 80008c8:	f000 faf4 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <HAL_CRC_MspInit+0x3c>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d10d      	bne.n	8000906 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_CRC_MspInit+0x40>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a09      	ldr	r2, [pc, #36]	; (8000918 <HAL_CRC_MspInit+0x40>)
 80008f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <HAL_CRC_MspInit+0x40>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023000 	.word	0x40023000
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_I2C_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12b      	bne.n	8000996 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800095a:	23c0      	movs	r3, #192	; 0xc0
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095e:	2312      	movs	r3, #18
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096a:	2304      	movs	r3, #4
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <HAL_I2C_MspInit+0x8c>)
 8000976:	f000 faed 	bl	8000f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40005400 	.word	0x40005400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400

080009ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0a2      	sub	sp, #136	; 0x88
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	225c      	movs	r2, #92	; 0x5c
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fe03 	bl	80035d8 <memset>
  if(hi2s->Instance==SPI2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a38      	ldr	r2, [pc, #224]	; (8000ab8 <HAL_I2S_MspInit+0x10c>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d168      	bne.n	8000aae <HAL_I2S_MspInit+0x102>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 80009dc:	2301      	movs	r3, #1
 80009de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80009e0:	2332      	movs	r3, #50	; 0x32
 80009e2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80009e8:	2308      	movs	r3, #8
 80009ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80009f8:	2300      	movs	r3, #0
 80009fa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 f8cb 	bl	8001b9c <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8000a0c:	f7ff ff22 	bl	8000854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	4b29      	ldr	r3, [pc, #164]	; (8000abc <HAL_I2S_MspInit+0x110>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	4a28      	ldr	r2, [pc, #160]	; (8000abc <HAL_I2S_MspInit+0x110>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <HAL_I2S_MspInit+0x110>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <HAL_I2S_MspInit+0x110>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <HAL_I2S_MspInit+0x110>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <HAL_I2S_MspInit+0x110>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_I2S_MspInit+0x110>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <HAL_I2S_MspInit+0x110>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6313      	str	r3, [r2, #48]	; 0x30
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_I2S_MspInit+0x110>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a64:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a68:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a78:	2305      	movs	r3, #5
 8000a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a82:	4619      	mov	r1, r3
 8000a84:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <HAL_I2S_MspInit+0x114>)
 8000a86:	f000 fa65 	bl	8000f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a8a:	2340      	movs	r3, #64	; 0x40
 8000a8c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <HAL_I2S_MspInit+0x118>)
 8000aaa:	f000 fa53 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3788      	adds	r7, #136	; 0x88
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40003800 	.word	0x40003800
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40020800 	.word	0x40020800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12b      	bne.n	8000b42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b22:	230c      	movs	r3, #12
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b32:	2307      	movs	r3, #7
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_UART_MspInit+0x8c>)
 8000b3e:	f000 fa09 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f890 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bfa:	f7ff ffd7 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f002 fcc7 	bl	8003590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fc81 	bl	8000508 <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c14:	08003628 	.word	0x08003628
  ldr r2, =_sbss
 8000c18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c1c:	20000114 	.word	0x20000114

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f931 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe16 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f93b 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f000 f911 	bl	8000eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000110 	.word	0x20000110

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000110 	.word	0x20000110

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff ffee 	bl	8000cf0 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffde 	bl	8000cf0 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff47 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff5c 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffb0 	bl	8000e70 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e00e      	b.n	8000f4a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	795b      	ldrb	r3, [r3, #5]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d105      	bne.n	8000f42 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff fccb 	bl	80008d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e165      	b.n	800123c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8154 	bne.w	8001236 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80ae 	beq.w	8001236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <HAL_GPIO_Init+0x300>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a5c      	ldr	r2, [pc, #368]	; (8001254 <HAL_GPIO_Init+0x300>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <HAL_GPIO_Init+0x300>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a58      	ldr	r2, [pc, #352]	; (8001258 <HAL_GPIO_Init+0x304>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4f      	ldr	r2, [pc, #316]	; (800125c <HAL_GPIO_Init+0x308>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d025      	beq.n	800116e <HAL_GPIO_Init+0x21a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4e      	ldr	r2, [pc, #312]	; (8001260 <HAL_GPIO_Init+0x30c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d01f      	beq.n	800116a <HAL_GPIO_Init+0x216>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4d      	ldr	r2, [pc, #308]	; (8001264 <HAL_GPIO_Init+0x310>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x212>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4c      	ldr	r2, [pc, #304]	; (8001268 <HAL_GPIO_Init+0x314>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x20e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4b      	ldr	r2, [pc, #300]	; (800126c <HAL_GPIO_Init+0x318>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x20a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4a      	ldr	r2, [pc, #296]	; (8001270 <HAL_GPIO_Init+0x31c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x206>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a49      	ldr	r2, [pc, #292]	; (8001274 <HAL_GPIO_Init+0x320>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x202>
 8001152:	2306      	movs	r3, #6
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_Init+0x21c>
 8001156:	2307      	movs	r3, #7
 8001158:	e00a      	b.n	8001170 <HAL_GPIO_Init+0x21c>
 800115a:	2305      	movs	r3, #5
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x21c>
 800115e:	2304      	movs	r3, #4
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x21c>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x21c>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x21c>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x21c>
 800116e:	2300      	movs	r3, #0
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001180:	4935      	ldr	r1, [pc, #212]	; (8001258 <HAL_GPIO_Init+0x304>)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118e:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <HAL_GPIO_Init+0x324>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b2:	4a31      	ldr	r2, [pc, #196]	; (8001278 <HAL_GPIO_Init+0x324>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b8:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <HAL_GPIO_Init+0x324>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011dc:	4a26      	ldr	r2, [pc, #152]	; (8001278 <HAL_GPIO_Init+0x324>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <HAL_GPIO_Init+0x324>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <HAL_GPIO_Init+0x324>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <HAL_GPIO_Init+0x324>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <HAL_GPIO_Init+0x324>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	f67f ae96 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021000 	.word	0x40021000
 8001270:	40021400 	.word	0x40021400
 8001274:	40021800 	.word	0x40021800
 8001278:	40013c00 	.word	0x40013c00

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001298:	e003      	b.n	80012a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	041a      	lsls	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c0:	887a      	ldrh	r2, [r7, #2]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4013      	ands	r3, r2
 80012c6:	041a      	lsls	r2, r3, #16
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	400b      	ands	r3, r1
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e12b      	b.n	800154e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d106      	bne.n	8001310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fb06 	bl	800091c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2224      	movs	r2, #36	; 0x24
 8001314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001336:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001346:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001348:	f000 fc00 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 800134c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a81      	ldr	r2, [pc, #516]	; (8001558 <HAL_I2C_Init+0x274>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d807      	bhi.n	8001368 <HAL_I2C_Init+0x84>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4a80      	ldr	r2, [pc, #512]	; (800155c <HAL_I2C_Init+0x278>)
 800135c:	4293      	cmp	r3, r2
 800135e:	bf94      	ite	ls
 8001360:	2301      	movls	r3, #1
 8001362:	2300      	movhi	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	e006      	b.n	8001376 <HAL_I2C_Init+0x92>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4a7d      	ldr	r2, [pc, #500]	; (8001560 <HAL_I2C_Init+0x27c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	bf94      	ite	ls
 8001370:	2301      	movls	r3, #1
 8001372:	2300      	movhi	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e0e7      	b.n	800154e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4a78      	ldr	r2, [pc, #480]	; (8001564 <HAL_I2C_Init+0x280>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	0c9b      	lsrs	r3, r3, #18
 8001388:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	430a      	orrs	r2, r1
 800139c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a6a      	ldr	r2, [pc, #424]	; (8001558 <HAL_I2C_Init+0x274>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d802      	bhi.n	80013b8 <HAL_I2C_Init+0xd4>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3301      	adds	r3, #1
 80013b6:	e009      	b.n	80013cc <HAL_I2C_Init+0xe8>
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	4a69      	ldr	r2, [pc, #420]	; (8001568 <HAL_I2C_Init+0x284>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	3301      	adds	r3, #1
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	495c      	ldr	r1, [pc, #368]	; (8001558 <HAL_I2C_Init+0x274>)
 80013e8:	428b      	cmp	r3, r1
 80013ea:	d819      	bhi.n	8001420 <HAL_I2C_Init+0x13c>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1e59      	subs	r1, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80013fa:	1c59      	adds	r1, r3, #1
 80013fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001400:	400b      	ands	r3, r1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00a      	beq.n	800141c <HAL_I2C_Init+0x138>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1e59      	subs	r1, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fbb1 f3f3 	udiv	r3, r1, r3
 8001414:	3301      	adds	r3, #1
 8001416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141a:	e051      	b.n	80014c0 <HAL_I2C_Init+0x1dc>
 800141c:	2304      	movs	r3, #4
 800141e:	e04f      	b.n	80014c0 <HAL_I2C_Init+0x1dc>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d111      	bne.n	800144c <HAL_I2C_Init+0x168>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1e58      	subs	r0, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6859      	ldr	r1, [r3, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	440b      	add	r3, r1
 8001436:	fbb0 f3f3 	udiv	r3, r0, r3
 800143a:	3301      	adds	r3, #1
 800143c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf0c      	ite	eq
 8001444:	2301      	moveq	r3, #1
 8001446:	2300      	movne	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	e012      	b.n	8001472 <HAL_I2C_Init+0x18e>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	1e58      	subs	r0, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6859      	ldr	r1, [r3, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	0099      	lsls	r1, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001462:	3301      	adds	r3, #1
 8001464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001468:	2b00      	cmp	r3, #0
 800146a:	bf0c      	ite	eq
 800146c:	2301      	moveq	r3, #1
 800146e:	2300      	movne	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_I2C_Init+0x196>
 8001476:	2301      	movs	r3, #1
 8001478:	e022      	b.n	80014c0 <HAL_I2C_Init+0x1dc>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10e      	bne.n	80014a0 <HAL_I2C_Init+0x1bc>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1e58      	subs	r0, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6859      	ldr	r1, [r3, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	440b      	add	r3, r1
 8001490:	fbb0 f3f3 	udiv	r3, r0, r3
 8001494:	3301      	adds	r3, #1
 8001496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149e:	e00f      	b.n	80014c0 <HAL_I2C_Init+0x1dc>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1e58      	subs	r0, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	0099      	lsls	r1, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	6809      	ldr	r1, [r1, #0]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69da      	ldr	r2, [r3, #28]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6911      	ldr	r1, [r2, #16]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68d2      	ldr	r2, [r2, #12]
 80014fa:	4311      	orrs	r1, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	430b      	orrs	r3, r1
 8001502:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2220      	movs	r2, #32
 800153a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	000186a0 	.word	0x000186a0
 800155c:	001e847f 	.word	0x001e847f
 8001560:	003d08ff 	.word	0x003d08ff
 8001564:	431bde83 	.word	0x431bde83
 8001568:	10624dd3 	.word	0x10624dd3

0800156c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0e1      	b.n	8001742 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a6d      	ldr	r2, [pc, #436]	; (800174c <HAL_I2S_Init+0x1e0>)
 8001596:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff fa07 	bl	80009ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2202      	movs	r2, #2
 80015a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80015b4:	f023 030f 	bic.w	r3, r3, #15
 80015b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2202      	movs	r2, #2
 80015c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d06f      	beq.n	80016aa <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80015d2:	2310      	movs	r3, #16
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e001      	b.n	80015dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80015d8:	2320      	movs	r3, #32
 80015da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	d802      	bhi.n	80015ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a58      	ldr	r2, [pc, #352]	; (8001750 <HAL_I2S_Init+0x1e4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d004      	beq.n	80015fe <HAL_I2S_Init+0x92>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a56      	ldr	r2, [pc, #344]	; (8001754 <HAL_I2S_Init+0x1e8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d104      	bne.n	8001608 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fdf6 	bl	80021f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	e003      	b.n	8001610 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001608:	2002      	movs	r0, #2
 800160a:	f000 fdf1 	bl	80021f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800160e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001618:	d125      	bne.n	8001666 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d010      	beq.n	8001644 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	fbb2 f2f3 	udiv	r2, r2, r3
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	461a      	mov	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	3305      	adds	r3, #5
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	e01f      	b.n	8001684 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	fbb2 f2f3 	udiv	r2, r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001660:	3305      	adds	r3, #5
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	e00e      	b.n	8001684 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fbb2 f2f3 	udiv	r2, r2, r3
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	3305      	adds	r3, #5
 8001682:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4a34      	ldr	r2, [pc, #208]	; (8001758 <HAL_I2S_Init+0x1ec>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	e003      	b.n	80016b2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d902      	bls.n	80016be <HAL_I2S_Init+0x152>
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	2bff      	cmp	r3, #255	; 0xff
 80016bc:	d907      	bls.n	80016ce <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f043 0210 	orr.w	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e039      	b.n	8001742 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	ea42 0103 	orr.w	r1, r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	430a      	orrs	r2, r1
 80016e0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80016ec:	f023 030f 	bic.w	r3, r3, #15
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6851      	ldr	r1, [r2, #4]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6892      	ldr	r2, [r2, #8]
 80016f8:	4311      	orrs	r1, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68d2      	ldr	r2, [r2, #12]
 80016fe:	4311      	orrs	r1, r2
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6992      	ldr	r2, [r2, #24]
 8001704:	430a      	orrs	r2, r1
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001710:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b30      	cmp	r3, #48	; 0x30
 8001718:	d003      	beq.n	8001722 <HAL_I2S_Init+0x1b6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2bb0      	cmp	r3, #176	; 0xb0
 8001720:	d107      	bne.n	8001732 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001730:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	08001853 	.word	0x08001853
 8001750:	40003800 	.word	0x40003800
 8001754:	40003c00 	.word	0x40003c00
 8001758:	cccccccd 	.word	0xcccccccd

0800175c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	881a      	ldrh	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	1c9a      	adds	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10e      	bne.n	80017ec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80017dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffb8 	bl	800175c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	b292      	uxth	r2, r2
 8001808:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	1c9a      	adds	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001818:	b29b      	uxth	r3, r3
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001826:	b29b      	uxth	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10e      	bne.n	800184a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800183a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff93 	bl	8001770 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b04      	cmp	r3, #4
 800186c:	d13a      	bne.n	80018e4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d109      	bne.n	800188c <I2S_IRQHandler+0x3a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001882:	2b40      	cmp	r3, #64	; 0x40
 8001884:	d102      	bne.n	800188c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffb4 	bl	80017f4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001892:	2b40      	cmp	r3, #64	; 0x40
 8001894:	d126      	bne.n	80018e4 <I2S_IRQHandler+0x92>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	d11f      	bne.n	80018e4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f043 0202 	orr.w	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ff50 	bl	8001784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d136      	bne.n	800195e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d109      	bne.n	800190e <I2S_IRQHandler+0xbc>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001904:	2b80      	cmp	r3, #128	; 0x80
 8001906:	d102      	bne.n	800190e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff45 	bl	8001798 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b08      	cmp	r3, #8
 8001916:	d122      	bne.n	800195e <I2S_IRQHandler+0x10c>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	2b20      	cmp	r3, #32
 8001924:	d11b      	bne.n	800195e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001934:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f043 0204 	orr.w	r2, r3, #4
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff13 	bl	8001784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0cc      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d90c      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0b8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019bc:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	494d      	ldr	r1, [pc, #308]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d044      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d119      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d003      	beq.n	8001a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a26:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e06f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e067      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 0203 	bic.w	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4934      	ldr	r1, [pc, #208]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a58:	f7ff f94a 	bl	8000cf0 <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a60:	f7ff f946 	bl	8000cf0 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e04f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 020c 	and.w	r2, r3, #12
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d1eb      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d20c      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e032      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4916      	ldr	r1, [pc, #88]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	490e      	ldr	r1, [pc, #56]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aee:	f000 fdc1 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	490a      	ldr	r1, [pc, #40]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	5ccb      	ldrb	r3, [r1, r3]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f8aa 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08003600 	.word	0x08003600
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b50:	f7ff fff0 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	0a9b      	lsrs	r3, r3, #10
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4903      	ldr	r1, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08003610 	.word	0x08003610

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b78:	f7ff ffdc 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0b5b      	lsrs	r3, r3, #13
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4903      	ldr	r1, [pc, #12]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	08003610 	.word	0x08003610

08001b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d010      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001bd4:	4b6f      	ldr	r3, [pc, #444]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bda:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	496c      	ldr	r1, [pc, #432]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d010      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001c02:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c08:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	4960      	ldr	r1, [pc, #384]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d017      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c30:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4955      	ldr	r1, [pc, #340]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001c50:	2301      	movs	r3, #1
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d017      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c6c:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	4946      	ldr	r1, [pc, #280]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 808a 	beq.w	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a38      	ldr	r2, [pc, #224]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001cc6:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cd2:	f7ff f80d 	bl	8000cf0 <HAL_GetTick>
 8001cd6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	f7ff f809 	bl	8000cf0 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e278      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d00:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d02f      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d10:	6a3a      	ldr	r2, [r7, #32]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d028      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d1e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d114      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7fe ffd7 	bl	8000cf0 <HAL_GetTick>
 8001d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7fe ffd3 	bl	8000cf0 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e240      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ee      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d74:	d114      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8a:	4902      	ldr	r1, [pc, #8]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]
 8001d90:	e00c      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	42470e40 	.word	0x42470e40
 8001da0:	4b4a      	ldr	r3, [pc, #296]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a49      	ldr	r2, [pc, #292]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001da6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001daa:	6093      	str	r3, [r2, #8]
 8001dac:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db8:	4944      	ldr	r1, [pc, #272]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d004      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001dd0:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001dd2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001de0:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	4937      	ldr	r1, [pc, #220]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e08:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e10:	492e      	ldr	r1, [pc, #184]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d011      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	4926      	ldr	r1, [pc, #152]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e42:	d101      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001e44:	2301      	movs	r3, #1
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	491a      	ldr	r1, [pc, #104]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d011      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e84:	4911      	ldr	r1, [pc, #68]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e94:	d101      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001e96:	2301      	movs	r3, #1
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d005      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ea8:	f040 80ff 	bne.w	80020aa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eb2:	f7fe ff1d 	bl	8000cf0 <HAL_GetTick>
 8001eb6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001eb8:	e00e      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001eba:	f7fe ff19 	bl	8000cf0 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d907      	bls.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e188      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	424711e0 	.word	0x424711e0
 8001ed4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ed8:	4b7e      	ldr	r3, [pc, #504]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ea      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d028      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d124      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f0c:	4b71      	ldr	r3, [pc, #452]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f1e:	4b6d      	ldr	r3, [pc, #436]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f24:	0e1b      	lsrs	r3, r3, #24
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	431a      	orrs	r2, r3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	085b      	lsrs	r3, r3, #1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	041b      	lsls	r3, r3, #16
 8001f40:	431a      	orrs	r2, r3
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	071b      	lsls	r3, r3, #28
 8001f4e:	4961      	ldr	r1, [pc, #388]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d004      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d035      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f80:	d130      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f82:	4b54      	ldr	r3, [pc, #336]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f88:	0c1b      	lsrs	r3, r3, #16
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f9a:	0f1b      	lsrs	r3, r3, #28
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	019b      	lsls	r3, r3, #6
 8001fac:	431a      	orrs	r2, r3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	085b      	lsrs	r3, r3, #1
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	041b      	lsls	r3, r3, #16
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	071b      	lsls	r3, r3, #28
 8001fc4:	4943      	ldr	r1, [pc, #268]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001fcc:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd2:	f023 021f 	bic.w	r2, r3, #31
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	493d      	ldr	r1, [pc, #244]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d029      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff8:	d124      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ffa:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002000:	0c1b      	lsrs	r3, r3, #16
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	3301      	adds	r3, #1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800200e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002012:	0f1b      	lsrs	r3, r3, #28
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	019b      	lsls	r3, r3, #6
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	431a      	orrs	r2, r3
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	431a      	orrs	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	071b      	lsls	r3, r3, #28
 800203c:	4925      	ldr	r1, [pc, #148]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204c:	2b00      	cmp	r3, #0
 800204e:	d016      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	019b      	lsls	r3, r3, #6
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	3b01      	subs	r3, #1
 8002064:	041b      	lsls	r3, r3, #16
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	071b      	lsls	r3, r3, #28
 8002076:	4917      	ldr	r1, [pc, #92]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002084:	f7fe fe34 	bl	8000cf0 <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800208c:	f7fe fe30 	bl	8000cf0 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e09f      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	f040 8095 	bne.w	80021dc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fe1a 	bl	8000cf0 <HAL_GetTick>
 80020bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020be:	e00f      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80020c0:	f7fe fe16 	bl	8000cf0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d908      	bls.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e085      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	42470068 	.word	0x42470068
 80020dc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ec:	d0e8      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800210a:	2b00      	cmp	r3, #0
 800210c:	d02b      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	2b00      	cmp	r3, #0
 8002114:	d127      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002116:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211c:	0c1b      	lsrs	r3, r3, #16
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	3301      	adds	r3, #1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699a      	ldr	r2, [r3, #24]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	019b      	lsls	r3, r3, #6
 8002132:	431a      	orrs	r2, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	3b01      	subs	r3, #1
 800213a:	041b      	lsls	r3, r3, #16
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	061b      	lsls	r3, r3, #24
 8002144:	4928      	ldr	r1, [pc, #160]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800214e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002152:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	3b01      	subs	r3, #1
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	4922      	ldr	r1, [pc, #136]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01d      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800217a:	d118      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	0e1b      	lsrs	r3, r3, #24
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	019b      	lsls	r3, r3, #6
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	3b01      	subs	r3, #1
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	061b      	lsls	r3, r3, #24
 80021a6:	4910      	ldr	r1, [pc, #64]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fd9c 	bl	8000cf0 <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80021bc:	f7fe fd98 	bl	8000cf0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e007      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021da:	d1ef      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3730      	adds	r7, #48	; 0x30
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	42470070 	.word	0x42470070

080021f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	2b07      	cmp	r3, #7
 8002216:	f200 8220 	bhi.w	800265a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002423 	.word	0x08002423
 8002224:	08002545 	.word	0x08002545
 8002228:	0800265b 	.word	0x0800265b
 800222c:	08002241 	.word	0x08002241
 8002230:	0800265b 	.word	0x0800265b
 8002234:	0800265b 	.word	0x0800265b
 8002238:	0800265b 	.word	0x0800265b
 800223c:	08002241 	.word	0x08002241
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8002240:	4ba7      	ldr	r3, [pc, #668]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002246:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002256:	f000 80d6 	beq.w	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002260:	f200 80dd 	bhi.w	800241e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800226a:	f000 809f 	beq.w	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002274:	f200 80d3 	bhi.w	800241e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227e:	d05b      	beq.n	8002338 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002286:	f200 80ca 	bhi.w	800241e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002290:	f000 80b6 	beq.w	8002400 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800229a:	f200 80c0 	bhi.w	800241e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022a4:	f000 8082 	beq.w	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ae:	f200 80b6 	bhi.w	800241e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022be:	d03b      	beq.n	8002338 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 80022c0:	e0ad      	b.n	800241e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80022c2:	4b87      	ldr	r3, [pc, #540]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80022ce:	4b84      	ldr	r3, [pc, #528]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d8:	4a82      	ldr	r2, [pc, #520]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	e008      	b.n	80022f4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80022e2:	4b7f      	ldr	r3, [pc, #508]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ec:	4a7d      	ldr	r2, [pc, #500]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80022f4:	4b7a      	ldr	r3, [pc, #488]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	0e1b      	lsrs	r3, r3, #24
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8002302:	4b77      	ldr	r3, [pc, #476]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	fb03 f202 	mul.w	r2, r3, r2
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800231c:	4b70      	ldr	r3, [pc, #448]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800231e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	61fb      	str	r3, [r7, #28]
          break;
 8002336:	e073      	b.n	8002420 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002338:	4b69      	ldr	r3, [pc, #420]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002344:	4b66      	ldr	r3, [pc, #408]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800234a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800234e:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	e008      	b.n	800236a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800235a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002362:	4a60      	ldr	r2, [pc, #384]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800236a:	4b5d      	ldr	r3, [pc, #372]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800236c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002370:	0e1b      	lsrs	r3, r3, #24
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8002378:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800237a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	fb03 f202 	mul.w	r2, r3, r2
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8002392:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	61fb      	str	r3, [r7, #28]
          break;
 80023aa:	e039      	b.n	8002420 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80023ac:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d108      	bne.n	80023ca <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c0:	4a48      	ldr	r2, [pc, #288]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	e007      	b.n	80023da <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80023ca:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d2:	4a44      	ldr	r2, [pc, #272]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	0f1b      	lsrs	r3, r3, #28
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80023e6:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	fb03 f202 	mul.w	r2, r3, r2
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	61fb      	str	r3, [r7, #28]
          break;
 80023fe:	e00f      	b.n	8002420 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002400:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002402:	61fb      	str	r3, [r7, #28]
          break;
 8002404:	e00c      	b.n	8002420 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8002412:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002414:	61fb      	str	r3, [r7, #28]
          break;
 8002416:	e003      	b.n	8002420 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8002418:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800241a:	61fb      	str	r3, [r7, #28]
          break;
 800241c:	e000      	b.n	8002420 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800241e:	bf00      	nop
        }
      }
      break;
 8002420:	e11b      	b.n	800265a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8002422:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002428:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002434:	d075      	beq.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800243c:	d87e      	bhi.n	800253c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002444:	d03c      	beq.n	80024c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800244c:	d876      	bhi.n	800253c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800245a:	d16f      	bne.n	800253c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800245c:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800245e:	61fb      	str	r3, [r7, #28]
          break;
 8002460:	e06f      	b.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246e:	d109      	bne.n	8002484 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800247a:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800247c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	e008      	b.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800248a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249c:	099b      	lsrs	r3, r3, #6
 800249e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80024ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b0:	0f1b      	lsrs	r3, r3, #28
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	61fb      	str	r3, [r7, #28]
          break;
 80024be:	e040      	b.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024cc:	d10e      	bne.n	80024ec <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024d6:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80024d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	e00d      	b.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80024e0:	40023800 	.word	0x40023800
 80024e4:	00f42400 	.word	0x00f42400
 80024e8:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80024ec:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f4:	4a5d      	ldr	r2, [pc, #372]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80024fc:	4b5a      	ldr	r3, [pc, #360]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800250e:	4b56      	ldr	r3, [pc, #344]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	0f1b      	lsrs	r3, r3, #28
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	61fb      	str	r3, [r7, #28]
          break;
 8002520:	e00f      	b.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002522:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800252e:	d102      	bne.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          {
            frequency = HSE_VALUE;
 8002530:	4b4e      	ldr	r3, [pc, #312]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8002532:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002534:	e005      	b.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
            frequency = HSI_VALUE;
 8002536:	4b4d      	ldr	r3, [pc, #308]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8002538:	61fb      	str	r3, [r7, #28]
          break;
 800253a:	e002      	b.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
          break;
 8002540:	bf00      	nop
        }
      }
      break;
 8002542:	e08a      	b.n	800265a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8002544:	4b48      	ldr	r3, [pc, #288]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8002546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800254a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002556:	d06f      	beq.n	8002638 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800255e:	d878      	bhi.n	8002652 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002566:	d03c      	beq.n	80025e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800256e:	d870      	bhi.n	8002652 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257c:	d169      	bne.n	8002652 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800257e:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002580:	61fb      	str	r3, [r7, #28]
          break;
 8002582:	e069      	b.n	8002658 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002584:	4b38      	ldr	r3, [pc, #224]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002590:	d109      	bne.n	80025a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002592:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8002594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800259c:	4a33      	ldr	r2, [pc, #204]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	e008      	b.n	80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80025a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b0:	4a2e      	ldr	r2, [pc, #184]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80025ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80025ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d2:	0f1b      	lsrs	r3, r3, #28
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	61fb      	str	r3, [r7, #28]
          break;
 80025e0:	e03a      	b.n	8002658 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ee:	d108      	bne.n	8002602 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f8:	4a1c      	ldr	r2, [pc, #112]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80025fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	e007      	b.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800260a:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002610:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	0f1b      	lsrs	r3, r3, #28
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	61fb      	str	r3, [r7, #28]
          break;
 8002636:	e00f      	b.n	8002658 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002644:	d102      	bne.n	800264c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          {
            frequency = HSE_VALUE;
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8002648:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800264a:	e005      	b.n	8002658 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = HSI_VALUE;
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800264e:	61fb      	str	r3, [r7, #28]
          break;
 8002650:	e002      	b.n	8002658 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
          break;
 8002656:	bf00      	nop
        }
      }
      break;
 8002658:	bf00      	nop
    }
  }
  return frequency;
 800265a:	69fb      	ldr	r3, [r7, #28]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3724      	adds	r7, #36	; 0x24
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40023800 	.word	0x40023800
 800266c:	00f42400 	.word	0x00f42400
 8002670:	00bb8000 	.word	0x00bb8000

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002678:	b0ae      	sub	sp, #184	; 0xb8
 800267a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800269a:	4bcb      	ldr	r3, [pc, #812]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	f200 8204 	bhi.w	8002ab0 <HAL_RCC_GetSysClockFreq+0x43c>
 80026a8:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ae:	bf00      	nop
 80026b0:	080026e5 	.word	0x080026e5
 80026b4:	08002ab1 	.word	0x08002ab1
 80026b8:	08002ab1 	.word	0x08002ab1
 80026bc:	08002ab1 	.word	0x08002ab1
 80026c0:	080026ed 	.word	0x080026ed
 80026c4:	08002ab1 	.word	0x08002ab1
 80026c8:	08002ab1 	.word	0x08002ab1
 80026cc:	08002ab1 	.word	0x08002ab1
 80026d0:	080026f5 	.word	0x080026f5
 80026d4:	08002ab1 	.word	0x08002ab1
 80026d8:	08002ab1 	.word	0x08002ab1
 80026dc:	08002ab1 	.word	0x08002ab1
 80026e0:	080028e5 	.word	0x080028e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4bb9      	ldr	r3, [pc, #740]	; (80029cc <HAL_RCC_GetSysClockFreq+0x358>)
 80026e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80026ea:	e1e5      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ec:	4bb7      	ldr	r3, [pc, #732]	; (80029cc <HAL_RCC_GetSysClockFreq+0x358>)
 80026ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026f2:	e1e1      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f4:	4bb4      	ldr	r3, [pc, #720]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002700:	4bb1      	ldr	r3, [pc, #708]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d071      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270c:	4bae      	ldr	r3, [pc, #696]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002718:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800271c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002724:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800272e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002732:	4622      	mov	r2, r4
 8002734:	462b      	mov	r3, r5
 8002736:	f04f 0000 	mov.w	r0, #0
 800273a:	f04f 0100 	mov.w	r1, #0
 800273e:	0159      	lsls	r1, r3, #5
 8002740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002744:	0150      	lsls	r0, r2, #5
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4621      	mov	r1, r4
 800274c:	1a51      	subs	r1, r2, r1
 800274e:	6439      	str	r1, [r7, #64]	; 0x40
 8002750:	4629      	mov	r1, r5
 8002752:	eb63 0301 	sbc.w	r3, r3, r1
 8002756:	647b      	str	r3, [r7, #68]	; 0x44
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002764:	4649      	mov	r1, r9
 8002766:	018b      	lsls	r3, r1, #6
 8002768:	4641      	mov	r1, r8
 800276a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800276e:	4641      	mov	r1, r8
 8002770:	018a      	lsls	r2, r1, #6
 8002772:	4641      	mov	r1, r8
 8002774:	1a51      	subs	r1, r2, r1
 8002776:	63b9      	str	r1, [r7, #56]	; 0x38
 8002778:	4649      	mov	r1, r9
 800277a:	eb63 0301 	sbc.w	r3, r3, r1
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800278c:	4649      	mov	r1, r9
 800278e:	00cb      	lsls	r3, r1, #3
 8002790:	4641      	mov	r1, r8
 8002792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002796:	4641      	mov	r1, r8
 8002798:	00ca      	lsls	r2, r1, #3
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	4622      	mov	r2, r4
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
 80027a6:	462b      	mov	r3, r5
 80027a8:	460a      	mov	r2, r1
 80027aa:	eb42 0303 	adc.w	r3, r2, r3
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027bc:	4629      	mov	r1, r5
 80027be:	028b      	lsls	r3, r1, #10
 80027c0:	4621      	mov	r1, r4
 80027c2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027c6:	4621      	mov	r1, r4
 80027c8:	028a      	lsls	r2, r1, #10
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80027e0:	f7fd fd10 	bl	8000204 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027ee:	e067      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f0:	4b75      	ldr	r3, [pc, #468]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002808:	67bb      	str	r3, [r7, #120]	; 0x78
 800280a:	2300      	movs	r3, #0
 800280c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800280e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002812:	4622      	mov	r2, r4
 8002814:	462b      	mov	r3, r5
 8002816:	f04f 0000 	mov.w	r0, #0
 800281a:	f04f 0100 	mov.w	r1, #0
 800281e:	0159      	lsls	r1, r3, #5
 8002820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002824:	0150      	lsls	r0, r2, #5
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4621      	mov	r1, r4
 800282c:	1a51      	subs	r1, r2, r1
 800282e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002830:	4629      	mov	r1, r5
 8002832:	eb63 0301 	sbc.w	r3, r3, r1
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002844:	4649      	mov	r1, r9
 8002846:	018b      	lsls	r3, r1, #6
 8002848:	4641      	mov	r1, r8
 800284a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284e:	4641      	mov	r1, r8
 8002850:	018a      	lsls	r2, r1, #6
 8002852:	4641      	mov	r1, r8
 8002854:	ebb2 0a01 	subs.w	sl, r2, r1
 8002858:	4649      	mov	r1, r9
 800285a:	eb63 0b01 	sbc.w	fp, r3, r1
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800286a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800286e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002872:	4692      	mov	sl, r2
 8002874:	469b      	mov	fp, r3
 8002876:	4623      	mov	r3, r4
 8002878:	eb1a 0303 	adds.w	r3, sl, r3
 800287c:	623b      	str	r3, [r7, #32]
 800287e:	462b      	mov	r3, r5
 8002880:	eb4b 0303 	adc.w	r3, fp, r3
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002892:	4629      	mov	r1, r5
 8002894:	028b      	lsls	r3, r1, #10
 8002896:	4621      	mov	r1, r4
 8002898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800289c:	4621      	mov	r1, r4
 800289e:	028a      	lsls	r2, r1, #10
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028a8:	2200      	movs	r2, #0
 80028aa:	673b      	str	r3, [r7, #112]	; 0x70
 80028ac:	677a      	str	r2, [r7, #116]	; 0x74
 80028ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80028b2:	f7fd fca7 	bl	8000204 <__aeabi_uldivmod>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4613      	mov	r3, r2
 80028bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c0:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80028d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028e2:	e0e9      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e4:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d069      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fc:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	2200      	movs	r2, #0
 8002904:	66bb      	str	r3, [r7, #104]	; 0x68
 8002906:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800290a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290e:	663b      	str	r3, [r7, #96]	; 0x60
 8002910:	2300      	movs	r3, #0
 8002912:	667b      	str	r3, [r7, #100]	; 0x64
 8002914:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002918:	4622      	mov	r2, r4
 800291a:	462b      	mov	r3, r5
 800291c:	f04f 0000 	mov.w	r0, #0
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	0159      	lsls	r1, r3, #5
 8002926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292a:	0150      	lsls	r0, r2, #5
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4621      	mov	r1, r4
 8002932:	1a51      	subs	r1, r2, r1
 8002934:	61b9      	str	r1, [r7, #24]
 8002936:	4629      	mov	r1, r5
 8002938:	eb63 0301 	sbc.w	r3, r3, r1
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800294a:	4659      	mov	r1, fp
 800294c:	018b      	lsls	r3, r1, #6
 800294e:	4651      	mov	r1, sl
 8002950:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002954:	4651      	mov	r1, sl
 8002956:	018a      	lsls	r2, r1, #6
 8002958:	4651      	mov	r1, sl
 800295a:	ebb2 0801 	subs.w	r8, r2, r1
 800295e:	4659      	mov	r1, fp
 8002960:	eb63 0901 	sbc.w	r9, r3, r1
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002974:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002978:	4690      	mov	r8, r2
 800297a:	4699      	mov	r9, r3
 800297c:	4623      	mov	r3, r4
 800297e:	eb18 0303 	adds.w	r3, r8, r3
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	462b      	mov	r3, r5
 8002986:	eb49 0303 	adc.w	r3, r9, r3
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002998:	4629      	mov	r1, r5
 800299a:	028b      	lsls	r3, r1, #10
 800299c:	4621      	mov	r1, r4
 800299e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a2:	4621      	mov	r1, r4
 80029a4:	028a      	lsls	r2, r1, #10
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ae:	2200      	movs	r2, #0
 80029b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80029b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80029b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029b8:	f7fd fc24 	bl	8000204 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029c6:	e063      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x41c>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d0:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x454>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	2200      	movs	r2, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	4611      	mov	r1, r2
 80029dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029e0:	653b      	str	r3, [r7, #80]	; 0x50
 80029e2:	2300      	movs	r3, #0
 80029e4:	657b      	str	r3, [r7, #84]	; 0x54
 80029e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80029ea:	4642      	mov	r2, r8
 80029ec:	464b      	mov	r3, r9
 80029ee:	f04f 0000 	mov.w	r0, #0
 80029f2:	f04f 0100 	mov.w	r1, #0
 80029f6:	0159      	lsls	r1, r3, #5
 80029f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029fc:	0150      	lsls	r0, r2, #5
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4641      	mov	r1, r8
 8002a04:	1a51      	subs	r1, r2, r1
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	4649      	mov	r1, r9
 8002a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a1c:	4659      	mov	r1, fp
 8002a1e:	018b      	lsls	r3, r1, #6
 8002a20:	4651      	mov	r1, sl
 8002a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a26:	4651      	mov	r1, sl
 8002a28:	018a      	lsls	r2, r1, #6
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	1a54      	subs	r4, r2, r1
 8002a2e:	4659      	mov	r1, fp
 8002a30:	eb63 0501 	sbc.w	r5, r3, r1
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	00eb      	lsls	r3, r5, #3
 8002a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a42:	00e2      	lsls	r2, r4, #3
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
 8002a48:	4643      	mov	r3, r8
 8002a4a:	18e3      	adds	r3, r4, r3
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	464b      	mov	r3, r9
 8002a50:	eb45 0303 	adc.w	r3, r5, r3
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a62:	4629      	mov	r1, r5
 8002a64:	028b      	lsls	r3, r1, #10
 8002a66:	4621      	mov	r1, r4
 8002a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	028a      	lsls	r2, r1, #10
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a78:	2200      	movs	r2, #0
 8002a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a7c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a82:	f7fd fbbf 	bl	8000204 <__aeabi_uldivmod>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a90:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x454>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	0f1b      	lsrs	r3, r3, #28
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002aae:	e003      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_RCC_GetSysClockFreq+0x458>)
 8002ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ab6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	37b8      	adds	r7, #184	; 0xb8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	00f42400 	.word	0x00f42400

08002ad0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e28d      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8083 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002af0:	4b94      	ldr	r3, [pc, #592]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d019      	beq.n	8002b30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002afc:	4b91      	ldr	r3, [pc, #580]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b08:	4b8e      	ldr	r3, [pc, #568]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b14:	d00c      	beq.n	8002b30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b16:	4b8b      	ldr	r3, [pc, #556]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d112      	bne.n	8002b48 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b22:	4b88      	ldr	r3, [pc, #544]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b2e:	d10b      	bne.n	8002b48 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	4b84      	ldr	r3, [pc, #528]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d05b      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x124>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d157      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e25a      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d106      	bne.n	8002b60 <HAL_RCC_OscConfig+0x90>
 8002b52:	4b7c      	ldr	r3, [pc, #496]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a7b      	ldr	r2, [pc, #492]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e01d      	b.n	8002b9c <HAL_RCC_OscConfig+0xcc>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0xb4>
 8002b6a:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a75      	ldr	r2, [pc, #468]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b73      	ldr	r3, [pc, #460]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a72      	ldr	r2, [pc, #456]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0xcc>
 8002b84:	4b6f      	ldr	r3, [pc, #444]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a6e      	ldr	r2, [pc, #440]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b6c      	ldr	r3, [pc, #432]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a6b      	ldr	r2, [pc, #428]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe f8a4 	bl	8000cf0 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bac:	f7fe f8a0 	bl	8000cf0 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	; 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e21f      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0xdc>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe f890 	bl	8000cf0 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fe f88c 	bl	8000cf0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e20b      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	4b57      	ldr	r3, [pc, #348]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x104>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d06f      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c02:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d017      	beq.n	8002c3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c0e:	4b4d      	ldr	r3, [pc, #308]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d105      	bne.n	8002c26 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d11c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c32:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d116      	bne.n	8002c6c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x186>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d001      	beq.n	8002c56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e1d3      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4937      	ldr	r1, [pc, #220]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	e03a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d020      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c74:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <HAL_RCC_OscConfig+0x278>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe f839 	bl	8000cf0 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c82:	f7fe f835 	bl	8000cf0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e1b4      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c94:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca0:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4925      	ldr	r1, [pc, #148]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_RCC_OscConfig+0x278>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f818 	bl	8000cf0 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc4:	f7fe f814 	bl	8000cf0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e193      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d036      	beq.n	8002d5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fd fff8 	bl	8000cf0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d04:	f7fd fff4 	bl	8000cf0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e173      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x234>
 8002d22:	e01b      	b.n	8002d5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <HAL_RCC_OscConfig+0x27c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fd ffe1 	bl	8000cf0 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	e00e      	b.n	8002d50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d32:	f7fd ffdd 	bl	8000cf0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d907      	bls.n	8002d50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e15c      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
 8002d44:	40023800 	.word	0x40023800
 8002d48:	42470000 	.word	0x42470000
 8002d4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d50:	4b8a      	ldr	r3, [pc, #552]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ea      	bne.n	8002d32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8097 	beq.w	8002e98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6e:	4b83      	ldr	r3, [pc, #524]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10f      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a7e      	ldr	r2, [pc, #504]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	4b7c      	ldr	r3, [pc, #496]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d96:	2301      	movs	r3, #1
 8002d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9a:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <HAL_RCC_OscConfig+0x4b0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d118      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da6:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <HAL_RCC_OscConfig+0x4b0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a75      	ldr	r2, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x4b0>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db2:	f7fd ff9d 	bl	8000cf0 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dba:	f7fd ff99 	bl	8000cf0 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e118      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <HAL_RCC_OscConfig+0x4b0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d106      	bne.n	8002dee <HAL_RCC_OscConfig+0x31e>
 8002de0:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	4a65      	ldr	r2, [pc, #404]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	; 0x70
 8002dec:	e01c      	b.n	8002e28 <HAL_RCC_OscConfig+0x358>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x340>
 8002df6:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a60      	ldr	r2, [pc, #384]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a5d      	ldr	r2, [pc, #372]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0x358>
 8002e10:	4b5a      	ldr	r3, [pc, #360]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a59      	ldr	r2, [pc, #356]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1c:	4b57      	ldr	r3, [pc, #348]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a56      	ldr	r2, [pc, #344]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002e22:	f023 0304 	bic.w	r3, r3, #4
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d015      	beq.n	8002e5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fd ff5e 	bl	8000cf0 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fd ff5a 	bl	8000cf0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0d7      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4e:	4b4b      	ldr	r3, [pc, #300]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0ee      	beq.n	8002e38 <HAL_RCC_OscConfig+0x368>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fd ff48 	bl	8000cf0 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7fd ff44 	bl	8000cf0 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0c1      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7a:	4b40      	ldr	r3, [pc, #256]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ee      	bne.n	8002e64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	4a3a      	ldr	r2, [pc, #232]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80ad 	beq.w	8002ffc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ea2:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d060      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d145      	bne.n	8002f42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <HAL_RCC_OscConfig+0x4b4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fd ff18 	bl	8000cf0 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fd ff14 	bl	8000cf0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e093      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	3b01      	subs	r3, #1
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	071b      	lsls	r3, r3, #28
 8002f0e:	491b      	ldr	r1, [pc, #108]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCC_OscConfig+0x4b4>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fd fee9 	bl	8000cf0 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fd fee5 	bl	8000cf0 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e064      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x452>
 8002f40:	e05c      	b.n	8002ffc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <HAL_RCC_OscConfig+0x4b4>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fd fed2 	bl	8000cf0 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fd fece 	bl	8000cf0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e04d      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCC_OscConfig+0x4ac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x480>
 8002f6e:	e045      	b.n	8002ffc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e040      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_RCC_OscConfig+0x538>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d030      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d129      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d122      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d119      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800

0800300c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e03f      	b.n	800309e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fd48 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	; 0x24
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800304e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f829 	bl	80030a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ac:	b0c0      	sub	sp, #256	; 0x100
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c4:	68d9      	ldr	r1, [r3, #12]
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	ea40 0301 	orr.w	r3, r0, r1
 80030d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	431a      	orrs	r2, r3
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003100:	f021 010c 	bic.w	r1, r1, #12
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800310e:	430b      	orrs	r3, r1
 8003110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	6999      	ldr	r1, [r3, #24]
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	ea40 0301 	orr.w	r3, r0, r1
 800312e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b8f      	ldr	r3, [pc, #572]	; (8003374 <UART_SetConfig+0x2cc>)
 8003138:	429a      	cmp	r2, r3
 800313a:	d005      	beq.n	8003148 <UART_SetConfig+0xa0>
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b8d      	ldr	r3, [pc, #564]	; (8003378 <UART_SetConfig+0x2d0>)
 8003144:	429a      	cmp	r2, r3
 8003146:	d104      	bne.n	8003152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003148:	f7fe fd14 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 800314c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003150:	e003      	b.n	800315a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003152:	f7fe fcfb 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 8003156:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003164:	f040 810c 	bne.w	8003380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003172:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	1891      	adds	r1, r2, r2
 8003180:	65b9      	str	r1, [r7, #88]	; 0x58
 8003182:	415b      	adcs	r3, r3
 8003184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800318a:	4621      	mov	r1, r4
 800318c:	eb12 0801 	adds.w	r8, r2, r1
 8003190:	4629      	mov	r1, r5
 8003192:	eb43 0901 	adc.w	r9, r3, r1
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031aa:	4690      	mov	r8, r2
 80031ac:	4699      	mov	r9, r3
 80031ae:	4623      	mov	r3, r4
 80031b0:	eb18 0303 	adds.w	r3, r8, r3
 80031b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031b8:	462b      	mov	r3, r5
 80031ba:	eb49 0303 	adc.w	r3, r9, r3
 80031be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031d6:	460b      	mov	r3, r1
 80031d8:	18db      	adds	r3, r3, r3
 80031da:	653b      	str	r3, [r7, #80]	; 0x50
 80031dc:	4613      	mov	r3, r2
 80031de:	eb42 0303 	adc.w	r3, r2, r3
 80031e2:	657b      	str	r3, [r7, #84]	; 0x54
 80031e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031ec:	f7fd f80a 	bl	8000204 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4b61      	ldr	r3, [pc, #388]	; (800337c <UART_SetConfig+0x2d4>)
 80031f6:	fba3 2302 	umull	r2, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	011c      	lsls	r4, r3, #4
 80031fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003202:	2200      	movs	r2, #0
 8003204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003208:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800320c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003210:	4642      	mov	r2, r8
 8003212:	464b      	mov	r3, r9
 8003214:	1891      	adds	r1, r2, r2
 8003216:	64b9      	str	r1, [r7, #72]	; 0x48
 8003218:	415b      	adcs	r3, r3
 800321a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800321c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003220:	4641      	mov	r1, r8
 8003222:	eb12 0a01 	adds.w	sl, r2, r1
 8003226:	4649      	mov	r1, r9
 8003228:	eb43 0b01 	adc.w	fp, r3, r1
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800323c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003240:	4692      	mov	sl, r2
 8003242:	469b      	mov	fp, r3
 8003244:	4643      	mov	r3, r8
 8003246:	eb1a 0303 	adds.w	r3, sl, r3
 800324a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800324e:	464b      	mov	r3, r9
 8003250:	eb4b 0303 	adc.w	r3, fp, r3
 8003254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003264:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800326c:	460b      	mov	r3, r1
 800326e:	18db      	adds	r3, r3, r3
 8003270:	643b      	str	r3, [r7, #64]	; 0x40
 8003272:	4613      	mov	r3, r2
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	647b      	str	r3, [r7, #68]	; 0x44
 800327a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800327e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003282:	f7fc ffbf 	bl	8000204 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4611      	mov	r1, r2
 800328c:	4b3b      	ldr	r3, [pc, #236]	; (800337c <UART_SetConfig+0x2d4>)
 800328e:	fba3 2301 	umull	r2, r3, r3, r1
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2264      	movs	r2, #100	; 0x64
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	1acb      	subs	r3, r1, r3
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <UART_SetConfig+0x2d4>)
 80032a4:	fba3 2302 	umull	r2, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032b0:	441c      	add	r4, r3
 80032b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032c4:	4642      	mov	r2, r8
 80032c6:	464b      	mov	r3, r9
 80032c8:	1891      	adds	r1, r2, r2
 80032ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80032cc:	415b      	adcs	r3, r3
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032d4:	4641      	mov	r1, r8
 80032d6:	1851      	adds	r1, r2, r1
 80032d8:	6339      	str	r1, [r7, #48]	; 0x30
 80032da:	4649      	mov	r1, r9
 80032dc:	414b      	adcs	r3, r1
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032ec:	4659      	mov	r1, fp
 80032ee:	00cb      	lsls	r3, r1, #3
 80032f0:	4651      	mov	r1, sl
 80032f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032f6:	4651      	mov	r1, sl
 80032f8:	00ca      	lsls	r2, r1, #3
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	4642      	mov	r2, r8
 8003302:	189b      	adds	r3, r3, r2
 8003304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003308:	464b      	mov	r3, r9
 800330a:	460a      	mov	r2, r1
 800330c:	eb42 0303 	adc.w	r3, r2, r3
 8003310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003320:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003328:	460b      	mov	r3, r1
 800332a:	18db      	adds	r3, r3, r3
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
 800332e:	4613      	mov	r3, r2
 8003330:	eb42 0303 	adc.w	r3, r2, r3
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800333a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800333e:	f7fc ff61 	bl	8000204 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <UART_SetConfig+0x2d4>)
 8003348:	fba3 1302 	umull	r1, r3, r3, r2
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	2164      	movs	r1, #100	; 0x64
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	3332      	adds	r3, #50	; 0x32
 800335a:	4a08      	ldr	r2, [pc, #32]	; (800337c <UART_SetConfig+0x2d4>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4422      	add	r2, r4
 800336e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003370:	e105      	b.n	800357e <UART_SetConfig+0x4d6>
 8003372:	bf00      	nop
 8003374:	40011000 	.word	0x40011000
 8003378:	40011400 	.word	0x40011400
 800337c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003384:	2200      	movs	r2, #0
 8003386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800338a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800338e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003392:	4642      	mov	r2, r8
 8003394:	464b      	mov	r3, r9
 8003396:	1891      	adds	r1, r2, r2
 8003398:	6239      	str	r1, [r7, #32]
 800339a:	415b      	adcs	r3, r3
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033a2:	4641      	mov	r1, r8
 80033a4:	1854      	adds	r4, r2, r1
 80033a6:	4649      	mov	r1, r9
 80033a8:	eb43 0501 	adc.w	r5, r3, r1
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	00eb      	lsls	r3, r5, #3
 80033b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ba:	00e2      	lsls	r2, r4, #3
 80033bc:	4614      	mov	r4, r2
 80033be:	461d      	mov	r5, r3
 80033c0:	4643      	mov	r3, r8
 80033c2:	18e3      	adds	r3, r4, r3
 80033c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033c8:	464b      	mov	r3, r9
 80033ca:	eb45 0303 	adc.w	r3, r5, r3
 80033ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033ee:	4629      	mov	r1, r5
 80033f0:	008b      	lsls	r3, r1, #2
 80033f2:	4621      	mov	r1, r4
 80033f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f8:	4621      	mov	r1, r4
 80033fa:	008a      	lsls	r2, r1, #2
 80033fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003400:	f7fc ff00 	bl	8000204 <__aeabi_uldivmod>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4b60      	ldr	r3, [pc, #384]	; (800358c <UART_SetConfig+0x4e4>)
 800340a:	fba3 2302 	umull	r2, r3, r3, r2
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	011c      	lsls	r4, r3, #4
 8003412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003416:	2200      	movs	r2, #0
 8003418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800341c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003424:	4642      	mov	r2, r8
 8003426:	464b      	mov	r3, r9
 8003428:	1891      	adds	r1, r2, r2
 800342a:	61b9      	str	r1, [r7, #24]
 800342c:	415b      	adcs	r3, r3
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003434:	4641      	mov	r1, r8
 8003436:	1851      	adds	r1, r2, r1
 8003438:	6139      	str	r1, [r7, #16]
 800343a:	4649      	mov	r1, r9
 800343c:	414b      	adcs	r3, r1
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800344c:	4659      	mov	r1, fp
 800344e:	00cb      	lsls	r3, r1, #3
 8003450:	4651      	mov	r1, sl
 8003452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003456:	4651      	mov	r1, sl
 8003458:	00ca      	lsls	r2, r1, #3
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	4603      	mov	r3, r0
 8003460:	4642      	mov	r2, r8
 8003462:	189b      	adds	r3, r3, r2
 8003464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003468:	464b      	mov	r3, r9
 800346a:	460a      	mov	r2, r1
 800346c:	eb42 0303 	adc.w	r3, r2, r3
 8003470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	67bb      	str	r3, [r7, #120]	; 0x78
 800347e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800348c:	4649      	mov	r1, r9
 800348e:	008b      	lsls	r3, r1, #2
 8003490:	4641      	mov	r1, r8
 8003492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003496:	4641      	mov	r1, r8
 8003498:	008a      	lsls	r2, r1, #2
 800349a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800349e:	f7fc feb1 	bl	8000204 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4b39      	ldr	r3, [pc, #228]	; (800358c <UART_SetConfig+0x4e4>)
 80034a8:	fba3 1302 	umull	r1, r3, r3, r2
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	2164      	movs	r1, #100	; 0x64
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	3332      	adds	r3, #50	; 0x32
 80034ba:	4a34      	ldr	r2, [pc, #208]	; (800358c <UART_SetConfig+0x4e4>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c6:	441c      	add	r4, r3
 80034c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034cc:	2200      	movs	r2, #0
 80034ce:	673b      	str	r3, [r7, #112]	; 0x70
 80034d0:	677a      	str	r2, [r7, #116]	; 0x74
 80034d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034d6:	4642      	mov	r2, r8
 80034d8:	464b      	mov	r3, r9
 80034da:	1891      	adds	r1, r2, r2
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	415b      	adcs	r3, r3
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034e6:	4641      	mov	r1, r8
 80034e8:	1851      	adds	r1, r2, r1
 80034ea:	6039      	str	r1, [r7, #0]
 80034ec:	4649      	mov	r1, r9
 80034ee:	414b      	adcs	r3, r1
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034fe:	4659      	mov	r1, fp
 8003500:	00cb      	lsls	r3, r1, #3
 8003502:	4651      	mov	r1, sl
 8003504:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003508:	4651      	mov	r1, sl
 800350a:	00ca      	lsls	r2, r1, #3
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	4603      	mov	r3, r0
 8003512:	4642      	mov	r2, r8
 8003514:	189b      	adds	r3, r3, r2
 8003516:	66bb      	str	r3, [r7, #104]	; 0x68
 8003518:	464b      	mov	r3, r9
 800351a:	460a      	mov	r2, r1
 800351c:	eb42 0303 	adc.w	r3, r2, r3
 8003520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	663b      	str	r3, [r7, #96]	; 0x60
 800352c:	667a      	str	r2, [r7, #100]	; 0x64
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800353a:	4649      	mov	r1, r9
 800353c:	008b      	lsls	r3, r1, #2
 800353e:	4641      	mov	r1, r8
 8003540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003544:	4641      	mov	r1, r8
 8003546:	008a      	lsls	r2, r1, #2
 8003548:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800354c:	f7fc fe5a 	bl	8000204 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4b0d      	ldr	r3, [pc, #52]	; (800358c <UART_SetConfig+0x4e4>)
 8003556:	fba3 1302 	umull	r1, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2164      	movs	r1, #100	; 0x64
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	3332      	adds	r3, #50	; 0x32
 8003568:	4a08      	ldr	r2, [pc, #32]	; (800358c <UART_SetConfig+0x4e4>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4422      	add	r2, r4
 800357c:	609a      	str	r2, [r3, #8]
}
 800357e:	bf00      	nop
 8003580:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003584:	46bd      	mov	sp, r7
 8003586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800358a:	bf00      	nop
 800358c:	51eb851f 	.word	0x51eb851f

08003590 <__libc_init_array>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	4d0d      	ldr	r5, [pc, #52]	; (80035c8 <__libc_init_array+0x38>)
 8003594:	4c0d      	ldr	r4, [pc, #52]	; (80035cc <__libc_init_array+0x3c>)
 8003596:	1b64      	subs	r4, r4, r5
 8003598:	10a4      	asrs	r4, r4, #2
 800359a:	2600      	movs	r6, #0
 800359c:	42a6      	cmp	r6, r4
 800359e:	d109      	bne.n	80035b4 <__libc_init_array+0x24>
 80035a0:	4d0b      	ldr	r5, [pc, #44]	; (80035d0 <__libc_init_array+0x40>)
 80035a2:	4c0c      	ldr	r4, [pc, #48]	; (80035d4 <__libc_init_array+0x44>)
 80035a4:	f000 f820 	bl	80035e8 <_init>
 80035a8:	1b64      	subs	r4, r4, r5
 80035aa:	10a4      	asrs	r4, r4, #2
 80035ac:	2600      	movs	r6, #0
 80035ae:	42a6      	cmp	r6, r4
 80035b0:	d105      	bne.n	80035be <__libc_init_array+0x2e>
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
 80035b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b8:	4798      	blx	r3
 80035ba:	3601      	adds	r6, #1
 80035bc:	e7ee      	b.n	800359c <__libc_init_array+0xc>
 80035be:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c2:	4798      	blx	r3
 80035c4:	3601      	adds	r6, #1
 80035c6:	e7f2      	b.n	80035ae <__libc_init_array+0x1e>
 80035c8:	08003620 	.word	0x08003620
 80035cc:	08003620 	.word	0x08003620
 80035d0:	08003620 	.word	0x08003620
 80035d4:	08003624 	.word	0x08003624

080035d8 <memset>:
 80035d8:	4402      	add	r2, r0
 80035da:	4603      	mov	r3, r0
 80035dc:	4293      	cmp	r3, r2
 80035de:	d100      	bne.n	80035e2 <memset+0xa>
 80035e0:	4770      	bx	lr
 80035e2:	f803 1b01 	strb.w	r1, [r3], #1
 80035e6:	e7f9      	b.n	80035dc <memset+0x4>

080035e8 <_init>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	bf00      	nop
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr

080035f4 <_fini>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	bf00      	nop
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr
