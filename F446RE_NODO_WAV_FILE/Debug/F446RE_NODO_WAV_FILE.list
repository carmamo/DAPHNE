
F446RE_NODO_WAV_FILE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009048  08009048  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009048  08009048  00019048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009050  08009050  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009054  08009054  00019054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001250  20000070  080090c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012c0  080090c8  000212c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001222a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c24  00000000  00000000  000322ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00034ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00035d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f66  00000000  00000000  00036ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140d4  00000000  00000000  0005aa3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfc12  00000000  00000000  0006eb12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f18  00000000  00000000  0013e774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ee0 	.word	0x08008ee0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008ee0 	.word	0x08008ee0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	f5ad 5d89 	sub.w	sp, sp, #4384	; 0x1120
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fd17 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f881 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f973 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 f949 	bl	8000880 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80005ee:	f000 f8fb 	bl	80007e8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80005f2:	f005 f8ef 	bl	80057d4 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 f919 	bl	800082c <MX_USART2_UART_Init>
  MX_CRC_Init();
 80005fa:	f000 f8e1 	bl	80007c0 <MX_CRC_Init>
//  BYTE work[_MAX_SS];


  do
  {
	  res = f_mount(&SDFatFS, SDPath, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	4936      	ldr	r1, [pc, #216]	; (80006dc <main+0x108>)
 8000602:	4837      	ldr	r0, [pc, #220]	; (80006e0 <main+0x10c>)
 8000604:	f007 f990 	bl	8007928 <f_mount>
 8000608:	4603      	mov	r3, r0
 800060a:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800060e:	f102 0215 	add.w	r2, r2, #21
 8000612:	7013      	strb	r3, [r2, #0]
  }
  while( res != FR_OK);
 8000614:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000618:	f103 0315 	add.w	r3, r3, #21
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1ed      	bne.n	80005fe <main+0x2a>

  do
  {
	  res = Format_SD();
 8000622:	f000 fa1f 	bl	8000a64 <Format_SD>
 8000626:	4603      	mov	r3, r0
 8000628:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800062c:	f102 0215 	add.w	r2, r2, #21
 8000630:	7013      	strb	r3, [r2, #0]
  }
  while (res != FR_OK);
 8000632:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000636:	f103 0315 	add.w	r3, r3, #21
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f0      	bne.n	8000622 <main+0x4e>
  uint16_t count;


  while (1)
  {
	  HAL_Delay(1);
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fd57 	bl	80010f4 <HAL_Delay>
	  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 8000646:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800064a:	f103 0316 	add.w	r3, r3, #22
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	f507 5189 	add.w	r1, r7, #4384	; 0x1120
 8000656:	f101 0116 	add.w	r1, r1, #22
 800065a:	800a      	strh	r2, [r1, #0]
 800065c:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 8000660:	f100 0014 	add.w	r0, r0, #20
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <main+0x108>)
 8000666:	491f      	ldr	r1, [pc, #124]	; (80006e4 <main+0x110>)
 8000668:	f008 f8bc 	bl	80087e4 <siprintf>
	  do
	  {
	  res = f_open(&fil, filename, FA_CREATE_ALWAYS|FA_WRITE);
 800066c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8000670:	f101 0114 	add.w	r1, r1, #20
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	3b14      	subs	r3, #20
 800067a:	220a      	movs	r2, #10
 800067c:	4618      	mov	r0, r3
 800067e:	f007 f999 	bl	80079b4 <f_open>
 8000682:	4603      	mov	r3, r0
 8000684:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000688:	f102 0215 	add.w	r2, r2, #21
 800068c:	7013      	strb	r3, [r2, #0]
	  }
	  while(res != FR_OK);
 800068e:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000692:	f103 0315 	add.w	r3, r3, #21
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1e7      	bne.n	800066c <main+0x98>
//	  while(res != FR_EXIST) res = f_open(&fp, filename, FA_CREATE_ALWAYS|FA_WRITE);
//	  res = fwrite_wav_header(&fp, 48000, 16, 2);
//	  while(res != FR_EXIST) res = f_open(&fil, "FILE1.TXT", FA_CREATE_ALWAYS|FA_WRITE);
	  res = fwrite_wav_header(&fil, 48000, 16, 2);
 800069c:	f107 0018 	add.w	r0, r7, #24
 80006a0:	3814      	subs	r0, #20
 80006a2:	2302      	movs	r3, #2
 80006a4:	2210      	movs	r2, #16
 80006a6:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80006aa:	f000 f977 	bl	800099c <fwrite_wav_header>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80006b4:	f102 0215 	add.w	r2, r2, #21
 80006b8:	7013      	strb	r3, [r2, #0]
	  res = f_close(&fil);
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	3b14      	subs	r3, #20
 80006c0:	4618      	mov	r0, r3
 80006c2:	f007 fd55 	bl	8008170 <f_close>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80006cc:	f102 0215 	add.w	r2, r2, #21
 80006d0:	7013      	strb	r3, [r2, #0]

	  HAL_Delay(1000);
 80006d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d6:	f000 fd0d 	bl	80010f4 <HAL_Delay>
	  HAL_Delay(1);
 80006da:	e7b1      	b.n	8000640 <main+0x6c>
 80006dc:	20000244 	.word	0x20000244
 80006e0:	20000248 	.word	0x20000248
 80006e4:	08008ef8 	.word	0x08008ef8

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 ff7c 	bl	80085f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemClock_Config+0xd0>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a28      	ldr	r2, [pc, #160]	; (80007b8 <SystemClock_Config+0xd0>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <SystemClock_Config+0xd0>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemClock_Config+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemClock_Config+0xd4>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <SystemClock_Config+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000760:	2332      	movs	r3, #50	; 0x32
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000768:	2305      	movs	r3, #5
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f93b 	bl	80029f0 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000780:	f000 f9d6 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2101      	movs	r1, #1
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fab1 	bl	8001d08 <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007ac:	f000 f9c0 	bl	8000b30 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3750      	adds	r7, #80	; 0x50
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_CRC_Init+0x20>)
 80007c6:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <MX_CRC_Init+0x24>)
 80007c8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_CRC_Init+0x20>)
 80007cc:	f000 fdc7 	bl	800135e <HAL_CRC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007d6:	f000 f9ab 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	40023000 	.word	0x40023000

080007e8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_SDIO_SD_Init+0x3c>)
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <MX_SDIO_SD_Init+0x40>)
 80007f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SDIO_SD_Init+0x3c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_SDIO_SD_Init+0x3c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SDIO_SD_Init+0x3c>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_SDIO_SD_Init+0x3c>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SDIO_SD_Init+0x3c>)
 800080c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000810:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <MX_SDIO_SD_Init+0x3c>)
 8000814:	2202      	movs	r2, #2
 8000816:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000094 	.word	0x20000094
 8000828:	40012c00 	.word	0x40012c00

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f003 ff81 	bl	800476a <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f95f 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001d8 	.word	0x200001d8
 800087c:	40004400 	.word	0x40004400

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_DMA_Init+0x4c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <MX_DMA_Init+0x4c>)
 8000890:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_DMA_Init+0x4c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	203b      	movs	r0, #59	; 0x3b
 80008a8:	f000 fd23 	bl	80012f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008ac:	203b      	movs	r0, #59	; 0x3b
 80008ae:	f000 fd3c 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2045      	movs	r0, #69	; 0x45
 80008b8:	f000 fd1b 	bl	80012f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008bc:	2045      	movs	r0, #69	; 0x45
 80008be:	f000 fd34 	bl	800132a <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <MX_GPIO_Init+0xc4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a29      	ldr	r2, [pc, #164]	; (8000994 <MX_GPIO_Init+0xc4>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b27      	ldr	r3, [pc, #156]	; (8000994 <MX_GPIO_Init+0xc4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b23      	ldr	r3, [pc, #140]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a22      	ldr	r2, [pc, #136]	; (8000994 <MX_GPIO_Init+0xc4>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b20      	ldr	r3, [pc, #128]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_GPIO_Init+0xc4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_GPIO_Init+0xc4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000972:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_GPIO_Init+0xc8>)
 8000988:	f001 f812 	bl	80019b0 <HAL_GPIO_Init>

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	; 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40020400 	.word	0x40020400

0800099c <fwrite_wav_header>:

/* USER CODE BEGIN 4 */
FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	4608      	mov	r0, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4603      	mov	r3, r0
 80009ac:	807b      	strh	r3, [r7, #2]
 80009ae:	460b      	mov	r3, r1
 80009b0:	707b      	strb	r3, [r7, #1]
 80009b2:	4613      	mov	r3, r2
 80009b4:	703b      	strb	r3, [r7, #0]
	UINT bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 80009b6:	2352      	movs	r3, #82	; 0x52
 80009b8:	723b      	strb	r3, [r7, #8]
 80009ba:	2349      	movs	r3, #73	; 0x49
 80009bc:	727b      	strb	r3, [r7, #9]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 80009be:	2346      	movs	r3, #70	; 0x46
 80009c0:	72bb      	strb	r3, [r7, #10]
 80009c2:	2346      	movs	r3, #70	; 0x46
 80009c4:	72fb      	strb	r3, [r7, #11]
	wave_header.size = (uint32_t)0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 80009ca:	2357      	movs	r3, #87	; 0x57
 80009cc:	743b      	strb	r3, [r7, #16]
 80009ce:	2341      	movs	r3, #65	; 0x41
 80009d0:	747b      	strb	r3, [r7, #17]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 80009d2:	2356      	movs	r3, #86	; 0x56
 80009d4:	74bb      	strb	r3, [r7, #18]
 80009d6:	2345      	movs	r3, #69	; 0x45
 80009d8:	74fb      	strb	r3, [r7, #19]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 80009da:	2366      	movs	r3, #102	; 0x66
 80009dc:	753b      	strb	r3, [r7, #20]
 80009de:	236d      	movs	r3, #109	; 0x6d
 80009e0:	757b      	strb	r3, [r7, #21]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 80009e2:	2374      	movs	r3, #116	; 0x74
 80009e4:	75bb      	strb	r3, [r7, #22]
 80009e6:	2320      	movs	r3, #32
 80009e8:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt_size = 16;
 80009ea:	2310      	movs	r3, #16
 80009ec:	61bb      	str	r3, [r7, #24]
	wave_header.format = 1; // PCM
 80009ee:	2301      	movs	r3, #1
 80009f0:	83bb      	strh	r3, [r7, #28]
	wave_header.channels = channels; // channels
 80009f2:	783b      	ldrb	r3, [r7, #0]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	83fb      	strh	r3, [r7, #30]
	wave_header.sampleRate=sampleRate;  // sample rate
 80009f8:	887b      	ldrh	r3, [r7, #2]
 80009fa:	623b      	str	r3, [r7, #32]
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	787a      	ldrb	r2, [r7, #1]
 8000a00:	fb02 f303 	mul.w	r3, r2, r3
 8000a04:	783a      	ldrb	r2, [r7, #0]
 8000a06:	fb02 f303 	mul.w	r3, r2, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da00      	bge.n	8000a10 <fwrite_wav_header+0x74>
 8000a0e:	3307      	adds	r3, #7
 8000a10:	10db      	asrs	r3, r3, #3
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.bc =  bitsPerSample*channels/8;
 8000a14:	787b      	ldrb	r3, [r7, #1]
 8000a16:	783a      	ldrb	r2, [r7, #0]
 8000a18:	fb02 f303 	mul.w	r3, r2, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	da00      	bge.n	8000a22 <fwrite_wav_header+0x86>
 8000a20:	3307      	adds	r3, #7
 8000a22:	10db      	asrs	r3, r3, #3
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	853b      	strh	r3, [r7, #40]	; 0x28
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000a28:	787b      	ldrb	r3, [r7, #1]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	857b      	strh	r3, [r7, #42]	; 0x2a
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000a34:	2361      	movs	r3, #97	; 0x61
 8000a36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000a3a:	2374      	movs	r3, #116	; 0x74
 8000a3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000a40:	2361      	movs	r3, #97	; 0x61
 8000a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	wave_header.data_size = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), &bw);
 8000a4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a4e:	f107 0108 	add.w	r1, r7, #8
 8000a52:	222c      	movs	r2, #44	; 0x2c
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f007 f979 	bl	8007d4c <f_write>
 8000a5a:	4603      	mov	r3, r0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3738      	adds	r7, #56	; 0x38
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <Format_SD>:

FRESULT Format_SD (void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0
    DIR dir;
    static FILINFO fno;
    static FRESULT fresult;

    char *path = malloc(20*sizeof (char));
 8000a6a:	2014      	movs	r0, #20
 8000a6c:	f007 fdb2 	bl	80085d4 <malloc>
 8000a70:	4603      	mov	r3, r0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8000a74:	4a28      	ldr	r2, [pc, #160]	; (8000b18 <Format_SD+0xb4>)
 8000a76:	4929      	ldr	r1, [pc, #164]	; (8000b1c <Format_SD+0xb8>)
 8000a78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000a7a:	f007 feb3 	bl	80087e4 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a82:	4618      	mov	r0, r3
 8000a84:	f007 fb9e 	bl	80081c4 <f_opendir>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <Format_SD+0xbc>)
 8000a8e:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <Format_SD+0xbc>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d136      	bne.n	8000b06 <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4922      	ldr	r1, [pc, #136]	; (8000b24 <Format_SD+0xc0>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f007 fc2a 	bl	80082f6 <f_readdir>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <Format_SD+0xbc>)
 8000aa8:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <Format_SD+0xbc>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d125      	bne.n	8000afe <Format_SD+0x9a>
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <Format_SD+0xc0>)
 8000ab4:	7a5b      	ldrb	r3, [r3, #9]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d021      	beq.n	8000afe <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <Format_SD+0xc0>)
 8000abc:	7a1b      	ldrb	r3, [r3, #8]
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d011      	beq.n	8000aea <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000ac6:	4918      	ldr	r1, [pc, #96]	; (8000b28 <Format_SD+0xc4>)
 8000ac8:	4818      	ldr	r0, [pc, #96]	; (8000b2c <Format_SD+0xc8>)
 8000aca:	f7ff fba1 	bl	8000210 <strcmp>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d012      	beq.n	8000afa <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <Format_SD+0xc4>)
 8000ad6:	f007 fc4b 	bl	8008370 <f_unlink>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <Format_SD+0xbc>)
 8000ae0:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <Format_SD+0xbc>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	e7d6      	b.n	8000a98 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000aea:	480f      	ldr	r0, [pc, #60]	; (8000b28 <Format_SD+0xc4>)
 8000aec:	f007 fc40 	bl	8008370 <f_unlink>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <Format_SD+0xbc>)
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e7ce      	b.n	8000a98 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000afa:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000afc:	e7cc      	b.n	8000a98 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f007 fbd2 	bl	80082aa <f_closedir>
    }
    free(path);
 8000b06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b08:	f007 fd6c 	bl	80085e4 <free>
    return fresult;
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <Format_SD+0xbc>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3738      	adds	r7, #56	; 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	08008f08 	.word	0x08008f08
 8000b1c:	08008f0c 	.word	0x08008f0c
 8000b20:	2000021c 	.word	0x2000021c
 8000b24:	20000220 	.word	0x20000220
 8000b28:	20000229 	.word	0x20000229
 8000b2c:	08008f10 	.word	0x08008f10

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <HAL_CRC_MspInit+0x3c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d10d      	bne.n	8000bba <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_CRC_MspInit+0x40>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <HAL_CRC_MspInit+0x40>)
 8000ba8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_CRC_MspInit+0x40>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023000 	.word	0x40023000
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0a2      	sub	sp, #136	; 0x88
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	225c      	movs	r2, #92	; 0x5c
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 fcff 	bl	80085f4 <memset>
  if(hsd->Instance==SDIO)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a7c      	ldr	r2, [pc, #496]	; (8000dec <HAL_SD_MspInit+0x21c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	f040 80f1 	bne.w	8000de4 <HAL_SD_MspInit+0x214>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000c02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 f991 	bl	8001f3c <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000c20:	f7ff ff86 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	4b71      	ldr	r3, [pc, #452]	; (8000df0 <HAL_SD_MspInit+0x220>)
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	4a70      	ldr	r2, [pc, #448]	; (8000df0 <HAL_SD_MspInit+0x220>)
 8000c2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c32:	6453      	str	r3, [r2, #68]	; 0x44
 8000c34:	4b6e      	ldr	r3, [pc, #440]	; (8000df0 <HAL_SD_MspInit+0x220>)
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	4b6a      	ldr	r3, [pc, #424]	; (8000df0 <HAL_SD_MspInit+0x220>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a69      	ldr	r2, [pc, #420]	; (8000df0 <HAL_SD_MspInit+0x220>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b67      	ldr	r3, [pc, #412]	; (8000df0 <HAL_SD_MspInit+0x220>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b63      	ldr	r3, [pc, #396]	; (8000df0 <HAL_SD_MspInit+0x220>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a62      	ldr	r2, [pc, #392]	; (8000df0 <HAL_SD_MspInit+0x220>)
 8000c66:	f043 0308 	orr.w	r3, r3, #8
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b60      	ldr	r3, [pc, #384]	; (8000df0 <HAL_SD_MspInit+0x220>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0308 	and.w	r3, r3, #8
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c78:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c7c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c96:	4619      	mov	r1, r3
 8000c98:	4856      	ldr	r0, [pc, #344]	; (8000df4 <HAL_SD_MspInit+0x224>)
 8000c9a:	f000 fe89 	bl	80019b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	484d      	ldr	r0, [pc, #308]	; (8000df4 <HAL_SD_MspInit+0x224>)
 8000cc0:	f000 fe76 	bl	80019b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4845      	ldr	r0, [pc, #276]	; (8000df8 <HAL_SD_MspInit+0x228>)
 8000ce4:	f000 fe64 	bl	80019b0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000ce8:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000cea:	4a45      	ldr	r2, [pc, #276]	; (8000e00 <HAL_SD_MspInit+0x230>)
 8000cec:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000cee:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000cf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf6:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfc:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d08:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d10:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d12:	4b3a      	ldr	r3, [pc, #232]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d18:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d1a:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d1c:	2220      	movs	r2, #32
 8000d1e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d28:	2204      	movs	r2, #4
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d2c:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d2e:	2203      	movs	r2, #3
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d32:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000d42:	482e      	ldr	r0, [pc, #184]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d44:	f000 fb28 	bl	8001398 <HAL_DMA_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_SD_MspInit+0x182>
    {
      Error_Handler();
 8000d4e:	f7ff feef 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a29      	ldr	r2, [pc, #164]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
 8000d58:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <HAL_SD_MspInit+0x22c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000d5e:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000d60:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <HAL_SD_MspInit+0x238>)
 8000d62:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000d66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000d6e:	2240      	movs	r2, #64	; 0x40
 8000d70:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000d82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000d8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d8e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000d92:	2220      	movs	r2, #32
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000da4:	2203      	movs	r2, #3
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000daa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000db2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000db8:	4812      	ldr	r0, [pc, #72]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000dba:	f000 faed 	bl	8001398 <HAL_DMA_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_SD_MspInit+0x1f8>
    {
      Error_Handler();
 8000dc4:	f7ff feb4 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000dcc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dce:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_SD_MspInit+0x234>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2031      	movs	r0, #49	; 0x31
 8000dda:	f000 fa8a 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000dde:	2031      	movs	r0, #49	; 0x31
 8000de0:	f000 faa3 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3788      	adds	r7, #136	; 0x88
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40012c00 	.word	0x40012c00
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020c00 	.word	0x40020c00
 8000dfc:	20000118 	.word	0x20000118
 8000e00:	40026458 	.word	0x40026458
 8000e04:	20000178 	.word	0x20000178
 8000e08:	400264a0 	.word	0x400264a0

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_UART_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12b      	bne.n	8000e86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e66:	230c      	movs	r3, #12
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e76:	2307      	movs	r3, #7
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_UART_MspInit+0x8c>)
 8000e82:	f000 fd95 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40004400 	.word	0x40004400
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f8e4 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <SDIO_IRQHandler+0x10>)
 8000ef6:	f002 fc2d 	bl	8003754 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000094 	.word	0x20000094

08000f04 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <DMA2_Stream3_IRQHandler+0x10>)
 8000f0a:	f000 fb15 	bl	8001538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000118 	.word	0x20000118

08000f18 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <DMA2_Stream6_IRQHandler+0x10>)
 8000f1e:	f000 fb0b 	bl	8001538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000178 	.word	0x20000178

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f007 fb10 	bl	8008580 <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20020000 	.word	0x20020000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	20000238 	.word	0x20000238
 8000f94:	200012c0 	.word	0x200012c0

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fc2:	490e      	ldr	r1, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd8:	4c0b      	ldr	r4, [pc, #44]	; (8001008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe6:	f7ff ffd7 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f007 facf 	bl	800858c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff faf1 	bl	80005d4 <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001000:	08009058 	.word	0x08009058
  ldr r2, =_sbss
 8001004:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001008:	200012c0 	.word	0x200012c0

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_Init+0x40>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_Init+0x40>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_Init+0x40>)
 8001032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f94f 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	200f      	movs	r0, #15
 8001040:	f000 f808 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fd7a 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f967 	bl	8001346 <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001090:	f000 f92f 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	2000023c 	.word	0x2000023c

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000023c 	.word	0x2000023c

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff29 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff3e 	bl	8001184 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff31 	bl	80011a0 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa2 	bl	8001298 <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e00e      	b.n	800138e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	795b      	ldrb	r3, [r3, #5]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fc03 	bl	8000b8c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff fe9a 	bl	80010dc <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e099      	b.n	80014e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0201 	bic.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d4:	e00f      	b.n	80013f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013d6:	f7ff fe81 	bl	80010dc <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	d908      	bls.n	80013f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2220      	movs	r2, #32
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2203      	movs	r2, #3
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e078      	b.n	80014e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1e8      	bne.n	80013d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <HAL_DMA_Init+0x158>)
 8001410:	4013      	ands	r3, r2
 8001412:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001422:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4313      	orrs	r3, r2
 8001446:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	2b04      	cmp	r3, #4
 800144e:	d107      	bne.n	8001460 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4313      	orrs	r3, r2
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4313      	orrs	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f023 0307 	bic.w	r3, r3, #7
 8001476:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4313      	orrs	r3, r2
 8001480:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	2b04      	cmp	r3, #4
 8001488:	d117      	bne.n	80014ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4313      	orrs	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00e      	beq.n	80014ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fa0b 	bl	80018b8 <DMA_CheckFifoParam>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014b6:	2301      	movs	r3, #1
 80014b8:	e016      	b.n	80014e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f9c2 	bl	800184c <DMA_CalcBaseAndBitshift>
 80014c8:	4603      	mov	r3, r0
 80014ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	223f      	movs	r2, #63	; 0x3f
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	f010803f 	.word	0xf010803f

080014f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d004      	beq.n	8001512 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00c      	b.n	800152c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2205      	movs	r2, #5
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0201 	bic.w	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001544:	4b8e      	ldr	r3, [pc, #568]	; (8001780 <HAL_DMA_IRQHandler+0x248>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a8e      	ldr	r2, [pc, #568]	; (8001784 <HAL_DMA_IRQHandler+0x24c>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0a9b      	lsrs	r3, r3, #10
 8001550:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001562:	2208      	movs	r2, #8
 8001564:	409a      	lsls	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d01a      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0204 	bic.w	r2, r2, #4
 800158a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001590:	2208      	movs	r2, #8
 8001592:	409a      	lsls	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2201      	movs	r2, #1
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d012      	beq.n	80015da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	2201      	movs	r2, #1
 80015c8:	409a      	lsls	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	f043 0202 	orr.w	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2204      	movs	r2, #4
 80015e0:	409a      	lsls	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d012      	beq.n	8001610 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00b      	beq.n	8001610 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fc:	2204      	movs	r2, #4
 80015fe:	409a      	lsls	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001608:	f043 0204 	orr.w	r2, r3, #4
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	2210      	movs	r2, #16
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d043      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d03c      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001632:	2210      	movs	r2, #16
 8001634:	409a      	lsls	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d018      	beq.n	800167a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d108      	bne.n	8001668 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d024      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
 8001666:	e01f      	b.n	80016a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01b      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
 8001678:	e016      	b.n	80016a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0208 	bic.w	r2, r2, #8
 8001696:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ac:	2220      	movs	r2, #32
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 808f 	beq.w	80017d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 8087 	beq.w	80017d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	2220      	movs	r2, #32
 80016d0:	409a      	lsls	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d136      	bne.n	8001750 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0216 	bic.w	r2, r2, #22
 80016f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001700:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <HAL_DMA_IRQHandler+0x1da>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0208 	bic.w	r2, r2, #8
 8001720:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	223f      	movs	r2, #63	; 0x3f
 8001728:	409a      	lsls	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001742:	2b00      	cmp	r3, #0
 8001744:	d07e      	beq.n	8001844 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	4798      	blx	r3
        }
        return;
 800174e:	e079      	b.n	8001844 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01d      	beq.n	800179a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10d      	bne.n	8001788 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	2b00      	cmp	r3, #0
 8001772:	d031      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	4798      	blx	r3
 800177c:	e02c      	b.n	80017d8 <HAL_DMA_IRQHandler+0x2a0>
 800177e:	bf00      	nop
 8001780:	20000000 	.word	0x20000000
 8001784:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
 8001798:	e01e      	b.n	80017d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10f      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0210 	bic.w	r2, r2, #16
 80017b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d032      	beq.n	8001846 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d022      	beq.n	8001832 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2205      	movs	r2, #5
 80017f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	3301      	adds	r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	d307      	bcc.n	8001820 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f2      	bne.n	8001804 <HAL_DMA_IRQHandler+0x2cc>
 800181e:	e000      	b.n	8001822 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001820:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
 8001842:	e000      	b.n	8001846 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001844:	bf00      	nop
    }
  }
}
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	3b10      	subs	r3, #16
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <DMA_CalcBaseAndBitshift+0x64>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001866:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d909      	bls.n	800188e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001882:	f023 0303 	bic.w	r3, r3, #3
 8001886:	1d1a      	adds	r2, r3, #4
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	; 0x58
 800188c:	e007      	b.n	800189e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	aaaaaaab 	.word	0xaaaaaaab
 80018b4:	08008f78 	.word	0x08008f78

080018b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d11f      	bne.n	8001912 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d856      	bhi.n	8001986 <DMA_CheckFifoParam+0xce>
 80018d8:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <DMA_CheckFifoParam+0x28>)
 80018da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018de:	bf00      	nop
 80018e0:	080018f1 	.word	0x080018f1
 80018e4:	08001903 	.word	0x08001903
 80018e8:	080018f1 	.word	0x080018f1
 80018ec:	08001987 	.word	0x08001987
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d046      	beq.n	800198a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001900:	e043      	b.n	800198a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800190a:	d140      	bne.n	800198e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001910:	e03d      	b.n	800198e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191a:	d121      	bne.n	8001960 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d837      	bhi.n	8001992 <DMA_CheckFifoParam+0xda>
 8001922:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <DMA_CheckFifoParam+0x70>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	08001939 	.word	0x08001939
 800192c:	0800193f 	.word	0x0800193f
 8001930:	08001939 	.word	0x08001939
 8001934:	08001951 	.word	0x08001951
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
      break;
 800193c:	e030      	b.n	80019a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d025      	beq.n	8001996 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800194e:	e022      	b.n	8001996 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001958:	d11f      	bne.n	800199a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800195e:	e01c      	b.n	800199a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d903      	bls.n	800196e <DMA_CheckFifoParam+0xb6>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d003      	beq.n	8001974 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800196c:	e018      	b.n	80019a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	73fb      	strb	r3, [r7, #15]
      break;
 8001972:	e015      	b.n	80019a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00e      	beq.n	800199e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
      break;
 8001984:	e00b      	b.n	800199e <DMA_CheckFifoParam+0xe6>
      break;
 8001986:	bf00      	nop
 8001988:	e00a      	b.n	80019a0 <DMA_CheckFifoParam+0xe8>
      break;
 800198a:	bf00      	nop
 800198c:	e008      	b.n	80019a0 <DMA_CheckFifoParam+0xe8>
      break;
 800198e:	bf00      	nop
 8001990:	e006      	b.n	80019a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001992:	bf00      	nop
 8001994:	e004      	b.n	80019a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001996:	bf00      	nop
 8001998:	e002      	b.n	80019a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800199a:	bf00      	nop
 800199c:	e000      	b.n	80019a0 <DMA_CheckFifoParam+0xe8>
      break;
 800199e:	bf00      	nop
    }
  } 
  
  return status; 
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e165      	b.n	8001c98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8154 	bne.w	8001c92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d005      	beq.n	8001a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d017      	beq.n	8001aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80ae 	beq.w	8001c92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a5c      	ldr	r2, [pc, #368]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b5a      	ldr	r3, [pc, #360]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b52:	4a58      	ldr	r2, [pc, #352]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4f      	ldr	r2, [pc, #316]	; (8001cb8 <HAL_GPIO_Init+0x308>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d025      	beq.n	8001bca <HAL_GPIO_Init+0x21a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4e      	ldr	r2, [pc, #312]	; (8001cbc <HAL_GPIO_Init+0x30c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01f      	beq.n	8001bc6 <HAL_GPIO_Init+0x216>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4d      	ldr	r2, [pc, #308]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x212>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4c      	ldr	r2, [pc, #304]	; (8001cc4 <HAL_GPIO_Init+0x314>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x20e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4b      	ldr	r2, [pc, #300]	; (8001cc8 <HAL_GPIO_Init+0x318>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x20a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4a      	ldr	r2, [pc, #296]	; (8001ccc <HAL_GPIO_Init+0x31c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a49      	ldr	r2, [pc, #292]	; (8001cd0 <HAL_GPIO_Init+0x320>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x202>
 8001bae:	2306      	movs	r3, #6
 8001bb0:	e00c      	b.n	8001bcc <HAL_GPIO_Init+0x21c>
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	e00a      	b.n	8001bcc <HAL_GPIO_Init+0x21c>
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	e008      	b.n	8001bcc <HAL_GPIO_Init+0x21c>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x21c>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_Init+0x21c>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_Init+0x21c>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x21c>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bdc:	4935      	ldr	r1, [pc, #212]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0e:	4a31      	ldr	r2, [pc, #196]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c14:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c38:	4a26      	ldr	r2, [pc, #152]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c8c:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	f67f ae96 	bls.w	80019cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40021400 	.word	0x40021400
 8001cd0:	40021800 	.word	0x40021800
 8001cd4:	40013c00 	.word	0x40013c00

08001cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e001      	b.n	8001cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0cc      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d90c      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	494d      	ldr	r1, [pc, #308]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d044      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d119      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e067      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4934      	ldr	r1, [pc, #208]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff f970 	bl	80010dc <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff f96c 	bl	80010dc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e04f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d20c      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e032      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e8e:	f000 fb7f 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	5ccb      	ldrb	r3, [r1, r3]
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f8d0 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	08008f60 	.word	0x08008f60
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4903      	ldr	r1, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	08008f70 	.word	0x08008f70

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f18:	f7ff ffdc 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0b5b      	lsrs	r3, r3, #13
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4903      	ldr	r1, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	08008f70 	.word	0x08008f70

08001f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	; 0x30
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d010      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001f74:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f7a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	496c      	ldr	r1, [pc, #432]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001f92:	2301      	movs	r3, #1
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001fa2:	4b64      	ldr	r3, [pc, #400]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fa8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb0:	4960      	ldr	r1, [pc, #384]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d017      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fd0:	4b58      	ldr	r3, [pc, #352]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4955      	ldr	r1, [pc, #340]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d017      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800200e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201a:	4946      	ldr	r1, [pc, #280]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800202a:	d101      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800202c:	2301      	movs	r3, #1
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002038:	2301      	movs	r3, #1
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 808a 	beq.w	800215e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a38      	ldr	r2, [pc, #224]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b36      	ldr	r3, [pc, #216]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002066:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a33      	ldr	r2, [pc, #204]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002072:	f7ff f833 	bl	80010dc <HAL_GetTick>
 8002076:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7ff f82f 	bl	80010dc <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e278      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002098:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d02f      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b0:	6a3a      	ldr	r2, [r7, #32]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d028      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020be:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d114      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80020de:	f7fe fffd 	bl	80010dc <HAL_GetTick>
 80020e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	e00a      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe fff9 	bl	80010dc <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e240      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ee      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002114:	d114      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800212a:	4902      	ldr	r1, [pc, #8]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]
 8002130:	e00c      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40007000 	.word	0x40007000
 800213c:	42470e40 	.word	0x42470e40
 8002140:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a49      	ldr	r2, [pc, #292]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002146:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800214a:	6093      	str	r3, [r2, #8]
 800214c:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800214e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	4944      	ldr	r1, [pc, #272]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800215a:	4313      	orrs	r3, r2
 800215c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002170:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002172:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002186:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	4937      	ldr	r1, [pc, #220]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021a2:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b0:	492e      	ldr	r1, [pc, #184]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d011      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	4926      	ldr	r1, [pc, #152]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021e2:	d101      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80021e4:	2301      	movs	r3, #1
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	491a      	ldr	r1, [pc, #104]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	2b00      	cmp	r3, #0
 8002214:	d011      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002224:	4911      	ldr	r1, [pc, #68]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002234:	d101      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002236:	2301      	movs	r3, #1
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d005      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002248:	f040 80ff 	bne.w	800244a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002252:	f7fe ff43 	bl	80010dc <HAL_GetTick>
 8002256:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002258:	e00e      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800225a:	f7fe ff3f 	bl	80010dc <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d907      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e188      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800226c:	40023800 	.word	0x40023800
 8002270:	424711e0 	.word	0x424711e0
 8002274:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002278:	4b7e      	ldr	r3, [pc, #504]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ea      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d028      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d124      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80022ac:	4b71      	ldr	r3, [pc, #452]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b2:	0c1b      	lsrs	r3, r3, #16
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	3301      	adds	r3, #1
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022be:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c4:	0e1b      	lsrs	r3, r3, #24
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	019b      	lsls	r3, r3, #6
 80022d6:	431a      	orrs	r2, r3
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	085b      	lsrs	r3, r3, #1
 80022dc:	3b01      	subs	r3, #1
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	431a      	orrs	r2, r3
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	071b      	lsls	r3, r3, #28
 80022ee:	4961      	ldr	r1, [pc, #388]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002314:	2b00      	cmp	r3, #0
 8002316:	d035      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002320:	d130      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	3301      	adds	r3, #1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002334:	4b4f      	ldr	r3, [pc, #316]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800233a:	0f1b      	lsrs	r3, r3, #28
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	019b      	lsls	r3, r3, #6
 800234c:	431a      	orrs	r2, r3
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	3b01      	subs	r3, #1
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	431a      	orrs	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	071b      	lsls	r3, r3, #28
 8002364:	4943      	ldr	r1, [pc, #268]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800236c:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800236e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002372:	f023 021f 	bic.w	r2, r3, #31
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	3b01      	subs	r3, #1
 800237c:	493d      	ldr	r1, [pc, #244]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d029      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002398:	d124      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800239a:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800239c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	3301      	adds	r3, #1
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023b2:	0f1b      	lsrs	r3, r3, #28
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	019b      	lsls	r3, r3, #6
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	3b01      	subs	r3, #1
 80023ce:	041b      	lsls	r3, r3, #16
 80023d0:	431a      	orrs	r2, r3
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	431a      	orrs	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	071b      	lsls	r3, r3, #28
 80023dc:	4925      	ldr	r1, [pc, #148]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	3b01      	subs	r3, #1
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	061b      	lsls	r3, r3, #24
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	071b      	lsls	r3, r3, #28
 8002416:	4917      	ldr	r1, [pc, #92]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002424:	f7fe fe5a 	bl	80010dc <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800242c:	f7fe fe56 	bl	80010dc <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e09f      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	2b01      	cmp	r3, #1
 800244e:	f040 8095 	bne.w	800257c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002458:	f7fe fe40 	bl	80010dc <HAL_GetTick>
 800245c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800245e:	e00f      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002460:	f7fe fe3c 	bl	80010dc <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d908      	bls.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e085      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	42470068 	.word	0x42470068
 800247c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800248c:	d0e8      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d02b      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d127      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	019b      	lsls	r3, r3, #6
 80024d2:	431a      	orrs	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	085b      	lsrs	r3, r3, #1
 80024d8:	3b01      	subs	r3, #1
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	061b      	lsls	r3, r3, #24
 80024e4:	4928      	ldr	r1, [pc, #160]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ec:	4b26      	ldr	r3, [pc, #152]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	3b01      	subs	r3, #1
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	4922      	ldr	r1, [pc, #136]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01d      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251a:	d118      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	0e1b      	lsrs	r3, r3, #24
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	019b      	lsls	r3, r3, #6
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	3b01      	subs	r3, #1
 800253e:	041b      	lsls	r3, r3, #16
 8002540:	431a      	orrs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	4910      	ldr	r1, [pc, #64]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002554:	f7fe fdc2 	bl	80010dc <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800255c:	f7fe fdbe 	bl	80010dc <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e007      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800257a:	d1ef      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3730      	adds	r7, #48	; 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	42470070 	.word	0x42470070

08002590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002594:	b0ae      	sub	sp, #184	; 0xb8
 8002596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b6:	4bcb      	ldr	r3, [pc, #812]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	f200 8206 	bhi.w	80029d0 <HAL_RCC_GetSysClockFreq+0x440>
 80025c4:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80025c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ca:	bf00      	nop
 80025cc:	08002601 	.word	0x08002601
 80025d0:	080029d1 	.word	0x080029d1
 80025d4:	080029d1 	.word	0x080029d1
 80025d8:	080029d1 	.word	0x080029d1
 80025dc:	08002609 	.word	0x08002609
 80025e0:	080029d1 	.word	0x080029d1
 80025e4:	080029d1 	.word	0x080029d1
 80025e8:	080029d1 	.word	0x080029d1
 80025ec:	08002611 	.word	0x08002611
 80025f0:	080029d1 	.word	0x080029d1
 80025f4:	080029d1 	.word	0x080029d1
 80025f8:	080029d1 	.word	0x080029d1
 80025fc:	08002801 	.word	0x08002801
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002600:	4bb9      	ldr	r3, [pc, #740]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002606:	e1e7      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002608:	4bb8      	ldr	r3, [pc, #736]	; (80028ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800260a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800260e:	e1e3      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002610:	4bb4      	ldr	r3, [pc, #720]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800261c:	4bb1      	ldr	r3, [pc, #708]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d071      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002628:	4bae      	ldr	r3, [pc, #696]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	2200      	movs	r2, #0
 8002630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002634:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800263c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800264a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800264e:	4622      	mov	r2, r4
 8002650:	462b      	mov	r3, r5
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	0159      	lsls	r1, r3, #5
 800265c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002660:	0150      	lsls	r0, r2, #5
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4621      	mov	r1, r4
 8002668:	1a51      	subs	r1, r2, r1
 800266a:	6439      	str	r1, [r7, #64]	; 0x40
 800266c:	4629      	mov	r1, r5
 800266e:	eb63 0301 	sbc.w	r3, r3, r1
 8002672:	647b      	str	r3, [r7, #68]	; 0x44
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002680:	4649      	mov	r1, r9
 8002682:	018b      	lsls	r3, r1, #6
 8002684:	4641      	mov	r1, r8
 8002686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800268a:	4641      	mov	r1, r8
 800268c:	018a      	lsls	r2, r1, #6
 800268e:	4641      	mov	r1, r8
 8002690:	1a51      	subs	r1, r2, r1
 8002692:	63b9      	str	r1, [r7, #56]	; 0x38
 8002694:	4649      	mov	r1, r9
 8002696:	eb63 0301 	sbc.w	r3, r3, r1
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80026a8:	4649      	mov	r1, r9
 80026aa:	00cb      	lsls	r3, r1, #3
 80026ac:	4641      	mov	r1, r8
 80026ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026b2:	4641      	mov	r1, r8
 80026b4:	00ca      	lsls	r2, r1, #3
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	4622      	mov	r2, r4
 80026be:	189b      	adds	r3, r3, r2
 80026c0:	633b      	str	r3, [r7, #48]	; 0x30
 80026c2:	462b      	mov	r3, r5
 80026c4:	460a      	mov	r2, r1
 80026c6:	eb42 0303 	adc.w	r3, r2, r3
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026d8:	4629      	mov	r1, r5
 80026da:	024b      	lsls	r3, r1, #9
 80026dc:	4621      	mov	r1, r4
 80026de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026e2:	4621      	mov	r1, r4
 80026e4:	024a      	lsls	r2, r1, #9
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80026fc:	f7fd fde8 	bl	80002d0 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4613      	mov	r3, r2
 8002706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800270a:	e067      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270c:	4b75      	ldr	r3, [pc, #468]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002718:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800271c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002724:	67bb      	str	r3, [r7, #120]	; 0x78
 8002726:	2300      	movs	r3, #0
 8002728:	67fb      	str	r3, [r7, #124]	; 0x7c
 800272a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800272e:	4622      	mov	r2, r4
 8002730:	462b      	mov	r3, r5
 8002732:	f04f 0000 	mov.w	r0, #0
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	0159      	lsls	r1, r3, #5
 800273c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002740:	0150      	lsls	r0, r2, #5
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4621      	mov	r1, r4
 8002748:	1a51      	subs	r1, r2, r1
 800274a:	62b9      	str	r1, [r7, #40]	; 0x28
 800274c:	4629      	mov	r1, r5
 800274e:	eb63 0301 	sbc.w	r3, r3, r1
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002760:	4649      	mov	r1, r9
 8002762:	018b      	lsls	r3, r1, #6
 8002764:	4641      	mov	r1, r8
 8002766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800276a:	4641      	mov	r1, r8
 800276c:	018a      	lsls	r2, r1, #6
 800276e:	4641      	mov	r1, r8
 8002770:	ebb2 0a01 	subs.w	sl, r2, r1
 8002774:	4649      	mov	r1, r9
 8002776:	eb63 0b01 	sbc.w	fp, r3, r1
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002786:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800278a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800278e:	4692      	mov	sl, r2
 8002790:	469b      	mov	fp, r3
 8002792:	4623      	mov	r3, r4
 8002794:	eb1a 0303 	adds.w	r3, sl, r3
 8002798:	623b      	str	r3, [r7, #32]
 800279a:	462b      	mov	r3, r5
 800279c:	eb4b 0303 	adc.w	r3, fp, r3
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027ae:	4629      	mov	r1, r5
 80027b0:	028b      	lsls	r3, r1, #10
 80027b2:	4621      	mov	r1, r4
 80027b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b8:	4621      	mov	r1, r4
 80027ba:	028a      	lsls	r2, r1, #10
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027c4:	2200      	movs	r2, #0
 80027c6:	673b      	str	r3, [r7, #112]	; 0x70
 80027c8:	677a      	str	r2, [r7, #116]	; 0x74
 80027ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80027ce:	f7fd fd7f 	bl	80002d0 <__aeabi_uldivmod>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4613      	mov	r3, r2
 80027d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027dc:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	3301      	adds	r3, #1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80027ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027fe:	e0eb      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002800:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d06b      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	2200      	movs	r2, #0
 8002820:	66bb      	str	r3, [r7, #104]	; 0x68
 8002822:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282a:	663b      	str	r3, [r7, #96]	; 0x60
 800282c:	2300      	movs	r3, #0
 800282e:	667b      	str	r3, [r7, #100]	; 0x64
 8002830:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002834:	4622      	mov	r2, r4
 8002836:	462b      	mov	r3, r5
 8002838:	f04f 0000 	mov.w	r0, #0
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	0159      	lsls	r1, r3, #5
 8002842:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002846:	0150      	lsls	r0, r2, #5
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4621      	mov	r1, r4
 800284e:	1a51      	subs	r1, r2, r1
 8002850:	61b9      	str	r1, [r7, #24]
 8002852:	4629      	mov	r1, r5
 8002854:	eb63 0301 	sbc.w	r3, r3, r1
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002866:	4659      	mov	r1, fp
 8002868:	018b      	lsls	r3, r1, #6
 800286a:	4651      	mov	r1, sl
 800286c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002870:	4651      	mov	r1, sl
 8002872:	018a      	lsls	r2, r1, #6
 8002874:	4651      	mov	r1, sl
 8002876:	ebb2 0801 	subs.w	r8, r2, r1
 800287a:	4659      	mov	r1, fp
 800287c:	eb63 0901 	sbc.w	r9, r3, r1
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800288c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002890:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002894:	4690      	mov	r8, r2
 8002896:	4699      	mov	r9, r3
 8002898:	4623      	mov	r3, r4
 800289a:	eb18 0303 	adds.w	r3, r8, r3
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	462b      	mov	r3, r5
 80028a2:	eb49 0303 	adc.w	r3, r9, r3
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028b4:	4629      	mov	r1, r5
 80028b6:	024b      	lsls	r3, r1, #9
 80028b8:	4621      	mov	r1, r4
 80028ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028be:	4621      	mov	r1, r4
 80028c0:	024a      	lsls	r2, r1, #9
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028ca:	2200      	movs	r2, #0
 80028cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80028ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028d4:	f7fd fcfc 	bl	80002d0 <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4613      	mov	r3, r2
 80028de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028e2:	e065      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x420>
 80028e4:	40023800 	.word	0x40023800
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f0:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	2200      	movs	r2, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	4611      	mov	r1, r2
 80028fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002900:	653b      	str	r3, [r7, #80]	; 0x50
 8002902:	2300      	movs	r3, #0
 8002904:	657b      	str	r3, [r7, #84]	; 0x54
 8002906:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800290a:	4642      	mov	r2, r8
 800290c:	464b      	mov	r3, r9
 800290e:	f04f 0000 	mov.w	r0, #0
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	0159      	lsls	r1, r3, #5
 8002918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800291c:	0150      	lsls	r0, r2, #5
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4641      	mov	r1, r8
 8002924:	1a51      	subs	r1, r2, r1
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	4649      	mov	r1, r9
 800292a:	eb63 0301 	sbc.w	r3, r3, r1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800293c:	4659      	mov	r1, fp
 800293e:	018b      	lsls	r3, r1, #6
 8002940:	4651      	mov	r1, sl
 8002942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002946:	4651      	mov	r1, sl
 8002948:	018a      	lsls	r2, r1, #6
 800294a:	4651      	mov	r1, sl
 800294c:	1a54      	subs	r4, r2, r1
 800294e:	4659      	mov	r1, fp
 8002950:	eb63 0501 	sbc.w	r5, r3, r1
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	00eb      	lsls	r3, r5, #3
 800295e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002962:	00e2      	lsls	r2, r4, #3
 8002964:	4614      	mov	r4, r2
 8002966:	461d      	mov	r5, r3
 8002968:	4643      	mov	r3, r8
 800296a:	18e3      	adds	r3, r4, r3
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	464b      	mov	r3, r9
 8002970:	eb45 0303 	adc.w	r3, r5, r3
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002982:	4629      	mov	r1, r5
 8002984:	028b      	lsls	r3, r1, #10
 8002986:	4621      	mov	r1, r4
 8002988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800298c:	4621      	mov	r1, r4
 800298e:	028a      	lsls	r2, r1, #10
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002998:	2200      	movs	r2, #0
 800299a:	64bb      	str	r3, [r7, #72]	; 0x48
 800299c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800299e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029a2:	f7fd fc95 	bl	80002d0 <__aeabi_uldivmod>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4613      	mov	r3, r2
 80029ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029b0:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0f1b      	lsrs	r3, r3, #28
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80029be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029ce:	e003      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80029d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	37b8      	adds	r7, #184	; 0xb8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	00f42400 	.word	0x00f42400

080029f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e28d      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8083 	beq.w	8002b16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a10:	4b94      	ldr	r3, [pc, #592]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d019      	beq.n	8002a50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a1c:	4b91      	ldr	r3, [pc, #580]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a28:	4b8e      	ldr	r3, [pc, #568]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a34:	d00c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a36:	4b8b      	ldr	r3, [pc, #556]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d112      	bne.n	8002a68 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a42:	4b88      	ldr	r3, [pc, #544]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4e:	d10b      	bne.n	8002a68 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	4b84      	ldr	r3, [pc, #528]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d05b      	beq.n	8002b14 <HAL_RCC_OscConfig+0x124>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d157      	bne.n	8002b14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e25a      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d106      	bne.n	8002a80 <HAL_RCC_OscConfig+0x90>
 8002a72:	4b7c      	ldr	r3, [pc, #496]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a7b      	ldr	r2, [pc, #492]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e01d      	b.n	8002abc <HAL_RCC_OscConfig+0xcc>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xb4>
 8002a8a:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a75      	ldr	r2, [pc, #468]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b73      	ldr	r3, [pc, #460]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a72      	ldr	r2, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0xcc>
 8002aa4:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a6e      	ldr	r2, [pc, #440]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a6b      	ldr	r2, [pc, #428]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fb0a 	bl	80010dc <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe fb06 	bl	80010dc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e21f      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b61      	ldr	r3, [pc, #388]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0xdc>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe faf6 	bl	80010dc <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe faf2 	bl	80010dc <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e20b      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x104>
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d06f      	beq.n	8002c02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b22:	4b50      	ldr	r3, [pc, #320]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d017      	beq.n	8002b5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b2e:	4b4d      	ldr	r3, [pc, #308]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d105      	bne.n	8002b46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b3a:	4b4a      	ldr	r3, [pc, #296]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d11c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b52:	4b44      	ldr	r3, [pc, #272]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d116      	bne.n	8002b8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_RCC_OscConfig+0x186>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e1d3      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b76:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4937      	ldr	r1, [pc, #220]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	e03a      	b.n	8002c02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b94:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <HAL_RCC_OscConfig+0x278>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fa9f 	bl	80010dc <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fa9b 	bl	80010dc <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e1b4      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4925      	ldr	r1, [pc, #148]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
 8002bd4:	e015      	b.n	8002c02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCC_OscConfig+0x278>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fa7e 	bl	80010dc <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be4:	f7fe fa7a 	bl	80010dc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e193      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d036      	beq.n	8002c7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_RCC_OscConfig+0x27c>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fa5e 	bl	80010dc <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c24:	f7fe fa5a 	bl	80010dc <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e173      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x234>
 8002c42:	e01b      	b.n	8002c7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_RCC_OscConfig+0x27c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fa47 	bl	80010dc <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	e00e      	b.n	8002c70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c52:	f7fe fa43 	bl	80010dc <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d907      	bls.n	8002c70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e15c      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
 8002c64:	40023800 	.word	0x40023800
 8002c68:	42470000 	.word	0x42470000
 8002c6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	4b8a      	ldr	r3, [pc, #552]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ea      	bne.n	8002c52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8097 	beq.w	8002db8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8e:	4b83      	ldr	r3, [pc, #524]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10f      	bne.n	8002cba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	4b7f      	ldr	r3, [pc, #508]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a7e      	ldr	r2, [pc, #504]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b7c      	ldr	r3, [pc, #496]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cba:	4b79      	ldr	r3, [pc, #484]	; (8002ea0 <HAL_RCC_OscConfig+0x4b0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d118      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc6:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <HAL_RCC_OscConfig+0x4b0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a75      	ldr	r2, [pc, #468]	; (8002ea0 <HAL_RCC_OscConfig+0x4b0>)
 8002ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fa03 	bl	80010dc <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cda:	f7fe f9ff 	bl	80010dc <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e118      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	4b6c      	ldr	r3, [pc, #432]	; (8002ea0 <HAL_RCC_OscConfig+0x4b0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCC_OscConfig+0x31e>
 8002d00:	4b66      	ldr	r3, [pc, #408]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a65      	ldr	r2, [pc, #404]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0c:	e01c      	b.n	8002d48 <HAL_RCC_OscConfig+0x358>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x340>
 8002d16:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a60      	ldr	r2, [pc, #384]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a5d      	ldr	r2, [pc, #372]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0x358>
 8002d30:	4b5a      	ldr	r3, [pc, #360]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a59      	ldr	r2, [pc, #356]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	4b57      	ldr	r3, [pc, #348]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4a56      	ldr	r2, [pc, #344]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d42:	f023 0304 	bic.w	r3, r3, #4
 8002d46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7fe f9c4 	bl	80010dc <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe f9c0 	bl	80010dc <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0d7      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0ee      	beq.n	8002d58 <HAL_RCC_OscConfig+0x368>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe f9ae 	bl	80010dc <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe f9aa 	bl	80010dc <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0c1      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9a:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1ee      	bne.n	8002d84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d105      	bne.n	8002db8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dac:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	4a3a      	ldr	r2, [pc, #232]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80ad 	beq.w	8002f1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d060      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d145      	bne.n	8002e62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd6:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <HAL_RCC_OscConfig+0x4b4>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f97e 	bl	80010dc <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe f97a 	bl	80010dc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e093      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	019b      	lsls	r3, r3, #6
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	085b      	lsrs	r3, r3, #1
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	061b      	lsls	r3, r3, #24
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	071b      	lsls	r3, r3, #28
 8002e2e:	491b      	ldr	r1, [pc, #108]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_RCC_OscConfig+0x4b4>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe f94f 	bl	80010dc <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe f94b 	bl	80010dc <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e064      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x452>
 8002e60:	e05c      	b.n	8002f1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_RCC_OscConfig+0x4b4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe f938 	bl	80010dc <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe f934 	bl	80010dc <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e04d      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x480>
 8002e8e:	e045      	b.n	8002f1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e040      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <HAL_RCC_OscConfig+0x538>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d030      	beq.n	8002f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d129      	bne.n	8002f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d122      	bne.n	8002f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ed8:	4013      	ands	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d119      	bne.n	8002f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d10f      	bne.n	8002f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800

08002f2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e022      	b.n	8002f84 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7fd fe3d 	bl	8000bd0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f814 	bl	8002f8c <HAL_SD_InitCard>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00a      	b.n	8002f84 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002f8c:	b5b0      	push	{r4, r5, r7, lr}
 8002f8e:	b08e      	sub	sp, #56	; 0x38
 8002f90:	af04      	add	r7, sp, #16
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002fa8:	2376      	movs	r3, #118	; 0x76
 8002faa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681d      	ldr	r5, [r3, #0]
 8002fb0:	466c      	mov	r4, sp
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fbe:	f107 0308 	add.w	r3, r7, #8
 8002fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f001 fe91 	bl	8004cec <SDIO_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e04f      	b.n	800307c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002fdc:	4b29      	ldr	r3, [pc, #164]	; (8003084 <HAL_SD_InitCard+0xf8>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 fec9 	bl	8004d7e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_SD_InitCard+0xf8>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002ff2:	2002      	movs	r0, #2
 8002ff4:	f7fe f87e 	bl	80010f4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f001 f8f1 	bl	80041e0 <SD_PowerON>
 8002ffe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e02e      	b.n	800307c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f001 f810 	bl	8004044 <SD_InitCard>
 8003024:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e01b      	b.n	800307c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800304c:	4618      	mov	r0, r3
 800304e:	f001 ff28 	bl	8004ea2 <SDMMC_CmdBlockLength>
 8003052:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00f      	beq.n	800307a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_SD_InitCard+0xfc>)
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bdb0      	pop	{r4, r5, r7, pc}
 8003084:	422580a0 	.word	0x422580a0
 8003088:	004005ff 	.word	0x004005ff

0800308c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b092      	sub	sp, #72	; 0x48
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800309a:	f7fe f81f 	bl	80010dc <HAL_GetTick>
 800309e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d107      	bne.n	80030be <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e1bd      	b.n	800343a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	f040 81b0 	bne.w	800342c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	441a      	add	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030dc:	429a      	cmp	r2, r3
 80030de:	d907      	bls.n	80030f0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e1a4      	b.n	800343a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2203      	movs	r2, #3
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2200      	movs	r2, #0
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	2b01      	cmp	r3, #1
 8003106:	d002      	beq.n	800310e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310a:	025b      	lsls	r3, r3, #9
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003112:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	025b      	lsls	r3, r3, #9
 8003118:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800311a:	2390      	movs	r3, #144	; 0x90
 800311c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800311e:	2302      	movs	r3, #2
 8003120:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003126:	2301      	movs	r3, #1
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f107 0214 	add.w	r2, r7, #20
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f001 fe88 	bl	8004e4a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d90a      	bls.n	8003156 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2202      	movs	r2, #2
 8003144:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800314c:	4618      	mov	r0, r3
 800314e:	f001 feec 	bl	8004f2a <SDMMC_CmdReadMultiBlock>
 8003152:	6478      	str	r0, [r7, #68]	; 0x44
 8003154:	e009      	b.n	800316a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003162:	4618      	mov	r0, r3
 8003164:	f001 febf 	bl	8004ee6 <SDMMC_CmdReadSingleBlock>
 8003168:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800316a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a7a      	ldr	r2, [pc, #488]	; (8003360 <HAL_SD_ReadBlocks+0x2d4>)
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	431a      	orrs	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e151      	b.n	800343a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800319a:	e061      	b.n	8003260 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03c      	beq.n	8003224 <HAL_SD_ReadBlocks+0x198>
 80031aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d039      	beq.n	8003224 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	643b      	str	r3, [r7, #64]	; 0x40
 80031b4:	e033      	b.n	800321e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 fdc1 	bl	8004d42 <SDIO_ReadFIFO>
 80031c0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80031ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031cc:	3301      	adds	r3, #1
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d2:	3b01      	subs	r3, #1
 80031d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80031e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e2:	3301      	adds	r3, #1
 80031e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e8:	3b01      	subs	r3, #1
 80031ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80031f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f8:	3301      	adds	r3, #1
 80031fa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fe:	3b01      	subs	r3, #1
 8003200:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	0e1b      	lsrs	r3, r3, #24
 8003206:	b2da      	uxtb	r2, r3
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	3301      	adds	r3, #1
 8003210:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003214:	3b01      	subs	r3, #1
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321a:	3301      	adds	r3, #1
 800321c:	643b      	str	r3, [r7, #64]	; 0x40
 800321e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003220:	2b07      	cmp	r3, #7
 8003222:	d9c8      	bls.n	80031b6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003224:	f7fd ff5a 	bl	80010dc <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003230:	429a      	cmp	r2, r3
 8003232:	d902      	bls.n	800323a <HAL_SD_ReadBlocks+0x1ae>
 8003234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003236:	2b00      	cmp	r3, #0
 8003238:	d112      	bne.n	8003260 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a48      	ldr	r2, [pc, #288]	; (8003360 <HAL_SD_ReadBlocks+0x2d4>)
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0ec      	b.n	800343a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800326a:	2b00      	cmp	r3, #0
 800326c:	d096      	beq.n	800319c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d022      	beq.n	80032c2 <HAL_SD_ReadBlocks+0x236>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d91f      	bls.n	80032c2 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	2b03      	cmp	r3, #3
 8003288:	d01b      	beq.n	80032c2 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f001 feb2 	bl	8004ff8 <SDMMC_CmdStopTransfer>
 8003294:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003298:	2b00      	cmp	r3, #0
 800329a:	d012      	beq.n	80032c2 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2f      	ldr	r2, [pc, #188]	; (8003360 <HAL_SD_ReadBlocks+0x2d4>)
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032aa:	431a      	orrs	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0bb      	b.n	800343a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d012      	beq.n	80032f6 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a22      	ldr	r2, [pc, #136]	; (8003360 <HAL_SD_ReadBlocks+0x2d4>)
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	f043 0208 	orr.w	r2, r3, #8
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0a1      	b.n	800343a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a15      	ldr	r2, [pc, #84]	; (8003360 <HAL_SD_ReadBlocks+0x2d4>)
 800330a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	f043 0202 	orr.w	r2, r3, #2
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e087      	b.n	800343a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d064      	beq.n	8003402 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a08      	ldr	r2, [pc, #32]	; (8003360 <HAL_SD_ReadBlocks+0x2d4>)
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06d      	b.n	800343a <HAL_SD_ReadBlocks+0x3ae>
 800335e:	bf00      	nop
 8003360:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f001 fcea 	bl	8004d42 <SDIO_ReadFIFO>
 800336e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003372:	b2da      	uxtb	r2, r3
 8003374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003376:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337a:	3301      	adds	r3, #1
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800337e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003380:	3b01      	subs	r3, #1
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	b2da      	uxtb	r2, r3
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	3301      	adds	r3, #1
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003396:	3b01      	subs	r3, #1
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80033a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a6:	3301      	adds	r3, #1
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80033aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ac:	3b01      	subs	r3, #1
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	0e1b      	lsrs	r3, r3, #24
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	3301      	adds	r3, #1
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80033c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c2:	3b01      	subs	r3, #1
 80033c4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80033c6:	f7fd fe89 	bl	80010dc <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d902      	bls.n	80033dc <HAL_SD_ReadBlocks+0x350>
 80033d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d112      	bne.n	8003402 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a18      	ldr	r2, [pc, #96]	; (8003444 <HAL_SD_ReadBlocks+0x3b8>)
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e01b      	b.n	800343a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_SD_ReadBlocks+0x38a>
 8003410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1a6      	bne.n	8003364 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f240 523a 	movw	r2, #1338	; 0x53a
 800341e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e006      	b.n	800343a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3748      	adds	r7, #72	; 0x48
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	004005ff 	.word	0x004005ff

08003448 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b092      	sub	sp, #72	; 0x48
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003456:	f7fd fe41 	bl	80010dc <HAL_GetTick>
 800345a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d107      	bne.n	800347a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e165      	b.n	8003746 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	f040 8158 	bne.w	8003738 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800348e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	441a      	add	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	429a      	cmp	r2, r3
 800349a:	d907      	bls.n	80034ac <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e14c      	b.n	8003746 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2203      	movs	r2, #3
 80034b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2200      	movs	r2, #0
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	025b      	lsls	r3, r3, #9
 80034c8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034ce:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	025b      	lsls	r3, r3, #9
 80034d4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80034d6:	2390      	movs	r3, #144	; 0x90
 80034d8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80034de:	2300      	movs	r3, #0
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80034e2:	2301      	movs	r3, #1
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f107 0218 	add.w	r2, r7, #24
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 fcaa 	bl	8004e4a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d90a      	bls.n	8003512 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003508:	4618      	mov	r0, r3
 800350a:	f001 fd52 	bl	8004fb2 <SDMMC_CmdWriteMultiBlock>
 800350e:	6478      	str	r0, [r7, #68]	; 0x44
 8003510:	e009      	b.n	8003526 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2210      	movs	r2, #16
 8003516:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fd25 	bl	8004f6e <SDMMC_CmdWriteSingleBlock>
 8003524:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a87      	ldr	r2, [pc, #540]	; (8003750 <HAL_SD_WriteBlocks+0x308>)
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353a:	431a      	orrs	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0f9      	b.n	8003746 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003556:	e065      	b.n	8003624 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d040      	beq.n	80035e8 <HAL_SD_WriteBlocks+0x1a0>
 8003566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d03d      	beq.n	80035e8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800356c:	2300      	movs	r3, #0
 800356e:	643b      	str	r3, [r7, #64]	; 0x40
 8003570:	e037      	b.n	80035e2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357a:	3301      	adds	r3, #1
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003580:	3b01      	subs	r3, #1
 8003582:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	021a      	lsls	r2, r3, #8
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003592:	3301      	adds	r3, #1
 8003594:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003598:	3b01      	subs	r3, #1
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	041a      	lsls	r2, r3, #16
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	3301      	adds	r3, #1
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b0:	3b01      	subs	r3, #1
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	061a      	lsls	r2, r3, #24
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80035c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c2:	3301      	adds	r3, #1
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c8:	3b01      	subs	r3, #1
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f107 0214 	add.w	r2, r7, #20
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f001 fbc0 	bl	8004d5c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80035dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035de:	3301      	adds	r3, #1
 80035e0:	643b      	str	r3, [r7, #64]	; 0x40
 80035e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e4:	2b07      	cmp	r3, #7
 80035e6:	d9c4      	bls.n	8003572 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80035e8:	f7fd fd78 	bl	80010dc <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d902      	bls.n	80035fe <HAL_SD_WriteBlocks+0x1b6>
 80035f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d112      	bne.n	8003624 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a53      	ldr	r2, [pc, #332]	; (8003750 <HAL_SD_WriteBlocks+0x308>)
 8003604:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e090      	b.n	8003746 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800362e:	2b00      	cmp	r3, #0
 8003630:	d092      	beq.n	8003558 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d022      	beq.n	8003686 <HAL_SD_WriteBlocks+0x23e>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d91f      	bls.n	8003686 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	2b03      	cmp	r3, #3
 800364c:	d01b      	beq.n	8003686 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fcd0 	bl	8004ff8 <SDMMC_CmdStopTransfer>
 8003658:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800365a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a3a      	ldr	r2, [pc, #232]	; (8003750 <HAL_SD_WriteBlocks+0x308>)
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366e:	431a      	orrs	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e05f      	b.n	8003746 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d012      	beq.n	80036ba <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <HAL_SD_WriteBlocks+0x308>)
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	f043 0208 	orr.w	r2, r3, #8
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e045      	b.n	8003746 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d012      	beq.n	80036ee <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a20      	ldr	r2, [pc, #128]	; (8003750 <HAL_SD_WriteBlocks+0x308>)
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	f043 0202 	orr.w	r2, r3, #2
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e02b      	b.n	8003746 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d012      	beq.n	8003722 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a13      	ldr	r2, [pc, #76]	; (8003750 <HAL_SD_WriteBlocks+0x308>)
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	f043 0210 	orr.w	r2, r3, #16
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e011      	b.n	8003746 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f240 523a 	movw	r2, #1338	; 0x53a
 800372a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e006      	b.n	8003746 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3748      	adds	r7, #72	; 0x48
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	004005ff 	.word	0x004005ff

08003754 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_SD_IRQHandler+0x2e>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 ff4f 	bl	800461e <SD_Read_IT>
 8003780:	e155      	b.n	8003a2e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 808f 	beq.w	80038b0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80037aa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80037ae:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d039      	beq.n	800383e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <HAL_SD_IRQHandler+0x8a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fc08 	bl	8004ff8 <SDMMC_CmdStopTransfer>
 80037e8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f91f 	bl	8003a40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f240 523a 	movw	r2, #1338	; 0x53a
 800380a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <HAL_SD_IRQHandler+0xda>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f002 f87e 	bl	8005930 <HAL_SD_RxCpltCallback>
 8003834:	e0fb      	b.n	8003a2e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f002 f870 	bl	800591c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800383c:	e0f7      	b.n	8003a2e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80f2 	beq.w	8003a2e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d011      	beq.n	8003878 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fbcd 	bl	8004ff8 <SDMMC_CmdStopTransfer>
 800385e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8e4 	bl	8003a40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 80d5 	bne.w	8003a2e <HAL_SD_IRQHandler+0x2da>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	f040 80cf 	bne.w	8003a2e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0208 	bic.w	r2, r2, #8
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f002 f837 	bl	800591c <HAL_SD_TxCpltCallback>
}
 80038ae:	e0be      	b.n	8003a2e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_SD_IRQHandler+0x17c>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fef9 	bl	80046c0 <SD_Write_IT>
 80038ce:	e0ae      	b.n	8003a2e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80a7 	beq.w	8003a2e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	f043 0202 	orr.w	r2, r3, #2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	f043 0208 	orr.w	r2, r3, #8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	f043 0210 	orr.w	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fb46 	bl	8004ff8 <SDMMC_CmdStopTransfer>
 800396c:	4602      	mov	r2, r0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f855 	bl	8003a40 <HAL_SD_ErrorCallback>
}
 8003996:	e04a      	b.n	8003a2e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d045      	beq.n	8003a2e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d104      	bne.n	80039b6 <HAL_SD_IRQHandler+0x262>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d011      	beq.n	80039da <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <HAL_SD_IRQHandler+0x2e4>)
 80039bc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd fd96 	bl	80014f4 <HAL_DMA_Abort_IT>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d02f      	beq.n	8003a2e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fac8 	bl	8003f68 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80039d8:	e029      	b.n	8003a2e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <HAL_SD_IRQHandler+0x29a>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d011      	beq.n	8003a12 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <HAL_SD_IRQHandler+0x2e8>)
 80039f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fd7a 	bl	80014f4 <HAL_DMA_Abort_IT>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d013      	beq.n	8003a2e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fae3 	bl	8003fd6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a10:	e00d      	b.n	8003a2e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f001 ff6e 	bl	8005908 <HAL_SD_AbortCallback>
}
 8003a2c:	e7ff      	b.n	8003a2e <HAL_SD_IRQHandler+0x2da>
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	08003f69 	.word	0x08003f69
 8003a3c:	08003fd7 	.word	0x08003fd7

08003a40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a62:	0f9b      	lsrs	r3, r3, #30
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a6e:	0e9b      	lsrs	r3, r3, #26
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a80:	0e1b      	lsrs	r3, r3, #24
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab4:	0d1b      	lsrs	r3, r3, #20
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad2:	0bdb      	lsrs	r3, r3, #15
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae4:	0b9b      	lsrs	r3, r3, #14
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af6:	0b5b      	lsrs	r3, r3, #13
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b08:	0b1b      	lsrs	r3, r3, #12
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d163      	bne.n	8003bec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b28:	009a      	lsls	r2, r3, #2
 8003b2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b2e:	4013      	ands	r3, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003b34:	0f92      	lsrs	r2, r2, #30
 8003b36:	431a      	orrs	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b40:	0edb      	lsrs	r3, r3, #27
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b52:	0e1b      	lsrs	r3, r3, #24
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b64:	0d5b      	lsrs	r3, r3, #21
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b88:	0bdb      	lsrs	r3, r3, #15
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	7e1b      	ldrb	r3, [r3, #24]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	3302      	adds	r3, #2
 8003bac:	2201      	movs	r2, #1
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003bb6:	fb03 f202 	mul.w	r2, r3, r2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	7a1b      	ldrb	r3, [r3, #8]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	2201      	movs	r2, #1
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003bd8:	0a52      	lsrs	r2, r2, #9
 8003bda:	fb03 f202 	mul.w	r2, r3, r2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be8:	661a      	str	r2, [r3, #96]	; 0x60
 8003bea:	e031      	b.n	8003c50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d11d      	bne.n	8003c30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	431a      	orrs	r2, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	029a      	lsls	r2, r3, #10
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c24:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	661a      	str	r2, [r3, #96]	; 0x60
 8003c2e:	e00f      	b.n	8003c50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a58      	ldr	r2, [pc, #352]	; (8003d98 <HAL_SD_GetCardCSD+0x344>)
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e09d      	b.n	8003d8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c54:	0b9b      	lsrs	r3, r3, #14
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c66:	09db      	lsrs	r3, r3, #7
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	0fdb      	lsrs	r3, r3, #31
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	0f5b      	lsrs	r3, r3, #29
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	0e9b      	lsrs	r3, r3, #26
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	0d9b      	lsrs	r3, r3, #22
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	0d5b      	lsrs	r3, r3, #21
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	0bdb      	lsrs	r3, r3, #15
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	0b9b      	lsrs	r3, r3, #14
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	0b5b      	lsrs	r3, r3, #13
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	0b1b      	lsrs	r3, r3, #12
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	0a9b      	lsrs	r3, r3, #10
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	085b      	lsrs	r3, r3, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	004005ff 	.word	0x004005ff

08003d9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003df4:	b5b0      	push	{r4, r5, r7, lr}
 8003df6:	b08e      	sub	sp, #56	; 0x38
 8003df8:	af04      	add	r7, sp, #16
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2203      	movs	r2, #3
 8003e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d02e      	beq.n	8003e72 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d106      	bne.n	8003e2a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
 8003e28:	e029      	b.n	8003e7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e30:	d10a      	bne.n	8003e48 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa8a 	bl	800434c <SD_WideBus_Enable>
 8003e38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
 8003e46:	e01a      	b.n	8003e7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fac7 	bl	80043e2 <SD_WideBus_Disable>
 8003e54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
 8003e62:	e00c      	b.n	8003e7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e70:	e005      	b.n	8003e7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e9c:	e01f      	b.n	8003ede <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681d      	ldr	r5, [r3, #0]
 8003ec4:	466c      	mov	r4, sp
 8003ec6:	f107 0314 	add.w	r3, r7, #20
 8003eca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ed2:	f107 0308 	add.w	r3, r7, #8
 8003ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f000 ff07 	bl	8004cec <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 ffdb 	bl	8004ea2 <SDMMC_CmdBlockLength>
 8003eec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00c      	beq.n	8003f0e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3728      	adds	r7, #40	; 0x28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bdb0      	pop	{r4, r5, r7, pc}
 8003f22:	bf00      	nop
 8003f24:	004005ff 	.word	0x004005ff

08003f28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003f34:	f107 030c 	add.w	r3, r7, #12
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f9de 	bl	80042fc <SD_SendStatus>
 8003f40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	0a5b      	lsrs	r3, r3, #9
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003f5e:	693b      	ldr	r3, [r7, #16]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff ffd1 	bl	8003f28 <HAL_SD_GetCardState>
 8003f86:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b06      	cmp	r3, #6
 8003f9a:	d002      	beq.n	8003fa2 <SD_DMATxAbort+0x3a>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b05      	cmp	r3, #5
 8003fa0:	d10a      	bne.n	8003fb8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 f826 	bl	8004ff8 <SDMMC_CmdStopTransfer>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d103      	bne.n	8003fc8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f001 fca1 	bl	8005908 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003fc6:	e002      	b.n	8003fce <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff fd39 	bl	8003a40 <HAL_SD_ErrorCallback>
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff ff9a 	bl	8003f28 <HAL_SD_GetCardState>
 8003ff4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b06      	cmp	r3, #6
 8004008:	d002      	beq.n	8004010 <SD_DMARxAbort+0x3a>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b05      	cmp	r3, #5
 800400e:	d10a      	bne.n	8004026 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 ffef 	bl	8004ff8 <SDMMC_CmdStopTransfer>
 800401a:	4602      	mov	r2, r0
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f001 fc6a 	bl	8005908 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004034:	e002      	b.n	800403c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff fd02 	bl	8003a40 <HAL_SD_ErrorCallback>
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004044:	b5b0      	push	{r4, r5, r7, lr}
 8004046:	b094      	sub	sp, #80	; 0x50
 8004048:	af04      	add	r7, sp, #16
 800404a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800404c:	2301      	movs	r3, #1
 800404e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fea0 	bl	8004d9a <SDIO_GetPowerState>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004060:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004064:	e0b8      	b.n	80041d8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	2b03      	cmp	r3, #3
 800406c:	d02f      	beq.n	80040ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f001 f8ca 	bl	800520c <SDMMC_CmdSendCID>
 8004078:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800407a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <SD_InitCard+0x40>
    {
      return errorstate;
 8004080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004082:	e0a9      	b.n	80041d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 feca 	bl	8004e24 <SDIO_GetResponse>
 8004090:	4602      	mov	r2, r0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2104      	movs	r1, #4
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fec1 	bl	8004e24 <SDIO_GetResponse>
 80040a2:	4602      	mov	r2, r0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2108      	movs	r1, #8
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 feb8 	bl	8004e24 <SDIO_GetResponse>
 80040b4:	4602      	mov	r2, r0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	210c      	movs	r1, #12
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 feaf 	bl	8004e24 <SDIO_GetResponse>
 80040c6:	4602      	mov	r2, r0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d00d      	beq.n	80040f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f107 020e 	add.w	r2, r7, #14
 80040de:	4611      	mov	r1, r2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 f8d0 	bl	8005286 <SDMMC_CmdSetRelAdd>
 80040e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80040e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <SD_InitCard+0xae>
    {
      return errorstate;
 80040ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f0:	e072      	b.n	80041d8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d036      	beq.n	8004168 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80040fa:	89fb      	ldrh	r3, [r7, #14]
 80040fc:	461a      	mov	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f001 f89a 	bl	8005248 <SDMMC_CmdSendCSD>
 8004114:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <SD_InitCard+0xdc>
    {
      return errorstate;
 800411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411e:	e05b      	b.n	80041d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fe7c 	bl	8004e24 <SDIO_GetResponse>
 800412c:	4602      	mov	r2, r0
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2104      	movs	r1, #4
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fe73 	bl	8004e24 <SDIO_GetResponse>
 800413e:	4602      	mov	r2, r0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2108      	movs	r1, #8
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fe6a 	bl	8004e24 <SDIO_GetResponse>
 8004150:	4602      	mov	r2, r0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	210c      	movs	r1, #12
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fe61 	bl	8004e24 <SDIO_GetResponse>
 8004162:	4602      	mov	r2, r0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2104      	movs	r1, #4
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fe58 	bl	8004e24 <SDIO_GetResponse>
 8004174:	4603      	mov	r3, r0
 8004176:	0d1a      	lsrs	r2, r3, #20
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800417c:	f107 0310 	add.w	r3, r7, #16
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff fc66 	bl	8003a54 <HAL_SD_GetCardCSD>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800418e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004192:	e021      	b.n	80041d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6819      	ldr	r1, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	2200      	movs	r2, #0
 80041a0:	461c      	mov	r4, r3
 80041a2:	4615      	mov	r5, r2
 80041a4:	4622      	mov	r2, r4
 80041a6:	462b      	mov	r3, r5
 80041a8:	4608      	mov	r0, r1
 80041aa:	f000 ff47 	bl	800503c <SDMMC_CmdSelDesel>
 80041ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80041b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <SD_InitCard+0x176>
  {
    return errorstate;
 80041b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b8:	e00e      	b.n	80041d8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681d      	ldr	r5, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	466c      	mov	r4, sp
 80041c2:	f103 0210 	add.w	r2, r3, #16
 80041c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80041c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041cc:	3304      	adds	r3, #4
 80041ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 fd8b 	bl	8004cec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3740      	adds	r7, #64	; 0x40
 80041dc:	46bd      	mov	sp, r7
 80041de:	bdb0      	pop	{r4, r5, r7, pc}

080041e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 ff42 	bl	8005082 <SDMMC_CmdGoIdleState>
 80041fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	e072      	b.n	80042f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 ff55 	bl	80050be <SDMMC_CmdOperCond>
 8004214:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 ff2b 	bl	8005082 <SDMMC_CmdGoIdleState>
 800422c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	e05b      	b.n	80042f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004242:	2b01      	cmp	r3, #1
 8004244:	d137      	bne.n	80042b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f000 ff55 	bl	80050fc <SDMMC_CmdAppCommand>
 8004252:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02d      	beq.n	80042b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800425a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800425e:	e047      	b.n	80042f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2100      	movs	r1, #0
 8004266:	4618      	mov	r0, r3
 8004268:	f000 ff48 	bl	80050fc <SDMMC_CmdAppCommand>
 800426c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <SD_PowerON+0x98>
    {
      return errorstate;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	e03b      	b.n	80042f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	491e      	ldr	r1, [pc, #120]	; (80042f8 <SD_PowerON+0x118>)
 800427e:	4618      	mov	r0, r3
 8004280:	f000 ff5e 	bl	8005140 <SDMMC_CmdAppOperCommand>
 8004284:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800428c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004290:	e02e      	b.n	80042f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fdc3 	bl	8004e24 <SDIO_GetResponse>
 800429e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	0fdb      	lsrs	r3, r3, #31
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <SD_PowerON+0xcc>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <SD_PowerON+0xce>
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]

    count++;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	3301      	adds	r3, #1
 80042b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80042bc:	4293      	cmp	r3, r2
 80042be:	d802      	bhi.n	80042c6 <SD_PowerON+0xe6>
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0cc      	beq.n	8004260 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d902      	bls.n	80042d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80042d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d4:	e00c      	b.n	80042f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
 80042e6:	e002      	b.n	80042ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	c1100000 	.word	0xc1100000

080042fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d102      	bne.n	8004312 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800430c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004310:	e018      	b.n	8004344 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 ffd2 	bl	80052c8 <SDMMC_CmdSendStatus>
 8004324:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <SD_SendStatus+0x34>
  {
    return errorstate;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	e009      	b.n	8004344 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fd74 	bl	8004e24 <SDIO_GetResponse>
 800433c:	4602      	mov	r2, r0
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fd5e 	bl	8004e24 <SDIO_GetResponse>
 8004368:	4603      	mov	r3, r0
 800436a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004372:	d102      	bne.n	800437a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004378:	e02f      	b.n	80043da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800437a:	f107 030c 	add.w	r3, r7, #12
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f879 	bl	8004478 <SD_FindSCR>
 8004386:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	e023      	b.n	80043da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01c      	beq.n	80043d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f000 fea7 	bl	80050fc <SDMMC_CmdAppCommand>
 80043ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	e00f      	b.n	80043da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2102      	movs	r1, #2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fee0 	bl	8005186 <SDMMC_CmdBusWidth>
 80043c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	e003      	b.n	80043da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e001      	b.n	80043da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80043d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b086      	sub	sp, #24
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fd13 	bl	8004e24 <SDIO_GetResponse>
 80043fe:	4603      	mov	r3, r0
 8004400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004408:	d102      	bne.n	8004410 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800440a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800440e:	e02f      	b.n	8004470 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004410:	f107 030c 	add.w	r3, r7, #12
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f82e 	bl	8004478 <SD_FindSCR>
 800441c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	e023      	b.n	8004470 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01c      	beq.n	800446c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f000 fe5c 	bl	80050fc <SDMMC_CmdAppCommand>
 8004444:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	e00f      	b.n	8004470 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2100      	movs	r1, #0
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fe95 	bl	8005186 <SDMMC_CmdBusWidth>
 800445c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	e003      	b.n	8004470 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004468:	2300      	movs	r3, #0
 800446a:	e001      	b.n	8004470 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800446c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b08f      	sub	sp, #60	; 0x3c
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004482:	f7fc fe2b 	bl	80010dc <HAL_GetTick>
 8004486:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800448c:	2300      	movs	r3, #0
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2108      	movs	r1, #8
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fcff 	bl	8004ea2 <SDMMC_CmdBlockLength>
 80044a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	e0b2      	b.n	8004616 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f000 fe1d 	bl	80050fc <SDMMC_CmdAppCommand>
 80044c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	e0a3      	b.n	8004616 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80044ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80044d4:	2308      	movs	r3, #8
 80044d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80044d8:	2330      	movs	r3, #48	; 0x30
 80044da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80044dc:	2302      	movs	r3, #2
 80044de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f107 0210 	add.w	r2, r7, #16
 80044f0:	4611      	mov	r1, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fca9 	bl	8004e4a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fe64 	bl	80051ca <SDMMC_CmdSendSCR>
 8004502:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d02a      	beq.n	8004560 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	e083      	b.n	8004616 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00f      	beq.n	800453c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	f107 0208 	add.w	r2, r7, #8
 8004528:	18d4      	adds	r4, r2, r3
 800452a:	4608      	mov	r0, r1
 800452c:	f000 fc09 	bl	8004d42 <SDIO_ReadFIFO>
 8004530:	4603      	mov	r3, r0
 8004532:	6023      	str	r3, [r4, #0]
      index++;
 8004534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004536:	3301      	adds	r3, #1
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
 800453a:	e006      	b.n	800454a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d012      	beq.n	8004570 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800454a:	f7fc fdc7 	bl	80010dc <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004558:	d102      	bne.n	8004560 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800455a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800455e:	e05a      	b.n	8004616 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0cf      	beq.n	800450e <SD_FindSCR+0x96>
 800456e:	e000      	b.n	8004572 <SD_FindSCR+0xfa>
      break;
 8004570:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2208      	movs	r2, #8
 8004586:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004588:	2308      	movs	r3, #8
 800458a:	e044      	b.n	8004616 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2202      	movs	r2, #2
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80045a2:	2302      	movs	r3, #2
 80045a4:	e037      	b.n	8004616 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2220      	movs	r2, #32
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80045bc:	2320      	movs	r3, #32
 80045be:	e02a      	b.n	8004616 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	061a      	lsls	r2, r3, #24
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80045e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	0e1b      	lsrs	r3, r3, #24
 80045e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	601a      	str	r2, [r3, #0]
    scr++;
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	3304      	adds	r3, #4
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	061a      	lsls	r2, r3, #24
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004608:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	0e1b      	lsrs	r3, r3, #24
 800460e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	373c      	adds	r7, #60	; 0x3c
 800461a:	46bd      	mov	sp, r7
 800461c:	bd90      	pop	{r4, r7, pc}

0800461e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d03f      	beq.n	80046b8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e033      	b.n	80046a6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fb7d 	bl	8004d42 <SDIO_ReadFIFO>
 8004648:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	b2da      	uxtb	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	3b01      	subs	r3, #1
 800465c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	3b01      	subs	r3, #1
 8004672:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3301      	adds	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	3b01      	subs	r3, #1
 8004688:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	0e1b      	lsrs	r3, r3, #24
 800468e:	b2da      	uxtb	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3301      	adds	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	3b01      	subs	r3, #1
 800469e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	3301      	adds	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b07      	cmp	r3, #7
 80046aa:	d9c8      	bls.n	800463e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80046b8:	bf00      	nop
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d043      	beq.n	8004762 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e037      	b.n	8004750 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3301      	adds	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	021a      	lsls	r2, r3, #8
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3301      	adds	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	3b01      	subs	r3, #1
 8004708:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	041a      	lsls	r2, r3, #16
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4313      	orrs	r3, r2
 8004714:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	3b01      	subs	r3, #1
 8004720:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	061a      	lsls	r2, r3, #24
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4313      	orrs	r3, r2
 800472c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3301      	adds	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3b01      	subs	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f107 0208 	add.w	r2, r7, #8
 8004742:	4611      	mov	r1, r2
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fb09 	bl	8004d5c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	3301      	adds	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b07      	cmp	r3, #7
 8004754:	d9c4      	bls.n	80046e0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004762:	bf00      	nop
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e03f      	b.n	80047fc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fc fb3b 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2224      	movs	r2, #36	; 0x24
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f828 	bl	8004804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004808:	b0c0      	sub	sp, #256	; 0x100
 800480a:	af00      	add	r7, sp, #0
 800480c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	68d9      	ldr	r1, [r3, #12]
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	ea40 0301 	orr.w	r3, r0, r1
 800482c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	431a      	orrs	r2, r3
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	431a      	orrs	r2, r3
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800485c:	f021 010c 	bic.w	r1, r1, #12
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800486a:	430b      	orrs	r3, r1
 800486c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487e:	6999      	ldr	r1, [r3, #24]
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	ea40 0301 	orr.w	r3, r0, r1
 800488a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b8f      	ldr	r3, [pc, #572]	; (8004ad0 <UART_SetConfig+0x2cc>)
 8004894:	429a      	cmp	r2, r3
 8004896:	d005      	beq.n	80048a4 <UART_SetConfig+0xa0>
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b8d      	ldr	r3, [pc, #564]	; (8004ad4 <UART_SetConfig+0x2d0>)
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d104      	bne.n	80048ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048a4:	f7fd fb36 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 80048a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048ac:	e003      	b.n	80048b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ae:	f7fd fb1d 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 80048b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c0:	f040 810c 	bne.w	8004adc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048d6:	4622      	mov	r2, r4
 80048d8:	462b      	mov	r3, r5
 80048da:	1891      	adds	r1, r2, r2
 80048dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80048de:	415b      	adcs	r3, r3
 80048e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048e6:	4621      	mov	r1, r4
 80048e8:	eb12 0801 	adds.w	r8, r2, r1
 80048ec:	4629      	mov	r1, r5
 80048ee:	eb43 0901 	adc.w	r9, r3, r1
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004906:	4690      	mov	r8, r2
 8004908:	4699      	mov	r9, r3
 800490a:	4623      	mov	r3, r4
 800490c:	eb18 0303 	adds.w	r3, r8, r3
 8004910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004914:	462b      	mov	r3, r5
 8004916:	eb49 0303 	adc.w	r3, r9, r3
 800491a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800492a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800492e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004932:	460b      	mov	r3, r1
 8004934:	18db      	adds	r3, r3, r3
 8004936:	653b      	str	r3, [r7, #80]	; 0x50
 8004938:	4613      	mov	r3, r2
 800493a:	eb42 0303 	adc.w	r3, r2, r3
 800493e:	657b      	str	r3, [r7, #84]	; 0x54
 8004940:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004944:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004948:	f7fb fcc2 	bl	80002d0 <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4b61      	ldr	r3, [pc, #388]	; (8004ad8 <UART_SetConfig+0x2d4>)
 8004952:	fba3 2302 	umull	r2, r3, r3, r2
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	011c      	lsls	r4, r3, #4
 800495a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495e:	2200      	movs	r2, #0
 8004960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004964:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004968:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800496c:	4642      	mov	r2, r8
 800496e:	464b      	mov	r3, r9
 8004970:	1891      	adds	r1, r2, r2
 8004972:	64b9      	str	r1, [r7, #72]	; 0x48
 8004974:	415b      	adcs	r3, r3
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004978:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800497c:	4641      	mov	r1, r8
 800497e:	eb12 0a01 	adds.w	sl, r2, r1
 8004982:	4649      	mov	r1, r9
 8004984:	eb43 0b01 	adc.w	fp, r3, r1
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004994:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800499c:	4692      	mov	sl, r2
 800499e:	469b      	mov	fp, r3
 80049a0:	4643      	mov	r3, r8
 80049a2:	eb1a 0303 	adds.w	r3, sl, r3
 80049a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049aa:	464b      	mov	r3, r9
 80049ac:	eb4b 0303 	adc.w	r3, fp, r3
 80049b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049c8:	460b      	mov	r3, r1
 80049ca:	18db      	adds	r3, r3, r3
 80049cc:	643b      	str	r3, [r7, #64]	; 0x40
 80049ce:	4613      	mov	r3, r2
 80049d0:	eb42 0303 	adc.w	r3, r2, r3
 80049d4:	647b      	str	r3, [r7, #68]	; 0x44
 80049d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049de:	f7fb fc77 	bl	80002d0 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4611      	mov	r1, r2
 80049e8:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <UART_SetConfig+0x2d4>)
 80049ea:	fba3 2301 	umull	r2, r3, r3, r1
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2264      	movs	r2, #100	; 0x64
 80049f2:	fb02 f303 	mul.w	r3, r2, r3
 80049f6:	1acb      	subs	r3, r1, r3
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049fe:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <UART_SetConfig+0x2d4>)
 8004a00:	fba3 2302 	umull	r2, r3, r3, r2
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a0c:	441c      	add	r4, r3
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	1891      	adds	r1, r2, r2
 8004a26:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a28:	415b      	adcs	r3, r3
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a30:	4641      	mov	r1, r8
 8004a32:	1851      	adds	r1, r2, r1
 8004a34:	6339      	str	r1, [r7, #48]	; 0x30
 8004a36:	4649      	mov	r1, r9
 8004a38:	414b      	adcs	r3, r1
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a48:	4659      	mov	r1, fp
 8004a4a:	00cb      	lsls	r3, r1, #3
 8004a4c:	4651      	mov	r1, sl
 8004a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a52:	4651      	mov	r1, sl
 8004a54:	00ca      	lsls	r2, r1, #3
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a64:	464b      	mov	r3, r9
 8004a66:	460a      	mov	r2, r1
 8004a68:	eb42 0303 	adc.w	r3, r2, r3
 8004a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a84:	460b      	mov	r3, r1
 8004a86:	18db      	adds	r3, r3, r3
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	eb42 0303 	adc.w	r3, r2, r3
 8004a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a9a:	f7fb fc19 	bl	80002d0 <__aeabi_uldivmod>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <UART_SetConfig+0x2d4>)
 8004aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	2164      	movs	r1, #100	; 0x64
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	3332      	adds	r3, #50	; 0x32
 8004ab6:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <UART_SetConfig+0x2d4>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	f003 0207 	and.w	r2, r3, #7
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4422      	add	r2, r4
 8004aca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004acc:	e105      	b.n	8004cda <UART_SetConfig+0x4d6>
 8004ace:	bf00      	nop
 8004ad0:	40011000 	.word	0x40011000
 8004ad4:	40011400 	.word	0x40011400
 8004ad8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ae6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004aea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aee:	4642      	mov	r2, r8
 8004af0:	464b      	mov	r3, r9
 8004af2:	1891      	adds	r1, r2, r2
 8004af4:	6239      	str	r1, [r7, #32]
 8004af6:	415b      	adcs	r3, r3
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
 8004afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004afe:	4641      	mov	r1, r8
 8004b00:	1854      	adds	r4, r2, r1
 8004b02:	4649      	mov	r1, r9
 8004b04:	eb43 0501 	adc.w	r5, r3, r1
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	00eb      	lsls	r3, r5, #3
 8004b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b16:	00e2      	lsls	r2, r4, #3
 8004b18:	4614      	mov	r4, r2
 8004b1a:	461d      	mov	r5, r3
 8004b1c:	4643      	mov	r3, r8
 8004b1e:	18e3      	adds	r3, r4, r3
 8004b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b24:	464b      	mov	r3, r9
 8004b26:	eb45 0303 	adc.w	r3, r5, r3
 8004b2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	008b      	lsls	r3, r1, #2
 8004b4e:	4621      	mov	r1, r4
 8004b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b54:	4621      	mov	r1, r4
 8004b56:	008a      	lsls	r2, r1, #2
 8004b58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b5c:	f7fb fbb8 	bl	80002d0 <__aeabi_uldivmod>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4b60      	ldr	r3, [pc, #384]	; (8004ce8 <UART_SetConfig+0x4e4>)
 8004b66:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	011c      	lsls	r4, r3, #4
 8004b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b80:	4642      	mov	r2, r8
 8004b82:	464b      	mov	r3, r9
 8004b84:	1891      	adds	r1, r2, r2
 8004b86:	61b9      	str	r1, [r7, #24]
 8004b88:	415b      	adcs	r3, r3
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b90:	4641      	mov	r1, r8
 8004b92:	1851      	adds	r1, r2, r1
 8004b94:	6139      	str	r1, [r7, #16]
 8004b96:	4649      	mov	r1, r9
 8004b98:	414b      	adcs	r3, r1
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ba8:	4659      	mov	r1, fp
 8004baa:	00cb      	lsls	r3, r1, #3
 8004bac:	4651      	mov	r1, sl
 8004bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb2:	4651      	mov	r1, sl
 8004bb4:	00ca      	lsls	r2, r1, #3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	eb42 0303 	adc.w	r3, r2, r3
 8004bcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004be8:	4649      	mov	r1, r9
 8004bea:	008b      	lsls	r3, r1, #2
 8004bec:	4641      	mov	r1, r8
 8004bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	008a      	lsls	r2, r1, #2
 8004bf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bfa:	f7fb fb69 	bl	80002d0 <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4b39      	ldr	r3, [pc, #228]	; (8004ce8 <UART_SetConfig+0x4e4>)
 8004c04:	fba3 1302 	umull	r1, r3, r3, r2
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	2164      	movs	r1, #100	; 0x64
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	3332      	adds	r3, #50	; 0x32
 8004c16:	4a34      	ldr	r2, [pc, #208]	; (8004ce8 <UART_SetConfig+0x4e4>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c22:	441c      	add	r4, r3
 8004c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c28:	2200      	movs	r2, #0
 8004c2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c2c:	677a      	str	r2, [r7, #116]	; 0x74
 8004c2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c32:	4642      	mov	r2, r8
 8004c34:	464b      	mov	r3, r9
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c42:	4641      	mov	r1, r8
 8004c44:	1851      	adds	r1, r2, r1
 8004c46:	6039      	str	r1, [r7, #0]
 8004c48:	4649      	mov	r1, r9
 8004c4a:	414b      	adcs	r3, r1
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c5a:	4659      	mov	r1, fp
 8004c5c:	00cb      	lsls	r3, r1, #3
 8004c5e:	4651      	mov	r1, sl
 8004c60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c64:	4651      	mov	r1, sl
 8004c66:	00ca      	lsls	r2, r1, #3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4642      	mov	r2, r8
 8004c70:	189b      	adds	r3, r3, r2
 8004c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c74:	464b      	mov	r3, r9
 8004c76:	460a      	mov	r2, r1
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	663b      	str	r3, [r7, #96]	; 0x60
 8004c88:	667a      	str	r2, [r7, #100]	; 0x64
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c96:	4649      	mov	r1, r9
 8004c98:	008b      	lsls	r3, r1, #2
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	008a      	lsls	r2, r1, #2
 8004ca4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ca8:	f7fb fb12 	bl	80002d0 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <UART_SetConfig+0x4e4>)
 8004cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	2164      	movs	r1, #100	; 0x64
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	3332      	adds	r3, #50	; 0x32
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <UART_SetConfig+0x4e4>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	f003 020f 	and.w	r2, r3, #15
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4422      	add	r2, r4
 8004cd8:	609a      	str	r2, [r3, #8]
}
 8004cda:	bf00      	nop
 8004cdc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ce6:	bf00      	nop
 8004ce8:	51eb851f 	.word	0x51eb851f

08004cec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004cec:	b084      	sub	sp, #16
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	f107 001c 	add.w	r0, r7, #28
 8004cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004d02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004d04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004d06:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004d0a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004d0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004d12:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004d16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004d26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	b004      	add	sp, #16
 8004d40:	4770      	bx	lr

08004d42 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2203      	movs	r2, #3
 8004d8a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0303 	and.w	r3, r3, #3
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004dd4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004dda:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004de0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004df0:	f023 030f 	bic.w	r3, r3, #15
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	b2db      	uxtb	r3, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3314      	adds	r3, #20
 8004e32:	461a      	mov	r2, r3
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	4413      	add	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
}  
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e70:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004e76:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004e7c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0

}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b088      	sub	sp, #32
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eb4:	2340      	movs	r3, #64	; 0x40
 8004eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ec0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ec2:	f107 0308 	add.w	r3, r7, #8
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff ff74 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fa19 	bl	800530c <SDMMC_GetCmdResp1>
 8004eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004edc:	69fb      	ldr	r3, [r7, #28]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b088      	sub	sp, #32
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004ef4:	2311      	movs	r3, #17
 8004ef6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ef8:	2340      	movs	r3, #64	; 0x40
 8004efa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f06:	f107 0308 	add.w	r3, r7, #8
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ff52 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	2111      	movs	r1, #17
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f9f7 	bl	800530c <SDMMC_GetCmdResp1>
 8004f1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f20:	69fb      	ldr	r3, [r7, #28]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b088      	sub	sp, #32
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004f38:	2312      	movs	r3, #18
 8004f3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f3c:	2340      	movs	r3, #64	; 0x40
 8004f3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f4a:	f107 0308 	add.w	r3, r7, #8
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff ff30 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5a:	2112      	movs	r1, #18
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f9d5 	bl	800530c <SDMMC_GetCmdResp1>
 8004f62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f64:	69fb      	ldr	r3, [r7, #28]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b088      	sub	sp, #32
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004f7c:	2318      	movs	r3, #24
 8004f7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f80:	2340      	movs	r3, #64	; 0x40
 8004f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff ff0e 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	2118      	movs	r1, #24
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f9b3 	bl	800530c <SDMMC_GetCmdResp1>
 8004fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b088      	sub	sp, #32
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004fc0:	2319      	movs	r3, #25
 8004fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fd2:	f107 0308 	add.w	r3, r7, #8
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff feec 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe2:	2119      	movs	r1, #25
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f991 	bl	800530c <SDMMC_GetCmdResp1>
 8004fea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fec:	69fb      	ldr	r3, [r7, #28]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005004:	230c      	movs	r3, #12
 8005006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005008:	2340      	movs	r3, #64	; 0x40
 800500a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005014:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005016:	f107 0308 	add.w	r3, r7, #8
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff feca 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005022:	4a05      	ldr	r2, [pc, #20]	; (8005038 <SDMMC_CmdStopTransfer+0x40>)
 8005024:	210c      	movs	r1, #12
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f970 	bl	800530c <SDMMC_GetCmdResp1>
 800502c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800502e:	69fb      	ldr	r3, [r7, #28]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	05f5e100 	.word	0x05f5e100

0800503c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800504c:	2307      	movs	r3, #7
 800504e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005050:	2340      	movs	r3, #64	; 0x40
 8005052:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800505c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800505e:	f107 0310 	add.w	r3, r7, #16
 8005062:	4619      	mov	r1, r3
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7ff fea6 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800506a:	f241 3288 	movw	r2, #5000	; 0x1388
 800506e:	2107      	movs	r1, #7
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f94b 	bl	800530c <SDMMC_GetCmdResp1>
 8005076:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800507a:	4618      	mov	r0, r3
 800507c:	3728      	adds	r7, #40	; 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b088      	sub	sp, #32
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800509a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050a0:	f107 0308 	add.w	r3, r7, #8
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fe85 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fb65 	bl	800577c <SDMMC_GetCmdError>
 80050b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050b4:	69fb      	ldr	r3, [r7, #28]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3720      	adds	r7, #32
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b088      	sub	sp, #32
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80050c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80050ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80050cc:	2308      	movs	r3, #8
 80050ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050d0:	2340      	movs	r3, #64	; 0x40
 80050d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050de:	f107 0308 	add.w	r3, r7, #8
 80050e2:	4619      	mov	r1, r3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff fe66 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 faf8 	bl	80056e0 <SDMMC_GetCmdResp7>
 80050f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050f2:	69fb      	ldr	r3, [r7, #28]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800510a:	2337      	movs	r3, #55	; 0x37
 800510c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800510e:	2340      	movs	r3, #64	; 0x40
 8005110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800511a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800511c:	f107 0308 	add.w	r3, r7, #8
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff fe47 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	2137      	movs	r1, #55	; 0x37
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8ec 	bl	800530c <SDMMC_GetCmdResp1>
 8005134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005136:	69fb      	ldr	r3, [r7, #28]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005156:	2329      	movs	r3, #41	; 0x29
 8005158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800515a:	2340      	movs	r3, #64	; 0x40
 800515c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005166:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005168:	f107 0308 	add.w	r3, r7, #8
 800516c:	4619      	mov	r1, r3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff fe21 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f9ff 	bl	8005578 <SDMMC_GetCmdResp3>
 800517a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800517c:	69fb      	ldr	r3, [r7, #28]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b088      	sub	sp, #32
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005194:	2306      	movs	r3, #6
 8005196:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051a6:	f107 0308 	add.w	r3, r7, #8
 80051aa:	4619      	mov	r1, r3
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff fe02 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80051b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b6:	2106      	movs	r1, #6
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f8a7 	bl	800530c <SDMMC_GetCmdResp1>
 80051be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051c0:	69fb      	ldr	r3, [r7, #28]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b088      	sub	sp, #32
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80051d6:	2333      	movs	r3, #51	; 0x33
 80051d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051da:	2340      	movs	r3, #64	; 0x40
 80051dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051e8:	f107 0308 	add.w	r3, r7, #8
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff fde1 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80051f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f8:	2133      	movs	r1, #51	; 0x33
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f886 	bl	800530c <SDMMC_GetCmdResp1>
 8005200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005202:	69fb      	ldr	r3, [r7, #28]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3720      	adds	r7, #32
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005218:	2302      	movs	r3, #2
 800521a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800521c:	23c0      	movs	r3, #192	; 0xc0
 800521e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005228:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff fdc0 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f956 	bl	80054e8 <SDMMC_GetCmdResp2>
 800523c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800523e:	69fb      	ldr	r3, [r7, #28]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3720      	adds	r7, #32
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005256:	2309      	movs	r3, #9
 8005258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800525a:	23c0      	movs	r3, #192	; 0xc0
 800525c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005266:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005268:	f107 0308 	add.w	r3, r7, #8
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fda1 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f937 	bl	80054e8 <SDMMC_GetCmdResp2>
 800527a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800527c:	69fb      	ldr	r3, [r7, #28]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b088      	sub	sp, #32
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005294:	2303      	movs	r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005298:	2340      	movs	r3, #64	; 0x40
 800529a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052a6:	f107 0308 	add.w	r3, r7, #8
 80052aa:	4619      	mov	r1, r3
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff fd82 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	2103      	movs	r1, #3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f99c 	bl	80055f4 <SDMMC_GetCmdResp6>
 80052bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052be:	69fb      	ldr	r3, [r7, #28]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80052d6:	230d      	movs	r3, #13
 80052d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052da:	2340      	movs	r3, #64	; 0x40
 80052dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052e8:	f107 0308 	add.w	r3, r7, #8
 80052ec:	4619      	mov	r1, r3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff fd61 	bl	8004db6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80052f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f8:	210d      	movs	r1, #13
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f806 	bl	800530c <SDMMC_GetCmdResp1>
 8005300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005302:	69fb      	ldr	r3, [r7, #28]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	460b      	mov	r3, r1
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800531a:	4b70      	ldr	r3, [pc, #448]	; (80054dc <SDMMC_GetCmdResp1+0x1d0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a70      	ldr	r2, [pc, #448]	; (80054e0 <SDMMC_GetCmdResp1+0x1d4>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	0a5a      	lsrs	r2, r3, #9
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	fb02 f303 	mul.w	r3, r2, r3
 800532c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	1e5a      	subs	r2, r3, #1
 8005332:	61fa      	str	r2, [r7, #28]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800533c:	e0c9      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0ef      	beq.n	800532e <SDMMC_GetCmdResp1+0x22>
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1ea      	bne.n	800532e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2204      	movs	r2, #4
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800536a:	2304      	movs	r3, #4
 800536c:	e0b1      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005380:	2301      	movs	r3, #1
 8005382:	e0a6      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	22c5      	movs	r2, #197	; 0xc5
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff fd3d 	bl	8004e0a <SDIO_GetCommandResponse>
 8005390:	4603      	mov	r3, r0
 8005392:	461a      	mov	r2, r3
 8005394:	7afb      	ldrb	r3, [r7, #11]
 8005396:	4293      	cmp	r3, r2
 8005398:	d001      	beq.n	800539e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800539a:	2301      	movs	r3, #1
 800539c:	e099      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800539e:	2100      	movs	r1, #0
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff fd3f 	bl	8004e24 <SDIO_GetResponse>
 80053a6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4b4e      	ldr	r3, [pc, #312]	; (80054e4 <SDMMC_GetCmdResp1+0x1d8>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	e08d      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da02      	bge.n	80053c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80053bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053c0:	e087      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80053cc:	2340      	movs	r3, #64	; 0x40
 80053ce:	e080      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80053da:	2380      	movs	r3, #128	; 0x80
 80053dc:	e079      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80053e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053ec:	e071      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80053f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053fc:	e069      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800540c:	e061      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800541c:	e059      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800542c:	e051      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800543c:	e049      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005448:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800544c:	e041      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800545c:	e039      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800546c:	e031      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005478:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800547c:	e029      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005488:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800548c:	e021      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005498:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800549c:	e019      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80054a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054ac:	e011      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80054b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054bc:	e009      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80054c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80054cc:	e001      	b.n	80054d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80054ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000000 	.word	0x20000000
 80054e0:	10624dd3 	.word	0x10624dd3
 80054e4:	fdffe008 	.word	0xfdffe008

080054e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054f0:	4b1f      	ldr	r3, [pc, #124]	; (8005570 <SDMMC_GetCmdResp2+0x88>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <SDMMC_GetCmdResp2+0x8c>)
 80054f6:	fba2 2303 	umull	r2, r3, r2, r3
 80054fa:	0a5b      	lsrs	r3, r3, #9
 80054fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005500:	fb02 f303 	mul.w	r3, r2, r3
 8005504:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1e5a      	subs	r2, r3, #1
 800550a:	60fa      	str	r2, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005514:	e026      	b.n	8005564 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0ef      	beq.n	8005506 <SDMMC_GetCmdResp2+0x1e>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1ea      	bne.n	8005506 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2204      	movs	r2, #4
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005542:	2304      	movs	r3, #4
 8005544:	e00e      	b.n	8005564 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005558:	2301      	movs	r3, #1
 800555a:	e003      	b.n	8005564 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	22c5      	movs	r2, #197	; 0xc5
 8005560:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000000 	.word	0x20000000
 8005574:	10624dd3 	.word	0x10624dd3

08005578 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005580:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <SDMMC_GetCmdResp3+0x74>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <SDMMC_GetCmdResp3+0x78>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	0a5b      	lsrs	r3, r3, #9
 800558c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005590:	fb02 f303 	mul.w	r3, r2, r3
 8005594:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1e5a      	subs	r2, r3, #1
 800559a:	60fa      	str	r2, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055a4:	e01b      	b.n	80055de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0ef      	beq.n	8005596 <SDMMC_GetCmdResp3+0x1e>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1ea      	bne.n	8005596 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2204      	movs	r2, #4
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055d2:	2304      	movs	r3, #4
 80055d4:	e003      	b.n	80055de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	22c5      	movs	r2, #197	; 0xc5
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000000 	.word	0x20000000
 80055f0:	10624dd3 	.word	0x10624dd3

080055f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	460b      	mov	r3, r1
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005602:	4b35      	ldr	r3, [pc, #212]	; (80056d8 <SDMMC_GetCmdResp6+0xe4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a35      	ldr	r2, [pc, #212]	; (80056dc <SDMMC_GetCmdResp6+0xe8>)
 8005608:	fba2 2303 	umull	r2, r3, r2, r3
 800560c:	0a5b      	lsrs	r3, r3, #9
 800560e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	1e5a      	subs	r2, r3, #1
 800561c:	61fa      	str	r2, [r7, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005622:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005626:	e052      	b.n	80056ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0ef      	beq.n	8005618 <SDMMC_GetCmdResp6+0x24>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1ea      	bne.n	8005618 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2204      	movs	r2, #4
 8005652:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005654:	2304      	movs	r3, #4
 8005656:	e03a      	b.n	80056ce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800566a:	2301      	movs	r3, #1
 800566c:	e02f      	b.n	80056ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7ff fbcb 	bl	8004e0a <SDIO_GetCommandResponse>
 8005674:	4603      	mov	r3, r0
 8005676:	461a      	mov	r2, r3
 8005678:	7afb      	ldrb	r3, [r7, #11]
 800567a:	4293      	cmp	r3, r2
 800567c:	d001      	beq.n	8005682 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800567e:	2301      	movs	r3, #1
 8005680:	e025      	b.n	80056ce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	22c5      	movs	r2, #197	; 0xc5
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005688:	2100      	movs	r1, #0
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7ff fbca 	bl	8004e24 <SDIO_GetResponse>
 8005690:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	0c1b      	lsrs	r3, r3, #16
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e011      	b.n	80056ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b8:	e009      	b.n	80056ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056c8:	e001      	b.n	80056ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000000 	.word	0x20000000
 80056dc:	10624dd3 	.word	0x10624dd3

080056e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056e8:	4b22      	ldr	r3, [pc, #136]	; (8005774 <SDMMC_GetCmdResp7+0x94>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a22      	ldr	r2, [pc, #136]	; (8005778 <SDMMC_GetCmdResp7+0x98>)
 80056ee:	fba2 2303 	umull	r2, r3, r2, r3
 80056f2:	0a5b      	lsrs	r3, r3, #9
 80056f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f8:	fb02 f303 	mul.w	r3, r2, r3
 80056fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1e5a      	subs	r2, r3, #1
 8005702:	60fa      	str	r2, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800570c:	e02c      	b.n	8005768 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0ef      	beq.n	80056fe <SDMMC_GetCmdResp7+0x1e>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1ea      	bne.n	80056fe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2204      	movs	r2, #4
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800573a:	2304      	movs	r3, #4
 800573c:	e014      	b.n	8005768 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d004      	beq.n	8005754 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005750:	2301      	movs	r3, #1
 8005752:	e009      	b.n	8005768 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2240      	movs	r2, #64	; 0x40
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005766:	2300      	movs	r3, #0
  
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	20000000 	.word	0x20000000
 8005778:	10624dd3 	.word	0x10624dd3

0800577c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005784:	4b11      	ldr	r3, [pc, #68]	; (80057cc <SDMMC_GetCmdError+0x50>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a11      	ldr	r2, [pc, #68]	; (80057d0 <SDMMC_GetCmdError+0x54>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	0a5b      	lsrs	r3, r3, #9
 8005790:	f241 3288 	movw	r2, #5000	; 0x1388
 8005794:	fb02 f303 	mul.w	r3, r2, r3
 8005798:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1e5a      	subs	r2, r3, #1
 800579e:	60fa      	str	r2, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057a8:	e009      	b.n	80057be <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f1      	beq.n	800579a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	22c5      	movs	r2, #197	; 0xc5
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	20000000 	.word	0x20000000
 80057d0:	10624dd3 	.word	0x10624dd3

080057d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80057d8:	4904      	ldr	r1, [pc, #16]	; (80057ec <MX_FATFS_Init+0x18>)
 80057da:	4805      	ldr	r0, [pc, #20]	; (80057f0 <MX_FATFS_Init+0x1c>)
 80057dc:	f002 fec0 	bl	8008560 <FATFS_LinkDriver>
 80057e0:	4603      	mov	r3, r0
 80057e2:	461a      	mov	r2, r3
 80057e4:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <MX_FATFS_Init+0x20>)
 80057e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80057e8:	bf00      	nop
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000244 	.word	0x20000244
 80057f0:	08008f80 	.word	0x08008f80
 80057f4:	20000240 	.word	0x20000240

080057f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80057fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80057fe:	4618      	mov	r0, r3
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005812:	f000 f8ac 	bl	800596e <BSP_SD_IsDetected>
 8005816:	4603      	mov	r3, r0
 8005818:	2b01      	cmp	r3, #1
 800581a:	d001      	beq.n	8005820 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e012      	b.n	8005846 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005820:	480b      	ldr	r0, [pc, #44]	; (8005850 <BSP_SD_Init+0x48>)
 8005822:	f7fd fb83 	bl	8002f2c <HAL_SD_Init>
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005830:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005834:	4806      	ldr	r0, [pc, #24]	; (8005850 <BSP_SD_Init+0x48>)
 8005836:	f7fe fadd 	bl	8003df4 <HAL_SD_ConfigWideBusOperation>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005844:	79fb      	ldrb	r3, [r7, #7]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000094 	.word	0x20000094

08005854 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	4806      	ldr	r0, [pc, #24]	; (800588c <BSP_SD_ReadBlocks+0x38>)
 8005872:	f7fd fc0b 	bl	800308c <HAL_SD_ReadBlocks>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000094 	.word	0x20000094

08005890 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	4806      	ldr	r0, [pc, #24]	; (80058c8 <BSP_SD_WriteBlocks+0x38>)
 80058ae:	f7fd fdcb 	bl	8003448 <HAL_SD_WriteBlocks>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000094 	.word	0x20000094

080058cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80058d0:	4805      	ldr	r0, [pc, #20]	; (80058e8 <BSP_SD_GetCardState+0x1c>)
 80058d2:	f7fe fb29 	bl	8003f28 <HAL_SD_GetCardState>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b04      	cmp	r3, #4
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000094 	.word	0x20000094

080058ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4803      	ldr	r0, [pc, #12]	; (8005904 <BSP_SD_GetCardInfo+0x18>)
 80058f8:	f7fe fa50 	bl	8003d9c <HAL_SD_GetCardInfo>
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000094 	.word	0x20000094

08005908 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005910:	f000 f818 	bl	8005944 <BSP_SD_AbortCallback>
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005924:	f000 f815 	bl	8005952 <BSP_SD_WriteCpltCallback>
}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005938:	f000 f812 	bl	8005960 <BSP_SD_ReadCpltCallback>
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0

}
 8005948:	bf00      	nop
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8005952:	b480      	push	{r7}
 8005954:	af00      	add	r7, sp, #0

}
 8005956:	bf00      	nop
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0

}
 8005964:	bf00      	nop
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005974:	2301      	movs	r3, #1
 8005976:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005978:	f000 f80c 	bl	8005994 <BSP_PlatformIsDetected>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005982:	2300      	movs	r3, #0
 8005984:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	b2db      	uxtb	r3, r3
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800599a:	2301      	movs	r3, #1
 800599c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800599e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059a2:	4806      	ldr	r0, [pc, #24]	; (80059bc <BSP_PlatformIsDetected+0x28>)
 80059a4:	f7fc f998 	bl	8001cd8 <HAL_GPIO_ReadPin>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80059ae:	2300      	movs	r3, #0
 80059b0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80059b2:	79fb      	ldrb	r3, [r7, #7]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40020400 	.word	0x40020400

080059c0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <SD_CheckStatus+0x38>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80059d0:	f7ff ff7c 	bl	80058cc <BSP_SD_GetCardState>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d107      	bne.n	80059ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80059da:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <SD_CheckStatus+0x38>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <SD_CheckStatus+0x38>)
 80059e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80059ea:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <SD_CheckStatus+0x38>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	b2db      	uxtb	r3, r3
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20000009 	.word	0x20000009

080059fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <SD_initialize+0x38>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005a0c:	f7ff fefc 	bl	8005808 <BSP_SD_Init>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d107      	bne.n	8005a26 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff ffd1 	bl	80059c0 <SD_CheckStatus>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	461a      	mov	r2, r3
 8005a22:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <SD_initialize+0x38>)
 8005a24:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005a26:	4b03      	ldr	r3, [pc, #12]	; (8005a34 <SD_initialize+0x38>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b2db      	uxtb	r3, r3
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000009 	.word	0x20000009

08005a38 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff ffbb 	bl	80059c0 <SD_CheckStatus>
 8005a4a:	4603      	mov	r3, r0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	68b8      	ldr	r0, [r7, #8]
 8005a72:	f7ff feef 	bl	8005854 <BSP_SD_ReadBlocks>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d107      	bne.n	8005a8c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005a7c:	bf00      	nop
 8005a7e:	f7ff ff25 	bl	80058cc <BSP_SD_GetCardState>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1fa      	bne.n	8005a7e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	68b8      	ldr	r0, [r7, #8]
 8005ab4:	f7ff feec 	bl	8005890 <BSP_SD_WriteBlocks>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d107      	bne.n	8005ace <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005abe:	bf00      	nop
 8005ac0:	f7ff ff04 	bl	80058cc <BSP_SD_GetCardState>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1fa      	bne.n	8005ac0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08c      	sub	sp, #48	; 0x30
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	603a      	str	r2, [r7, #0]
 8005ae2:	71fb      	strb	r3, [r7, #7]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005aee:	4b25      	ldr	r3, [pc, #148]	; (8005b84 <SD_ioctl+0xac>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <SD_ioctl+0x28>
 8005afc:	2303      	movs	r3, #3
 8005afe:	e03c      	b.n	8005b7a <SD_ioctl+0xa2>

  switch (cmd)
 8005b00:	79bb      	ldrb	r3, [r7, #6]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d834      	bhi.n	8005b70 <SD_ioctl+0x98>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <SD_ioctl+0x34>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b25 	.word	0x08005b25
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	08005b57 	.word	0x08005b57
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b22:	e028      	b.n	8005b76 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b24:	f107 030c 	add.w	r3, r7, #12
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fedf 	bl	80058ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b3a:	e01c      	b.n	8005b76 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b3c:	f107 030c 	add.w	r3, r7, #12
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fed3 	bl	80058ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b54:	e00f      	b.n	8005b76 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b56:	f107 030c 	add.w	r3, r7, #12
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff fec6 	bl	80058ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	0a5a      	lsrs	r2, r3, #9
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b6e:	e002      	b.n	8005b76 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005b70:	2304      	movs	r3, #4
 8005b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3730      	adds	r7, #48	; 0x30
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000009 	.word	0x20000009

08005b88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b92:	79fb      	ldrb	r3, [r7, #7]
 8005b94:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <disk_status+0x30>)
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	79fa      	ldrb	r2, [r7, #7]
 8005ba0:	4905      	ldr	r1, [pc, #20]	; (8005bb8 <disk_status+0x30>)
 8005ba2:	440a      	add	r2, r1
 8005ba4:	7a12      	ldrb	r2, [r2, #8]
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4798      	blx	r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	200012a4 	.word	0x200012a4

08005bbc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	4a0d      	ldr	r2, [pc, #52]	; (8005c04 <disk_initialize+0x48>)
 8005bce:	5cd3      	ldrb	r3, [r2, r3]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d111      	bne.n	8005bf8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	4a0b      	ldr	r2, [pc, #44]	; (8005c04 <disk_initialize+0x48>)
 8005bd8:	2101      	movs	r1, #1
 8005bda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <disk_initialize+0x48>)
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	79fa      	ldrb	r2, [r7, #7]
 8005bea:	4906      	ldr	r1, [pc, #24]	; (8005c04 <disk_initialize+0x48>)
 8005bec:	440a      	add	r2, r1
 8005bee:	7a12      	ldrb	r2, [r2, #8]
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	200012a4 	.word	0x200012a4

08005c08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <disk_read+0x3c>)
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	689c      	ldr	r4, [r3, #8]
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	4a07      	ldr	r2, [pc, #28]	; (8005c44 <disk_read+0x3c>)
 8005c28:	4413      	add	r3, r2
 8005c2a:	7a18      	ldrb	r0, [r3, #8]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	47a0      	blx	r4
 8005c34:	4603      	mov	r3, r0
 8005c36:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd90      	pop	{r4, r7, pc}
 8005c42:	bf00      	nop
 8005c44:	200012a4 	.word	0x200012a4

08005c48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005c48:	b590      	push	{r4, r7, lr}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	4603      	mov	r3, r0
 8005c56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <disk_write+0x3c>)
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	68dc      	ldr	r4, [r3, #12]
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	4a07      	ldr	r2, [pc, #28]	; (8005c84 <disk_write+0x3c>)
 8005c68:	4413      	add	r3, r2
 8005c6a:	7a18      	ldrb	r0, [r3, #8]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	47a0      	blx	r4
 8005c74:	4603      	mov	r3, r0
 8005c76:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd90      	pop	{r4, r7, pc}
 8005c82:	bf00      	nop
 8005c84:	200012a4 	.word	0x200012a4

08005c88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	603a      	str	r2, [r7, #0]
 8005c92:	71fb      	strb	r3, [r7, #7]
 8005c94:	460b      	mov	r3, r1
 8005c96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <disk_ioctl+0x38>)
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	79fa      	ldrb	r2, [r7, #7]
 8005ca6:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <disk_ioctl+0x38>)
 8005ca8:	440a      	add	r2, r1
 8005caa:	7a10      	ldrb	r0, [r2, #8]
 8005cac:	79b9      	ldrb	r1, [r7, #6]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	4798      	blx	r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	73fb      	strb	r3, [r7, #15]
  return res;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	200012a4 	.word	0x200012a4

08005cc4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005cd4:	89fb      	ldrh	r3, [r7, #14]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	b21a      	sxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	b21b      	sxth	r3, r3
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005ce6:	89fb      	ldrh	r3, [r7, #14]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3303      	adds	r3, #3
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	3202      	adds	r2, #2
 8005d0c:	7812      	ldrb	r2, [r2, #0]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	3201      	adds	r2, #1
 8005d1a:	7812      	ldrb	r2, [r2, #0]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	7812      	ldrb	r2, [r2, #0]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
	return rv;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	460b      	mov	r3, r1
 8005d44:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	887a      	ldrh	r2, [r7, #2]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	887b      	ldrh	r3, [r7, #2]
 8005d54:	0a1b      	lsrs	r3, r3, #8
 8005d56:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	887a      	ldrh	r2, [r7, #2]
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	701a      	strb	r2, [r3, #0]
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	0a1b      	lsrs	r3, r3, #8
 8005dae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00d      	beq.n	8005dfe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	1c53      	adds	r3, r2, #1
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	6179      	str	r1, [r7, #20]
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f1      	bne.n	8005de2 <mem_cpy+0x1a>
	}
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005e0a:	b480      	push	{r7}
 8005e0c:	b087      	sub	sp, #28
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	617a      	str	r2, [r7, #20]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f3      	bne.n	8005e1a <mem_set+0x10>
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005e40:	b480      	push	{r7}
 8005e42:	b089      	sub	sp, #36	; 0x24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	61fa      	str	r2, [r7, #28]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	4619      	mov	r1, r3
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	61ba      	str	r2, [r7, #24]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	1acb      	subs	r3, r1, r3
 8005e6c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	607b      	str	r3, [r7, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <mem_cmp+0x40>
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0eb      	beq.n	8005e58 <mem_cmp+0x18>

	return r;
 8005e80:	697b      	ldr	r3, [r7, #20]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3724      	adds	r7, #36	; 0x24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e98:	e002      	b.n	8005ea0 <chk_chr+0x12>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	607b      	str	r3, [r7, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <chk_chr+0x26>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d1f2      	bne.n	8005e9a <chk_chr+0xc>
	return *str;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	e029      	b.n	8005f2c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ed8:	4a27      	ldr	r2, [pc, #156]	; (8005f78 <chk_lock+0xb4>)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	4413      	add	r3, r2
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01d      	beq.n	8005f22 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ee6:	4a24      	ldr	r2, [pc, #144]	; (8005f78 <chk_lock+0xb4>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	4413      	add	r3, r2
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d116      	bne.n	8005f26 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <chk_lock+0xb4>)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	4413      	add	r3, r2
 8005f00:	3304      	adds	r3, #4
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d10c      	bne.n	8005f26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f0c:	4a1a      	ldr	r2, [pc, #104]	; (8005f78 <chk_lock+0xb4>)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	4413      	add	r3, r2
 8005f14:	3308      	adds	r3, #8
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d102      	bne.n	8005f26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f20:	e007      	b.n	8005f32 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005f22:	2301      	movs	r3, #1
 8005f24:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d9d2      	bls.n	8005ed8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d109      	bne.n	8005f4c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <chk_lock+0x80>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d101      	bne.n	8005f48 <chk_lock+0x84>
 8005f44:	2300      	movs	r3, #0
 8005f46:	e010      	b.n	8005f6a <chk_lock+0xa6>
 8005f48:	2312      	movs	r3, #18
 8005f4a:	e00e      	b.n	8005f6a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d108      	bne.n	8005f64 <chk_lock+0xa0>
 8005f52:	4a09      	ldr	r2, [pc, #36]	; (8005f78 <chk_lock+0xb4>)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	4413      	add	r3, r2
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f62:	d101      	bne.n	8005f68 <chk_lock+0xa4>
 8005f64:	2310      	movs	r3, #16
 8005f66:	e000      	b.n	8005f6a <chk_lock+0xa6>
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	20001284 	.word	0x20001284

08005f7c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f82:	2300      	movs	r3, #0
 8005f84:	607b      	str	r3, [r7, #4]
 8005f86:	e002      	b.n	8005f8e <enq_lock+0x12>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d806      	bhi.n	8005fa2 <enq_lock+0x26>
 8005f94:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <enq_lock+0x40>)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	4413      	add	r3, r2
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f2      	bne.n	8005f88 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	bf14      	ite	ne
 8005fa8:	2301      	movne	r3, #1
 8005faa:	2300      	moveq	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20001284 	.word	0x20001284

08005fc0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	e01f      	b.n	8006010 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005fd0:	4a41      	ldr	r2, [pc, #260]	; (80060d8 <inc_lock+0x118>)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	4413      	add	r3, r2
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d113      	bne.n	800600a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005fe2:	4a3d      	ldr	r2, [pc, #244]	; (80060d8 <inc_lock+0x118>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	4413      	add	r3, r2
 8005fea:	3304      	adds	r3, #4
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d109      	bne.n	800600a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005ff6:	4a38      	ldr	r2, [pc, #224]	; (80060d8 <inc_lock+0x118>)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3308      	adds	r3, #8
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006006:	429a      	cmp	r2, r3
 8006008:	d006      	beq.n	8006018 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3301      	adds	r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d9dc      	bls.n	8005fd0 <inc_lock+0x10>
 8006016:	e000      	b.n	800601a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006018:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d132      	bne.n	8006086 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e002      	b.n	800602c <inc_lock+0x6c>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d806      	bhi.n	8006040 <inc_lock+0x80>
 8006032:	4a29      	ldr	r2, [pc, #164]	; (80060d8 <inc_lock+0x118>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	4413      	add	r3, r2
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f2      	bne.n	8006026 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d101      	bne.n	800604a <inc_lock+0x8a>
 8006046:	2300      	movs	r3, #0
 8006048:	e040      	b.n	80060cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4922      	ldr	r1, [pc, #136]	; (80060d8 <inc_lock+0x118>)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	440b      	add	r3, r1
 8006056:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	491e      	ldr	r1, [pc, #120]	; (80060d8 <inc_lock+0x118>)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	440b      	add	r3, r1
 8006064:	3304      	adds	r3, #4
 8006066:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695a      	ldr	r2, [r3, #20]
 800606c:	491a      	ldr	r1, [pc, #104]	; (80060d8 <inc_lock+0x118>)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	440b      	add	r3, r1
 8006074:	3308      	adds	r3, #8
 8006076:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006078:	4a17      	ldr	r2, [pc, #92]	; (80060d8 <inc_lock+0x118>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	4413      	add	r3, r2
 8006080:	330c      	adds	r3, #12
 8006082:	2200      	movs	r2, #0
 8006084:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <inc_lock+0xe0>
 800608c:	4a12      	ldr	r2, [pc, #72]	; (80060d8 <inc_lock+0x118>)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	4413      	add	r3, r2
 8006094:	330c      	adds	r3, #12
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <inc_lock+0xe0>
 800609c:	2300      	movs	r3, #0
 800609e:	e015      	b.n	80060cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d108      	bne.n	80060b8 <inc_lock+0xf8>
 80060a6:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <inc_lock+0x118>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	4413      	add	r3, r2
 80060ae:	330c      	adds	r3, #12
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	e001      	b.n	80060bc <inc_lock+0xfc>
 80060b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060bc:	4906      	ldr	r1, [pc, #24]	; (80060d8 <inc_lock+0x118>)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	440b      	add	r3, r1
 80060c4:	330c      	adds	r3, #12
 80060c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	20001284 	.word	0x20001284

080060dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d825      	bhi.n	800613c <dec_lock+0x60>
		n = Files[i].ctr;
 80060f0:	4a17      	ldr	r2, [pc, #92]	; (8006150 <dec_lock+0x74>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	4413      	add	r3, r2
 80060f8:	330c      	adds	r3, #12
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80060fe:	89fb      	ldrh	r3, [r7, #14]
 8006100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006104:	d101      	bne.n	800610a <dec_lock+0x2e>
 8006106:	2300      	movs	r3, #0
 8006108:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800610a:	89fb      	ldrh	r3, [r7, #14]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <dec_lock+0x3a>
 8006110:	89fb      	ldrh	r3, [r7, #14]
 8006112:	3b01      	subs	r3, #1
 8006114:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006116:	4a0e      	ldr	r2, [pc, #56]	; (8006150 <dec_lock+0x74>)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	4413      	add	r3, r2
 800611e:	330c      	adds	r3, #12
 8006120:	89fa      	ldrh	r2, [r7, #14]
 8006122:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006124:	89fb      	ldrh	r3, [r7, #14]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d105      	bne.n	8006136 <dec_lock+0x5a>
 800612a:	4a09      	ldr	r2, [pc, #36]	; (8006150 <dec_lock+0x74>)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	4413      	add	r3, r2
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	737b      	strb	r3, [r7, #13]
 800613a:	e001      	b.n	8006140 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800613c:	2302      	movs	r3, #2
 800613e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006140:	7b7b      	ldrb	r3, [r7, #13]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20001284 	.word	0x20001284

08006154 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e010      	b.n	8006184 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006162:	4a0d      	ldr	r2, [pc, #52]	; (8006198 <clear_lock+0x44>)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	4413      	add	r3, r2
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	429a      	cmp	r2, r3
 8006170:	d105      	bne.n	800617e <clear_lock+0x2a>
 8006172:	4a09      	ldr	r2, [pc, #36]	; (8006198 <clear_lock+0x44>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	4413      	add	r3, r2
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3301      	adds	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d9eb      	bls.n	8006162 <clear_lock+0xe>
	}
}
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20001284 	.word	0x20001284

0800619c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	78db      	ldrb	r3, [r3, #3]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d034      	beq.n	800621a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	7858      	ldrb	r0, [r3, #1]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80061c0:	2301      	movs	r3, #1
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	f7ff fd40 	bl	8005c48 <disk_write>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	73fb      	strb	r3, [r7, #15]
 80061d2:	e022      	b.n	800621a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	1ad2      	subs	r2, r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d217      	bcs.n	800621a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	789b      	ldrb	r3, [r3, #2]
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	e010      	b.n	8006214 <sync_window+0x78>
					wsect += fs->fsize;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4413      	add	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	7858      	ldrb	r0, [r3, #1]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006206:	2301      	movs	r3, #1
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	f7ff fd1d 	bl	8005c48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	3b01      	subs	r3, #1
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d8eb      	bhi.n	80061f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d01b      	beq.n	8006274 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff ffad 	bl	800619c <sync_window>
 8006242:	4603      	mov	r3, r0
 8006244:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d113      	bne.n	8006274 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7858      	ldrb	r0, [r3, #1]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006256:	2301      	movs	r3, #1
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	f7ff fcd5 	bl	8005c08 <disk_read>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006268:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800626a:	2301      	movs	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff ff87 	bl	800619c <sync_window>
 800628e:	4603      	mov	r3, r0
 8006290:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d159      	bne.n	800634c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b03      	cmp	r3, #3
 800629e:	d149      	bne.n	8006334 <sync_fs+0xb4>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	791b      	ldrb	r3, [r3, #4]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d145      	bne.n	8006334 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	899b      	ldrh	r3, [r3, #12]
 80062b2:	461a      	mov	r2, r3
 80062b4:	2100      	movs	r1, #0
 80062b6:	f7ff fda8 	bl	8005e0a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3334      	adds	r3, #52	; 0x34
 80062be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062c2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff fd37 	bl	8005d3a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3334      	adds	r3, #52	; 0x34
 80062d0:	4921      	ldr	r1, [pc, #132]	; (8006358 <sync_fs+0xd8>)
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fd4c 	bl	8005d70 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3334      	adds	r3, #52	; 0x34
 80062dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80062e0:	491e      	ldr	r1, [pc, #120]	; (800635c <sync_fs+0xdc>)
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fd44 	bl	8005d70 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3334      	adds	r3, #52	; 0x34
 80062ec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f7ff fd3a 	bl	8005d70 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3334      	adds	r3, #52	; 0x34
 8006300:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	4619      	mov	r1, r3
 800630a:	4610      	mov	r0, r2
 800630c:	f7ff fd30 	bl	8005d70 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	7858      	ldrb	r0, [r3, #1]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006328:	2301      	movs	r3, #1
 800632a:	f7ff fc8d 	bl	8005c48 <disk_write>
			fs->fsi_flag = 0;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2200      	movs	r2, #0
 800633a:	2100      	movs	r1, #0
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fca3 	bl	8005c88 <disk_ioctl>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <sync_fs+0xcc>
 8006348:	2301      	movs	r3, #1
 800634a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	41615252 	.word	0x41615252
 800635c:	61417272 	.word	0x61417272

08006360 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	3b02      	subs	r3, #2
 800636e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	3b02      	subs	r3, #2
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d301      	bcc.n	8006380 <clust2sect+0x20>
 800637c:	2300      	movs	r3, #0
 800637e:	e008      	b.n	8006392 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	895b      	ldrh	r3, [r3, #10]
 8006384:	461a      	mov	r2, r3
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	fb03 f202 	mul.w	r2, r3, r2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4413      	add	r3, r2
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d904      	bls.n	80063be <get_fat+0x20>
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d302      	bcc.n	80063c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80063be:	2301      	movs	r3, #1
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	e0bb      	b.n	800653c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	f000 8083 	beq.w	80064da <get_fat+0x13c>
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	f300 80a7 	bgt.w	8006528 <get_fat+0x18a>
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d002      	beq.n	80063e4 <get_fat+0x46>
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d056      	beq.n	8006490 <get_fat+0xf2>
 80063e2:	e0a1      	b.n	8006528 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	899b      	ldrh	r3, [r3, #12]
 80063fa:	4619      	mov	r1, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006402:	4413      	add	r3, r2
 8006404:	4619      	mov	r1, r3
 8006406:	6938      	ldr	r0, [r7, #16]
 8006408:	f7ff ff0c 	bl	8006224 <move_window>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 808d 	bne.w	800652e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	60fa      	str	r2, [r7, #12]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	8992      	ldrh	r2, [r2, #12]
 800641e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006422:	fb01 f202 	mul.w	r2, r1, r2
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006430:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	899b      	ldrh	r3, [r3, #12]
 800643a:	4619      	mov	r1, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006442:	4413      	add	r3, r2
 8006444:	4619      	mov	r1, r3
 8006446:	6938      	ldr	r0, [r7, #16]
 8006448:	f7ff feec 	bl	8006224 <move_window>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d16f      	bne.n	8006532 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	899b      	ldrh	r3, [r3, #12]
 8006456:	461a      	mov	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	fbb3 f1f2 	udiv	r1, r3, r2
 800645e:	fb01 f202 	mul.w	r2, r1, r2
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4413      	add	r3, r2
 8006468:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	461a      	mov	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4313      	orrs	r3, r2
 8006474:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <get_fat+0xe8>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	091b      	lsrs	r3, r3, #4
 8006484:	e002      	b.n	800648c <get_fat+0xee>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800648c:	617b      	str	r3, [r7, #20]
			break;
 800648e:	e055      	b.n	800653c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	899b      	ldrh	r3, [r3, #12]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	4619      	mov	r1, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80064a4:	4413      	add	r3, r2
 80064a6:	4619      	mov	r1, r3
 80064a8:	6938      	ldr	r0, [r7, #16]
 80064aa:	f7ff febb 	bl	8006224 <move_window>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d140      	bne.n	8006536 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	8992      	ldrh	r2, [r2, #12]
 80064c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80064c6:	fb00 f202 	mul.w	r2, r0, r2
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	440b      	add	r3, r1
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff fbf8 	bl	8005cc4 <ld_word>
 80064d4:	4603      	mov	r3, r0
 80064d6:	617b      	str	r3, [r7, #20]
			break;
 80064d8:	e030      	b.n	800653c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	899b      	ldrh	r3, [r3, #12]
 80064e2:	089b      	lsrs	r3, r3, #2
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	4619      	mov	r1, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80064ee:	4413      	add	r3, r2
 80064f0:	4619      	mov	r1, r3
 80064f2:	6938      	ldr	r0, [r7, #16]
 80064f4:	f7ff fe96 	bl	8006224 <move_window>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d11d      	bne.n	800653a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	8992      	ldrh	r2, [r2, #12]
 800650c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006510:	fb00 f202 	mul.w	r2, r0, r2
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	440b      	add	r3, r1
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff fbeb 	bl	8005cf4 <ld_dword>
 800651e:	4603      	mov	r3, r0
 8006520:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006524:	617b      	str	r3, [r7, #20]
			break;
 8006526:	e009      	b.n	800653c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	e006      	b.n	800653c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800652e:	bf00      	nop
 8006530:	e004      	b.n	800653c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006532:	bf00      	nop
 8006534:	e002      	b.n	800653c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800653a:	bf00      	nop
		}
	}

	return val;
 800653c:	697b      	ldr	r3, [r7, #20]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006546:	b590      	push	{r4, r7, lr}
 8006548:	b089      	sub	sp, #36	; 0x24
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006552:	2302      	movs	r3, #2
 8006554:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b01      	cmp	r3, #1
 800655a:	f240 8102 	bls.w	8006762 <put_fat+0x21c>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	429a      	cmp	r2, r3
 8006566:	f080 80fc 	bcs.w	8006762 <put_fat+0x21c>
		switch (fs->fs_type) {
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b03      	cmp	r3, #3
 8006570:	f000 80b6 	beq.w	80066e0 <put_fat+0x19a>
 8006574:	2b03      	cmp	r3, #3
 8006576:	f300 80fd 	bgt.w	8006774 <put_fat+0x22e>
 800657a:	2b01      	cmp	r3, #1
 800657c:	d003      	beq.n	8006586 <put_fat+0x40>
 800657e:	2b02      	cmp	r3, #2
 8006580:	f000 8083 	beq.w	800668a <put_fat+0x144>
 8006584:	e0f6      	b.n	8006774 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4413      	add	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	899b      	ldrh	r3, [r3, #12]
 800659c:	4619      	mov	r1, r3
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80065a4:	4413      	add	r3, r2
 80065a6:	4619      	mov	r1, r3
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff fe3b 	bl	8006224 <move_window>
 80065ae:	4603      	mov	r3, r0
 80065b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065b2:	7ffb      	ldrb	r3, [r7, #31]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f040 80d6 	bne.w	8006766 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	61ba      	str	r2, [r7, #24]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	8992      	ldrh	r2, [r2, #12]
 80065ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80065ce:	fb00 f202 	mul.w	r2, r0, r2
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	440b      	add	r3, r1
 80065d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00d      	beq.n	80065fe <put_fat+0xb8>
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	b25a      	sxtb	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	4313      	orrs	r3, r2
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	e001      	b.n	8006602 <put_fat+0xbc>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	899b      	ldrh	r3, [r3, #12]
 8006614:	4619      	mov	r1, r3
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	fbb3 f3f1 	udiv	r3, r3, r1
 800661c:	4413      	add	r3, r2
 800661e:	4619      	mov	r1, r3
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7ff fdff 	bl	8006224 <move_window>
 8006626:	4603      	mov	r3, r0
 8006628:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800662a:	7ffb      	ldrb	r3, [r7, #31]
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 809c 	bne.w	800676a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	899b      	ldrh	r3, [r3, #12]
 800663c:	461a      	mov	r2, r3
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	fbb3 f0f2 	udiv	r0, r3, r2
 8006644:	fb00 f202 	mul.w	r2, r0, r2
 8006648:	1a9b      	subs	r3, r3, r2
 800664a:	440b      	add	r3, r1
 800664c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <put_fat+0x11a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	091b      	lsrs	r3, r3, #4
 800665c:	b2db      	uxtb	r3, r3
 800665e:	e00e      	b.n	800667e <put_fat+0x138>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	b25b      	sxtb	r3, r3
 8006666:	f023 030f 	bic.w	r3, r3, #15
 800666a:	b25a      	sxtb	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	0a1b      	lsrs	r3, r3, #8
 8006670:	b25b      	sxtb	r3, r3
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	b25b      	sxtb	r3, r3
 8006678:	4313      	orrs	r3, r2
 800667a:	b25b      	sxtb	r3, r3
 800667c:	b2db      	uxtb	r3, r3
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	70da      	strb	r2, [r3, #3]
			break;
 8006688:	e074      	b.n	8006774 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	899b      	ldrh	r3, [r3, #12]
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	b29b      	uxth	r3, r3
 8006696:	4619      	mov	r1, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	fbb3 f3f1 	udiv	r3, r3, r1
 800669e:	4413      	add	r3, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff fdbe 	bl	8006224 <move_window>
 80066a8:	4603      	mov	r3, r0
 80066aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066ac:	7ffb      	ldrb	r3, [r7, #31]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d15d      	bne.n	800676e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	8992      	ldrh	r2, [r2, #12]
 80066c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80066c4:	fb00 f202 	mul.w	r2, r0, r2
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	440b      	add	r3, r1
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	b292      	uxth	r2, r2
 80066d0:	4611      	mov	r1, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff fb31 	bl	8005d3a <st_word>
			fs->wflag = 1;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	70da      	strb	r2, [r3, #3]
			break;
 80066de:	e049      	b.n	8006774 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	899b      	ldrh	r3, [r3, #12]
 80066e8:	089b      	lsrs	r3, r3, #2
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	4619      	mov	r1, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80066f4:	4413      	add	r3, r2
 80066f6:	4619      	mov	r1, r3
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff fd93 	bl	8006224 <move_window>
 80066fe:	4603      	mov	r3, r0
 8006700:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006702:	7ffb      	ldrb	r3, [r7, #31]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d134      	bne.n	8006772 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	8992      	ldrh	r2, [r2, #12]
 800671c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006720:	fb00 f202 	mul.w	r2, r0, r2
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	440b      	add	r3, r1
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff fae3 	bl	8005cf4 <ld_dword>
 800672e:	4603      	mov	r3, r0
 8006730:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006734:	4323      	orrs	r3, r4
 8006736:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	8992      	ldrh	r2, [r2, #12]
 8006746:	fbb3 f0f2 	udiv	r0, r3, r2
 800674a:	fb00 f202 	mul.w	r2, r0, r2
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	440b      	add	r3, r1
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fb0b 	bl	8005d70 <st_dword>
			fs->wflag = 1;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	70da      	strb	r2, [r3, #3]
			break;
 8006760:	e008      	b.n	8006774 <put_fat+0x22e>
		}
	}
 8006762:	bf00      	nop
 8006764:	e006      	b.n	8006774 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006766:	bf00      	nop
 8006768:	e004      	b.n	8006774 <put_fat+0x22e>
			if (res != FR_OK) break;
 800676a:	bf00      	nop
 800676c:	e002      	b.n	8006774 <put_fat+0x22e>
			if (res != FR_OK) break;
 800676e:	bf00      	nop
 8006770:	e000      	b.n	8006774 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006772:	bf00      	nop
	return res;
 8006774:	7ffb      	ldrb	r3, [r7, #31]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3724      	adds	r7, #36	; 0x24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd90      	pop	{r4, r7, pc}

0800677e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b088      	sub	sp, #32
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d904      	bls.n	80067a4 <remove_chain+0x26>
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d301      	bcc.n	80067a8 <remove_chain+0x2a>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e04b      	b.n	8006840 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00c      	beq.n	80067c8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80067ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	69b8      	ldr	r0, [r7, #24]
 80067b6:	f7ff fec6 	bl	8006546 <put_fat>
 80067ba:	4603      	mov	r3, r0
 80067bc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80067be:	7ffb      	ldrb	r3, [r7, #31]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <remove_chain+0x4a>
 80067c4:	7ffb      	ldrb	r3, [r7, #31]
 80067c6:	e03b      	b.n	8006840 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff fde7 	bl	800639e <get_fat>
 80067d0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d031      	beq.n	800683c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <remove_chain+0x64>
 80067de:	2302      	movs	r3, #2
 80067e0:	e02e      	b.n	8006840 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e8:	d101      	bne.n	80067ee <remove_chain+0x70>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e028      	b.n	8006840 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80067ee:	2200      	movs	r2, #0
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	69b8      	ldr	r0, [r7, #24]
 80067f4:	f7ff fea7 	bl	8006546 <put_fat>
 80067f8:	4603      	mov	r3, r0
 80067fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80067fc:	7ffb      	ldrb	r3, [r7, #31]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <remove_chain+0x88>
 8006802:	7ffb      	ldrb	r3, [r7, #31]
 8006804:	e01c      	b.n	8006840 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	3b02      	subs	r3, #2
 8006810:	429a      	cmp	r2, r3
 8006812:	d20b      	bcs.n	800682c <remove_chain+0xae>
			fs->free_clst++;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	791b      	ldrb	r3, [r3, #4]
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	429a      	cmp	r2, r3
 8006838:	d3c6      	bcc.n	80067c8 <remove_chain+0x4a>
 800683a:	e000      	b.n	800683e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800683c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10d      	bne.n	800687a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <create_chain+0x2c>
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	429a      	cmp	r2, r3
 8006872:	d31b      	bcc.n	80068ac <create_chain+0x64>
 8006874:	2301      	movs	r3, #1
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	e018      	b.n	80068ac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fd8e 	bl	800639e <get_fat>
 8006882:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d801      	bhi.n	800688e <create_chain+0x46>
 800688a:	2301      	movs	r3, #1
 800688c:	e070      	b.n	8006970 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006894:	d101      	bne.n	800689a <create_chain+0x52>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	e06a      	b.n	8006970 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d201      	bcs.n	80068a8 <create_chain+0x60>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	e063      	b.n	8006970 <create_chain+0x128>
		scl = clst;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	3301      	adds	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d307      	bcc.n	80068d0 <create_chain+0x88>
				ncl = 2;
 80068c0:	2302      	movs	r3, #2
 80068c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d901      	bls.n	80068d0 <create_chain+0x88>
 80068cc:	2300      	movs	r3, #0
 80068ce:	e04f      	b.n	8006970 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80068d0:	69f9      	ldr	r1, [r7, #28]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff fd63 	bl	800639e <get_fat>
 80068d8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00e      	beq.n	80068fe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d003      	beq.n	80068ee <create_chain+0xa6>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ec:	d101      	bne.n	80068f2 <create_chain+0xaa>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	e03e      	b.n	8006970 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d1da      	bne.n	80068b0 <create_chain+0x68>
 80068fa:	2300      	movs	r3, #0
 80068fc:	e038      	b.n	8006970 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80068fe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006904:	69f9      	ldr	r1, [r7, #28]
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f7ff fe1d 	bl	8006546 <put_fat>
 800690c:	4603      	mov	r3, r0
 800690e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <create_chain+0xe2>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d006      	beq.n	800692a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6938      	ldr	r0, [r7, #16]
 8006922:	f7ff fe10 	bl	8006546 <put_fat>
 8006926:	4603      	mov	r3, r0
 8006928:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d116      	bne.n	800695e <create_chain+0x116>
		fs->last_clst = ncl;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	695a      	ldr	r2, [r3, #20]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	3b02      	subs	r3, #2
 8006940:	429a      	cmp	r2, r3
 8006942:	d804      	bhi.n	800694e <create_chain+0x106>
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	1e5a      	subs	r2, r3, #1
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	791b      	ldrb	r3, [r3, #4]
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	b2da      	uxtb	r2, r3
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	711a      	strb	r2, [r3, #4]
 800695c:	e007      	b.n	800696e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d102      	bne.n	800696a <create_chain+0x122>
 8006964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006968:	e000      	b.n	800696c <create_chain+0x124>
 800696a:	2301      	movs	r3, #1
 800696c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800696e:	69fb      	ldr	r3, [r7, #28]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3720      	adds	r7, #32
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	3304      	adds	r3, #4
 800698e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	899b      	ldrh	r3, [r3, #12]
 8006994:	461a      	mov	r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	fbb3 f3f2 	udiv	r3, r3, r2
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	8952      	ldrh	r2, [r2, #10]
 80069a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1d1a      	adds	r2, r3, #4
 80069aa:	613a      	str	r2, [r7, #16]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <clmt_clust+0x42>
 80069b6:	2300      	movs	r3, #0
 80069b8:	e010      	b.n	80069dc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d307      	bcc.n	80069d2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	3304      	adds	r3, #4
 80069ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069d0:	e7e9      	b.n	80069a6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80069d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	4413      	add	r3, r2
}
 80069dc:	4618      	mov	r0, r3
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069fe:	d204      	bcs.n	8006a0a <dir_sdi+0x22>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <dir_sdi+0x26>
		return FR_INT_ERR;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e071      	b.n	8006af2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <dir_sdi+0x46>
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d902      	bls.n	8006a2e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10c      	bne.n	8006a4e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	8912      	ldrh	r2, [r2, #8]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d301      	bcc.n	8006a44 <dir_sdi+0x5c>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e056      	b.n	8006af2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	61da      	str	r2, [r3, #28]
 8006a4c:	e02d      	b.n	8006aaa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	895b      	ldrh	r3, [r3, #10]
 8006a52:	461a      	mov	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	899b      	ldrh	r3, [r3, #12]
 8006a58:	fb02 f303 	mul.w	r3, r2, r3
 8006a5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a5e:	e019      	b.n	8006a94 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6979      	ldr	r1, [r7, #20]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff fc9a 	bl	800639e <get_fat>
 8006a6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a72:	d101      	bne.n	8006a78 <dir_sdi+0x90>
 8006a74:	2301      	movs	r3, #1
 8006a76:	e03c      	b.n	8006af2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d904      	bls.n	8006a88 <dir_sdi+0xa0>
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d301      	bcc.n	8006a8c <dir_sdi+0xa4>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e032      	b.n	8006af2 <dir_sdi+0x10a>
			ofs -= csz;
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d2e1      	bcs.n	8006a60 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006a9c:	6979      	ldr	r1, [r7, #20]
 8006a9e:	6938      	ldr	r0, [r7, #16]
 8006aa0:	f7ff fc5e 	bl	8006360 <clust2sect>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <dir_sdi+0xd4>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e01a      	b.n	8006af2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	899b      	ldrh	r3, [r3, #12]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006acc:	441a      	add	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	899b      	ldrh	r3, [r3, #12]
 8006adc:	461a      	mov	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ae4:	fb00 f202 	mul.w	r2, r0, r2
 8006ae8:	1a9b      	subs	r3, r3, r2
 8006aea:	18ca      	adds	r2, r1, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b086      	sub	sp, #24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	3320      	adds	r3, #32
 8006b10:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <dir_next+0x28>
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b20:	d301      	bcc.n	8006b26 <dir_next+0x2c>
 8006b22:	2304      	movs	r3, #4
 8006b24:	e0bb      	b.n	8006c9e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	899b      	ldrh	r3, [r3, #12]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b32:	fb01 f202 	mul.w	r2, r1, r2
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 809d 	bne.w	8006c78 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10b      	bne.n	8006b68 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	8912      	ldrh	r2, [r2, #8]
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	f0c0 808d 	bcc.w	8006c78 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	61da      	str	r2, [r3, #28]
 8006b64:	2304      	movs	r3, #4
 8006b66:	e09a      	b.n	8006c9e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	899b      	ldrh	r3, [r3, #12]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	8952      	ldrh	r2, [r2, #10]
 8006b78:	3a01      	subs	r2, #1
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d17b      	bne.n	8006c78 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f7ff fc08 	bl	800639e <get_fat>
 8006b8e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d801      	bhi.n	8006b9a <dir_next+0xa0>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e081      	b.n	8006c9e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba0:	d101      	bne.n	8006ba6 <dir_next+0xac>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e07b      	b.n	8006c9e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d359      	bcc.n	8006c64 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	61da      	str	r2, [r3, #28]
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	e06e      	b.n	8006c9e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7ff fe3d 	bl	8006848 <create_chain>
 8006bce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <dir_next+0xe0>
 8006bd6:	2307      	movs	r3, #7
 8006bd8:	e061      	b.n	8006c9e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d101      	bne.n	8006be4 <dir_next+0xea>
 8006be0:	2302      	movs	r3, #2
 8006be2:	e05c      	b.n	8006c9e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bea:	d101      	bne.n	8006bf0 <dir_next+0xf6>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e056      	b.n	8006c9e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff fad3 	bl	800619c <sync_window>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <dir_next+0x106>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e04e      	b.n	8006c9e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	899b      	ldrh	r3, [r3, #12]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	f7ff f8fc 	bl	8005e0a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c12:	2300      	movs	r3, #0
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	6979      	ldr	r1, [r7, #20]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7ff fba1 	bl	8006360 <clust2sect>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30
 8006c24:	e012      	b.n	8006c4c <dir_next+0x152>
						fs->wflag = 1;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f7ff fab5 	bl	800619c <sync_window>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <dir_next+0x142>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e030      	b.n	8006c9e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	895b      	ldrh	r3, [r3, #10]
 8006c50:	461a      	mov	r2, r3
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d3e6      	bcc.n	8006c26 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006c6a:	6979      	ldr	r1, [r7, #20]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7ff fb77 	bl	8006360 <clust2sect>
 8006c72:	4602      	mov	r2, r0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	899b      	ldrh	r3, [r3, #12]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c90:	fb00 f202 	mul.w	r2, r0, r2
 8006c94:	1a9b      	subs	r3, r3, r2
 8006c96:	18ca      	adds	r2, r1, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff fe95 	bl	80069e8 <dir_sdi>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d12b      	bne.n	8006d20 <dir_alloc+0x7a>
		n = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f7ff faa6 	bl	8006224 <move_window>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d11d      	bne.n	8006d1e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2be5      	cmp	r3, #229	; 0xe5
 8006cea:	d004      	beq.n	8006cf6 <dir_alloc+0x50>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d107      	bne.n	8006d06 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d102      	bne.n	8006d0a <dir_alloc+0x64>
 8006d04:	e00c      	b.n	8006d20 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006d06:	2300      	movs	r3, #0
 8006d08:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff fef4 	bl	8006afa <dir_next>
 8006d12:	4603      	mov	r3, r0
 8006d14:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0d7      	beq.n	8006ccc <dir_alloc+0x26>
 8006d1c:	e000      	b.n	8006d20 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006d1e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d101      	bne.n	8006d2a <dir_alloc+0x84>
 8006d26:	2307      	movs	r3, #7
 8006d28:	75fb      	strb	r3, [r7, #23]
	return res;
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	331a      	adds	r3, #26
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe ffbe 	bl	8005cc4 <ld_word>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d109      	bne.n	8006d68 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	3314      	adds	r3, #20
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe ffb3 	bl	8005cc4 <ld_word>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	041b      	lsls	r3, r3, #16
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006d68:	68fb      	ldr	r3, [r7, #12]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	331a      	adds	r3, #26
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	b292      	uxth	r2, r2
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe ffd6 	bl	8005d3a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d109      	bne.n	8006daa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f103 0214 	add.w	r2, r3, #20
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	0c1b      	lsrs	r3, r3, #16
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fe ffc8 	bl	8005d3a <st_word>
	}
}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006dc6:	e03c      	b.n	8006e42 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6938      	ldr	r0, [r7, #16]
 8006dd0:	f7ff fa28 	bl	8006224 <move_window>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d136      	bne.n	8006e4c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d102      	bne.n	8006df2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006dec:	2304      	movs	r3, #4
 8006dee:	75fb      	strb	r3, [r7, #23]
 8006df0:	e031      	b.n	8006e56 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	330b      	adds	r3, #11
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dfe:	73bb      	strb	r3, [r7, #14]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	7bba      	ldrb	r2, [r7, #14]
 8006e04:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	2be5      	cmp	r3, #229	; 0xe5
 8006e0a:	d011      	beq.n	8006e30 <dir_read+0x7e>
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e10:	d00e      	beq.n	8006e30 <dir_read+0x7e>
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b0f      	cmp	r3, #15
 8006e16:	d00b      	beq.n	8006e30 <dir_read+0x7e>
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	f023 0320 	bic.w	r3, r3, #32
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	bf0c      	ite	eq
 8006e22:	2301      	moveq	r3, #1
 8006e24:	2300      	movne	r3, #0
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00f      	beq.n	8006e50 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006e30:	2100      	movs	r1, #0
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff fe61 	bl	8006afa <dir_next>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d108      	bne.n	8006e54 <dir_read+0xa2>
	while (dp->sect) {
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1be      	bne.n	8006dc8 <dir_read+0x16>
 8006e4a:	e004      	b.n	8006e56 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006e4c:	bf00      	nop
 8006e4e:	e002      	b.n	8006e56 <dir_read+0xa4>
				break;
 8006e50:	bf00      	nop
 8006e52:	e000      	b.n	8006e56 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006e54:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <dir_read+0xb0>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	61da      	str	r2, [r3, #28]
	return res;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff fdb3 	bl	80069e8 <dir_sdi>
 8006e82:	4603      	mov	r3, r0
 8006e84:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <dir_find+0x24>
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	e03e      	b.n	8006f0e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	4619      	mov	r1, r3
 8006e96:	6938      	ldr	r0, [r7, #16]
 8006e98:	f7ff f9c4 	bl	8006224 <move_window>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d12f      	bne.n	8006f06 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <dir_find+0x4e>
 8006eb4:	2304      	movs	r3, #4
 8006eb6:	75fb      	strb	r3, [r7, #23]
 8006eb8:	e028      	b.n	8006f0c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	330b      	adds	r3, #11
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	330b      	adds	r3, #11
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10a      	bne.n	8006ef2 <dir_find+0x86>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a18      	ldr	r0, [r3, #32]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3324      	adds	r3, #36	; 0x24
 8006ee4:	220b      	movs	r2, #11
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	f7fe ffaa 	bl	8005e40 <mem_cmp>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff fe00 	bl	8006afa <dir_next>
 8006efa:	4603      	mov	r3, r0
 8006efc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0c5      	beq.n	8006e90 <dir_find+0x24>
 8006f04:	e002      	b.n	8006f0c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006f06:	bf00      	nop
 8006f08:	e000      	b.n	8006f0c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f0a:	bf00      	nop

	return res;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006f24:	2101      	movs	r1, #1
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff febd 	bl	8006ca6 <dir_alloc>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d11c      	bne.n	8006f70 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	68b8      	ldr	r0, [r7, #8]
 8006f3e:	f7ff f971 	bl	8006224 <move_window>
 8006f42:	4603      	mov	r3, r0
 8006f44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d111      	bne.n	8006f70 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	2220      	movs	r2, #32
 8006f52:	2100      	movs	r1, #0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe ff58 	bl	8005e0a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a18      	ldr	r0, [r3, #32]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3324      	adds	r3, #36	; 0x24
 8006f62:	220b      	movs	r2, #11
 8006f64:	4619      	mov	r1, r3
 8006f66:	f7fe ff2f 	bl	8005dc8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f7ff f948 	bl	8006224 <move_window>
 8006f94:	4603      	mov	r3, r0
 8006f96:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006f98:	7afb      	ldrb	r3, [r7, #11]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	22e5      	movs	r2, #229	; 0xe5
 8006fa4:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006fac:	7afb      	ldrb	r3, [r7, #11]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d04e      	beq.n	800706c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006fd6:	e021      	b.n	800701c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1a      	ldr	r2, [r3, #32]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	1c59      	adds	r1, r3, #1
 8006fe0:	6179      	str	r1, [r7, #20]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d100      	bne.n	8006ff0 <get_fileinfo+0x3a>
 8006fee:	e015      	b.n	800701c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	2b05      	cmp	r3, #5
 8006ff4:	d101      	bne.n	8006ffa <get_fileinfo+0x44>
 8006ff6:	23e5      	movs	r3, #229	; 0xe5
 8006ff8:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b09      	cmp	r3, #9
 8006ffe:	d106      	bne.n	800700e <get_fileinfo+0x58>
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	613a      	str	r2, [r7, #16]
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	4413      	add	r3, r2
 800700a:	222e      	movs	r2, #46	; 0x2e
 800700c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	613a      	str	r2, [r7, #16]
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	4413      	add	r3, r2
 8007018:	7bfa      	ldrb	r2, [r7, #15]
 800701a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b0a      	cmp	r3, #10
 8007020:	d9da      	bls.n	8006fd8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	4413      	add	r3, r2
 8007028:	3309      	adds	r3, #9
 800702a:	2200      	movs	r2, #0
 800702c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	7ada      	ldrb	r2, [r3, #11]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	331c      	adds	r3, #28
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fe58 	bl	8005cf4 <ld_dword>
 8007044:	4602      	mov	r2, r0
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	3316      	adds	r3, #22
 8007050:	4618      	mov	r0, r3
 8007052:	f7fe fe4f 	bl	8005cf4 <ld_dword>
 8007056:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	b29a      	uxth	r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	80da      	strh	r2, [r3, #6]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	0c1b      	lsrs	r3, r3, #16
 8007064:	b29a      	uxth	r2, r3
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	809a      	strh	r2, [r3, #4]
 800706a:	e000      	b.n	800706e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800706c:	bf00      	nop
}
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3324      	adds	r3, #36	; 0x24
 8007088:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800708a:	220b      	movs	r2, #11
 800708c:	2120      	movs	r1, #32
 800708e:	68b8      	ldr	r0, [r7, #8]
 8007090:	f7fe febb 	bl	8005e0a <mem_set>
	si = i = 0; ni = 8;
 8007094:	2300      	movs	r3, #0
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	2308      	movs	r3, #8
 800709e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	61fa      	str	r2, [r7, #28]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80070ae:	7efb      	ldrb	r3, [r7, #27]
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d94e      	bls.n	8007152 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80070b4:	7efb      	ldrb	r3, [r7, #27]
 80070b6:	2b2f      	cmp	r3, #47	; 0x2f
 80070b8:	d006      	beq.n	80070c8 <create_name+0x54>
 80070ba:	7efb      	ldrb	r3, [r7, #27]
 80070bc:	2b5c      	cmp	r3, #92	; 0x5c
 80070be:	d110      	bne.n	80070e2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80070c0:	e002      	b.n	80070c8 <create_name+0x54>
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3301      	adds	r3, #1
 80070c6:	61fb      	str	r3, [r7, #28]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b2f      	cmp	r3, #47	; 0x2f
 80070d2:	d0f6      	beq.n	80070c2 <create_name+0x4e>
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b5c      	cmp	r3, #92	; 0x5c
 80070de:	d0f0      	beq.n	80070c2 <create_name+0x4e>
			break;
 80070e0:	e038      	b.n	8007154 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80070e2:	7efb      	ldrb	r3, [r7, #27]
 80070e4:	2b2e      	cmp	r3, #46	; 0x2e
 80070e6:	d003      	beq.n	80070f0 <create_name+0x7c>
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d30c      	bcc.n	800710a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b0b      	cmp	r3, #11
 80070f4:	d002      	beq.n	80070fc <create_name+0x88>
 80070f6:	7efb      	ldrb	r3, [r7, #27]
 80070f8:	2b2e      	cmp	r3, #46	; 0x2e
 80070fa:	d001      	beq.n	8007100 <create_name+0x8c>
 80070fc:	2306      	movs	r3, #6
 80070fe:	e044      	b.n	800718a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007100:	2308      	movs	r3, #8
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	230b      	movs	r3, #11
 8007106:	617b      	str	r3, [r7, #20]
			continue;
 8007108:	e022      	b.n	8007150 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800710a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800710e:	2b00      	cmp	r3, #0
 8007110:	da04      	bge.n	800711c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007112:	7efb      	ldrb	r3, [r7, #27]
 8007114:	3b80      	subs	r3, #128	; 0x80
 8007116:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <create_name+0x120>)
 8007118:	5cd3      	ldrb	r3, [r2, r3]
 800711a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800711c:	7efb      	ldrb	r3, [r7, #27]
 800711e:	4619      	mov	r1, r3
 8007120:	481d      	ldr	r0, [pc, #116]	; (8007198 <create_name+0x124>)
 8007122:	f7fe feb4 	bl	8005e8e <chk_chr>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <create_name+0xbc>
 800712c:	2306      	movs	r3, #6
 800712e:	e02c      	b.n	800718a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007130:	7efb      	ldrb	r3, [r7, #27]
 8007132:	2b60      	cmp	r3, #96	; 0x60
 8007134:	d905      	bls.n	8007142 <create_name+0xce>
 8007136:	7efb      	ldrb	r3, [r7, #27]
 8007138:	2b7a      	cmp	r3, #122	; 0x7a
 800713a:	d802      	bhi.n	8007142 <create_name+0xce>
 800713c:	7efb      	ldrb	r3, [r7, #27]
 800713e:	3b20      	subs	r3, #32
 8007140:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	613a      	str	r2, [r7, #16]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	4413      	add	r3, r2
 800714c:	7efa      	ldrb	r2, [r7, #27]
 800714e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007150:	e7a6      	b.n	80070a0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007152:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	441a      	add	r2, r3
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <create_name+0xf4>
 8007164:	2306      	movs	r3, #6
 8007166:	e010      	b.n	800718a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2be5      	cmp	r3, #229	; 0xe5
 800716e:	d102      	bne.n	8007176 <create_name+0x102>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2205      	movs	r2, #5
 8007174:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007176:	7efb      	ldrb	r3, [r7, #27]
 8007178:	2b20      	cmp	r3, #32
 800717a:	d801      	bhi.n	8007180 <create_name+0x10c>
 800717c:	2204      	movs	r2, #4
 800717e:	e000      	b.n	8007182 <create_name+0x10e>
 8007180:	2200      	movs	r2, #0
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	330b      	adds	r3, #11
 8007186:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007188:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800718a:	4618      	mov	r0, r3
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	08008f94 	.word	0x08008f94
 8007198:	08008f1c 	.word	0x08008f1c

0800719c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80071b0:	e002      	b.n	80071b8 <follow_path+0x1c>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b2f      	cmp	r3, #47	; 0x2f
 80071be:	d0f8      	beq.n	80071b2 <follow_path+0x16>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b5c      	cmp	r3, #92	; 0x5c
 80071c6:	d0f4      	beq.n	80071b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2200      	movs	r2, #0
 80071cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b1f      	cmp	r3, #31
 80071d4:	d80a      	bhi.n	80071ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2280      	movs	r2, #128	; 0x80
 80071da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80071de:	2100      	movs	r1, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff fc01 	bl	80069e8 <dir_sdi>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
 80071ea:	e048      	b.n	800727e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071ec:	463b      	mov	r3, r7
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff ff3f 	bl	8007074 <create_name>
 80071f6:	4603      	mov	r3, r0
 80071f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d139      	bne.n	8007274 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff fe33 	bl	8006e6c <dir_find>
 8007206:	4603      	mov	r3, r0
 8007208:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007210:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	2b04      	cmp	r3, #4
 800721c:	d12c      	bne.n	8007278 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800721e:	7afb      	ldrb	r3, [r7, #11]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d127      	bne.n	8007278 <follow_path+0xdc>
 8007228:	2305      	movs	r3, #5
 800722a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800722c:	e024      	b.n	8007278 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800722e:	7afb      	ldrb	r3, [r7, #11]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d121      	bne.n	800727c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	799b      	ldrb	r3, [r3, #6]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d102      	bne.n	800724a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007244:	2305      	movs	r3, #5
 8007246:	75fb      	strb	r3, [r7, #23]
 8007248:	e019      	b.n	800727e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	8992      	ldrh	r2, [r2, #12]
 8007258:	fbb3 f0f2 	udiv	r0, r3, r2
 800725c:	fb00 f202 	mul.w	r2, r0, r2
 8007260:	1a9b      	subs	r3, r3, r2
 8007262:	440b      	add	r3, r1
 8007264:	4619      	mov	r1, r3
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f7ff fd64 	bl	8006d34 <ld_clust>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007272:	e7bb      	b.n	80071ec <follow_path+0x50>
			if (res != FR_OK) break;
 8007274:	bf00      	nop
 8007276:	e002      	b.n	800727e <follow_path+0xe2>
				break;
 8007278:	bf00      	nop
 800727a:	e000      	b.n	800727e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800727c:	bf00      	nop
			}
		}
	}

	return res;
 800727e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007294:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d031      	beq.n	8007302 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e002      	b.n	80072ac <get_ldnumber+0x24>
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	3301      	adds	r3, #1
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d903      	bls.n	80072bc <get_ldnumber+0x34>
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b3a      	cmp	r3, #58	; 0x3a
 80072ba:	d1f4      	bne.n	80072a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b3a      	cmp	r3, #58	; 0x3a
 80072c2:	d11c      	bne.n	80072fe <get_ldnumber+0x76>
			tp = *path;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	60fa      	str	r2, [r7, #12]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	3b30      	subs	r3, #48	; 0x30
 80072d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b09      	cmp	r3, #9
 80072da:	d80e      	bhi.n	80072fa <get_ldnumber+0x72>
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d10a      	bne.n	80072fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d107      	bne.n	80072fa <get_ldnumber+0x72>
					vol = (int)i;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	3301      	adds	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	e002      	b.n	8007304 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007302:	693b      	ldr	r3, [r7, #16]
}
 8007304:	4618      	mov	r0, r3
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	70da      	strb	r2, [r3, #3]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007326:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fe ff7a 	bl	8006224 <move_window>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <check_fs+0x2a>
 8007336:	2304      	movs	r3, #4
 8007338:	e038      	b.n	80073ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3334      	adds	r3, #52	; 0x34
 800733e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fcbe 	bl	8005cc4 <ld_word>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007350:	429a      	cmp	r2, r3
 8007352:	d001      	beq.n	8007358 <check_fs+0x48>
 8007354:	2303      	movs	r3, #3
 8007356:	e029      	b.n	80073ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800735e:	2be9      	cmp	r3, #233	; 0xe9
 8007360:	d009      	beq.n	8007376 <check_fs+0x66>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007368:	2beb      	cmp	r3, #235	; 0xeb
 800736a:	d11e      	bne.n	80073aa <check_fs+0x9a>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007372:	2b90      	cmp	r3, #144	; 0x90
 8007374:	d119      	bne.n	80073aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3334      	adds	r3, #52	; 0x34
 800737a:	3336      	adds	r3, #54	; 0x36
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fcb9 	bl	8005cf4 <ld_dword>
 8007382:	4603      	mov	r3, r0
 8007384:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007388:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <check_fs+0xa4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d101      	bne.n	8007392 <check_fs+0x82>
 800738e:	2300      	movs	r3, #0
 8007390:	e00c      	b.n	80073ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3334      	adds	r3, #52	; 0x34
 8007396:	3352      	adds	r3, #82	; 0x52
 8007398:	4618      	mov	r0, r3
 800739a:	f7fe fcab 	bl	8005cf4 <ld_dword>
 800739e:	4603      	mov	r3, r0
 80073a0:	4a05      	ldr	r2, [pc, #20]	; (80073b8 <check_fs+0xa8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d101      	bne.n	80073aa <check_fs+0x9a>
 80073a6:	2300      	movs	r3, #0
 80073a8:	e000      	b.n	80073ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80073aa:	2302      	movs	r3, #2
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	00544146 	.word	0x00544146
 80073b8:	33544146 	.word	0x33544146

080073bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b096      	sub	sp, #88	; 0x58
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff ff59 	bl	8007288 <get_ldnumber>
 80073d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80073d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da01      	bge.n	80073e2 <find_volume+0x26>
 80073de:	230b      	movs	r3, #11
 80073e0:	e262      	b.n	80078a8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80073e2:	4a9f      	ldr	r2, [pc, #636]	; (8007660 <find_volume+0x2a4>)
 80073e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <find_volume+0x3a>
 80073f2:	230c      	movs	r3, #12
 80073f4:	e258      	b.n	80078a8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	f023 0301 	bic.w	r3, r3, #1
 8007402:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01a      	beq.n	8007442 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe fbb9 	bl	8005b88 <disk_status>
 8007416:	4603      	mov	r3, r0
 8007418:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800741c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10c      	bne.n	8007442 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d007      	beq.n	800743e <find_volume+0x82>
 800742e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800743a:	230a      	movs	r3, #10
 800743c:	e234      	b.n	80078a8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800743e:	2300      	movs	r3, #0
 8007440:	e232      	b.n	80078a8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800744a:	b2da      	uxtb	r2, r3
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe fbb1 	bl	8005bbc <disk_initialize>
 800745a:	4603      	mov	r3, r0
 800745c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007460:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800746c:	2303      	movs	r3, #3
 800746e:	e21b      	b.n	80078a8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d007      	beq.n	8007486 <find_volume+0xca>
 8007476:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007482:	230a      	movs	r3, #10
 8007484:	e210      	b.n	80078a8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007488:	7858      	ldrb	r0, [r3, #1]
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	330c      	adds	r3, #12
 800748e:	461a      	mov	r2, r3
 8007490:	2102      	movs	r1, #2
 8007492:	f7fe fbf9 	bl	8005c88 <disk_ioctl>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <find_volume+0xe4>
 800749c:	2301      	movs	r3, #1
 800749e:	e203      	b.n	80078a8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	899b      	ldrh	r3, [r3, #12]
 80074a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a8:	d80d      	bhi.n	80074c6 <find_volume+0x10a>
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	899b      	ldrh	r3, [r3, #12]
 80074ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074b2:	d308      	bcc.n	80074c6 <find_volume+0x10a>
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	899b      	ldrh	r3, [r3, #12]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074bc:	899b      	ldrh	r3, [r3, #12]
 80074be:	3b01      	subs	r3, #1
 80074c0:	4013      	ands	r3, r2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <find_volume+0x10e>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e1ee      	b.n	80078a8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80074ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074d2:	f7ff ff1d 	bl	8007310 <check_fs>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80074dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d149      	bne.n	8007578 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80074e4:	2300      	movs	r3, #0
 80074e6:	643b      	str	r3, [r7, #64]	; 0x40
 80074e8:	e01e      	b.n	8007528 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80074ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80074f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80074f8:	4413      	add	r3, r2
 80074fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	3304      	adds	r3, #4
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d006      	beq.n	8007514 <find_volume+0x158>
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	3308      	adds	r3, #8
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fbf2 	bl	8005cf4 <ld_dword>
 8007510:	4602      	mov	r2, r0
 8007512:	e000      	b.n	8007516 <find_volume+0x15a>
 8007514:	2200      	movs	r2, #0
 8007516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	3358      	adds	r3, #88	; 0x58
 800751c:	443b      	add	r3, r7
 800751e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007524:	3301      	adds	r3, #1
 8007526:	643b      	str	r3, [r7, #64]	; 0x40
 8007528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752a:	2b03      	cmp	r3, #3
 800752c:	d9dd      	bls.n	80074ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800752e:	2300      	movs	r3, #0
 8007530:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <find_volume+0x182>
 8007538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800753a:	3b01      	subs	r3, #1
 800753c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800753e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	3358      	adds	r3, #88	; 0x58
 8007544:	443b      	add	r3, r7
 8007546:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800754a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800754c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <find_volume+0x1a2>
 8007552:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007554:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007556:	f7ff fedb 	bl	8007310 <check_fs>
 800755a:	4603      	mov	r3, r0
 800755c:	e000      	b.n	8007560 <find_volume+0x1a4>
 800755e:	2303      	movs	r3, #3
 8007560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007568:	2b01      	cmp	r3, #1
 800756a:	d905      	bls.n	8007578 <find_volume+0x1bc>
 800756c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800756e:	3301      	adds	r3, #1
 8007570:	643b      	str	r3, [r7, #64]	; 0x40
 8007572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007574:	2b03      	cmp	r3, #3
 8007576:	d9e2      	bls.n	800753e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007578:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800757c:	2b04      	cmp	r3, #4
 800757e:	d101      	bne.n	8007584 <find_volume+0x1c8>
 8007580:	2301      	movs	r3, #1
 8007582:	e191      	b.n	80078a8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007588:	2b01      	cmp	r3, #1
 800758a:	d901      	bls.n	8007590 <find_volume+0x1d4>
 800758c:	230d      	movs	r3, #13
 800758e:	e18b      	b.n	80078a8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	3334      	adds	r3, #52	; 0x34
 8007594:	330b      	adds	r3, #11
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fb94 	bl	8005cc4 <ld_word>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	899b      	ldrh	r3, [r3, #12]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d001      	beq.n	80075ac <find_volume+0x1f0>
 80075a8:	230d      	movs	r3, #13
 80075aa:	e17d      	b.n	80078a8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	3334      	adds	r3, #52	; 0x34
 80075b0:	3316      	adds	r3, #22
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fb86 	bl	8005cc4 <ld_word>
 80075b8:	4603      	mov	r3, r0
 80075ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80075bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <find_volume+0x214>
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	3334      	adds	r3, #52	; 0x34
 80075c6:	3324      	adds	r3, #36	; 0x24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe fb93 	bl	8005cf4 <ld_dword>
 80075ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075d4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80075e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e2:	789b      	ldrb	r3, [r3, #2]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d005      	beq.n	80075f4 <find_volume+0x238>
 80075e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ea:	789b      	ldrb	r3, [r3, #2]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d001      	beq.n	80075f4 <find_volume+0x238>
 80075f0:	230d      	movs	r3, #13
 80075f2:	e159      	b.n	80078a8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	789b      	ldrb	r3, [r3, #2]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007608:	b29a      	uxth	r2, r3
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	895b      	ldrh	r3, [r3, #10]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <find_volume+0x26c>
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	895b      	ldrh	r3, [r3, #10]
 800761a:	461a      	mov	r2, r3
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	895b      	ldrh	r3, [r3, #10]
 8007620:	3b01      	subs	r3, #1
 8007622:	4013      	ands	r3, r2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <find_volume+0x270>
 8007628:	230d      	movs	r3, #13
 800762a:	e13d      	b.n	80078a8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	3334      	adds	r3, #52	; 0x34
 8007630:	3311      	adds	r3, #17
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fb46 	bl	8005cc4 <ld_word>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	891b      	ldrh	r3, [r3, #8]
 8007644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007646:	8992      	ldrh	r2, [r2, #12]
 8007648:	0952      	lsrs	r2, r2, #5
 800764a:	b292      	uxth	r2, r2
 800764c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007650:	fb01 f202 	mul.w	r2, r1, r2
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <find_volume+0x2a8>
 800765c:	230d      	movs	r3, #13
 800765e:	e123      	b.n	80078a8 <find_volume+0x4ec>
 8007660:	2000127c 	.word	0x2000127c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	3334      	adds	r3, #52	; 0x34
 8007668:	3313      	adds	r3, #19
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fb2a 	bl	8005cc4 <ld_word>
 8007670:	4603      	mov	r3, r0
 8007672:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <find_volume+0x2cc>
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	3334      	adds	r3, #52	; 0x34
 800767e:	3320      	adds	r3, #32
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe fb37 	bl	8005cf4 <ld_dword>
 8007686:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	3334      	adds	r3, #52	; 0x34
 800768c:	330e      	adds	r3, #14
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fb18 	bl	8005cc4 <ld_word>
 8007694:	4603      	mov	r3, r0
 8007696:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007698:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <find_volume+0x2e6>
 800769e:	230d      	movs	r3, #13
 80076a0:	e102      	b.n	80078a8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80076a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80076a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a6:	4413      	add	r3, r2
 80076a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076aa:	8911      	ldrh	r1, [r2, #8]
 80076ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ae:	8992      	ldrh	r2, [r2, #12]
 80076b0:	0952      	lsrs	r2, r2, #5
 80076b2:	b292      	uxth	r2, r2
 80076b4:	fbb1 f2f2 	udiv	r2, r1, r2
 80076b8:	b292      	uxth	r2, r2
 80076ba:	4413      	add	r3, r2
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80076be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d201      	bcs.n	80076ca <find_volume+0x30e>
 80076c6:	230d      	movs	r3, #13
 80076c8:	e0ee      	b.n	80078a8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80076ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d2:	8952      	ldrh	r2, [r2, #10]
 80076d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <find_volume+0x328>
 80076e0:	230d      	movs	r3, #13
 80076e2:	e0e1      	b.n	80078a8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80076e4:	2303      	movs	r3, #3
 80076e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d802      	bhi.n	80076fa <find_volume+0x33e>
 80076f4:	2302      	movs	r3, #2
 80076f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007700:	4293      	cmp	r3, r2
 8007702:	d802      	bhi.n	800770a <find_volume+0x34e>
 8007704:	2301      	movs	r3, #1
 8007706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	1c9a      	adds	r2, r3, #2
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007716:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007718:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800771a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771c:	441a      	add	r2, r3
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007722:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	441a      	add	r2, r3
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800772c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007730:	2b03      	cmp	r3, #3
 8007732:	d11e      	bne.n	8007772 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	3334      	adds	r3, #52	; 0x34
 8007738:	332a      	adds	r3, #42	; 0x2a
 800773a:	4618      	mov	r0, r3
 800773c:	f7fe fac2 	bl	8005cc4 <ld_word>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <find_volume+0x38e>
 8007746:	230d      	movs	r3, #13
 8007748:	e0ae      	b.n	80078a8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	891b      	ldrh	r3, [r3, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <find_volume+0x39a>
 8007752:	230d      	movs	r3, #13
 8007754:	e0a8      	b.n	80078a8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	3334      	adds	r3, #52	; 0x34
 800775a:	332c      	adds	r3, #44	; 0x2c
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe fac9 	bl	8005cf4 <ld_dword>
 8007762:	4602      	mov	r2, r0
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	647b      	str	r3, [r7, #68]	; 0x44
 8007770:	e01f      	b.n	80077b2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	891b      	ldrh	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <find_volume+0x3c2>
 800777a:	230d      	movs	r3, #13
 800777c:	e094      	b.n	80078a8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800777e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007784:	441a      	add	r2, r3
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800778a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800778e:	2b02      	cmp	r3, #2
 8007790:	d103      	bne.n	800779a <find_volume+0x3de>
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	e00a      	b.n	80077b0 <find_volume+0x3f4>
 800779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	4613      	mov	r3, r2
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	4413      	add	r3, r2
 80077a4:	085a      	lsrs	r2, r3, #1
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80077b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	69da      	ldr	r2, [r3, #28]
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	899b      	ldrh	r3, [r3, #12]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077be:	440b      	add	r3, r1
 80077c0:	3b01      	subs	r3, #1
 80077c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077c4:	8989      	ldrh	r1, [r1, #12]
 80077c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d201      	bcs.n	80077d2 <find_volume+0x416>
 80077ce:	230d      	movs	r3, #13
 80077d0:	e06a      	b.n	80078a8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077d8:	615a      	str	r2, [r3, #20]
 80077da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077dc:	695a      	ldr	r2, [r3, #20]
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	2280      	movs	r2, #128	; 0x80
 80077e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80077e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d149      	bne.n	8007884 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	3334      	adds	r3, #52	; 0x34
 80077f4:	3330      	adds	r3, #48	; 0x30
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fa64 	bl	8005cc4 <ld_word>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d140      	bne.n	8007884 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007804:	3301      	adds	r3, #1
 8007806:	4619      	mov	r1, r3
 8007808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800780a:	f7fe fd0b 	bl	8006224 <move_window>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d137      	bne.n	8007884 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	2200      	movs	r2, #0
 8007818:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	3334      	adds	r3, #52	; 0x34
 800781e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fa4e 	bl	8005cc4 <ld_word>
 8007828:	4603      	mov	r3, r0
 800782a:	461a      	mov	r2, r3
 800782c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007830:	429a      	cmp	r2, r3
 8007832:	d127      	bne.n	8007884 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	3334      	adds	r3, #52	; 0x34
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fa5b 	bl	8005cf4 <ld_dword>
 800783e:	4603      	mov	r3, r0
 8007840:	4a1b      	ldr	r2, [pc, #108]	; (80078b0 <find_volume+0x4f4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d11e      	bne.n	8007884 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	3334      	adds	r3, #52	; 0x34
 800784a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe fa50 	bl	8005cf4 <ld_dword>
 8007854:	4603      	mov	r3, r0
 8007856:	4a17      	ldr	r2, [pc, #92]	; (80078b4 <find_volume+0x4f8>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d113      	bne.n	8007884 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	3334      	adds	r3, #52	; 0x34
 8007860:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007864:	4618      	mov	r0, r3
 8007866:	f7fe fa45 	bl	8005cf4 <ld_dword>
 800786a:	4602      	mov	r2, r0
 800786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	3334      	adds	r3, #52	; 0x34
 8007874:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fa3b 	bl	8005cf4 <ld_dword>
 800787e:	4602      	mov	r2, r0
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007886:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800788a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800788c:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <find_volume+0x4fc>)
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <find_volume+0x4fc>)
 8007896:	801a      	strh	r2, [r3, #0]
 8007898:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <find_volume+0x4fc>)
 800789a:	881a      	ldrh	r2, [r3, #0]
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80078a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078a2:	f7fe fc57 	bl	8006154 <clear_lock>
#endif
	return FR_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3758      	adds	r7, #88	; 0x58
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	41615252 	.word	0x41615252
 80078b4:	61417272 	.word	0x61417272
 80078b8:	20001280 	.word	0x20001280

080078bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80078c6:	2309      	movs	r3, #9
 80078c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01c      	beq.n	800790a <validate+0x4e>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d018      	beq.n	800790a <validate+0x4e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d013      	beq.n	800790a <validate+0x4e>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	889a      	ldrh	r2, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	88db      	ldrh	r3, [r3, #6]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d10c      	bne.n	800790a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe f946 	bl	8005b88 <disk_status>
 80078fc:	4603      	mov	r3, r0
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <validate+0x4e>
			res = FR_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <validate+0x5a>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	e000      	b.n	8007918 <validate+0x5c>
 8007916:	2300      	movs	r3, #0
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	6013      	str	r3, [r2, #0]
	return res;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b088      	sub	sp, #32
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800793a:	f107 0310 	add.w	r3, r7, #16
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff fca2 	bl	8007288 <get_ldnumber>
 8007944:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2b00      	cmp	r3, #0
 800794a:	da01      	bge.n	8007950 <f_mount+0x28>
 800794c:	230b      	movs	r3, #11
 800794e:	e02b      	b.n	80079a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007950:	4a17      	ldr	r2, [pc, #92]	; (80079b0 <f_mount+0x88>)
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007958:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007960:	69b8      	ldr	r0, [r7, #24]
 8007962:	f7fe fbf7 	bl	8006154 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	490d      	ldr	r1, [pc, #52]	; (80079b0 <f_mount+0x88>)
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <f_mount+0x66>
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d001      	beq.n	8007992 <f_mount+0x6a>
 800798e:	2300      	movs	r3, #0
 8007990:	e00a      	b.n	80079a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007992:	f107 010c 	add.w	r1, r7, #12
 8007996:	f107 0308 	add.w	r3, r7, #8
 800799a:	2200      	movs	r2, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff fd0d 	bl	80073bc <find_volume>
 80079a2:	4603      	mov	r3, r0
 80079a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3720      	adds	r7, #32
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	2000127c 	.word	0x2000127c

080079b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b098      	sub	sp, #96	; 0x60
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <f_open+0x18>
 80079c8:	2309      	movs	r3, #9
 80079ca:	e1bb      	b.n	8007d44 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80079d4:	79fa      	ldrb	r2, [r7, #7]
 80079d6:	f107 0110 	add.w	r1, r7, #16
 80079da:	f107 0308 	add.w	r3, r7, #8
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff fcec 	bl	80073bc <find_volume>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80079ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f040 819f 	bne.w	8007d32 <f_open+0x37e>
		dj.obj.fs = fs;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	f107 0314 	add.w	r3, r7, #20
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff fbcb 	bl	800719c <follow_path>
 8007a06:	4603      	mov	r3, r0
 8007a08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d11a      	bne.n	8007a4a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007a14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a18:	b25b      	sxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	da03      	bge.n	8007a26 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007a1e:	2306      	movs	r3, #6
 8007a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007a24:	e011      	b.n	8007a4a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf14      	ite	ne
 8007a30:	2301      	movne	r3, #1
 8007a32:	2300      	moveq	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	f107 0314 	add.w	r3, r7, #20
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fa40 	bl	8005ec4 <chk_lock>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	f003 031c 	and.w	r3, r3, #28
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d07f      	beq.n	8007b54 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d017      	beq.n	8007a8c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007a5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d10e      	bne.n	8007a82 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a64:	f7fe fa8a 	bl	8005f7c <enq_lock>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d006      	beq.n	8007a7c <f_open+0xc8>
 8007a6e:	f107 0314 	add.w	r3, r7, #20
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff fa4f 	bl	8006f16 <dir_register>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	e000      	b.n	8007a7e <f_open+0xca>
 8007a7c:	2312      	movs	r3, #18
 8007a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	f043 0308 	orr.w	r3, r3, #8
 8007a88:	71fb      	strb	r3, [r7, #7]
 8007a8a:	e010      	b.n	8007aae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007a8c:	7ebb      	ldrb	r3, [r7, #26]
 8007a8e:	f003 0311 	and.w	r3, r3, #17
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <f_open+0xea>
					res = FR_DENIED;
 8007a96:	2307      	movs	r3, #7
 8007a98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007a9c:	e007      	b.n	8007aae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <f_open+0xfa>
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d168      	bne.n	8007b88 <f_open+0x1d4>
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d063      	beq.n	8007b88 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007ac0:	f7fd fe9a 	bl	80057f8 <get_fattime>
 8007ac4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac8:	330e      	adds	r3, #14
 8007aca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe f94f 	bl	8005d70 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad4:	3316      	adds	r3, #22
 8007ad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe f949 	bl	8005d70 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae0:	330b      	adds	r3, #11
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aea:	4611      	mov	r1, r2
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff f921 	bl	8006d34 <ld_clust>
 8007af2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007af8:	2200      	movs	r2, #0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff f939 	bl	8006d72 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b02:	331c      	adds	r3, #28
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe f932 	bl	8005d70 <st_dword>
					fs->wflag = 1;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d037      	beq.n	8007b88 <f_open+0x1d4>
						dw = fs->winsect;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007b1e:	f107 0314 	add.w	r3, r7, #20
 8007b22:	2200      	movs	r2, #0
 8007b24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe fe29 	bl	800677e <remove_chain>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d126      	bne.n	8007b88 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fb70 	bl	8006224 <move_window>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b4e:	3a01      	subs	r2, #1
 8007b50:	611a      	str	r2, [r3, #16]
 8007b52:	e019      	b.n	8007b88 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007b54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d115      	bne.n	8007b88 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007b5c:	7ebb      	ldrb	r3, [r7, #26]
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <f_open+0x1ba>
					res = FR_NO_FILE;
 8007b66:	2304      	movs	r3, #4
 8007b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007b6c:	e00c      	b.n	8007b88 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d007      	beq.n	8007b88 <f_open+0x1d4>
 8007b78:	7ebb      	ldrb	r3, [r7, #26]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <f_open+0x1d4>
						res = FR_DENIED;
 8007b82:	2307      	movs	r3, #7
 8007b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007b88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d128      	bne.n	8007be2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	f003 0308 	and.w	r3, r3, #8
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	f023 0301 	bic.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	bf14      	ite	ne
 8007bba:	2301      	movne	r3, #1
 8007bbc:	2300      	moveq	r3, #0
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	f107 0314 	add.w	r3, r7, #20
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fe f9f9 	bl	8005fc0 <inc_lock>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d102      	bne.n	8007be2 <f_open+0x22e>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007be2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f040 80a3 	bne.w	8007d32 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff f89e 	bl	8006d34 <ld_clust>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c00:	331c      	adds	r3, #28
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe f876 	bl	8005cf4 <ld_dword>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	88da      	ldrh	r2, [r3, #6]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	79fa      	ldrb	r2, [r7, #7]
 8007c26:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3330      	adds	r3, #48	; 0x30
 8007c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007c42:	2100      	movs	r1, #0
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe f8e0 	bl	8005e0a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d06e      	beq.n	8007d32 <f_open+0x37e>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d06a      	beq.n	8007d32 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	895b      	ldrh	r3, [r3, #10]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	899b      	ldrh	r3, [r3, #12]
 8007c6e:	fb02 f303 	mul.w	r3, r2, r3
 8007c72:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8007c80:	e016      	b.n	8007cb0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fb89 	bl	800639e <get_fat>
 8007c8c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d802      	bhi.n	8007c9a <f_open+0x2e6>
 8007c94:	2302      	movs	r3, #2
 8007c96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ca0:	d102      	bne.n	8007ca8 <f_open+0x2f4>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	657b      	str	r3, [r7, #84]	; 0x54
 8007cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d103      	bne.n	8007cc0 <f_open+0x30c>
 8007cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d8e0      	bhi.n	8007c82 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cc4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d131      	bne.n	8007d32 <f_open+0x37e>
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	899b      	ldrh	r3, [r3, #12]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cda:	fb01 f202 	mul.w	r2, r1, r2
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d026      	beq.n	8007d32 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fe fb39 	bl	8006360 <clust2sect>
 8007cee:	6478      	str	r0, [r7, #68]	; 0x44
 8007cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d103      	bne.n	8007cfe <f_open+0x34a>
						res = FR_INT_ERR;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007cfc:	e019      	b.n	8007d32 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	899b      	ldrh	r3, [r3, #12]
 8007d02:	461a      	mov	r2, r3
 8007d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d06:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d0c:	441a      	add	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	7858      	ldrb	r0, [r3, #1]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a1a      	ldr	r2, [r3, #32]
 8007d20:	2301      	movs	r3, #1
 8007d22:	f7fd ff71 	bl	8005c08 <disk_read>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <f_open+0x37e>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007d32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <f_open+0x38c>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007d40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3760      	adds	r7, #96	; 0x60
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08c      	sub	sp, #48	; 0x30
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f107 0210 	add.w	r2, r7, #16
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff fda5 	bl	80078bc <validate>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d107      	bne.n	8007d90 <f_write+0x44>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	7d5b      	ldrb	r3, [r3, #21]
 8007d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <f_write+0x4a>
 8007d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d94:	e16a      	b.n	800806c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	7d1b      	ldrb	r3, [r3, #20]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <f_write+0x5a>
 8007da2:	2307      	movs	r3, #7
 8007da4:	e162      	b.n	800806c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	441a      	add	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	f080 814c 	bcs.w	8008050 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	43db      	mvns	r3, r3
 8007dbe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007dc0:	e146      	b.n	8008050 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	8992      	ldrh	r2, [r2, #12]
 8007dca:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dce:	fb01 f202 	mul.w	r2, r1, r2
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f040 80f1 	bne.w	8007fbc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	8992      	ldrh	r2, [r2, #12]
 8007de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	8952      	ldrh	r2, [r2, #10]
 8007dea:	3a01      	subs	r2, #1
 8007dec:	4013      	ands	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d143      	bne.n	8007e7e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10c      	bne.n	8007e18 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d11a      	bne.n	8007e40 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fd1a 	bl	8006848 <create_chain>
 8007e14:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e16:	e013      	b.n	8007e40 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d007      	beq.n	8007e30 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	4619      	mov	r1, r3
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7fe fda6 	bl	8006978 <clmt_clust>
 8007e2c:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e2e:	e007      	b.n	8007e40 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f7fe fd05 	bl	8006848 <create_chain>
 8007e3e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 8109 	beq.w	800805a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d104      	bne.n	8007e58 <f_write+0x10c>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2202      	movs	r2, #2
 8007e52:	755a      	strb	r2, [r3, #21]
 8007e54:	2302      	movs	r3, #2
 8007e56:	e109      	b.n	800806c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e5e:	d104      	bne.n	8007e6a <f_write+0x11e>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	755a      	strb	r2, [r3, #21]
 8007e66:	2301      	movs	r3, #1
 8007e68:	e100      	b.n	800806c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e6e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <f_write+0x132>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e7c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	7d1b      	ldrb	r3, [r3, #20]
 8007e82:	b25b      	sxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	da18      	bge.n	8007eba <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	7858      	ldrb	r0, [r3, #1]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a1a      	ldr	r2, [r3, #32]
 8007e96:	2301      	movs	r3, #1
 8007e98:	f7fd fed6 	bl	8005c48 <disk_write>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <f_write+0x160>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	755a      	strb	r2, [r3, #21]
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e0df      	b.n	800806c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	7d1b      	ldrb	r3, [r3, #20]
 8007eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	f7fe fa4c 	bl	8006360 <clust2sect>
 8007ec8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <f_write+0x18e>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	755a      	strb	r2, [r3, #21]
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e0c8      	b.n	800806c <f_write+0x320>
			sect += csect;
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	4413      	add	r3, r2
 8007ee0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	899b      	ldrh	r3, [r3, #12]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d043      	beq.n	8007f7e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	4413      	add	r3, r2
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	8952      	ldrh	r2, [r2, #10]
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d905      	bls.n	8007f10 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	895b      	ldrh	r3, [r3, #10]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	7858      	ldrb	r0, [r3, #1]
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	69f9      	ldr	r1, [r7, #28]
 8007f1a:	f7fd fe95 	bl	8005c48 <disk_write>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <f_write+0x1e2>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	755a      	strb	r2, [r3, #21]
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e09e      	b.n	800806c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a1a      	ldr	r2, [r3, #32]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	6a3a      	ldr	r2, [r7, #32]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d918      	bls.n	8007f6e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1a      	ldr	r2, [r3, #32]
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	8992      	ldrh	r2, [r2, #12]
 8007f4e:	fb02 f303 	mul.w	r3, r2, r3
 8007f52:	69fa      	ldr	r2, [r7, #28]
 8007f54:	18d1      	adds	r1, r2, r3
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	899b      	ldrh	r3, [r3, #12]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	f7fd ff34 	bl	8005dc8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	7d1b      	ldrb	r3, [r3, #20]
 8007f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	899b      	ldrh	r3, [r3, #12]
 8007f72:	461a      	mov	r2, r3
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	fb02 f303 	mul.w	r3, r2, r3
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007f7c:	e04b      	b.n	8008016 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d016      	beq.n	8007fb6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	699a      	ldr	r2, [r3, #24]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d210      	bcs.n	8007fb6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	7858      	ldrb	r0, [r3, #1]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	f7fd fe31 	bl	8005c08 <disk_read>
 8007fa6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	755a      	strb	r2, [r3, #21]
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e05a      	b.n	800806c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	899b      	ldrh	r3, [r3, #12]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	8992      	ldrh	r2, [r2, #12]
 8007fca:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fce:	fb01 f202 	mul.w	r2, r1, r2
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	1ac3      	subs	r3, r0, r3
 8007fd6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d901      	bls.n	8007fe4 <f_write+0x298>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	8992      	ldrh	r2, [r2, #12]
 8007ff2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ff6:	fb00 f202 	mul.w	r2, r0, r2
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008000:	69f9      	ldr	r1, [r7, #28]
 8008002:	4618      	mov	r0, r3
 8008004:	f7fd fee0 	bl	8005dc8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	7d1b      	ldrb	r3, [r3, #20]
 800800c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008010:	b2da      	uxtb	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	4413      	add	r3, r2
 800801c:	61fb      	str	r3, [r7, #28]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	699a      	ldr	r2, [r3, #24]
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	619a      	str	r2, [r3, #24]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	429a      	cmp	r2, r3
 8008034:	bf38      	it	cc
 8008036:	461a      	movcc	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	60da      	str	r2, [r3, #12]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	441a      	add	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f47f aeb5 	bne.w	8007dc2 <f_write+0x76>
 8008058:	e000      	b.n	800805c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800805a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	7d1b      	ldrb	r3, [r3, #20]
 8008060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008064:	b2da      	uxtb	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3730      	adds	r7, #48	; 0x30
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f107 0208 	add.w	r2, r7, #8
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff fc19 	bl	80078bc <validate>
 800808a:	4603      	mov	r3, r0
 800808c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d168      	bne.n	8008166 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	7d1b      	ldrb	r3, [r3, #20]
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d062      	beq.n	8008166 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	7d1b      	ldrb	r3, [r3, #20]
 80080a4:	b25b      	sxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da15      	bge.n	80080d6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	7858      	ldrb	r0, [r3, #1]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1a      	ldr	r2, [r3, #32]
 80080b8:	2301      	movs	r3, #1
 80080ba:	f7fd fdc5 	bl	8005c48 <disk_write>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <f_sync+0x54>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e04f      	b.n	8008168 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	7d1b      	ldrb	r3, [r3, #20]
 80080cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80080d6:	f7fd fb8f 	bl	80057f8 <get_fattime>
 80080da:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f7fe f89d 	bl	8006224 <move_window>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d138      	bne.n	8008166 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	330b      	adds	r3, #11
 80080fe:	781a      	ldrb	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	330b      	adds	r3, #11
 8008104:	f042 0220 	orr.w	r2, r2, #32
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	461a      	mov	r2, r3
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	f7fe fe2b 	bl	8006d72 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f103 021c 	add.w	r2, r3, #28
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	4619      	mov	r1, r3
 8008128:	4610      	mov	r0, r2
 800812a:	f7fd fe21 	bl	8005d70 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3316      	adds	r3, #22
 8008132:	6939      	ldr	r1, [r7, #16]
 8008134:	4618      	mov	r0, r3
 8008136:	f7fd fe1b 	bl	8005d70 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3312      	adds	r3, #18
 800813e:	2100      	movs	r1, #0
 8008140:	4618      	mov	r0, r3
 8008142:	f7fd fdfa 	bl	8005d3a <st_word>
					fs->wflag = 1;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2201      	movs	r2, #1
 800814a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe f896 	bl	8006280 <sync_fs>
 8008154:	4603      	mov	r3, r0
 8008156:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	7d1b      	ldrb	r3, [r3, #20]
 800815c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008160:	b2da      	uxtb	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008166:	7dfb      	ldrb	r3, [r7, #23]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff ff7b 	bl	8008074 <f_sync>
 800817e:	4603      	mov	r3, r0
 8008180:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d118      	bne.n	80081ba <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f107 0208 	add.w	r2, r7, #8
 800818e:	4611      	mov	r1, r2
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff fb93 	bl	80078bc <validate>
 8008196:	4603      	mov	r3, r0
 8008198:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800819a:	7bfb      	ldrb	r3, [r7, #15]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10c      	bne.n	80081ba <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fd ff99 	bl	80060dc <dec_lock>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d102      	bne.n	80081ba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <f_opendir+0x14>
 80081d4:	2309      	movs	r3, #9
 80081d6:	e064      	b.n	80082a2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80081dc:	f107 010c 	add.w	r1, r7, #12
 80081e0:	463b      	mov	r3, r7
 80081e2:	2200      	movs	r2, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff f8e9 	bl	80073bc <find_volume>
 80081ea:	4603      	mov	r3, r0
 80081ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d14f      	bne.n	8008294 <f_opendir+0xd0>
		obj->fs = fs;
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7fe ffcc 	bl	800719c <follow_path>
 8008204:	4603      	mov	r3, r0
 8008206:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d13d      	bne.n	800828a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008214:	b25b      	sxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	db12      	blt.n	8008240 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	799b      	ldrb	r3, [r3, #6]
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f7fe fd80 	bl	8006d34 <ld_clust>
 8008234:	4602      	mov	r2, r0
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	609a      	str	r2, [r3, #8]
 800823a:	e001      	b.n	8008240 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800823c:	2305      	movs	r3, #5
 800823e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d121      	bne.n	800828a <f_opendir+0xc6>
				obj->id = fs->id;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	88da      	ldrh	r2, [r3, #6]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800824e:	2100      	movs	r1, #0
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fe fbc9 	bl	80069e8 <dir_sdi>
 8008256:	4603      	mov	r3, r0
 8008258:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800825a:	7dfb      	ldrb	r3, [r7, #23]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d114      	bne.n	800828a <f_opendir+0xc6>
					if (obj->sclust) {
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00d      	beq.n	8008284 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008268:	2100      	movs	r1, #0
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7fd fea8 	bl	8005fc0 <inc_lock>
 8008270:	4602      	mov	r2, r0
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d105      	bne.n	800828a <f_opendir+0xc6>
 800827e:	2312      	movs	r3, #18
 8008280:	75fb      	strb	r3, [r7, #23]
 8008282:	e002      	b.n	800828a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	2200      	movs	r2, #0
 8008288:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	2b04      	cmp	r3, #4
 800828e:	d101      	bne.n	8008294 <f_opendir+0xd0>
 8008290:	2305      	movs	r3, #5
 8008292:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <f_opendir+0xdc>
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f107 0208 	add.w	r2, r7, #8
 80082b8:	4611      	mov	r1, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff fafe 	bl	80078bc <validate>
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d110      	bne.n	80082ec <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d006      	beq.n	80082e0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd ff00 	bl	80060dc <dec_lock>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d102      	bne.n	80082ec <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f107 0208 	add.w	r2, r7, #8
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff fad7 	bl	80078bc <validate>
 800830e:	4603      	mov	r3, r0
 8008310:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d126      	bne.n	8008366 <f_readdir+0x70>
		if (!fno) {
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800831e:	2100      	movs	r1, #0
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7fe fb61 	bl	80069e8 <dir_sdi>
 8008326:	4603      	mov	r3, r0
 8008328:	73fb      	strb	r3, [r7, #15]
 800832a:	e01c      	b.n	8008366 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800832c:	2100      	movs	r1, #0
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7fe fd3f 	bl	8006db2 <dir_read>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	2b04      	cmp	r3, #4
 800833c:	d101      	bne.n	8008342 <f_readdir+0x4c>
 800833e:	2300      	movs	r3, #0
 8008340:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10e      	bne.n	8008366 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fe fe33 	bl	8006fb6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008350:	2100      	movs	r1, #0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7fe fbd1 	bl	8006afa <dir_next>
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	2b04      	cmp	r3, #4
 8008360:	d101      	bne.n	8008366 <f_readdir+0x70>
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008366:	7bfb      	ldrb	r3, [r7, #15]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b09e      	sub	sp, #120	; 0x78
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800837c:	f107 010c 	add.w	r1, r7, #12
 8008380:	1d3b      	adds	r3, r7, #4
 8008382:	2202      	movs	r2, #2
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff f819 	bl	80073bc <find_volume>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8008394:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008398:	2b00      	cmp	r3, #0
 800839a:	f040 808e 	bne.w	80084ba <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fe fef8 	bl	800719c <follow_path>
 80083ac:	4603      	mov	r3, r0
 80083ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80083b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d108      	bne.n	80083cc <f_unlink+0x5c>
 80083ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80083be:	2102      	movs	r1, #2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fd fd7f 	bl	8005ec4 <chk_lock>
 80083c6:	4603      	mov	r3, r0
 80083c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80083cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d172      	bne.n	80084ba <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80083d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80083d8:	b25b      	sxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	da03      	bge.n	80083e6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80083de:	2306      	movs	r3, #6
 80083e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80083e4:	e008      	b.n	80083f8 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80083e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80083f2:	2307      	movs	r3, #7
 80083f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80083f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d134      	bne.n	800846a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008404:	4611      	mov	r1, r2
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fc94 	bl	8006d34 <ld_clust>
 800840c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800840e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	2b00      	cmp	r3, #0
 8008418:	d027      	beq.n	800846a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800841e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008420:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008422:	f107 0310 	add.w	r3, r7, #16
 8008426:	2100      	movs	r1, #0
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fadd 	bl	80069e8 <dir_sdi>
 800842e:	4603      	mov	r3, r0
 8008430:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8008434:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008438:	2b00      	cmp	r3, #0
 800843a:	d116      	bne.n	800846a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800843c:	f107 0310 	add.w	r3, r7, #16
 8008440:	2100      	movs	r1, #0
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fcb5 	bl	8006db2 <dir_read>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800844e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <f_unlink+0xec>
 8008456:	2307      	movs	r3, #7
 8008458:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800845c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008460:	2b04      	cmp	r3, #4
 8008462:	d102      	bne.n	800846a <f_unlink+0xfa>
 8008464:	2300      	movs	r3, #0
 8008466:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800846a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800846e:	2b00      	cmp	r3, #0
 8008470:	d123      	bne.n	80084ba <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008472:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe fd7f 	bl	8006f7a <dir_remove>
 800847c:	4603      	mov	r3, r0
 800847e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008482:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10c      	bne.n	80084a4 <f_unlink+0x134>
 800848a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800848c:	2b00      	cmp	r3, #0
 800848e:	d009      	beq.n	80084a4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008490:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008494:	2200      	movs	r2, #0
 8008496:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe f970 	bl	800677e <remove_chain>
 800849e:	4603      	mov	r3, r0
 80084a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80084a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <f_unlink+0x14a>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fd fee6 	bl	8006280 <sync_fs>
 80084b4:	4603      	mov	r3, r0
 80084b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80084ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3778      	adds	r7, #120	; 0x78
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	4613      	mov	r3, r2
 80084d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80084de:	4b1f      	ldr	r3, [pc, #124]	; (800855c <FATFS_LinkDriverEx+0x94>)
 80084e0:	7a5b      	ldrb	r3, [r3, #9]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d131      	bne.n	800854c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084e8:	4b1c      	ldr	r3, [pc, #112]	; (800855c <FATFS_LinkDriverEx+0x94>)
 80084ea:	7a5b      	ldrb	r3, [r3, #9]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	461a      	mov	r2, r3
 80084f0:	4b1a      	ldr	r3, [pc, #104]	; (800855c <FATFS_LinkDriverEx+0x94>)
 80084f2:	2100      	movs	r1, #0
 80084f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80084f6:	4b19      	ldr	r3, [pc, #100]	; (800855c <FATFS_LinkDriverEx+0x94>)
 80084f8:	7a5b      	ldrb	r3, [r3, #9]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	4a17      	ldr	r2, [pc, #92]	; (800855c <FATFS_LinkDriverEx+0x94>)
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008506:	4b15      	ldr	r3, [pc, #84]	; (800855c <FATFS_LinkDriverEx+0x94>)
 8008508:	7a5b      	ldrb	r3, [r3, #9]
 800850a:	b2db      	uxtb	r3, r3
 800850c:	461a      	mov	r2, r3
 800850e:	4b13      	ldr	r3, [pc, #76]	; (800855c <FATFS_LinkDriverEx+0x94>)
 8008510:	4413      	add	r3, r2
 8008512:	79fa      	ldrb	r2, [r7, #7]
 8008514:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008516:	4b11      	ldr	r3, [pc, #68]	; (800855c <FATFS_LinkDriverEx+0x94>)
 8008518:	7a5b      	ldrb	r3, [r3, #9]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	b2d1      	uxtb	r1, r2
 8008520:	4a0e      	ldr	r2, [pc, #56]	; (800855c <FATFS_LinkDriverEx+0x94>)
 8008522:	7251      	strb	r1, [r2, #9]
 8008524:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008526:	7dbb      	ldrb	r3, [r7, #22]
 8008528:	3330      	adds	r3, #48	; 0x30
 800852a:	b2da      	uxtb	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	3301      	adds	r3, #1
 8008534:	223a      	movs	r2, #58	; 0x3a
 8008536:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	3302      	adds	r3, #2
 800853c:	222f      	movs	r2, #47	; 0x2f
 800853e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	3303      	adds	r3, #3
 8008544:	2200      	movs	r2, #0
 8008546:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
}
 800854e:	4618      	mov	r0, r3
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	200012a4 	.word	0x200012a4

08008560 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800856a:	2200      	movs	r2, #0
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7ff ffaa 	bl	80084c8 <FATFS_LinkDriverEx>
 8008574:	4603      	mov	r3, r0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
	...

08008580 <__errno>:
 8008580:	4b01      	ldr	r3, [pc, #4]	; (8008588 <__errno+0x8>)
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	2000000c 	.word	0x2000000c

0800858c <__libc_init_array>:
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	4d0d      	ldr	r5, [pc, #52]	; (80085c4 <__libc_init_array+0x38>)
 8008590:	4c0d      	ldr	r4, [pc, #52]	; (80085c8 <__libc_init_array+0x3c>)
 8008592:	1b64      	subs	r4, r4, r5
 8008594:	10a4      	asrs	r4, r4, #2
 8008596:	2600      	movs	r6, #0
 8008598:	42a6      	cmp	r6, r4
 800859a:	d109      	bne.n	80085b0 <__libc_init_array+0x24>
 800859c:	4d0b      	ldr	r5, [pc, #44]	; (80085cc <__libc_init_array+0x40>)
 800859e:	4c0c      	ldr	r4, [pc, #48]	; (80085d0 <__libc_init_array+0x44>)
 80085a0:	f000 fc9e 	bl	8008ee0 <_init>
 80085a4:	1b64      	subs	r4, r4, r5
 80085a6:	10a4      	asrs	r4, r4, #2
 80085a8:	2600      	movs	r6, #0
 80085aa:	42a6      	cmp	r6, r4
 80085ac:	d105      	bne.n	80085ba <__libc_init_array+0x2e>
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b4:	4798      	blx	r3
 80085b6:	3601      	adds	r6, #1
 80085b8:	e7ee      	b.n	8008598 <__libc_init_array+0xc>
 80085ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80085be:	4798      	blx	r3
 80085c0:	3601      	adds	r6, #1
 80085c2:	e7f2      	b.n	80085aa <__libc_init_array+0x1e>
 80085c4:	08009050 	.word	0x08009050
 80085c8:	08009050 	.word	0x08009050
 80085cc:	08009050 	.word	0x08009050
 80085d0:	08009054 	.word	0x08009054

080085d4 <malloc>:
 80085d4:	4b02      	ldr	r3, [pc, #8]	; (80085e0 <malloc+0xc>)
 80085d6:	4601      	mov	r1, r0
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	f000 b87f 	b.w	80086dc <_malloc_r>
 80085de:	bf00      	nop
 80085e0:	2000000c 	.word	0x2000000c

080085e4 <free>:
 80085e4:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <free+0xc>)
 80085e6:	4601      	mov	r1, r0
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	f000 b80b 	b.w	8008604 <_free_r>
 80085ee:	bf00      	nop
 80085f0:	2000000c 	.word	0x2000000c

080085f4 <memset>:
 80085f4:	4402      	add	r2, r0
 80085f6:	4603      	mov	r3, r0
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d100      	bne.n	80085fe <memset+0xa>
 80085fc:	4770      	bx	lr
 80085fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008602:	e7f9      	b.n	80085f8 <memset+0x4>

08008604 <_free_r>:
 8008604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008606:	2900      	cmp	r1, #0
 8008608:	d044      	beq.n	8008694 <_free_r+0x90>
 800860a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800860e:	9001      	str	r0, [sp, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f1a1 0404 	sub.w	r4, r1, #4
 8008616:	bfb8      	it	lt
 8008618:	18e4      	addlt	r4, r4, r3
 800861a:	f000 f903 	bl	8008824 <__malloc_lock>
 800861e:	4a1e      	ldr	r2, [pc, #120]	; (8008698 <_free_r+0x94>)
 8008620:	9801      	ldr	r0, [sp, #4]
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	b933      	cbnz	r3, 8008634 <_free_r+0x30>
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	6014      	str	r4, [r2, #0]
 800862a:	b003      	add	sp, #12
 800862c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008630:	f000 b8fe 	b.w	8008830 <__malloc_unlock>
 8008634:	42a3      	cmp	r3, r4
 8008636:	d908      	bls.n	800864a <_free_r+0x46>
 8008638:	6825      	ldr	r5, [r4, #0]
 800863a:	1961      	adds	r1, r4, r5
 800863c:	428b      	cmp	r3, r1
 800863e:	bf01      	itttt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	1949      	addeq	r1, r1, r5
 8008646:	6021      	streq	r1, [r4, #0]
 8008648:	e7ed      	b.n	8008626 <_free_r+0x22>
 800864a:	461a      	mov	r2, r3
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b10b      	cbz	r3, 8008654 <_free_r+0x50>
 8008650:	42a3      	cmp	r3, r4
 8008652:	d9fa      	bls.n	800864a <_free_r+0x46>
 8008654:	6811      	ldr	r1, [r2, #0]
 8008656:	1855      	adds	r5, r2, r1
 8008658:	42a5      	cmp	r5, r4
 800865a:	d10b      	bne.n	8008674 <_free_r+0x70>
 800865c:	6824      	ldr	r4, [r4, #0]
 800865e:	4421      	add	r1, r4
 8008660:	1854      	adds	r4, r2, r1
 8008662:	42a3      	cmp	r3, r4
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	d1e0      	bne.n	800862a <_free_r+0x26>
 8008668:	681c      	ldr	r4, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	6053      	str	r3, [r2, #4]
 800866e:	4421      	add	r1, r4
 8008670:	6011      	str	r1, [r2, #0]
 8008672:	e7da      	b.n	800862a <_free_r+0x26>
 8008674:	d902      	bls.n	800867c <_free_r+0x78>
 8008676:	230c      	movs	r3, #12
 8008678:	6003      	str	r3, [r0, #0]
 800867a:	e7d6      	b.n	800862a <_free_r+0x26>
 800867c:	6825      	ldr	r5, [r4, #0]
 800867e:	1961      	adds	r1, r4, r5
 8008680:	428b      	cmp	r3, r1
 8008682:	bf04      	itt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	6063      	str	r3, [r4, #4]
 800868a:	bf04      	itt	eq
 800868c:	1949      	addeq	r1, r1, r5
 800868e:	6021      	streq	r1, [r4, #0]
 8008690:	6054      	str	r4, [r2, #4]
 8008692:	e7ca      	b.n	800862a <_free_r+0x26>
 8008694:	b003      	add	sp, #12
 8008696:	bd30      	pop	{r4, r5, pc}
 8008698:	200012b0 	.word	0x200012b0

0800869c <sbrk_aligned>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	4e0e      	ldr	r6, [pc, #56]	; (80086d8 <sbrk_aligned+0x3c>)
 80086a0:	460c      	mov	r4, r1
 80086a2:	6831      	ldr	r1, [r6, #0]
 80086a4:	4605      	mov	r5, r0
 80086a6:	b911      	cbnz	r1, 80086ae <sbrk_aligned+0x12>
 80086a8:	f000 f88c 	bl	80087c4 <_sbrk_r>
 80086ac:	6030      	str	r0, [r6, #0]
 80086ae:	4621      	mov	r1, r4
 80086b0:	4628      	mov	r0, r5
 80086b2:	f000 f887 	bl	80087c4 <_sbrk_r>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	d00a      	beq.n	80086d0 <sbrk_aligned+0x34>
 80086ba:	1cc4      	adds	r4, r0, #3
 80086bc:	f024 0403 	bic.w	r4, r4, #3
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d007      	beq.n	80086d4 <sbrk_aligned+0x38>
 80086c4:	1a21      	subs	r1, r4, r0
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 f87c 	bl	80087c4 <_sbrk_r>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d101      	bne.n	80086d4 <sbrk_aligned+0x38>
 80086d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086d4:	4620      	mov	r0, r4
 80086d6:	bd70      	pop	{r4, r5, r6, pc}
 80086d8:	200012b4 	.word	0x200012b4

080086dc <_malloc_r>:
 80086dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e0:	1ccd      	adds	r5, r1, #3
 80086e2:	f025 0503 	bic.w	r5, r5, #3
 80086e6:	3508      	adds	r5, #8
 80086e8:	2d0c      	cmp	r5, #12
 80086ea:	bf38      	it	cc
 80086ec:	250c      	movcc	r5, #12
 80086ee:	2d00      	cmp	r5, #0
 80086f0:	4607      	mov	r7, r0
 80086f2:	db01      	blt.n	80086f8 <_malloc_r+0x1c>
 80086f4:	42a9      	cmp	r1, r5
 80086f6:	d905      	bls.n	8008704 <_malloc_r+0x28>
 80086f8:	230c      	movs	r3, #12
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	2600      	movs	r6, #0
 80086fe:	4630      	mov	r0, r6
 8008700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008704:	4e2e      	ldr	r6, [pc, #184]	; (80087c0 <_malloc_r+0xe4>)
 8008706:	f000 f88d 	bl	8008824 <__malloc_lock>
 800870a:	6833      	ldr	r3, [r6, #0]
 800870c:	461c      	mov	r4, r3
 800870e:	bb34      	cbnz	r4, 800875e <_malloc_r+0x82>
 8008710:	4629      	mov	r1, r5
 8008712:	4638      	mov	r0, r7
 8008714:	f7ff ffc2 	bl	800869c <sbrk_aligned>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	4604      	mov	r4, r0
 800871c:	d14d      	bne.n	80087ba <_malloc_r+0xde>
 800871e:	6834      	ldr	r4, [r6, #0]
 8008720:	4626      	mov	r6, r4
 8008722:	2e00      	cmp	r6, #0
 8008724:	d140      	bne.n	80087a8 <_malloc_r+0xcc>
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	4631      	mov	r1, r6
 800872a:	4638      	mov	r0, r7
 800872c:	eb04 0803 	add.w	r8, r4, r3
 8008730:	f000 f848 	bl	80087c4 <_sbrk_r>
 8008734:	4580      	cmp	r8, r0
 8008736:	d13a      	bne.n	80087ae <_malloc_r+0xd2>
 8008738:	6821      	ldr	r1, [r4, #0]
 800873a:	3503      	adds	r5, #3
 800873c:	1a6d      	subs	r5, r5, r1
 800873e:	f025 0503 	bic.w	r5, r5, #3
 8008742:	3508      	adds	r5, #8
 8008744:	2d0c      	cmp	r5, #12
 8008746:	bf38      	it	cc
 8008748:	250c      	movcc	r5, #12
 800874a:	4629      	mov	r1, r5
 800874c:	4638      	mov	r0, r7
 800874e:	f7ff ffa5 	bl	800869c <sbrk_aligned>
 8008752:	3001      	adds	r0, #1
 8008754:	d02b      	beq.n	80087ae <_malloc_r+0xd2>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	442b      	add	r3, r5
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	e00e      	b.n	800877c <_malloc_r+0xa0>
 800875e:	6822      	ldr	r2, [r4, #0]
 8008760:	1b52      	subs	r2, r2, r5
 8008762:	d41e      	bmi.n	80087a2 <_malloc_r+0xc6>
 8008764:	2a0b      	cmp	r2, #11
 8008766:	d916      	bls.n	8008796 <_malloc_r+0xba>
 8008768:	1961      	adds	r1, r4, r5
 800876a:	42a3      	cmp	r3, r4
 800876c:	6025      	str	r5, [r4, #0]
 800876e:	bf18      	it	ne
 8008770:	6059      	strne	r1, [r3, #4]
 8008772:	6863      	ldr	r3, [r4, #4]
 8008774:	bf08      	it	eq
 8008776:	6031      	streq	r1, [r6, #0]
 8008778:	5162      	str	r2, [r4, r5]
 800877a:	604b      	str	r3, [r1, #4]
 800877c:	4638      	mov	r0, r7
 800877e:	f104 060b 	add.w	r6, r4, #11
 8008782:	f000 f855 	bl	8008830 <__malloc_unlock>
 8008786:	f026 0607 	bic.w	r6, r6, #7
 800878a:	1d23      	adds	r3, r4, #4
 800878c:	1af2      	subs	r2, r6, r3
 800878e:	d0b6      	beq.n	80086fe <_malloc_r+0x22>
 8008790:	1b9b      	subs	r3, r3, r6
 8008792:	50a3      	str	r3, [r4, r2]
 8008794:	e7b3      	b.n	80086fe <_malloc_r+0x22>
 8008796:	6862      	ldr	r2, [r4, #4]
 8008798:	42a3      	cmp	r3, r4
 800879a:	bf0c      	ite	eq
 800879c:	6032      	streq	r2, [r6, #0]
 800879e:	605a      	strne	r2, [r3, #4]
 80087a0:	e7ec      	b.n	800877c <_malloc_r+0xa0>
 80087a2:	4623      	mov	r3, r4
 80087a4:	6864      	ldr	r4, [r4, #4]
 80087a6:	e7b2      	b.n	800870e <_malloc_r+0x32>
 80087a8:	4634      	mov	r4, r6
 80087aa:	6876      	ldr	r6, [r6, #4]
 80087ac:	e7b9      	b.n	8008722 <_malloc_r+0x46>
 80087ae:	230c      	movs	r3, #12
 80087b0:	603b      	str	r3, [r7, #0]
 80087b2:	4638      	mov	r0, r7
 80087b4:	f000 f83c 	bl	8008830 <__malloc_unlock>
 80087b8:	e7a1      	b.n	80086fe <_malloc_r+0x22>
 80087ba:	6025      	str	r5, [r4, #0]
 80087bc:	e7de      	b.n	800877c <_malloc_r+0xa0>
 80087be:	bf00      	nop
 80087c0:	200012b0 	.word	0x200012b0

080087c4 <_sbrk_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4d06      	ldr	r5, [pc, #24]	; (80087e0 <_sbrk_r+0x1c>)
 80087c8:	2300      	movs	r3, #0
 80087ca:	4604      	mov	r4, r0
 80087cc:	4608      	mov	r0, r1
 80087ce:	602b      	str	r3, [r5, #0]
 80087d0:	f7f8 fbac 	bl	8000f2c <_sbrk>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d102      	bne.n	80087de <_sbrk_r+0x1a>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	b103      	cbz	r3, 80087de <_sbrk_r+0x1a>
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	bd38      	pop	{r3, r4, r5, pc}
 80087e0:	200012b8 	.word	0x200012b8

080087e4 <siprintf>:
 80087e4:	b40e      	push	{r1, r2, r3}
 80087e6:	b500      	push	{lr}
 80087e8:	b09c      	sub	sp, #112	; 0x70
 80087ea:	ab1d      	add	r3, sp, #116	; 0x74
 80087ec:	9002      	str	r0, [sp, #8]
 80087ee:	9006      	str	r0, [sp, #24]
 80087f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087f4:	4809      	ldr	r0, [pc, #36]	; (800881c <siprintf+0x38>)
 80087f6:	9107      	str	r1, [sp, #28]
 80087f8:	9104      	str	r1, [sp, #16]
 80087fa:	4909      	ldr	r1, [pc, #36]	; (8008820 <siprintf+0x3c>)
 80087fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008800:	9105      	str	r1, [sp, #20]
 8008802:	6800      	ldr	r0, [r0, #0]
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	a902      	add	r1, sp, #8
 8008808:	f000 f874 	bl	80088f4 <_svfiprintf_r>
 800880c:	9b02      	ldr	r3, [sp, #8]
 800880e:	2200      	movs	r2, #0
 8008810:	701a      	strb	r2, [r3, #0]
 8008812:	b01c      	add	sp, #112	; 0x70
 8008814:	f85d eb04 	ldr.w	lr, [sp], #4
 8008818:	b003      	add	sp, #12
 800881a:	4770      	bx	lr
 800881c:	2000000c 	.word	0x2000000c
 8008820:	ffff0208 	.word	0xffff0208

08008824 <__malloc_lock>:
 8008824:	4801      	ldr	r0, [pc, #4]	; (800882c <__malloc_lock+0x8>)
 8008826:	f000 baf9 	b.w	8008e1c <__retarget_lock_acquire_recursive>
 800882a:	bf00      	nop
 800882c:	200012bc 	.word	0x200012bc

08008830 <__malloc_unlock>:
 8008830:	4801      	ldr	r0, [pc, #4]	; (8008838 <__malloc_unlock+0x8>)
 8008832:	f000 baf4 	b.w	8008e1e <__retarget_lock_release_recursive>
 8008836:	bf00      	nop
 8008838:	200012bc 	.word	0x200012bc

0800883c <__ssputs_r>:
 800883c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	688e      	ldr	r6, [r1, #8]
 8008842:	429e      	cmp	r6, r3
 8008844:	4682      	mov	sl, r0
 8008846:	460c      	mov	r4, r1
 8008848:	4690      	mov	r8, r2
 800884a:	461f      	mov	r7, r3
 800884c:	d838      	bhi.n	80088c0 <__ssputs_r+0x84>
 800884e:	898a      	ldrh	r2, [r1, #12]
 8008850:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008854:	d032      	beq.n	80088bc <__ssputs_r+0x80>
 8008856:	6825      	ldr	r5, [r4, #0]
 8008858:	6909      	ldr	r1, [r1, #16]
 800885a:	eba5 0901 	sub.w	r9, r5, r1
 800885e:	6965      	ldr	r5, [r4, #20]
 8008860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008868:	3301      	adds	r3, #1
 800886a:	444b      	add	r3, r9
 800886c:	106d      	asrs	r5, r5, #1
 800886e:	429d      	cmp	r5, r3
 8008870:	bf38      	it	cc
 8008872:	461d      	movcc	r5, r3
 8008874:	0553      	lsls	r3, r2, #21
 8008876:	d531      	bpl.n	80088dc <__ssputs_r+0xa0>
 8008878:	4629      	mov	r1, r5
 800887a:	f7ff ff2f 	bl	80086dc <_malloc_r>
 800887e:	4606      	mov	r6, r0
 8008880:	b950      	cbnz	r0, 8008898 <__ssputs_r+0x5c>
 8008882:	230c      	movs	r3, #12
 8008884:	f8ca 3000 	str.w	r3, [sl]
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008898:	6921      	ldr	r1, [r4, #16]
 800889a:	464a      	mov	r2, r9
 800889c:	f000 fac0 	bl	8008e20 <memcpy>
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	6126      	str	r6, [r4, #16]
 80088ae:	6165      	str	r5, [r4, #20]
 80088b0:	444e      	add	r6, r9
 80088b2:	eba5 0509 	sub.w	r5, r5, r9
 80088b6:	6026      	str	r6, [r4, #0]
 80088b8:	60a5      	str	r5, [r4, #8]
 80088ba:	463e      	mov	r6, r7
 80088bc:	42be      	cmp	r6, r7
 80088be:	d900      	bls.n	80088c2 <__ssputs_r+0x86>
 80088c0:	463e      	mov	r6, r7
 80088c2:	6820      	ldr	r0, [r4, #0]
 80088c4:	4632      	mov	r2, r6
 80088c6:	4641      	mov	r1, r8
 80088c8:	f000 fab8 	bl	8008e3c <memmove>
 80088cc:	68a3      	ldr	r3, [r4, #8]
 80088ce:	1b9b      	subs	r3, r3, r6
 80088d0:	60a3      	str	r3, [r4, #8]
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	4433      	add	r3, r6
 80088d6:	6023      	str	r3, [r4, #0]
 80088d8:	2000      	movs	r0, #0
 80088da:	e7db      	b.n	8008894 <__ssputs_r+0x58>
 80088dc:	462a      	mov	r2, r5
 80088de:	f000 fac7 	bl	8008e70 <_realloc_r>
 80088e2:	4606      	mov	r6, r0
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d1e1      	bne.n	80088ac <__ssputs_r+0x70>
 80088e8:	6921      	ldr	r1, [r4, #16]
 80088ea:	4650      	mov	r0, sl
 80088ec:	f7ff fe8a 	bl	8008604 <_free_r>
 80088f0:	e7c7      	b.n	8008882 <__ssputs_r+0x46>
	...

080088f4 <_svfiprintf_r>:
 80088f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	4698      	mov	r8, r3
 80088fa:	898b      	ldrh	r3, [r1, #12]
 80088fc:	061b      	lsls	r3, r3, #24
 80088fe:	b09d      	sub	sp, #116	; 0x74
 8008900:	4607      	mov	r7, r0
 8008902:	460d      	mov	r5, r1
 8008904:	4614      	mov	r4, r2
 8008906:	d50e      	bpl.n	8008926 <_svfiprintf_r+0x32>
 8008908:	690b      	ldr	r3, [r1, #16]
 800890a:	b963      	cbnz	r3, 8008926 <_svfiprintf_r+0x32>
 800890c:	2140      	movs	r1, #64	; 0x40
 800890e:	f7ff fee5 	bl	80086dc <_malloc_r>
 8008912:	6028      	str	r0, [r5, #0]
 8008914:	6128      	str	r0, [r5, #16]
 8008916:	b920      	cbnz	r0, 8008922 <_svfiprintf_r+0x2e>
 8008918:	230c      	movs	r3, #12
 800891a:	603b      	str	r3, [r7, #0]
 800891c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008920:	e0d1      	b.n	8008ac6 <_svfiprintf_r+0x1d2>
 8008922:	2340      	movs	r3, #64	; 0x40
 8008924:	616b      	str	r3, [r5, #20]
 8008926:	2300      	movs	r3, #0
 8008928:	9309      	str	r3, [sp, #36]	; 0x24
 800892a:	2320      	movs	r3, #32
 800892c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008930:	f8cd 800c 	str.w	r8, [sp, #12]
 8008934:	2330      	movs	r3, #48	; 0x30
 8008936:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ae0 <_svfiprintf_r+0x1ec>
 800893a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800893e:	f04f 0901 	mov.w	r9, #1
 8008942:	4623      	mov	r3, r4
 8008944:	469a      	mov	sl, r3
 8008946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800894a:	b10a      	cbz	r2, 8008950 <_svfiprintf_r+0x5c>
 800894c:	2a25      	cmp	r2, #37	; 0x25
 800894e:	d1f9      	bne.n	8008944 <_svfiprintf_r+0x50>
 8008950:	ebba 0b04 	subs.w	fp, sl, r4
 8008954:	d00b      	beq.n	800896e <_svfiprintf_r+0x7a>
 8008956:	465b      	mov	r3, fp
 8008958:	4622      	mov	r2, r4
 800895a:	4629      	mov	r1, r5
 800895c:	4638      	mov	r0, r7
 800895e:	f7ff ff6d 	bl	800883c <__ssputs_r>
 8008962:	3001      	adds	r0, #1
 8008964:	f000 80aa 	beq.w	8008abc <_svfiprintf_r+0x1c8>
 8008968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800896a:	445a      	add	r2, fp
 800896c:	9209      	str	r2, [sp, #36]	; 0x24
 800896e:	f89a 3000 	ldrb.w	r3, [sl]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80a2 	beq.w	8008abc <_svfiprintf_r+0x1c8>
 8008978:	2300      	movs	r3, #0
 800897a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800897e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008982:	f10a 0a01 	add.w	sl, sl, #1
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	9307      	str	r3, [sp, #28]
 800898a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800898e:	931a      	str	r3, [sp, #104]	; 0x68
 8008990:	4654      	mov	r4, sl
 8008992:	2205      	movs	r2, #5
 8008994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008998:	4851      	ldr	r0, [pc, #324]	; (8008ae0 <_svfiprintf_r+0x1ec>)
 800899a:	f7f7 fc49 	bl	8000230 <memchr>
 800899e:	9a04      	ldr	r2, [sp, #16]
 80089a0:	b9d8      	cbnz	r0, 80089da <_svfiprintf_r+0xe6>
 80089a2:	06d0      	lsls	r0, r2, #27
 80089a4:	bf44      	itt	mi
 80089a6:	2320      	movmi	r3, #32
 80089a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ac:	0711      	lsls	r1, r2, #28
 80089ae:	bf44      	itt	mi
 80089b0:	232b      	movmi	r3, #43	; 0x2b
 80089b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b6:	f89a 3000 	ldrb.w	r3, [sl]
 80089ba:	2b2a      	cmp	r3, #42	; 0x2a
 80089bc:	d015      	beq.n	80089ea <_svfiprintf_r+0xf6>
 80089be:	9a07      	ldr	r2, [sp, #28]
 80089c0:	4654      	mov	r4, sl
 80089c2:	2000      	movs	r0, #0
 80089c4:	f04f 0c0a 	mov.w	ip, #10
 80089c8:	4621      	mov	r1, r4
 80089ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ce:	3b30      	subs	r3, #48	; 0x30
 80089d0:	2b09      	cmp	r3, #9
 80089d2:	d94e      	bls.n	8008a72 <_svfiprintf_r+0x17e>
 80089d4:	b1b0      	cbz	r0, 8008a04 <_svfiprintf_r+0x110>
 80089d6:	9207      	str	r2, [sp, #28]
 80089d8:	e014      	b.n	8008a04 <_svfiprintf_r+0x110>
 80089da:	eba0 0308 	sub.w	r3, r0, r8
 80089de:	fa09 f303 	lsl.w	r3, r9, r3
 80089e2:	4313      	orrs	r3, r2
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	46a2      	mov	sl, r4
 80089e8:	e7d2      	b.n	8008990 <_svfiprintf_r+0x9c>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	1d19      	adds	r1, r3, #4
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	9103      	str	r1, [sp, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	bfbb      	ittet	lt
 80089f6:	425b      	neglt	r3, r3
 80089f8:	f042 0202 	orrlt.w	r2, r2, #2
 80089fc:	9307      	strge	r3, [sp, #28]
 80089fe:	9307      	strlt	r3, [sp, #28]
 8008a00:	bfb8      	it	lt
 8008a02:	9204      	strlt	r2, [sp, #16]
 8008a04:	7823      	ldrb	r3, [r4, #0]
 8008a06:	2b2e      	cmp	r3, #46	; 0x2e
 8008a08:	d10c      	bne.n	8008a24 <_svfiprintf_r+0x130>
 8008a0a:	7863      	ldrb	r3, [r4, #1]
 8008a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0e:	d135      	bne.n	8008a7c <_svfiprintf_r+0x188>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	1d1a      	adds	r2, r3, #4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	9203      	str	r2, [sp, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfb8      	it	lt
 8008a1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a20:	3402      	adds	r4, #2
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008af0 <_svfiprintf_r+0x1fc>
 8008a28:	7821      	ldrb	r1, [r4, #0]
 8008a2a:	2203      	movs	r2, #3
 8008a2c:	4650      	mov	r0, sl
 8008a2e:	f7f7 fbff 	bl	8000230 <memchr>
 8008a32:	b140      	cbz	r0, 8008a46 <_svfiprintf_r+0x152>
 8008a34:	2340      	movs	r3, #64	; 0x40
 8008a36:	eba0 000a 	sub.w	r0, r0, sl
 8008a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	4303      	orrs	r3, r0
 8008a42:	3401      	adds	r4, #1
 8008a44:	9304      	str	r3, [sp, #16]
 8008a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4a:	4826      	ldr	r0, [pc, #152]	; (8008ae4 <_svfiprintf_r+0x1f0>)
 8008a4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a50:	2206      	movs	r2, #6
 8008a52:	f7f7 fbed 	bl	8000230 <memchr>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d038      	beq.n	8008acc <_svfiprintf_r+0x1d8>
 8008a5a:	4b23      	ldr	r3, [pc, #140]	; (8008ae8 <_svfiprintf_r+0x1f4>)
 8008a5c:	bb1b      	cbnz	r3, 8008aa6 <_svfiprintf_r+0x1b2>
 8008a5e:	9b03      	ldr	r3, [sp, #12]
 8008a60:	3307      	adds	r3, #7
 8008a62:	f023 0307 	bic.w	r3, r3, #7
 8008a66:	3308      	adds	r3, #8
 8008a68:	9303      	str	r3, [sp, #12]
 8008a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a6c:	4433      	add	r3, r6
 8008a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a70:	e767      	b.n	8008942 <_svfiprintf_r+0x4e>
 8008a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a76:	460c      	mov	r4, r1
 8008a78:	2001      	movs	r0, #1
 8008a7a:	e7a5      	b.n	80089c8 <_svfiprintf_r+0xd4>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	3401      	adds	r4, #1
 8008a80:	9305      	str	r3, [sp, #20]
 8008a82:	4619      	mov	r1, r3
 8008a84:	f04f 0c0a 	mov.w	ip, #10
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a8e:	3a30      	subs	r2, #48	; 0x30
 8008a90:	2a09      	cmp	r2, #9
 8008a92:	d903      	bls.n	8008a9c <_svfiprintf_r+0x1a8>
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0c5      	beq.n	8008a24 <_svfiprintf_r+0x130>
 8008a98:	9105      	str	r1, [sp, #20]
 8008a9a:	e7c3      	b.n	8008a24 <_svfiprintf_r+0x130>
 8008a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e7f0      	b.n	8008a88 <_svfiprintf_r+0x194>
 8008aa6:	ab03      	add	r3, sp, #12
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	462a      	mov	r2, r5
 8008aac:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <_svfiprintf_r+0x1f8>)
 8008aae:	a904      	add	r1, sp, #16
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f3af 8000 	nop.w
 8008ab6:	1c42      	adds	r2, r0, #1
 8008ab8:	4606      	mov	r6, r0
 8008aba:	d1d6      	bne.n	8008a6a <_svfiprintf_r+0x176>
 8008abc:	89ab      	ldrh	r3, [r5, #12]
 8008abe:	065b      	lsls	r3, r3, #25
 8008ac0:	f53f af2c 	bmi.w	800891c <_svfiprintf_r+0x28>
 8008ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ac6:	b01d      	add	sp, #116	; 0x74
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	ab03      	add	r3, sp, #12
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	462a      	mov	r2, r5
 8008ad2:	4b06      	ldr	r3, [pc, #24]	; (8008aec <_svfiprintf_r+0x1f8>)
 8008ad4:	a904      	add	r1, sp, #16
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f000 f87a 	bl	8008bd0 <_printf_i>
 8008adc:	e7eb      	b.n	8008ab6 <_svfiprintf_r+0x1c2>
 8008ade:	bf00      	nop
 8008ae0:	08009014 	.word	0x08009014
 8008ae4:	0800901e 	.word	0x0800901e
 8008ae8:	00000000 	.word	0x00000000
 8008aec:	0800883d 	.word	0x0800883d
 8008af0:	0800901a 	.word	0x0800901a

08008af4 <_printf_common>:
 8008af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af8:	4616      	mov	r6, r2
 8008afa:	4699      	mov	r9, r3
 8008afc:	688a      	ldr	r2, [r1, #8]
 8008afe:	690b      	ldr	r3, [r1, #16]
 8008b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b04:	4293      	cmp	r3, r2
 8008b06:	bfb8      	it	lt
 8008b08:	4613      	movlt	r3, r2
 8008b0a:	6033      	str	r3, [r6, #0]
 8008b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b10:	4607      	mov	r7, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b10a      	cbz	r2, 8008b1a <_printf_common+0x26>
 8008b16:	3301      	adds	r3, #1
 8008b18:	6033      	str	r3, [r6, #0]
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	0699      	lsls	r1, r3, #26
 8008b1e:	bf42      	ittt	mi
 8008b20:	6833      	ldrmi	r3, [r6, #0]
 8008b22:	3302      	addmi	r3, #2
 8008b24:	6033      	strmi	r3, [r6, #0]
 8008b26:	6825      	ldr	r5, [r4, #0]
 8008b28:	f015 0506 	ands.w	r5, r5, #6
 8008b2c:	d106      	bne.n	8008b3c <_printf_common+0x48>
 8008b2e:	f104 0a19 	add.w	sl, r4, #25
 8008b32:	68e3      	ldr	r3, [r4, #12]
 8008b34:	6832      	ldr	r2, [r6, #0]
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	42ab      	cmp	r3, r5
 8008b3a:	dc26      	bgt.n	8008b8a <_printf_common+0x96>
 8008b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b40:	1e13      	subs	r3, r2, #0
 8008b42:	6822      	ldr	r2, [r4, #0]
 8008b44:	bf18      	it	ne
 8008b46:	2301      	movne	r3, #1
 8008b48:	0692      	lsls	r2, r2, #26
 8008b4a:	d42b      	bmi.n	8008ba4 <_printf_common+0xb0>
 8008b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b50:	4649      	mov	r1, r9
 8008b52:	4638      	mov	r0, r7
 8008b54:	47c0      	blx	r8
 8008b56:	3001      	adds	r0, #1
 8008b58:	d01e      	beq.n	8008b98 <_printf_common+0xa4>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	68e5      	ldr	r5, [r4, #12]
 8008b5e:	6832      	ldr	r2, [r6, #0]
 8008b60:	f003 0306 	and.w	r3, r3, #6
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	bf08      	it	eq
 8008b68:	1aad      	subeq	r5, r5, r2
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	6922      	ldr	r2, [r4, #16]
 8008b6e:	bf0c      	ite	eq
 8008b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b74:	2500      	movne	r5, #0
 8008b76:	4293      	cmp	r3, r2
 8008b78:	bfc4      	itt	gt
 8008b7a:	1a9b      	subgt	r3, r3, r2
 8008b7c:	18ed      	addgt	r5, r5, r3
 8008b7e:	2600      	movs	r6, #0
 8008b80:	341a      	adds	r4, #26
 8008b82:	42b5      	cmp	r5, r6
 8008b84:	d11a      	bne.n	8008bbc <_printf_common+0xc8>
 8008b86:	2000      	movs	r0, #0
 8008b88:	e008      	b.n	8008b9c <_printf_common+0xa8>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4652      	mov	r2, sl
 8008b8e:	4649      	mov	r1, r9
 8008b90:	4638      	mov	r0, r7
 8008b92:	47c0      	blx	r8
 8008b94:	3001      	adds	r0, #1
 8008b96:	d103      	bne.n	8008ba0 <_printf_common+0xac>
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba0:	3501      	adds	r5, #1
 8008ba2:	e7c6      	b.n	8008b32 <_printf_common+0x3e>
 8008ba4:	18e1      	adds	r1, r4, r3
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	2030      	movs	r0, #48	; 0x30
 8008baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bae:	4422      	add	r2, r4
 8008bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bb8:	3302      	adds	r3, #2
 8008bba:	e7c7      	b.n	8008b4c <_printf_common+0x58>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	47c0      	blx	r8
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d0e6      	beq.n	8008b98 <_printf_common+0xa4>
 8008bca:	3601      	adds	r6, #1
 8008bcc:	e7d9      	b.n	8008b82 <_printf_common+0x8e>
	...

08008bd0 <_printf_i>:
 8008bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	7e0f      	ldrb	r7, [r1, #24]
 8008bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bd8:	2f78      	cmp	r7, #120	; 0x78
 8008bda:	4691      	mov	r9, r2
 8008bdc:	4680      	mov	r8, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	469a      	mov	sl, r3
 8008be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008be6:	d807      	bhi.n	8008bf8 <_printf_i+0x28>
 8008be8:	2f62      	cmp	r7, #98	; 0x62
 8008bea:	d80a      	bhi.n	8008c02 <_printf_i+0x32>
 8008bec:	2f00      	cmp	r7, #0
 8008bee:	f000 80d8 	beq.w	8008da2 <_printf_i+0x1d2>
 8008bf2:	2f58      	cmp	r7, #88	; 0x58
 8008bf4:	f000 80a3 	beq.w	8008d3e <_printf_i+0x16e>
 8008bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c00:	e03a      	b.n	8008c78 <_printf_i+0xa8>
 8008c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c06:	2b15      	cmp	r3, #21
 8008c08:	d8f6      	bhi.n	8008bf8 <_printf_i+0x28>
 8008c0a:	a101      	add	r1, pc, #4	; (adr r1, 8008c10 <_printf_i+0x40>)
 8008c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c10:	08008c69 	.word	0x08008c69
 8008c14:	08008c7d 	.word	0x08008c7d
 8008c18:	08008bf9 	.word	0x08008bf9
 8008c1c:	08008bf9 	.word	0x08008bf9
 8008c20:	08008bf9 	.word	0x08008bf9
 8008c24:	08008bf9 	.word	0x08008bf9
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008bf9 	.word	0x08008bf9
 8008c30:	08008bf9 	.word	0x08008bf9
 8008c34:	08008bf9 	.word	0x08008bf9
 8008c38:	08008bf9 	.word	0x08008bf9
 8008c3c:	08008d89 	.word	0x08008d89
 8008c40:	08008cad 	.word	0x08008cad
 8008c44:	08008d6b 	.word	0x08008d6b
 8008c48:	08008bf9 	.word	0x08008bf9
 8008c4c:	08008bf9 	.word	0x08008bf9
 8008c50:	08008dab 	.word	0x08008dab
 8008c54:	08008bf9 	.word	0x08008bf9
 8008c58:	08008cad 	.word	0x08008cad
 8008c5c:	08008bf9 	.word	0x08008bf9
 8008c60:	08008bf9 	.word	0x08008bf9
 8008c64:	08008d73 	.word	0x08008d73
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	1d1a      	adds	r2, r3, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	602a      	str	r2, [r5, #0]
 8008c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e0a3      	b.n	8008dc4 <_printf_i+0x1f4>
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	6829      	ldr	r1, [r5, #0]
 8008c80:	0606      	lsls	r6, r0, #24
 8008c82:	f101 0304 	add.w	r3, r1, #4
 8008c86:	d50a      	bpl.n	8008c9e <_printf_i+0xce>
 8008c88:	680e      	ldr	r6, [r1, #0]
 8008c8a:	602b      	str	r3, [r5, #0]
 8008c8c:	2e00      	cmp	r6, #0
 8008c8e:	da03      	bge.n	8008c98 <_printf_i+0xc8>
 8008c90:	232d      	movs	r3, #45	; 0x2d
 8008c92:	4276      	negs	r6, r6
 8008c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c98:	485e      	ldr	r0, [pc, #376]	; (8008e14 <_printf_i+0x244>)
 8008c9a:	230a      	movs	r3, #10
 8008c9c:	e019      	b.n	8008cd2 <_printf_i+0x102>
 8008c9e:	680e      	ldr	r6, [r1, #0]
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ca6:	bf18      	it	ne
 8008ca8:	b236      	sxthne	r6, r6
 8008caa:	e7ef      	b.n	8008c8c <_printf_i+0xbc>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	6820      	ldr	r0, [r4, #0]
 8008cb0:	1d19      	adds	r1, r3, #4
 8008cb2:	6029      	str	r1, [r5, #0]
 8008cb4:	0601      	lsls	r1, r0, #24
 8008cb6:	d501      	bpl.n	8008cbc <_printf_i+0xec>
 8008cb8:	681e      	ldr	r6, [r3, #0]
 8008cba:	e002      	b.n	8008cc2 <_printf_i+0xf2>
 8008cbc:	0646      	lsls	r6, r0, #25
 8008cbe:	d5fb      	bpl.n	8008cb8 <_printf_i+0xe8>
 8008cc0:	881e      	ldrh	r6, [r3, #0]
 8008cc2:	4854      	ldr	r0, [pc, #336]	; (8008e14 <_printf_i+0x244>)
 8008cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8008cc6:	bf0c      	ite	eq
 8008cc8:	2308      	moveq	r3, #8
 8008cca:	230a      	movne	r3, #10
 8008ccc:	2100      	movs	r1, #0
 8008cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cd2:	6865      	ldr	r5, [r4, #4]
 8008cd4:	60a5      	str	r5, [r4, #8]
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	bfa2      	ittt	ge
 8008cda:	6821      	ldrge	r1, [r4, #0]
 8008cdc:	f021 0104 	bicge.w	r1, r1, #4
 8008ce0:	6021      	strge	r1, [r4, #0]
 8008ce2:	b90e      	cbnz	r6, 8008ce8 <_printf_i+0x118>
 8008ce4:	2d00      	cmp	r5, #0
 8008ce6:	d04d      	beq.n	8008d84 <_printf_i+0x1b4>
 8008ce8:	4615      	mov	r5, r2
 8008cea:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cee:	fb03 6711 	mls	r7, r3, r1, r6
 8008cf2:	5dc7      	ldrb	r7, [r0, r7]
 8008cf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cf8:	4637      	mov	r7, r6
 8008cfa:	42bb      	cmp	r3, r7
 8008cfc:	460e      	mov	r6, r1
 8008cfe:	d9f4      	bls.n	8008cea <_printf_i+0x11a>
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d10b      	bne.n	8008d1c <_printf_i+0x14c>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	07de      	lsls	r6, r3, #31
 8008d08:	d508      	bpl.n	8008d1c <_printf_i+0x14c>
 8008d0a:	6923      	ldr	r3, [r4, #16]
 8008d0c:	6861      	ldr	r1, [r4, #4]
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	bfde      	ittt	le
 8008d12:	2330      	movle	r3, #48	; 0x30
 8008d14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d1c:	1b52      	subs	r2, r2, r5
 8008d1e:	6122      	str	r2, [r4, #16]
 8008d20:	f8cd a000 	str.w	sl, [sp]
 8008d24:	464b      	mov	r3, r9
 8008d26:	aa03      	add	r2, sp, #12
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	f7ff fee2 	bl	8008af4 <_printf_common>
 8008d30:	3001      	adds	r0, #1
 8008d32:	d14c      	bne.n	8008dce <_printf_i+0x1fe>
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d38:	b004      	add	sp, #16
 8008d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d3e:	4835      	ldr	r0, [pc, #212]	; (8008e14 <_printf_i+0x244>)
 8008d40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d44:	6829      	ldr	r1, [r5, #0]
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d4c:	6029      	str	r1, [r5, #0]
 8008d4e:	061d      	lsls	r5, r3, #24
 8008d50:	d514      	bpl.n	8008d7c <_printf_i+0x1ac>
 8008d52:	07df      	lsls	r7, r3, #31
 8008d54:	bf44      	itt	mi
 8008d56:	f043 0320 	orrmi.w	r3, r3, #32
 8008d5a:	6023      	strmi	r3, [r4, #0]
 8008d5c:	b91e      	cbnz	r6, 8008d66 <_printf_i+0x196>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	f023 0320 	bic.w	r3, r3, #32
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	2310      	movs	r3, #16
 8008d68:	e7b0      	b.n	8008ccc <_printf_i+0xfc>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	f043 0320 	orr.w	r3, r3, #32
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	2378      	movs	r3, #120	; 0x78
 8008d74:	4828      	ldr	r0, [pc, #160]	; (8008e18 <_printf_i+0x248>)
 8008d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d7a:	e7e3      	b.n	8008d44 <_printf_i+0x174>
 8008d7c:	0659      	lsls	r1, r3, #25
 8008d7e:	bf48      	it	mi
 8008d80:	b2b6      	uxthmi	r6, r6
 8008d82:	e7e6      	b.n	8008d52 <_printf_i+0x182>
 8008d84:	4615      	mov	r5, r2
 8008d86:	e7bb      	b.n	8008d00 <_printf_i+0x130>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	6826      	ldr	r6, [r4, #0]
 8008d8c:	6961      	ldr	r1, [r4, #20]
 8008d8e:	1d18      	adds	r0, r3, #4
 8008d90:	6028      	str	r0, [r5, #0]
 8008d92:	0635      	lsls	r5, r6, #24
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	d501      	bpl.n	8008d9c <_printf_i+0x1cc>
 8008d98:	6019      	str	r1, [r3, #0]
 8008d9a:	e002      	b.n	8008da2 <_printf_i+0x1d2>
 8008d9c:	0670      	lsls	r0, r6, #25
 8008d9e:	d5fb      	bpl.n	8008d98 <_printf_i+0x1c8>
 8008da0:	8019      	strh	r1, [r3, #0]
 8008da2:	2300      	movs	r3, #0
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	4615      	mov	r5, r2
 8008da8:	e7ba      	b.n	8008d20 <_printf_i+0x150>
 8008daa:	682b      	ldr	r3, [r5, #0]
 8008dac:	1d1a      	adds	r2, r3, #4
 8008dae:	602a      	str	r2, [r5, #0]
 8008db0:	681d      	ldr	r5, [r3, #0]
 8008db2:	6862      	ldr	r2, [r4, #4]
 8008db4:	2100      	movs	r1, #0
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7f7 fa3a 	bl	8000230 <memchr>
 8008dbc:	b108      	cbz	r0, 8008dc2 <_printf_i+0x1f2>
 8008dbe:	1b40      	subs	r0, r0, r5
 8008dc0:	6060      	str	r0, [r4, #4]
 8008dc2:	6863      	ldr	r3, [r4, #4]
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dcc:	e7a8      	b.n	8008d20 <_printf_i+0x150>
 8008dce:	6923      	ldr	r3, [r4, #16]
 8008dd0:	462a      	mov	r2, r5
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	47d0      	blx	sl
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d0ab      	beq.n	8008d34 <_printf_i+0x164>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	079b      	lsls	r3, r3, #30
 8008de0:	d413      	bmi.n	8008e0a <_printf_i+0x23a>
 8008de2:	68e0      	ldr	r0, [r4, #12]
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	4298      	cmp	r0, r3
 8008de8:	bfb8      	it	lt
 8008dea:	4618      	movlt	r0, r3
 8008dec:	e7a4      	b.n	8008d38 <_printf_i+0x168>
 8008dee:	2301      	movs	r3, #1
 8008df0:	4632      	mov	r2, r6
 8008df2:	4649      	mov	r1, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	47d0      	blx	sl
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d09b      	beq.n	8008d34 <_printf_i+0x164>
 8008dfc:	3501      	adds	r5, #1
 8008dfe:	68e3      	ldr	r3, [r4, #12]
 8008e00:	9903      	ldr	r1, [sp, #12]
 8008e02:	1a5b      	subs	r3, r3, r1
 8008e04:	42ab      	cmp	r3, r5
 8008e06:	dcf2      	bgt.n	8008dee <_printf_i+0x21e>
 8008e08:	e7eb      	b.n	8008de2 <_printf_i+0x212>
 8008e0a:	2500      	movs	r5, #0
 8008e0c:	f104 0619 	add.w	r6, r4, #25
 8008e10:	e7f5      	b.n	8008dfe <_printf_i+0x22e>
 8008e12:	bf00      	nop
 8008e14:	08009025 	.word	0x08009025
 8008e18:	08009036 	.word	0x08009036

08008e1c <__retarget_lock_acquire_recursive>:
 8008e1c:	4770      	bx	lr

08008e1e <__retarget_lock_release_recursive>:
 8008e1e:	4770      	bx	lr

08008e20 <memcpy>:
 8008e20:	440a      	add	r2, r1
 8008e22:	4291      	cmp	r1, r2
 8008e24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e28:	d100      	bne.n	8008e2c <memcpy+0xc>
 8008e2a:	4770      	bx	lr
 8008e2c:	b510      	push	{r4, lr}
 8008e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e36:	4291      	cmp	r1, r2
 8008e38:	d1f9      	bne.n	8008e2e <memcpy+0xe>
 8008e3a:	bd10      	pop	{r4, pc}

08008e3c <memmove>:
 8008e3c:	4288      	cmp	r0, r1
 8008e3e:	b510      	push	{r4, lr}
 8008e40:	eb01 0402 	add.w	r4, r1, r2
 8008e44:	d902      	bls.n	8008e4c <memmove+0x10>
 8008e46:	4284      	cmp	r4, r0
 8008e48:	4623      	mov	r3, r4
 8008e4a:	d807      	bhi.n	8008e5c <memmove+0x20>
 8008e4c:	1e43      	subs	r3, r0, #1
 8008e4e:	42a1      	cmp	r1, r4
 8008e50:	d008      	beq.n	8008e64 <memmove+0x28>
 8008e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e5a:	e7f8      	b.n	8008e4e <memmove+0x12>
 8008e5c:	4402      	add	r2, r0
 8008e5e:	4601      	mov	r1, r0
 8008e60:	428a      	cmp	r2, r1
 8008e62:	d100      	bne.n	8008e66 <memmove+0x2a>
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e6e:	e7f7      	b.n	8008e60 <memmove+0x24>

08008e70 <_realloc_r>:
 8008e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e74:	4680      	mov	r8, r0
 8008e76:	4614      	mov	r4, r2
 8008e78:	460e      	mov	r6, r1
 8008e7a:	b921      	cbnz	r1, 8008e86 <_realloc_r+0x16>
 8008e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e80:	4611      	mov	r1, r2
 8008e82:	f7ff bc2b 	b.w	80086dc <_malloc_r>
 8008e86:	b92a      	cbnz	r2, 8008e94 <_realloc_r+0x24>
 8008e88:	f7ff fbbc 	bl	8008604 <_free_r>
 8008e8c:	4625      	mov	r5, r4
 8008e8e:	4628      	mov	r0, r5
 8008e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e94:	f000 f81b 	bl	8008ece <_malloc_usable_size_r>
 8008e98:	4284      	cmp	r4, r0
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	d802      	bhi.n	8008ea4 <_realloc_r+0x34>
 8008e9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ea2:	d812      	bhi.n	8008eca <_realloc_r+0x5a>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	f7ff fc18 	bl	80086dc <_malloc_r>
 8008eac:	4605      	mov	r5, r0
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d0ed      	beq.n	8008e8e <_realloc_r+0x1e>
 8008eb2:	42bc      	cmp	r4, r7
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	bf28      	it	cs
 8008eba:	463a      	movcs	r2, r7
 8008ebc:	f7ff ffb0 	bl	8008e20 <memcpy>
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	f7ff fb9e 	bl	8008604 <_free_r>
 8008ec8:	e7e1      	b.n	8008e8e <_realloc_r+0x1e>
 8008eca:	4635      	mov	r5, r6
 8008ecc:	e7df      	b.n	8008e8e <_realloc_r+0x1e>

08008ece <_malloc_usable_size_r>:
 8008ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed2:	1f18      	subs	r0, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bfbc      	itt	lt
 8008ed8:	580b      	ldrlt	r3, [r1, r0]
 8008eda:	18c0      	addlt	r0, r0, r3
 8008edc:	4770      	bx	lr
	...

08008ee0 <_init>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	bf00      	nop
 8008ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee6:	bc08      	pop	{r3}
 8008ee8:	469e      	mov	lr, r3
 8008eea:	4770      	bx	lr

08008eec <_fini>:
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	bf00      	nop
 8008ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef2:	bc08      	pop	{r3}
 8008ef4:	469e      	mov	lr, r3
 8008ef6:	4770      	bx	lr
