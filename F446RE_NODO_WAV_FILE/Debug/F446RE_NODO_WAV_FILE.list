
F446RE_NODO_WAV_FILE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000836c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800853c  0800853c  0001853c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008680  08008680  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008688  08008688  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08008700  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08008700  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001591e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7d  00000000  00000000  000359be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00038740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  00039988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002544e  00000000  00000000  0003aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d47  00000000  00000000  0005feee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d925d  00000000  00000000  00078c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151e92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000504c  00000000  00000000  00151ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008524 	.word	0x08008524

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008524 	.word	0x08008524

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	f5ad 6ded 	sub.w	sp, sp, #1896	; 0x768
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fd10 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f85a 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f994 	bl	80008f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005c8:	f000 f8c6 	bl	8000758 <MX_I2C1_Init>
  MX_RTC_Init();
 80005cc:	f000 f920 	bl	8000810 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 80005d0:	f000 f944 	bl	800085c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80005d4:	f005 f916 	bl	8005804 <MX_FATFS_Init>
  MX_I2S2_Init();
 80005d8:	f000 f8ec 	bl	80007b4 <MX_I2S2_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f95e 	bl	800089c <MX_USART2_UART_Init>
  UINT bw;
  BYTE work[_MAX_SS];

  do
  {
	  res = f_mount(&fs, "", 0);
 80005e0:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80005e4:	2200      	movs	r2, #0
 80005e6:	4920      	ldr	r1, [pc, #128]	; (8000668 <main+0xb4>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f006 ff25 	bl	8007438 <f_mount>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 3767 	strb.w	r3, [r7, #1895]	; 0x767
  }
  while( res != FR_OK);
 80005f4:	f897 3767 	ldrb.w	r3, [r7, #1895]	; 0x767
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1f1      	bne.n	80005e0 <main+0x2c>
  uint16_t count;


  while (1)
  {
	  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 80005fc:	f8b7 3764 	ldrh.w	r3, [r7, #1892]	; 0x764
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	f8a7 2764 	strh.w	r2, [r7, #1892]	; 0x764
 8000606:	f207 6064 	addw	r0, r7, #1636	; 0x664
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <main+0xb8>)
 800060c:	4918      	ldr	r1, [pc, #96]	; (8000670 <main+0xbc>)
 800060e:	f007 fb1b 	bl	8007c48 <siprintf>
	  res = f_open(&fil, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000612:	f207 6164 	addw	r1, r7, #1636	; 0x664
 8000616:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800061a:	220a      	movs	r2, #10
 800061c:	4618      	mov	r0, r3
 800061e:	f006 ff51 	bl	80074c4 <f_open>
 8000622:	4603      	mov	r3, r0
 8000624:	f887 3767 	strb.w	r3, [r7, #1895]	; 0x767
//	  while(res != FR_EXIST) res = f_open(&fp, filename, FA_CREATE_ALWAYS|FA_WRITE);
//	  res = fwrite_wav_header(&fp, 48000, 16, 2);
	  while(res != FR_EXIST) res = f_open(&fil, "FILE1.TXT", FA_CREATE_ALWAYS|FA_WRITE);
 8000628:	e009      	b.n	800063e <main+0x8a>
 800062a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800062e:	220a      	movs	r2, #10
 8000630:	4910      	ldr	r1, [pc, #64]	; (8000674 <main+0xc0>)
 8000632:	4618      	mov	r0, r3
 8000634:	f006 ff46 	bl	80074c4 <f_open>
 8000638:	4603      	mov	r3, r0
 800063a:	f887 3767 	strb.w	r3, [r7, #1895]	; 0x767
 800063e:	f897 3767 	ldrb.w	r3, [r7, #1895]	; 0x767
 8000642:	2b08      	cmp	r3, #8
 8000644:	d1f1      	bne.n	800062a <main+0x76>
	  res = fwrite_wav_header(&fil, 48000, 16, 2);
 8000646:	f507 7001 	add.w	r0, r7, #516	; 0x204
 800064a:	2302      	movs	r3, #2
 800064c:	2210      	movs	r2, #16
 800064e:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000652:	f000 f9cb 	bl	80009ec <fwrite_wav_header>
 8000656:	4603      	mov	r3, r0
 8000658:	f887 3767 	strb.w	r3, [r7, #1895]	; 0x767

	  HAL_Delay(1000);
 800065c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000660:	f000 fd30 	bl	80010c4 <HAL_Delay>
	  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 8000664:	e7ca      	b.n	80005fc <main+0x48>
 8000666:	bf00      	nop
 8000668:	0800853c 	.word	0x0800853c
 800066c:	2000021c 	.word	0x2000021c
 8000670:	08008540 	.word	0x08008540
 8000674:	08008550 	.word	0x08008550

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	; 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f007 fad6 	bl	8007c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <SystemClock_Config+0xd8>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <SystemClock_Config+0xd8>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0xd8>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <SystemClock_Config+0xdc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a23      	ldr	r2, [pc, #140]	; (8000754 <SystemClock_Config+0xdc>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <SystemClock_Config+0xdc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006d8:	230a      	movs	r3, #10
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006f8:	2348      	movs	r3, #72	; 0x48
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000700:	2303      	movs	r3, #3
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f002 fb21 	bl	8002d54 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000718:	f000 f9cc 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fad5 	bl	8001ce8 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000744:	f000 f9b6 	bl	8000ab4 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	; 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_I2C1_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000796:	f000 ff65 	bl	8001664 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f988 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000008c 	.word	0x2000008c
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_I2S2_Init+0x54>)
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <MX_I2S2_Init+0x58>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2S2_Init+0x54>)
 80007c0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007c4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_I2S2_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_I2S2_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_I2S2_Init+0x54>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_I2S2_Init+0x54>)
 80007dc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80007e0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_I2S2_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_I2S2_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_I2S2_Init+0x54>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_I2S2_Init+0x54>)
 80007f6:	f001 f879 	bl	80018ec <HAL_I2S_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000800:	f000 f958 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000e0 	.word	0x200000e0
 800080c:	40003800 	.word	0x40003800

08000810 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_RTC_Init+0x44>)
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_RTC_Init+0x48>)
 8000818:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_RTC_Init+0x44>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_RTC_Init+0x44>)
 8000822:	227f      	movs	r2, #127	; 0x7f
 8000824:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_RTC_Init+0x44>)
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_RTC_Init+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_RTC_Init+0x44>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_RTC_Init+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_RTC_Init+0x44>)
 8000840:	f002 fd26 	bl	8003290 <HAL_RTC_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800084a:	f000 f933 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000128 	.word	0x20000128
 8000858:	40002800 	.word	0x40002800

0800085c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SDIO_SD_Init+0x38>)
 8000862:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <MX_SDIO_SD_Init+0x3c>)
 8000864:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_SDIO_SD_Init+0x38>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SDIO_SD_Init+0x38>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_SDIO_SD_Init+0x38>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SDIO_SD_Init+0x38>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <MX_SDIO_SD_Init+0x38>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <MX_SDIO_SD_Init+0x38>)
 8000886:	2204      	movs	r2, #4
 8000888:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	20000148 	.word	0x20000148
 8000898:	40012c00 	.word	0x40012c00

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f003 ff61 	bl	800479a <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f8e9 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200001cc 	.word	0x200001cc
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <MX_GPIO_Init+0xf0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a34      	ldr	r2, [pc, #208]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <MX_GPIO_Init+0xf0>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_GPIO_Init+0xf0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_GPIO_Init+0xf0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_GPIO_Init+0xf0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000998:	4812      	ldr	r0, [pc, #72]	; (80009e4 <MX_GPIO_Init+0xf4>)
 800099a:	f000 fe49 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 800099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	480b      	ldr	r0, [pc, #44]	; (80009e4 <MX_GPIO_Init+0xf4>)
 80009b8:	f000 fc8e 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_BSP_Input_Pin */
  GPIO_InitStruct.Pin = SDIO_BSP_Input_Pin;
 80009bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_BSP_Input_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_GPIO_Init+0xf8>)
 80009d2:	f000 fc81 	bl	80012d8 <HAL_GPIO_Init>

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40020000 	.word	0x40020000

080009ec <fwrite_wav_header>:

/* USER CODE BEGIN 4 */
FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4603      	mov	r3, r0
 80009fc:	807b      	strh	r3, [r7, #2]
 80009fe:	460b      	mov	r3, r1
 8000a00:	707b      	strb	r3, [r7, #1]
 8000a02:	4613      	mov	r3, r2
 8000a04:	703b      	strb	r3, [r7, #0]
	UINT bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000a06:	2352      	movs	r3, #82	; 0x52
 8000a08:	723b      	strb	r3, [r7, #8]
 8000a0a:	2349      	movs	r3, #73	; 0x49
 8000a0c:	727b      	strb	r3, [r7, #9]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000a0e:	2346      	movs	r3, #70	; 0x46
 8000a10:	72bb      	strb	r3, [r7, #10]
 8000a12:	2346      	movs	r3, #70	; 0x46
 8000a14:	72fb      	strb	r3, [r7, #11]
	wave_header.size = (uint32_t)0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000a1a:	2357      	movs	r3, #87	; 0x57
 8000a1c:	743b      	strb	r3, [r7, #16]
 8000a1e:	2341      	movs	r3, #65	; 0x41
 8000a20:	747b      	strb	r3, [r7, #17]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000a22:	2356      	movs	r3, #86	; 0x56
 8000a24:	74bb      	strb	r3, [r7, #18]
 8000a26:	2345      	movs	r3, #69	; 0x45
 8000a28:	74fb      	strb	r3, [r7, #19]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000a2a:	2366      	movs	r3, #102	; 0x66
 8000a2c:	753b      	strb	r3, [r7, #20]
 8000a2e:	236d      	movs	r3, #109	; 0x6d
 8000a30:	757b      	strb	r3, [r7, #21]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000a32:	2374      	movs	r3, #116	; 0x74
 8000a34:	75bb      	strb	r3, [r7, #22]
 8000a36:	2320      	movs	r3, #32
 8000a38:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt_size = 16;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	61bb      	str	r3, [r7, #24]
	wave_header.format = 1; // PCM
 8000a3e:	2301      	movs	r3, #1
 8000a40:	83bb      	strh	r3, [r7, #28]
	wave_header.channels = channels; // channels
 8000a42:	783b      	ldrb	r3, [r7, #0]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	83fb      	strh	r3, [r7, #30]
	wave_header.sampleRate=sampleRate;  // sample rate
 8000a48:	887b      	ldrh	r3, [r7, #2]
 8000a4a:	623b      	str	r3, [r7, #32]
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	787a      	ldrb	r2, [r7, #1]
 8000a50:	fb02 f303 	mul.w	r3, r2, r3
 8000a54:	783a      	ldrb	r2, [r7, #0]
 8000a56:	fb02 f303 	mul.w	r3, r2, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	da00      	bge.n	8000a60 <fwrite_wav_header+0x74>
 8000a5e:	3307      	adds	r3, #7
 8000a60:	10db      	asrs	r3, r3, #3
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.bc =  bitsPerSample*channels/8;
 8000a64:	787b      	ldrb	r3, [r7, #1]
 8000a66:	783a      	ldrb	r2, [r7, #0]
 8000a68:	fb02 f303 	mul.w	r3, r2, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	da00      	bge.n	8000a72 <fwrite_wav_header+0x86>
 8000a70:	3307      	adds	r3, #7
 8000a72:	10db      	asrs	r3, r3, #3
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	853b      	strh	r3, [r7, #40]	; 0x28
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000a78:	787b      	ldrb	r3, [r7, #1]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	857b      	strh	r3, [r7, #42]	; 0x2a
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000a7e:	2364      	movs	r3, #100	; 0x64
 8000a80:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000a84:	2361      	movs	r3, #97	; 0x61
 8000a86:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000a8a:	2374      	movs	r3, #116	; 0x74
 8000a8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000a90:	2361      	movs	r3, #97	; 0x61
 8000a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	wave_header.data_size = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), &bw);
 8000a9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a9e:	f107 0108 	add.w	r1, r7, #8
 8000aa2:	222c      	movs	r2, #44	; 0x2c
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f006 fecb 	bl	8007840 <f_write>
 8000aaa:	4603      	mov	r3, r0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3738      	adds	r7, #56	; 0x38
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_I2C_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12b      	bne.n	8000b8a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b4e:	23c0      	movs	r3, #192	; 0xc0
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b52:	2312      	movs	r3, #18
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <HAL_I2C_MspInit+0x8c>)
 8000b6a:	f000 fbb5 	bl	80012d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0a2      	sub	sp, #136	; 0x88
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb8:	f107 0318 	add.w	r3, r7, #24
 8000bbc:	225c      	movs	r2, #92	; 0x5c
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f007 f839 	bl	8007c38 <memset>
  if(hi2s->Instance==SPI2)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a38      	ldr	r2, [pc, #224]	; (8000cac <HAL_I2S_MspInit+0x10c>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d168      	bne.n	8000ca2 <HAL_I2S_MspInit+0x102>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000bd4:	2332      	movs	r3, #50	; 0x32
 8000bd6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000bec:	2300      	movs	r3, #0
 8000bee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 0318 	add.w	r3, r7, #24
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 f991 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8000c00:	f7ff ff58 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <HAL_I2S_MspInit+0x110>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <HAL_I2S_MspInit+0x110>)
 8000c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <HAL_I2S_MspInit+0x110>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <HAL_I2S_MspInit+0x110>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <HAL_I2S_MspInit+0x110>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <HAL_I2S_MspInit+0x110>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <HAL_I2S_MspInit+0x110>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a1a      	ldr	r2, [pc, #104]	; (8000cb0 <HAL_I2S_MspInit+0x110>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_I2S_MspInit+0x110>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000c58:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000c5c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c76:	4619      	mov	r1, r3
 8000c78:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <HAL_I2S_MspInit+0x114>)
 8000c7a:	f000 fb2d 	bl	80012d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c90:	2305      	movs	r3, #5
 8000c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <HAL_I2S_MspInit+0x118>)
 8000c9e:	f000 fb1b 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3788      	adds	r7, #136	; 0x88
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40003800 	.word	0x40003800
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40020800 	.word	0x40020800

08000cbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b09a      	sub	sp, #104	; 0x68
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	225c      	movs	r2, #92	; 0x5c
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f006 ffb3 	bl	8007c38 <memset>
  if(hrtc->Instance==RTC)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <HAL_RTC_MspInit+0x4c>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d111      	bne.n	8000d00 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cdc:	2320      	movs	r3, #32
 8000cde:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f916 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000cf6:	f7ff fedd 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <HAL_RTC_MspInit+0x50>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3768      	adds	r7, #104	; 0x68
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40002800 	.word	0x40002800
 8000d0c:	42470e3c 	.word	0x42470e3c

08000d10 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0a2      	sub	sp, #136	; 0x88
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	225c      	movs	r2, #92	; 0x5c
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f006 ff81 	bl	8007c38 <memset>
  if(hsd->Instance==SDIO)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a33      	ldr	r2, [pc, #204]	; (8000e08 <HAL_SD_MspInit+0xf8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d15f      	bne.n	8000e00 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000d40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000d46:	2300      	movs	r3, #0
 8000d48:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 f8e2 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000d5e:	f7ff fea9 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <HAL_SD_MspInit+0xfc>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a28      	ldr	r2, [pc, #160]	; (8000e0c <HAL_SD_MspInit+0xfc>)
 8000d6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <HAL_SD_MspInit+0xfc>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <HAL_SD_MspInit+0xfc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <HAL_SD_MspInit+0xfc>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <HAL_SD_MspInit+0xfc>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_SD_MspInit+0xfc>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <HAL_SD_MspInit+0xfc>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_SD_MspInit+0xfc>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000db6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000dba:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480e      	ldr	r0, [pc, #56]	; (8000e10 <HAL_SD_MspInit+0x100>)
 8000dd8:	f000 fa7e 	bl	80012d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000dee:	230c      	movs	r3, #12
 8000df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <HAL_SD_MspInit+0x104>)
 8000dfc:	f000 fa6c 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e00:	bf00      	nop
 8000e02:	3788      	adds	r7, #136	; 0x88
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40012c00 	.word	0x40012c00
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020c00 	.word	0x40020c00

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_UART_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12b      	bne.n	8000e92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e72:	230c      	movs	r3, #12
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e82:	2307      	movs	r3, #7
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_UART_MspInit+0x8c>)
 8000e8e:	f000 fa23 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40004400 	.word	0x40004400
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f8c6 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f006 fe5a 	bl	8007be4 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	20000210 	.word	0x20000210
 8000f64:	20000268 	.word	0x20000268

08000f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f006 fe19 	bl	8007bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff faf9 	bl	80005b4 <main>
  bx  lr    
 8000fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fd0:	08008690 	.word	0x08008690
  ldr r2, =_sbss
 8000fd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fd8:	20000264 	.word	0x20000264

08000fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <HAL_Init+0x40>)
 8000fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_Init+0x40>)
 8000ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x40>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f931 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	200f      	movs	r0, #15
 8001010:	f000 f808 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fd54 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023c00 	.word	0x40023c00

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x54>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f93b 	bl	80012be <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001060:	f000 f911 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_InitTick+0x5c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	20000008 	.word	0x20000008
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000214 	.word	0x20000214

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000214 	.word	0x20000214

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff47 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff5c 	bl	8001154 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffb0 	bl	800122c <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e165      	b.n	80015c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8154 	bne.w	80015ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	2b02      	cmp	r3, #2
 8001328:	d130      	bne.n	800138c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 0201 	and.w	r2, r3, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b03      	cmp	r3, #3
 8001396:	d017      	beq.n	80013c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80ae 	beq.w	80015ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_GPIO_Init+0x300>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a5c      	ldr	r2, [pc, #368]	; (80015d8 <HAL_GPIO_Init+0x300>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b5a      	ldr	r3, [pc, #360]	; (80015d8 <HAL_GPIO_Init+0x300>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147a:	4a58      	ldr	r2, [pc, #352]	; (80015dc <HAL_GPIO_Init+0x304>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4f      	ldr	r2, [pc, #316]	; (80015e0 <HAL_GPIO_Init+0x308>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d025      	beq.n	80014f2 <HAL_GPIO_Init+0x21a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4e      	ldr	r2, [pc, #312]	; (80015e4 <HAL_GPIO_Init+0x30c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01f      	beq.n	80014ee <HAL_GPIO_Init+0x216>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4d      	ldr	r2, [pc, #308]	; (80015e8 <HAL_GPIO_Init+0x310>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0x212>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4c      	ldr	r2, [pc, #304]	; (80015ec <HAL_GPIO_Init+0x314>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x20e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4b      	ldr	r2, [pc, #300]	; (80015f0 <HAL_GPIO_Init+0x318>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x20a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4a      	ldr	r2, [pc, #296]	; (80015f4 <HAL_GPIO_Init+0x31c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x206>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a49      	ldr	r2, [pc, #292]	; (80015f8 <HAL_GPIO_Init+0x320>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x202>
 80014d6:	2306      	movs	r3, #6
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014da:	2307      	movs	r3, #7
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_GPIO_Init+0x304>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001512:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001536:	4a31      	ldr	r2, [pc, #196]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <HAL_GPIO_Init+0x324>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001560:	4a26      	ldr	r2, [pc, #152]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <HAL_GPIO_Init+0x324>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b4:	4a11      	ldr	r2, [pc, #68]	; (80015fc <HAL_GPIO_Init+0x324>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f ae96 	bls.w	80012f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40013c00 	.word	0x40013c00

08001600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e001      	b.n	8001622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e12b      	b.n	80018ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d106      	bne.n	8001690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fa40 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2224      	movs	r2, #36	; 0x24
 8001694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016c8:	f000 fc00 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 80016cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4a81      	ldr	r2, [pc, #516]	; (80018d8 <HAL_I2C_Init+0x274>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d807      	bhi.n	80016e8 <HAL_I2C_Init+0x84>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4a80      	ldr	r2, [pc, #512]	; (80018dc <HAL_I2C_Init+0x278>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	bf94      	ite	ls
 80016e0:	2301      	movls	r3, #1
 80016e2:	2300      	movhi	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	e006      	b.n	80016f6 <HAL_I2C_Init+0x92>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4a7d      	ldr	r2, [pc, #500]	; (80018e0 <HAL_I2C_Init+0x27c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	bf94      	ite	ls
 80016f0:	2301      	movls	r3, #1
 80016f2:	2300      	movhi	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0e7      	b.n	80018ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a78      	ldr	r2, [pc, #480]	; (80018e4 <HAL_I2C_Init+0x280>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	0c9b      	lsrs	r3, r3, #18
 8001708:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a6a      	ldr	r2, [pc, #424]	; (80018d8 <HAL_I2C_Init+0x274>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d802      	bhi.n	8001738 <HAL_I2C_Init+0xd4>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	e009      	b.n	800174c <HAL_I2C_Init+0xe8>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	4a69      	ldr	r2, [pc, #420]	; (80018e8 <HAL_I2C_Init+0x284>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	099b      	lsrs	r3, r3, #6
 800174a:	3301      	adds	r3, #1
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	430b      	orrs	r3, r1
 8001752:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800175e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	495c      	ldr	r1, [pc, #368]	; (80018d8 <HAL_I2C_Init+0x274>)
 8001768:	428b      	cmp	r3, r1
 800176a:	d819      	bhi.n	80017a0 <HAL_I2C_Init+0x13c>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1e59      	subs	r1, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fbb1 f3f3 	udiv	r3, r1, r3
 800177a:	1c59      	adds	r1, r3, #1
 800177c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001780:	400b      	ands	r3, r1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00a      	beq.n	800179c <HAL_I2C_Init+0x138>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1e59      	subs	r1, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fbb1 f3f3 	udiv	r3, r1, r3
 8001794:	3301      	adds	r3, #1
 8001796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179a:	e051      	b.n	8001840 <HAL_I2C_Init+0x1dc>
 800179c:	2304      	movs	r3, #4
 800179e:	e04f      	b.n	8001840 <HAL_I2C_Init+0x1dc>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d111      	bne.n	80017cc <HAL_I2C_Init+0x168>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1e58      	subs	r0, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	440b      	add	r3, r1
 80017b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ba:	3301      	adds	r3, #1
 80017bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	e012      	b.n	80017f2 <HAL_I2C_Init+0x18e>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1e58      	subs	r0, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	0099      	lsls	r1, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Init+0x196>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e022      	b.n	8001840 <HAL_I2C_Init+0x1dc>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10e      	bne.n	8001820 <HAL_I2C_Init+0x1bc>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1e58      	subs	r0, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6859      	ldr	r1, [r3, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	440b      	add	r3, r1
 8001810:	fbb0 f3f3 	udiv	r3, r0, r3
 8001814:	3301      	adds	r3, #1
 8001816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181e:	e00f      	b.n	8001840 <HAL_I2C_Init+0x1dc>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	0099      	lsls	r1, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	6809      	ldr	r1, [r1, #0]
 8001844:	4313      	orrs	r3, r2
 8001846:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800186e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6911      	ldr	r1, [r2, #16]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68d2      	ldr	r2, [r2, #12]
 800187a:	4311      	orrs	r1, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	430b      	orrs	r3, r1
 8001882:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2220      	movs	r2, #32
 80018ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	000186a0 	.word	0x000186a0
 80018dc:	001e847f 	.word	0x001e847f
 80018e0:	003d08ff 	.word	0x003d08ff
 80018e4:	431bde83 	.word	0x431bde83
 80018e8:	10624dd3 	.word	0x10624dd3

080018ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0e1      	b.n	8001ac2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a6d      	ldr	r2, [pc, #436]	; (8001acc <HAL_I2S_Init+0x1e0>)
 8001916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff f941 	bl	8000ba0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001934:	f023 030f 	bic.w	r3, r3, #15
 8001938:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2202      	movs	r2, #2
 8001940:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d06f      	beq.n	8001a2a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001952:	2310      	movs	r3, #16
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e001      	b.n	800195c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001958:	2320      	movs	r3, #32
 800195a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b20      	cmp	r3, #32
 8001962:	d802      	bhi.n	800196a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_I2S_Init+0x1e4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d004      	beq.n	800197e <HAL_I2S_Init+0x92>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a56      	ldr	r2, [pc, #344]	; (8001ad4 <HAL_I2S_Init+0x1e8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d104      	bne.n	8001988 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800197e:	2001      	movs	r0, #1
 8001980:	f000 fdf6 	bl	8002570 <HAL_RCCEx_GetPeriphCLKFreq>
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	e003      	b.n	8001990 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001988:	2002      	movs	r0, #2
 800198a:	f000 fdf1 	bl	8002570 <HAL_RCCEx_GetPeriphCLKFreq>
 800198e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001998:	d125      	bne.n	80019e6 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d010      	beq.n	80019c4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	3305      	adds	r3, #5
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	e01f      	b.n	8001a04 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	3305      	adds	r3, #5
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	e00e      	b.n	8001a04 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	3305      	adds	r3, #5
 8001a02:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4a34      	ldr	r2, [pc, #208]	; (8001ad8 <HAL_I2S_Init+0x1ec>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	e003      	b.n	8001a32 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d902      	bls.n	8001a3e <HAL_I2S_Init+0x152>
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d907      	bls.n	8001a4e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f043 0210 	orr.w	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e039      	b.n	8001ac2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	ea42 0103 	orr.w	r1, r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a6c:	f023 030f 	bic.w	r3, r3, #15
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6851      	ldr	r1, [r2, #4]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6892      	ldr	r2, [r2, #8]
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68d2      	ldr	r2, [r2, #12]
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6992      	ldr	r2, [r2, #24]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a90:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b30      	cmp	r3, #48	; 0x30
 8001a98:	d003      	beq.n	8001aa2 <HAL_I2S_Init+0x1b6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2bb0      	cmp	r3, #176	; 0xb0
 8001aa0:	d107      	bne.n	8001ab2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	69da      	ldr	r2, [r3, #28]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ab0:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08001bd3 	.word	0x08001bd3
 8001ad0:	40003800 	.word	0x40003800
 8001ad4:	40003c00 	.word	0x40003c00
 8001ad8:	cccccccd 	.word	0xcccccccd

08001adc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	881a      	ldrh	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	1c9a      	adds	r2, r3, #2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10e      	bne.n	8001b6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffb8 	bl	8001adc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	b292      	uxth	r2, r2
 8001b88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	1c9a      	adds	r2, r3, #2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10e      	bne.n	8001bca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff93 	bl	8001af0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d13a      	bne.n	8001c64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d109      	bne.n	8001c0c <I2S_IRQHandler+0x3a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c02:	2b40      	cmp	r3, #64	; 0x40
 8001c04:	d102      	bne.n	8001c0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffb4 	bl	8001b74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c12:	2b40      	cmp	r3, #64	; 0x40
 8001c14:	d126      	bne.n	8001c64 <I2S_IRQHandler+0x92>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d11f      	bne.n	8001c64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f043 0202 	orr.w	r2, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff50 	bl	8001b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d136      	bne.n	8001cde <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d109      	bne.n	8001c8e <I2S_IRQHandler+0xbc>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c84:	2b80      	cmp	r3, #128	; 0x80
 8001c86:	d102      	bne.n	8001c8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff45 	bl	8001b18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d122      	bne.n	8001cde <I2S_IRQHandler+0x10c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d11b      	bne.n	8001cde <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cb4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	f043 0204 	orr.w	r2, r3, #4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff13 	bl	8001b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0cc      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b68      	ldr	r3, [pc, #416]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d90c      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0b8      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d3c:	4b59      	ldr	r3, [pc, #356]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a58      	ldr	r2, [pc, #352]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d54:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a52      	ldr	r2, [pc, #328]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d60:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	494d      	ldr	r1, [pc, #308]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d044      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d119      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e07f      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e06f      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e067      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4934      	ldr	r1, [pc, #208]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7ff f968 	bl	80010ac <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7ff f964 	bl	80010ac <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e04f      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d20c      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e032      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4916      	ldr	r1, [pc, #88]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e6e:	f000 fdc7 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	490a      	ldr	r1, [pc, #40]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	5ccb      	ldrb	r3, [r1, r3]
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f8c8 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023c00 	.word	0x40023c00
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	080085a0 	.word	0x080085a0
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0a9b      	lsrs	r3, r3, #10
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	080085b0 	.word	0x080085b0

08001ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ef8:	f7ff ffdc 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0b5b      	lsrs	r3, r3, #13
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	080085b0 	.word	0x080085b0

08001f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d010      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001f54:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	496c      	ldr	r1, [pc, #432]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001f72:	2301      	movs	r3, #1
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001f82:	4b64      	ldr	r3, [pc, #400]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f88:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	4960      	ldr	r1, [pc, #384]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d017      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb0:	4b58      	ldr	r3, [pc, #352]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4955      	ldr	r1, [pc, #340]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d017      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fec:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffa:	4946      	ldr	r1, [pc, #280]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800200a:	d101      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800200c:	2301      	movs	r3, #1
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002018:	2301      	movs	r3, #1
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 808a 	beq.w	800213e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a38      	ldr	r2, [pc, #224]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002046:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a33      	ldr	r2, [pc, #204]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002052:	f7ff f82b 	bl	80010ac <HAL_GetTick>
 8002056:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7ff f827 	bl	80010ac <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e278      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002078:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002080:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02f      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002090:	6a3a      	ldr	r2, [r7, #32]
 8002092:	429a      	cmp	r2, r3
 8002094:	d028      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002096:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d114      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80020be:	f7fe fff5 	bl	80010ac <HAL_GetTick>
 80020c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe fff1 	bl	80010ac <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e240      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020f4:	d114      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210a:	4902      	ldr	r1, [pc, #8]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800210c:	4313      	orrs	r3, r2
 800210e:	608b      	str	r3, [r1, #8]
 8002110:	e00c      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40007000 	.word	0x40007000
 800211c:	42470e40 	.word	0x42470e40
 8002120:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a49      	ldr	r2, [pc, #292]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002126:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800212a:	6093      	str	r3, [r2, #8]
 800212c:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800212e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	4944      	ldr	r1, [pc, #272]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800213a:	4313      	orrs	r3, r2
 800213c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002150:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002152:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002160:	4b3a      	ldr	r3, [pc, #232]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4937      	ldr	r1, [pc, #220]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002182:	4b32      	ldr	r3, [pc, #200]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002188:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002190:	492e      	ldr	r1, [pc, #184]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d011      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021aa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	4926      	ldr	r1, [pc, #152]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021c2:	d101      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80021c4:	2301      	movs	r3, #1
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	491a      	ldr	r1, [pc, #104]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d011      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002204:	4911      	ldr	r1, [pc, #68]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002214:	d101      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002216:	2301      	movs	r3, #1
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	2b01      	cmp	r3, #1
 800221e:	d005      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002228:	f040 80ff 	bne.w	800242a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002232:	f7fe ff3b 	bl	80010ac <HAL_GetTick>
 8002236:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002238:	e00e      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800223a:	f7fe ff37 	bl	80010ac <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d907      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e188      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800224c:	40023800 	.word	0x40023800
 8002250:	424711e0 	.word	0x424711e0
 8002254:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002258:	4b7e      	ldr	r3, [pc, #504]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ea      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002280:	2b00      	cmp	r3, #0
 8002282:	d028      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d124      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800228c:	4b71      	ldr	r3, [pc, #452]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800228e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002292:	0c1b      	lsrs	r3, r3, #16
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	3301      	adds	r3, #1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800229e:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a4:	0e1b      	lsrs	r3, r3, #24
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	019b      	lsls	r3, r3, #6
 80022b6:	431a      	orrs	r2, r3
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	3b01      	subs	r3, #1
 80022be:	041b      	lsls	r3, r3, #16
 80022c0:	431a      	orrs	r2, r3
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	061b      	lsls	r3, r3, #24
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	071b      	lsls	r3, r3, #28
 80022ce:	4961      	ldr	r1, [pc, #388]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d035      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002300:	d130      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002302:	4b54      	ldr	r3, [pc, #336]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	3301      	adds	r3, #1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002314:	4b4f      	ldr	r3, [pc, #316]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231a:	0f1b      	lsrs	r3, r3, #28
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	019b      	lsls	r3, r3, #6
 800232c:	431a      	orrs	r2, r3
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	431a      	orrs	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	071b      	lsls	r3, r3, #28
 8002344:	4943      	ldr	r1, [pc, #268]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800234c:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800234e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002352:	f023 021f 	bic.w	r2, r3, #31
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	3b01      	subs	r3, #1
 800235c:	493d      	ldr	r1, [pc, #244]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	2b00      	cmp	r3, #0
 800236e:	d029      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002378:	d124      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800237a:	4b36      	ldr	r3, [pc, #216]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800237c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	3301      	adds	r3, #1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800238c:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800238e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002392:	0f1b      	lsrs	r3, r3, #28
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	019b      	lsls	r3, r3, #6
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	085b      	lsrs	r3, r3, #1
 80023ac:	3b01      	subs	r3, #1
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	431a      	orrs	r2, r3
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	431a      	orrs	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	071b      	lsls	r3, r3, #28
 80023bc:	4925      	ldr	r1, [pc, #148]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d016      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	019b      	lsls	r3, r3, #6
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	3b01      	subs	r3, #1
 80023e4:	041b      	lsls	r3, r3, #16
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	061b      	lsls	r3, r3, #24
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	071b      	lsls	r3, r3, #28
 80023f6:	4917      	ldr	r1, [pc, #92]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002404:	f7fe fe52 	bl	80010ac <HAL_GetTick>
 8002408:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800240c:	f7fe fe4e 	bl	80010ac <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e09f      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	2b01      	cmp	r3, #1
 800242e:	f040 8095 	bne.w	800255c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002438:	f7fe fe38 	bl	80010ac <HAL_GetTick>
 800243c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800243e:	e00f      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002440:	f7fe fe34 	bl	80010ac <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d908      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e085      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	42470068 	.word	0x42470068
 800245c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002460:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800246c:	d0e8      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800248a:	2b00      	cmp	r3, #0
 800248c:	d02b      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002492:	2b00      	cmp	r3, #0
 8002494:	d127      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002496:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	3301      	adds	r3, #1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	431a      	orrs	r2, r3
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	3b01      	subs	r3, #1
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	061b      	lsls	r3, r3, #24
 80024c4:	4928      	ldr	r1, [pc, #160]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	3b01      	subs	r3, #1
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	4922      	ldr	r1, [pc, #136]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01d      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x612>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024fa:	d118      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	0e1b      	lsrs	r3, r3, #24
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	019b      	lsls	r3, r3, #6
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	3b01      	subs	r3, #1
 800251e:	041b      	lsls	r3, r3, #16
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	4910      	ldr	r1, [pc, #64]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002534:	f7fe fdba 	bl	80010ac <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800253c:	f7fe fdb6 	bl	80010ac <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e007      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800255a:	d1ef      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3730      	adds	r7, #48	; 0x30
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	42470070 	.word	0x42470070

08002570 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	2b07      	cmp	r3, #7
 8002596:	f200 8224 	bhi.w	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800259a:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080027a3 	.word	0x080027a3
 80025a4:	080028cd 	.word	0x080028cd
 80025a8:	080029e3 	.word	0x080029e3
 80025ac:	080025c1 	.word	0x080025c1
 80025b0:	080029e3 	.word	0x080029e3
 80025b4:	080029e3 	.word	0x080029e3
 80025b8:	080029e3 	.word	0x080029e3
 80025bc:	080025c1 	.word	0x080025c1
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80025c0:	4ba8      	ldr	r3, [pc, #672]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80025c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025c6:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025d6:	f000 80d6 	beq.w	8002786 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025e0:	f200 80dd 	bhi.w	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025ea:	f000 809f 	beq.w	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025f4:	f200 80d3 	bhi.w	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025fe:	d05b      	beq.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002606:	f200 80ca 	bhi.w	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002610:	f000 80b6 	beq.w	8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800261a:	f200 80c0 	bhi.w	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002624:	f000 8082 	beq.w	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800262e:	f200 80b6 	bhi.w	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800263e:	d03b      	beq.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8002640:	e0ad      	b.n	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002642:	4b88      	ldr	r3, [pc, #544]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800264e:	4b85      	ldr	r3, [pc, #532]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	4a83      	ldr	r2, [pc, #524]	; (8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e008      	b.n	8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8002662:	4b80      	ldr	r3, [pc, #512]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800266c:	4a7f      	ldr	r2, [pc, #508]	; (800286c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8002674:	4b7b      	ldr	r3, [pc, #492]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	0e1b      	lsrs	r3, r3, #24
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8002682:	4b78      	ldr	r3, [pc, #480]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	fb03 f202 	mul.w	r2, r3, r2
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800269c:	4b71      	ldr	r3, [pc, #452]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800269e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	61fb      	str	r3, [r7, #28]
          break;
 80026b6:	e073      	b.n	80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80026b8:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80026c4:	4b67      	ldr	r3, [pc, #412]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80026c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ce:	4a66      	ldr	r2, [pc, #408]	; (8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	e008      	b.n	80026ea <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80026d8:	4b62      	ldr	r3, [pc, #392]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80026da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e2:	4a62      	ldr	r2, [pc, #392]	; (800286c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80026ea:	4b5e      	ldr	r3, [pc, #376]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80026ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f0:	0e1b      	lsrs	r3, r3, #24
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80026f8:	4b5a      	ldr	r3, [pc, #360]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80026fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fe:	099b      	lsrs	r3, r3, #6
 8002700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	fb03 f202 	mul.w	r2, r3, r2
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8002712:	4b54      	ldr	r3, [pc, #336]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	3301      	adds	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	61fb      	str	r3, [r7, #28]
          break;
 800272a:	e039      	b.n	80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800272c:	4b4d      	ldr	r3, [pc, #308]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d108      	bne.n	800274a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002738:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002740:	4a49      	ldr	r2, [pc, #292]	; (8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	e007      	b.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800274a:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002752:	4a46      	ldr	r2, [pc, #280]	; (800286c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800275a:	4b42      	ldr	r3, [pc, #264]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	0f1b      	lsrs	r3, r3, #28
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8002766:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	fb03 f202 	mul.w	r2, r3, r2
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	61fb      	str	r3, [r7, #28]
          break;
 800277e:	e00f      	b.n	80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002780:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002782:	61fb      	str	r3, [r7, #28]
          break;
 8002784:	e00c      	b.n	80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8002792:	4b35      	ldr	r3, [pc, #212]	; (8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002794:	61fb      	str	r3, [r7, #28]
          break;
 8002796:	e003      	b.n	80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8002798:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800279a:	61fb      	str	r3, [r7, #28]
          break;
 800279c:	e000      	b.n	80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800279e:	bf00      	nop
        }
      }
      break;
 80027a0:	e11f      	b.n	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80027a2:	4b30      	ldr	r3, [pc, #192]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80027b4:	d079      	beq.n	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80027bc:	f200 8082 	bhi.w	80028c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027c6:	d03c      	beq.n	8002842 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ce:	d879      	bhi.n	80028c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027dc:	d172      	bne.n	80028c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80027e0:	61fb      	str	r3, [r7, #28]
          break;
 80027e2:	e072      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f0:	d109      	bne.n	8002806 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80027fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	e008      	b.n	8002818 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002810:	4a15      	ldr	r2, [pc, #84]	; (8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800281a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800282e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002832:	0f1b      	lsrs	r3, r3, #28
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	61fb      	str	r3, [r7, #28]
          break;
 8002840:	e043      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284e:	d111      	bne.n	8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	e010      	b.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	00f42400 	.word	0x00f42400
 800286c:	017d7840 	.word	0x017d7840
 8002870:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002874:	4b5e      	ldr	r3, [pc, #376]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800287c:	4a5d      	ldr	r2, [pc, #372]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002884:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002896:	4b56      	ldr	r3, [pc, #344]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0f1b      	lsrs	r3, r3, #28
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	61fb      	str	r3, [r7, #28]
          break;
 80028a8:	e00f      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028aa:	4b51      	ldr	r3, [pc, #324]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b6:	d102      	bne.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80028b8:	4b4f      	ldr	r3, [pc, #316]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80028ba:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80028bc:	e005      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80028be:	4b4d      	ldr	r3, [pc, #308]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80028c0:	61fb      	str	r3, [r7, #28]
          break;
 80028c2:	e002      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
          break;
 80028c8:	bf00      	nop
        }
      }
      break;
 80028ca:	e08a      	b.n	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80028cc:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80028ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d2:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80028de:	d06f      	beq.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80028e6:	d878      	bhi.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ee:	d03c      	beq.n	800296a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028f6:	d870      	bhi.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002904:	d169      	bne.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8002908:	61fb      	str	r3, [r7, #28]
          break;
 800290a:	e069      	b.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002918:	d109      	bne.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800291a:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800291c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002924:	4a34      	ldr	r2, [pc, #208]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002926:	fbb2 f3f3 	udiv	r3, r2, r3
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	e008      	b.n	8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800292e:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002938:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002940:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002954:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295a:	0f1b      	lsrs	r3, r3, #28
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	61fb      	str	r3, [r7, #28]
          break;
 8002968:	e03a      	b.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800296a:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002976:	d108      	bne.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	e007      	b.n	800299a <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	099b      	lsrs	r3, r3, #6
 80029a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0f1b      	lsrs	r3, r3, #28
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	61fb      	str	r3, [r7, #28]
          break;
 80029be:	e00f      	b.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029cc:	d102      	bne.n	80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80029d0:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80029d2:	e005      	b.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80029d6:	61fb      	str	r3, [r7, #28]
          break;
 80029d8:	e002      	b.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
          break;
 80029de:	bf00      	nop
        }
      }
      break;
 80029e0:	bf00      	nop
    }
  }
  return frequency;
 80029e2:	69fb      	ldr	r3, [r7, #28]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3724      	adds	r7, #36	; 0x24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40023800 	.word	0x40023800
 80029f4:	00f42400 	.word	0x00f42400
 80029f8:	017d7840 	.word	0x017d7840
 80029fc:	00bb8000 	.word	0x00bb8000

08002a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a04:	b0a6      	sub	sp, #152	; 0x98
 8002a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a26:	4bc8      	ldr	r3, [pc, #800]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	f200 817e 	bhi.w	8002d30 <HAL_RCC_GetSysClockFreq+0x330>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a71 	.word	0x08002a71
 8002a40:	08002d31 	.word	0x08002d31
 8002a44:	08002d31 	.word	0x08002d31
 8002a48:	08002d31 	.word	0x08002d31
 8002a4c:	08002a79 	.word	0x08002a79
 8002a50:	08002d31 	.word	0x08002d31
 8002a54:	08002d31 	.word	0x08002d31
 8002a58:	08002d31 	.word	0x08002d31
 8002a5c:	08002a81 	.word	0x08002a81
 8002a60:	08002d31 	.word	0x08002d31
 8002a64:	08002d31 	.word	0x08002d31
 8002a68:	08002d31 	.word	0x08002d31
 8002a6c:	08002beb 	.word	0x08002beb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a70:	4bb6      	ldr	r3, [pc, #728]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002a76:	e15f      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a78:	4bb5      	ldr	r3, [pc, #724]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a7e:	e15b      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a80:	4bb1      	ldr	r3, [pc, #708]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8c:	4bae      	ldr	r3, [pc, #696]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d031      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a98:	4bab      	ldr	r3, [pc, #684]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8002aac:	2300      	movs	r3, #0
 8002aae:	667b      	str	r3, [r7, #100]	; 0x64
 8002ab0:	4ba7      	ldr	r3, [pc, #668]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ab2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ab6:	462a      	mov	r2, r5
 8002ab8:	fb03 f202 	mul.w	r2, r3, r2
 8002abc:	2300      	movs	r3, #0
 8002abe:	4621      	mov	r1, r4
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4aa2      	ldr	r2, [pc, #648]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ac8:	4621      	mov	r1, r4
 8002aca:	fba1 1202 	umull	r1, r2, r1, r2
 8002ace:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	67ba      	str	r2, [r7, #120]	; 0x78
 8002ad4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002ad6:	4413      	add	r3, r2
 8002ad8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ade:	2200      	movs	r2, #0
 8002ae0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ae2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ae4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ae8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002aec:	f7fd fbe0 	bl	80002b0 <__aeabi_uldivmod>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4613      	mov	r3, r2
 8002af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002afa:	e064      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afc:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	2200      	movs	r2, #0
 8002b04:	653b      	str	r3, [r7, #80]	; 0x50
 8002b06:	657a      	str	r2, [r7, #84]	; 0x54
 8002b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b10:	2300      	movs	r3, #0
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b14:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002b18:	4622      	mov	r2, r4
 8002b1a:	462b      	mov	r3, r5
 8002b1c:	f04f 0000 	mov.w	r0, #0
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	0159      	lsls	r1, r3, #5
 8002b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2a:	0150      	lsls	r0, r2, #5
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4621      	mov	r1, r4
 8002b32:	1a51      	subs	r1, r2, r1
 8002b34:	6139      	str	r1, [r7, #16]
 8002b36:	4629      	mov	r1, r5
 8002b38:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b4a:	4659      	mov	r1, fp
 8002b4c:	018b      	lsls	r3, r1, #6
 8002b4e:	4651      	mov	r1, sl
 8002b50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b54:	4651      	mov	r1, sl
 8002b56:	018a      	lsls	r2, r1, #6
 8002b58:	4651      	mov	r1, sl
 8002b5a:	ebb2 0801 	subs.w	r8, r2, r1
 8002b5e:	4659      	mov	r1, fp
 8002b60:	eb63 0901 	sbc.w	r9, r3, r1
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b78:	4690      	mov	r8, r2
 8002b7a:	4699      	mov	r9, r3
 8002b7c:	4623      	mov	r3, r4
 8002b7e:	eb18 0303 	adds.w	r3, r8, r3
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	462b      	mov	r3, r5
 8002b86:	eb49 0303 	adc.w	r3, r9, r3
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b98:	4629      	mov	r1, r5
 8002b9a:	028b      	lsls	r3, r1, #10
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	028a      	lsls	r2, r1, #10
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bae:	2200      	movs	r2, #0
 8002bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8002bb2:	647a      	str	r2, [r7, #68]	; 0x44
 8002bb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bb8:	f7fd fb7a 	bl	80002b0 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bc6:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002bd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002be8:	e0a6      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bea:	4b57      	ldr	r3, [pc, #348]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bf6:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d02a      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	2200      	movs	r2, #0
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c14:	2100      	movs	r1, #0
 8002c16:	4b4e      	ldr	r3, [pc, #312]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c18:	fb03 f201 	mul.w	r2, r3, r1
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	fb00 f303 	mul.w	r3, r0, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	4a4a      	ldr	r2, [pc, #296]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c26:	fba0 1202 	umull	r1, r2, r0, r2
 8002c2a:	677a      	str	r2, [r7, #116]	; 0x74
 8002c2c:	460a      	mov	r2, r1
 8002c2e:	673a      	str	r2, [r7, #112]	; 0x70
 8002c30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c32:	4413      	add	r3, r2
 8002c34:	677b      	str	r3, [r7, #116]	; 0x74
 8002c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c3e:	637a      	str	r2, [r7, #52]	; 0x34
 8002c40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002c48:	f7fd fb32 	bl	80002b0 <__aeabi_uldivmod>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4613      	mov	r3, r2
 8002c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c56:	e05b      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c58:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	2200      	movs	r2, #0
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6a:	623b      	str	r3, [r7, #32]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	f04f 0000 	mov.w	r0, #0
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	0159      	lsls	r1, r3, #5
 8002c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c86:	0150      	lsls	r0, r2, #5
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c92:	4649      	mov	r1, r9
 8002c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cac:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	00eb      	lsls	r3, r5, #3
 8002cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc2:	00e2      	lsls	r2, r4, #3
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	4643      	mov	r3, r8
 8002cca:	18e3      	adds	r3, r4, r3
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	464b      	mov	r3, r9
 8002cd0:	eb45 0303 	adc.w	r3, r5, r3
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	028b      	lsls	r3, r1, #10
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cec:	4621      	mov	r1, r4
 8002cee:	028a      	lsls	r2, r1, #10
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	61fa      	str	r2, [r7, #28]
 8002cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d02:	f7fd fad5 	bl	80002b0 <__aeabi_uldivmod>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	0f1b      	lsrs	r3, r3, #28
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002d2e:	e003      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002d36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3798      	adds	r7, #152	; 0x98
 8002d40:	46bd      	mov	sp, r7
 8002d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	00f42400 	.word	0x00f42400
 8002d50:	017d7840 	.word	0x017d7840

08002d54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e28d      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8083 	beq.w	8002e7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d74:	4b94      	ldr	r3, [pc, #592]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d019      	beq.n	8002db4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d80:	4b91      	ldr	r3, [pc, #580]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d8c:	4b8e      	ldr	r3, [pc, #568]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4b8b      	ldr	r3, [pc, #556]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d112      	bne.n	8002dcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	4b84      	ldr	r3, [pc, #528]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05b      	beq.n	8002e78 <HAL_RCC_OscConfig+0x124>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d157      	bne.n	8002e78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e25a      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x90>
 8002dd6:	4b7c      	ldr	r3, [pc, #496]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7b      	ldr	r2, [pc, #492]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xcc>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0xb4>
 8002dee:	4b76      	ldr	r3, [pc, #472]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a75      	ldr	r2, [pc, #468]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b73      	ldr	r3, [pc, #460]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a72      	ldr	r2, [pc, #456]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xcc>
 8002e08:	4b6f      	ldr	r3, [pc, #444]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6e      	ldr	r2, [pc, #440]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b6c      	ldr	r3, [pc, #432]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6b      	ldr	r2, [pc, #428]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f940 	bl	80010ac <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe f93c 	bl	80010ac <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e21f      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xdc>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe f92c 	bl	80010ac <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe f928 	bl	80010ac <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e20b      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b57      	ldr	r3, [pc, #348]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x104>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d06f      	beq.n	8002f66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e86:	4b50      	ldr	r3, [pc, #320]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d017      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e92:	4b4d      	ldr	r3, [pc, #308]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d105      	bne.n	8002eaa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eaa:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d11c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb6:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d116      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_RCC_OscConfig+0x186>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e1d3      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eda:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4937      	ldr	r1, [pc, #220]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eee:	e03a      	b.n	8002f66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef8:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_RCC_OscConfig+0x278>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7fe f8d5 	bl	80010ac <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f06:	f7fe f8d1 	bl	80010ac <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e1b4      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4925      	ldr	r1, [pc, #148]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
 8002f38:	e015      	b.n	8002f66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCC_OscConfig+0x278>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe f8b4 	bl	80010ac <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f48:	f7fe f8b0 	bl	80010ac <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e193      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d036      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_RCC_OscConfig+0x27c>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe f894 	bl	80010ac <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f88:	f7fe f890 	bl	80010ac <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e173      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x234>
 8002fa6:	e01b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_RCC_OscConfig+0x27c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7fe f87d 	bl	80010ac <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	e00e      	b.n	8002fd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7fe f879 	bl	80010ac <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d907      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e15c      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	42470000 	.word	0x42470000
 8002fd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd4:	4b8a      	ldr	r3, [pc, #552]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ea      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8097 	beq.w	800311c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff2:	4b83      	ldr	r3, [pc, #524]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	4b7f      	ldr	r3, [pc, #508]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a7e      	ldr	r2, [pc, #504]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b7c      	ldr	r3, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301e:	4b79      	ldr	r3, [pc, #484]	; (8003204 <HAL_RCC_OscConfig+0x4b0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302a:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCC_OscConfig+0x4b0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a75      	ldr	r2, [pc, #468]	; (8003204 <HAL_RCC_OscConfig+0x4b0>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003036:	f7fe f839 	bl	80010ac <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7fe f835 	bl	80010ac <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e118      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	4b6c      	ldr	r3, [pc, #432]	; (8003204 <HAL_RCC_OscConfig+0x4b0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x31e>
 8003064:	4b66      	ldr	r3, [pc, #408]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a65      	ldr	r2, [pc, #404]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
 8003070:	e01c      	b.n	80030ac <HAL_RCC_OscConfig+0x358>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x340>
 800307a:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a60      	ldr	r2, [pc, #384]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
 8003086:	4b5e      	ldr	r3, [pc, #376]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4a5d      	ldr	r2, [pc, #372]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
 8003092:	e00b      	b.n	80030ac <HAL_RCC_OscConfig+0x358>
 8003094:	4b5a      	ldr	r3, [pc, #360]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a59      	ldr	r2, [pc, #356]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	4b57      	ldr	r3, [pc, #348]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a56      	ldr	r2, [pc, #344]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d015      	beq.n	80030e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fd fffa 	bl	80010ac <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fd fff6 	bl	80010ac <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0d7      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	4b4b      	ldr	r3, [pc, #300]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ee      	beq.n	80030bc <HAL_RCC_OscConfig+0x368>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fd ffe4 	bl	80010ac <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7fd ffe0 	bl	80010ac <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0c1      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fe:	4b40      	ldr	r3, [pc, #256]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ee      	bne.n	80030e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	4a3a      	ldr	r2, [pc, #232]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80ad 	beq.w	8003280 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b08      	cmp	r3, #8
 8003130:	d060      	beq.n	80031f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d145      	bne.n	80031c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b33      	ldr	r3, [pc, #204]	; (8003208 <HAL_RCC_OscConfig+0x4b4>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fd ffb4 	bl	80010ac <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fd ffb0 	bl	80010ac <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e093      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b29      	ldr	r3, [pc, #164]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	3b01      	subs	r3, #1
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	071b      	lsls	r3, r3, #28
 8003192:	491b      	ldr	r1, [pc, #108]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x4b4>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fd ff85 	bl	80010ac <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a6:	f7fd ff81 	bl	80010ac <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e064      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x452>
 80031c4:	e05c      	b.n	8003280 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_RCC_OscConfig+0x4b4>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fd ff6e 	bl	80010ac <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fd ff6a 	bl	80010ac <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e04d      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_OscConfig+0x4ac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x480>
 80031f2:	e045      	b.n	8003280 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d107      	bne.n	800320c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e040      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
 8003200:	40023800 	.word	0x40023800
 8003204:	40007000 	.word	0x40007000
 8003208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800320c:	4b1f      	ldr	r3, [pc, #124]	; (800328c <HAL_RCC_OscConfig+0x538>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d030      	beq.n	800327c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d129      	bne.n	800327c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d122      	bne.n	800327c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003244:	4293      	cmp	r3, r2
 8003246:	d119      	bne.n	800327c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	3b01      	subs	r3, #1
 8003256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d10f      	bne.n	800327c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d107      	bne.n	800327c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800

08003290 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e066      	b.n	8003374 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7f5b      	ldrb	r3, [r3, #29]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd fd00 	bl	8000cbc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	22ca      	movs	r2, #202	; 0xca
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2253      	movs	r2, #83	; 0x53
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f87a 	bl	80033cc <RTC_EnterInitMode>
 80032d8:	4603      	mov	r3, r0
 80032da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d12c      	bne.n	800333c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80032f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6899      	ldr	r1, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	68d2      	ldr	r2, [r2, #12]
 800331c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6919      	ldr	r1, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	041a      	lsls	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f881 	bl	800343a <RTC_ExitInitMode>
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d113      	bne.n	800336a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003396:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003398:	f7fd fe88 	bl	80010ac <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800339e:	e009      	b.n	80033b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033a0:	f7fd fe84 	bl	80010ac <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ae:	d901      	bls.n	80033b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e007      	b.n	80033c4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ee      	beq.n	80033a0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d122      	bne.n	8003430 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033fa:	f7fd fe57 	bl	80010ac <HAL_GetTick>
 80033fe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003400:	e00c      	b.n	800341c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003402:	f7fd fe53 	bl	80010ac <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003410:	d904      	bls.n	800341c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2204      	movs	r2, #4
 8003416:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <RTC_EnterInitMode+0x64>
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d1e8      	bne.n	8003402 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003454:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff89 	bl	800337c <HAL_RTC_WaitForSynchro>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2204      	movs	r2, #4
 8003474:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e022      	b.n	80034dc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d105      	bne.n	80034ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fd fc31 	bl	8000d10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2203      	movs	r2, #3
 80034b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f814 	bl	80034e4 <HAL_SD_InitCard>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e00a      	b.n	80034dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80034e4:	b5b0      	push	{r4, r5, r7, lr}
 80034e6:	b08e      	sub	sp, #56	; 0x38
 80034e8:	af04      	add	r7, sp, #16
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003500:	2376      	movs	r3, #118	; 0x76
 8003502:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681d      	ldr	r5, [r3, #0]
 8003508:	466c      	mov	r4, sp
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800351c:	4628      	mov	r0, r5
 800351e:	f001 fbfd 	bl	8004d1c <SDIO_Init>
 8003522:	4603      	mov	r3, r0
 8003524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e04f      	b.n	80035d4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_SD_InitCard+0xf8>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f001 fc35 	bl	8004dae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003544:	4b25      	ldr	r3, [pc, #148]	; (80035dc <HAL_SD_InitCard+0xf8>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800354a:	2002      	movs	r0, #2
 800354c:	f7fd fdba 	bl	80010c4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 ff03 	bl	800435c <SD_PowerON>
 8003556:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e02e      	b.n	80035d4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fe22 	bl	80041c0 <SD_InitCard>
 800357c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01b      	b.n	80035d4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 fc94 	bl	8004ed2 <SDMMC_CmdBlockLength>
 80035aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00f      	beq.n	80035d2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <HAL_SD_InitCard+0xfc>)
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3728      	adds	r7, #40	; 0x28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bdb0      	pop	{r4, r5, r7, pc}
 80035dc:	422580a0 	.word	0x422580a0
 80035e0:	004005ff 	.word	0x004005ff

080035e4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b092      	sub	sp, #72	; 0x48
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80035f2:	f7fd fd5b 	bl	80010ac <HAL_GetTick>
 80035f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d107      	bne.n	8003616 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e1bd      	b.n	8003992 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	f040 81b0 	bne.w	8003984 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800362a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	441a      	add	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	429a      	cmp	r2, r3
 8003636:	d907      	bls.n	8003648 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e1a4      	b.n	8003992 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2203      	movs	r2, #3
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	2b01      	cmp	r3, #1
 800365e:	d002      	beq.n	8003666 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	025b      	lsls	r3, r3, #9
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800366a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	025b      	lsls	r3, r3, #9
 8003670:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003672:	2390      	movs	r3, #144	; 0x90
 8003674:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003676:	2302      	movs	r3, #2
 8003678:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800367a:	2300      	movs	r3, #0
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800367e:	2301      	movs	r3, #1
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f107 0214 	add.w	r2, r7, #20
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f001 fbf4 	bl	8004e7a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d90a      	bls.n	80036ae <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2202      	movs	r2, #2
 800369c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 fc58 	bl	8004f5a <SDMMC_CmdReadMultiBlock>
 80036aa:	6478      	str	r0, [r7, #68]	; 0x44
 80036ac:	e009      	b.n	80036c2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 fc2b 	bl	8004f16 <SDMMC_CmdReadSingleBlock>
 80036c0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80036c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d012      	beq.n	80036ee <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a7a      	ldr	r2, [pc, #488]	; (80038b8 <HAL_SD_ReadBlocks+0x2d4>)
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e151      	b.n	8003992 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80036f2:	e061      	b.n	80037b8 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d03c      	beq.n	800377c <HAL_SD_ReadBlocks+0x198>
 8003702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d039      	beq.n	800377c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003708:	2300      	movs	r3, #0
 800370a:	643b      	str	r3, [r7, #64]	; 0x40
 800370c:	e033      	b.n	8003776 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f001 fb2d 	bl	8004d72 <SDIO_ReadFIFO>
 8003718:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	b2da      	uxtb	r2, r3
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003724:	3301      	adds	r3, #1
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372a:	3b01      	subs	r3, #1
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	0a1b      	lsrs	r3, r3, #8
 8003732:	b2da      	uxtb	r2, r3
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373a:	3301      	adds	r3, #1
 800373c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800373e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003740:	3b01      	subs	r3, #1
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	b2da      	uxtb	r2, r3
 800374a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	3301      	adds	r3, #1
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003756:	3b01      	subs	r3, #1
 8003758:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	0e1b      	lsrs	r3, r3, #24
 800375e:	b2da      	uxtb	r2, r3
 8003760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003762:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003766:	3301      	adds	r3, #1
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800376a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376c:	3b01      	subs	r3, #1
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003772:	3301      	adds	r3, #1
 8003774:	643b      	str	r3, [r7, #64]	; 0x40
 8003776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003778:	2b07      	cmp	r3, #7
 800377a:	d9c8      	bls.n	800370e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800377c:	f7fd fc96 	bl	80010ac <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003788:	429a      	cmp	r2, r3
 800378a:	d902      	bls.n	8003792 <HAL_SD_ReadBlocks+0x1ae>
 800378c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378e:	2b00      	cmp	r3, #0
 8003790:	d112      	bne.n	80037b8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a48      	ldr	r2, [pc, #288]	; (80038b8 <HAL_SD_ReadBlocks+0x2d4>)
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e0ec      	b.n	8003992 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d096      	beq.n	80036f4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d022      	beq.n	800381a <HAL_SD_ReadBlocks+0x236>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d91f      	bls.n	800381a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d01b      	beq.n	800381a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fc1e 	bl	8005028 <SDMMC_CmdStopTransfer>
 80037ec:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80037ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2f      	ldr	r2, [pc, #188]	; (80038b8 <HAL_SD_ReadBlocks+0x2d4>)
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0bb      	b.n	8003992 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <HAL_SD_ReadBlocks+0x2d4>)
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	f043 0208 	orr.w	r2, r3, #8
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e0a1      	b.n	8003992 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d012      	beq.n	8003882 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <HAL_SD_ReadBlocks+0x2d4>)
 8003862:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	f043 0202 	orr.w	r2, r3, #2
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e087      	b.n	8003992 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d064      	beq.n	800395a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <HAL_SD_ReadBlocks+0x2d4>)
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e06d      	b.n	8003992 <HAL_SD_ReadBlocks+0x3ae>
 80038b6:	bf00      	nop
 80038b8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fa56 	bl	8004d72 <SDIO_ReadFIFO>
 80038c6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ce:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80038d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d2:	3301      	adds	r3, #1
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	3b01      	subs	r3, #1
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80038e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e8:	3301      	adds	r3, #1
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80038ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ee:	3b01      	subs	r3, #1
 80038f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	3301      	adds	r3, #1
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003904:	3b01      	subs	r3, #1
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	0e1b      	lsrs	r3, r3, #24
 800390c:	b2da      	uxtb	r2, r3
 800390e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003910:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003914:	3301      	adds	r3, #1
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391a:	3b01      	subs	r3, #1
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800391e:	f7fd fbc5 	bl	80010ac <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800392a:	429a      	cmp	r2, r3
 800392c:	d902      	bls.n	8003934 <HAL_SD_ReadBlocks+0x350>
 800392e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003930:	2b00      	cmp	r3, #0
 8003932:	d112      	bne.n	800395a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a18      	ldr	r2, [pc, #96]	; (800399c <HAL_SD_ReadBlocks+0x3b8>)
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e01b      	b.n	8003992 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_SD_ReadBlocks+0x38a>
 8003968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1a6      	bne.n	80038bc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f240 523a 	movw	r2, #1338	; 0x53a
 8003976:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e006      	b.n	8003992 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	3748      	adds	r7, #72	; 0x48
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	004005ff 	.word	0x004005ff

080039a0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b092      	sub	sp, #72	; 0x48
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80039ae:	f7fd fb7d 	bl	80010ac <HAL_GetTick>
 80039b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d107      	bne.n	80039d2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e165      	b.n	8003c9e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	f040 8158 	bne.w	8003c90 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80039e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	441a      	add	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d907      	bls.n	8003a04 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e14c      	b.n	8003c9e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2203      	movs	r2, #3
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2200      	movs	r2, #0
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d002      	beq.n	8003a22 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	025b      	lsls	r3, r3, #9
 8003a20:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a26:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	025b      	lsls	r3, r3, #9
 8003a2c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003a2e:	2390      	movs	r3, #144	; 0x90
 8003a30:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f107 0218 	add.w	r2, r7, #24
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fa16 	bl	8004e7a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d90a      	bls.n	8003a6a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fabe 	bl	8004fe2 <SDMMC_CmdWriteMultiBlock>
 8003a66:	6478      	str	r0, [r7, #68]	; 0x44
 8003a68:	e009      	b.n	8003a7e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 fa91 	bl	8004f9e <SDMMC_CmdWriteSingleBlock>
 8003a7c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d012      	beq.n	8003aaa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a87      	ldr	r2, [pc, #540]	; (8003ca8 <HAL_SD_WriteBlocks+0x308>)
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a92:	431a      	orrs	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0f9      	b.n	8003c9e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003aae:	e065      	b.n	8003b7c <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d040      	beq.n	8003b40 <HAL_SD_WriteBlocks+0x1a0>
 8003abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d03d      	beq.n	8003b40 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac8:	e037      	b.n	8003b3a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	021a      	lsls	r2, r3, #8
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	3301      	adds	r3, #1
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af0:	3b01      	subs	r3, #1
 8003af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	041a      	lsls	r2, r3, #16
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b02:	3301      	adds	r3, #1
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	061a      	lsls	r2, r3, #24
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b20:	3b01      	subs	r3, #1
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f107 0214 	add.w	r2, r7, #20
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 f92c 	bl	8004d8c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b36:	3301      	adds	r3, #1
 8003b38:	643b      	str	r3, [r7, #64]	; 0x40
 8003b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3c:	2b07      	cmp	r3, #7
 8003b3e:	d9c4      	bls.n	8003aca <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003b40:	f7fd fab4 	bl	80010ac <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d902      	bls.n	8003b56 <HAL_SD_WriteBlocks+0x1b6>
 8003b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d112      	bne.n	8003b7c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a53      	ldr	r2, [pc, #332]	; (8003ca8 <HAL_SD_WriteBlocks+0x308>)
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e090      	b.n	8003c9e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d092      	beq.n	8003ab0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d022      	beq.n	8003bde <HAL_SD_WriteBlocks+0x23e>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d91f      	bls.n	8003bde <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d01b      	beq.n	8003bde <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 fa3c 	bl	8005028 <SDMMC_CmdStopTransfer>
 8003bb0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d012      	beq.n	8003bde <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a3a      	ldr	r2, [pc, #232]	; (8003ca8 <HAL_SD_WriteBlocks+0x308>)
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e05f      	b.n	8003c9e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d012      	beq.n	8003c12 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <HAL_SD_WriteBlocks+0x308>)
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	f043 0208 	orr.w	r2, r3, #8
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e045      	b.n	8003c9e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d012      	beq.n	8003c46 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a20      	ldr	r2, [pc, #128]	; (8003ca8 <HAL_SD_WriteBlocks+0x308>)
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	f043 0202 	orr.w	r2, r3, #2
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e02b      	b.n	8003c9e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d012      	beq.n	8003c7a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <HAL_SD_WriteBlocks+0x308>)
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	f043 0210 	orr.w	r2, r3, #16
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e011      	b.n	8003c9e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e006      	b.n	8003c9e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3748      	adds	r7, #72	; 0x48
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	004005ff 	.word	0x004005ff

08003cac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cba:	0f9b      	lsrs	r3, r3, #30
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc6:	0e9b      	lsrs	r3, r3, #26
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd8:	0e1b      	lsrs	r3, r3, #24
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0c:	0d1b      	lsrs	r3, r3, #20
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d2a:	0bdb      	lsrs	r3, r3, #15
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d3c:	0b9b      	lsrs	r3, r3, #14
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d4e:	0b5b      	lsrs	r3, r3, #13
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d60:	0b1b      	lsrs	r3, r3, #12
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d163      	bne.n	8003e44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d80:	009a      	lsls	r2, r3, #2
 8003d82:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d86:	4013      	ands	r3, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d8c:	0f92      	lsrs	r2, r2, #30
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d98:	0edb      	lsrs	r3, r3, #27
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003daa:	0e1b      	lsrs	r3, r3, #24
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbc:	0d5b      	lsrs	r3, r3, #21
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dce:	0c9b      	lsrs	r3, r3, #18
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de0:	0bdb      	lsrs	r3, r3, #15
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	7e1b      	ldrb	r3, [r3, #24]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	3302      	adds	r3, #2
 8003e04:	2201      	movs	r2, #1
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e0e:	fb03 f202 	mul.w	r2, r3, r2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	7a1b      	ldrb	r3, [r3, #8]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	2201      	movs	r2, #1
 8003e22:	409a      	lsls	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e30:	0a52      	lsrs	r2, r2, #9
 8003e32:	fb03 f202 	mul.w	r2, r3, r2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e40:	661a      	str	r2, [r3, #96]	; 0x60
 8003e42:	e031      	b.n	8003ea8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d11d      	bne.n	8003e88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5a:	0c1b      	lsrs	r3, r3, #16
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	3301      	adds	r3, #1
 8003e68:	029a      	lsls	r2, r3, #10
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e7c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	661a      	str	r2, [r3, #96]	; 0x60
 8003e86:	e00f      	b.n	8003ea8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a58      	ldr	r2, [pc, #352]	; (8003ff0 <HAL_SD_GetCardCSD+0x344>)
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e09d      	b.n	8003fe4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eac:	0b9b      	lsrs	r3, r3, #14
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ebe:	09db      	lsrs	r3, r3, #7
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	0fdb      	lsrs	r3, r3, #31
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	0f5b      	lsrs	r3, r3, #29
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	0e9b      	lsrs	r3, r3, #26
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	0d9b      	lsrs	r3, r3, #22
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	0d5b      	lsrs	r3, r3, #21
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	0bdb      	lsrs	r3, r3, #15
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	0b9b      	lsrs	r3, r3, #14
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	0b5b      	lsrs	r3, r3, #13
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	0b1b      	lsrs	r3, r3, #12
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	0a9b      	lsrs	r3, r3, #10
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	004005ff 	.word	0x004005ff

08003ff4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800404c:	b5b0      	push	{r4, r5, r7, lr}
 800404e:	b08e      	sub	sp, #56	; 0x38
 8004050:	af04      	add	r7, sp, #16
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2203      	movs	r2, #3
 8004060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	2b03      	cmp	r3, #3
 800406a:	d02e      	beq.n	80040ca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004072:	d106      	bne.n	8004082 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
 8004080:	e029      	b.n	80040d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004088:	d10a      	bne.n	80040a0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fa1c 	bl	80044c8 <SD_WideBus_Enable>
 8004090:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
 800409e:	e01a      	b.n	80040d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa59 	bl	800455e <SD_WideBus_Disable>
 80040ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
 80040ba:	e00c      	b.n	80040d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
 80040c8:	e005      	b.n	80040d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a26      	ldr	r2, [pc, #152]	; (800417c <HAL_SD_ConfigWideBusOperation+0x130>)
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040f4:	e01f      	b.n	8004136 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681d      	ldr	r5, [r3, #0]
 800411c:	466c      	mov	r4, sp
 800411e:	f107 0314 	add.w	r3, r7, #20
 8004122:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004126:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800412a:	f107 0308 	add.w	r3, r7, #8
 800412e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004130:	4628      	mov	r0, r5
 8004132:	f000 fdf3 	bl	8004d1c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fec7 	bl	8004ed2 <SDMMC_CmdBlockLength>
 8004144:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00c      	beq.n	8004166 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800416e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004172:	4618      	mov	r0, r3
 8004174:	3728      	adds	r7, #40	; 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bdb0      	pop	{r4, r5, r7, pc}
 800417a:	bf00      	nop
 800417c:	004005ff 	.word	0x004005ff

08004180 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800418c:	f107 030c 	add.w	r3, r7, #12
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f970 	bl	8004478 <SD_SendStatus>
 8004198:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	0a5b      	lsrs	r3, r3, #9
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80041b6:	693b      	ldr	r3, [r7, #16]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80041c0:	b5b0      	push	{r4, r5, r7, lr}
 80041c2:	b094      	sub	sp, #80	; 0x50
 80041c4:	af04      	add	r7, sp, #16
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80041c8:	2301      	movs	r3, #1
 80041ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fdfa 	bl	8004dca <SDIO_GetPowerState>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041e0:	e0b8      	b.n	8004354 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d02f      	beq.n	800424a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 f824 	bl	800523c <SDMMC_CmdSendCID>
 80041f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80041f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <SD_InitCard+0x40>
    {
      return errorstate;
 80041fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fe:	e0a9      	b.n	8004354 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fe24 	bl	8004e54 <SDIO_GetResponse>
 800420c:	4602      	mov	r2, r0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2104      	movs	r1, #4
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fe1b 	bl	8004e54 <SDIO_GetResponse>
 800421e:	4602      	mov	r2, r0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2108      	movs	r1, #8
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fe12 	bl	8004e54 <SDIO_GetResponse>
 8004230:	4602      	mov	r2, r0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	210c      	movs	r1, #12
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fe09 	bl	8004e54 <SDIO_GetResponse>
 8004242:	4602      	mov	r2, r0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	2b03      	cmp	r3, #3
 8004250:	d00d      	beq.n	800426e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f107 020e 	add.w	r2, r7, #14
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f001 f82a 	bl	80052b6 <SDMMC_CmdSetRelAdd>
 8004262:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <SD_InitCard+0xae>
    {
      return errorstate;
 800426a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800426c:	e072      	b.n	8004354 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	2b03      	cmp	r3, #3
 8004274:	d036      	beq.n	80042e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004276:	89fb      	ldrh	r3, [r7, #14]
 8004278:	461a      	mov	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004286:	041b      	lsls	r3, r3, #16
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f000 fff4 	bl	8005278 <SDMMC_CmdSendCSD>
 8004290:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429a:	e05b      	b.n	8004354 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fdd6 	bl	8004e54 <SDIO_GetResponse>
 80042a8:	4602      	mov	r2, r0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2104      	movs	r1, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fdcd 	bl	8004e54 <SDIO_GetResponse>
 80042ba:	4602      	mov	r2, r0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2108      	movs	r1, #8
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fdc4 	bl	8004e54 <SDIO_GetResponse>
 80042cc:	4602      	mov	r2, r0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	210c      	movs	r1, #12
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fdbb 	bl	8004e54 <SDIO_GetResponse>
 80042de:	4602      	mov	r2, r0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2104      	movs	r1, #4
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fdb2 	bl	8004e54 <SDIO_GetResponse>
 80042f0:	4603      	mov	r3, r0
 80042f2:	0d1a      	lsrs	r2, r3, #20
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80042f8:	f107 0310 	add.w	r3, r7, #16
 80042fc:	4619      	mov	r1, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fcd4 	bl	8003cac <HAL_SD_GetCardCSD>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800430a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800430e:	e021      	b.n	8004354 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	041b      	lsls	r3, r3, #16
 800431a:	2200      	movs	r2, #0
 800431c:	461c      	mov	r4, r3
 800431e:	4615      	mov	r5, r2
 8004320:	4622      	mov	r2, r4
 8004322:	462b      	mov	r3, r5
 8004324:	4608      	mov	r0, r1
 8004326:	f000 fea1 	bl	800506c <SDMMC_CmdSelDesel>
 800432a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800432c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <SD_InitCard+0x176>
  {
    return errorstate;
 8004332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004334:	e00e      	b.n	8004354 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681d      	ldr	r5, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	466c      	mov	r4, sp
 800433e:	f103 0210 	add.w	r2, r3, #16
 8004342:	ca07      	ldmia	r2, {r0, r1, r2}
 8004344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004348:	3304      	adds	r3, #4
 800434a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800434c:	4628      	mov	r0, r5
 800434e:	f000 fce5 	bl	8004d1c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3740      	adds	r7, #64	; 0x40
 8004358:	46bd      	mov	sp, r7
 800435a:	bdb0      	pop	{r4, r5, r7, pc}

0800435c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fe9c 	bl	80050b2 <SDMMC_CmdGoIdleState>
 800437a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	e072      	b.n	800446c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 feaf 	bl	80050ee <SDMMC_CmdOperCond>
 8004390:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fe85 	bl	80050b2 <SDMMC_CmdGoIdleState>
 80043a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	e05b      	b.n	800446c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d137      	bne.n	8004432 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 feaf 	bl	800512c <SDMMC_CmdAppCommand>
 80043ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d02d      	beq.n	8004432 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043da:	e047      	b.n	800446c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fea2 	bl	800512c <SDMMC_CmdAppCommand>
 80043e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	e03b      	b.n	800446c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	491e      	ldr	r1, [pc, #120]	; (8004474 <SD_PowerON+0x118>)
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 feb8 	bl	8005170 <SDMMC_CmdAppOperCommand>
 8004400:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004408:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800440c:	e02e      	b.n	800446c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fd1d 	bl	8004e54 <SDIO_GetResponse>
 800441a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	0fdb      	lsrs	r3, r3, #31
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <SD_PowerON+0xcc>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <SD_PowerON+0xce>
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]

    count++;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	3301      	adds	r3, #1
 8004430:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004438:	4293      	cmp	r3, r2
 800443a:	d802      	bhi.n	8004442 <SD_PowerON+0xe6>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0cc      	beq.n	80043dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004448:	4293      	cmp	r3, r2
 800444a:	d902      	bls.n	8004452 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800444c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004450:	e00c      	b.n	800446c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
 8004462:	e002      	b.n	800446a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	c1100000 	.word	0xc1100000

08004478 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800448c:	e018      	b.n	80044c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f000 ff2c 	bl	80052f8 <SDMMC_CmdSendStatus>
 80044a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	e009      	b.n	80044c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fcce 	bl	8004e54 <SDIO_GetResponse>
 80044b8:	4602      	mov	r2, r0
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2100      	movs	r1, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fcb8 	bl	8004e54 <SDIO_GetResponse>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ee:	d102      	bne.n	80044f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80044f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044f4:	e02f      	b.n	8004556 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80044f6:	f107 030c 	add.w	r3, r7, #12
 80044fa:	4619      	mov	r1, r3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f879 	bl	80045f4 <SD_FindSCR>
 8004502:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	e023      	b.n	8004556 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01c      	beq.n	8004552 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f000 fe01 	bl	800512c <SDMMC_CmdAppCommand>
 800452a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	e00f      	b.n	8004556 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2102      	movs	r1, #2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fe3a 	bl	80051b6 <SDMMC_CmdBusWidth>
 8004542:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	e003      	b.n	8004556 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800454e:	2300      	movs	r3, #0
 8004550:	e001      	b.n	8004556 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004552:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fc6d 	bl	8004e54 <SDIO_GetResponse>
 800457a:	4603      	mov	r3, r0
 800457c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004584:	d102      	bne.n	800458c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800458a:	e02f      	b.n	80045ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800458c:	f107 030c 	add.w	r3, r7, #12
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f82e 	bl	80045f4 <SD_FindSCR>
 8004598:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	e023      	b.n	80045ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01c      	beq.n	80045e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f000 fdb6 	bl	800512c <SDMMC_CmdAppCommand>
 80045c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	e00f      	b.n	80045ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fdef 	bl	80051b6 <SDMMC_CmdBusWidth>
 80045d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	e003      	b.n	80045ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e001      	b.n	80045ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80045f4:	b590      	push	{r4, r7, lr}
 80045f6:	b08f      	sub	sp, #60	; 0x3c
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80045fe:	f7fc fd55 	bl	80010ac <HAL_GetTick>
 8004602:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004608:	2300      	movs	r3, #0
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2108      	movs	r1, #8
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fc59 	bl	8004ed2 <SDMMC_CmdBlockLength>
 8004620:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	e0b2      	b.n	8004792 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f000 fd77 	bl	800512c <SDMMC_CmdAppCommand>
 800463e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	e0a3      	b.n	8004792 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800464a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800464e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004650:	2308      	movs	r3, #8
 8004652:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004654:	2330      	movs	r3, #48	; 0x30
 8004656:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004658:	2302      	movs	r3, #2
 800465a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800465c:	2300      	movs	r3, #0
 800465e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004660:	2301      	movs	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f107 0210 	add.w	r2, r7, #16
 800466c:	4611      	mov	r1, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fc03 	bl	8004e7a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fdbe 	bl	80051fa <SDMMC_CmdSendSCR>
 800467e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	2b00      	cmp	r3, #0
 8004684:	d02a      	beq.n	80046dc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	e083      	b.n	8004792 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6819      	ldr	r1, [r3, #0]
 800469c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	f107 0208 	add.w	r2, r7, #8
 80046a4:	18d4      	adds	r4, r2, r3
 80046a6:	4608      	mov	r0, r1
 80046a8:	f000 fb63 	bl	8004d72 <SDIO_ReadFIFO>
 80046ac:	4603      	mov	r3, r0
 80046ae:	6023      	str	r3, [r4, #0]
      index++;
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b2:	3301      	adds	r3, #1
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
 80046b6:	e006      	b.n	80046c6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d012      	beq.n	80046ec <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80046c6:	f7fc fcf1 	bl	80010ac <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d4:	d102      	bne.n	80046dc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80046d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046da:	e05a      	b.n	8004792 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0cf      	beq.n	800468a <SD_FindSCR+0x96>
 80046ea:	e000      	b.n	80046ee <SD_FindSCR+0xfa>
      break;
 80046ec:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2208      	movs	r2, #8
 8004702:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004704:	2308      	movs	r3, #8
 8004706:	e044      	b.n	8004792 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2202      	movs	r2, #2
 800471c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800471e:	2302      	movs	r3, #2
 8004720:	e037      	b.n	8004792 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2220      	movs	r2, #32
 8004736:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004738:	2320      	movs	r3, #32
 800473a:	e02a      	b.n	8004792 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f240 523a 	movw	r2, #1338	; 0x53a
 8004744:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	061a      	lsls	r2, r3, #24
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004752:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800475c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	0e1b      	lsrs	r3, r3, #24
 8004762:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	601a      	str	r2, [r3, #0]
    scr++;
 8004768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476a:	3304      	adds	r3, #4
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	061a      	lsls	r2, r3, #24
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800477a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	0a1b      	lsrs	r3, r3, #8
 8004780:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004784:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	0e1b      	lsrs	r3, r3, #24
 800478a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	373c      	adds	r7, #60	; 0x3c
 8004796:	46bd      	mov	sp, r7
 8004798:	bd90      	pop	{r4, r7, pc}

0800479a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e03f      	b.n	800482c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7fc fb29 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2224      	movs	r2, #36	; 0x24
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f828 	bl	8004834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004802:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004812:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004838:	b0c0      	sub	sp, #256	; 0x100
 800483a:	af00      	add	r7, sp, #0
 800483c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	68d9      	ldr	r1, [r3, #12]
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	ea40 0301 	orr.w	r3, r0, r1
 800485c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	431a      	orrs	r2, r3
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	431a      	orrs	r2, r3
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800488c:	f021 010c 	bic.w	r1, r1, #12
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800489a:	430b      	orrs	r3, r1
 800489c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800489e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ae:	6999      	ldr	r1, [r3, #24]
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	ea40 0301 	orr.w	r3, r0, r1
 80048ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b8f      	ldr	r3, [pc, #572]	; (8004b00 <UART_SetConfig+0x2cc>)
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d005      	beq.n	80048d4 <UART_SetConfig+0xa0>
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b8d      	ldr	r3, [pc, #564]	; (8004b04 <UART_SetConfig+0x2d0>)
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d104      	bne.n	80048de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048d4:	f7fd fb0e 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 80048d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048dc:	e003      	b.n	80048e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048de:	f7fd faf5 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 80048e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f0:	f040 810c 	bne.w	8004b0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004902:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004906:	4622      	mov	r2, r4
 8004908:	462b      	mov	r3, r5
 800490a:	1891      	adds	r1, r2, r2
 800490c:	65b9      	str	r1, [r7, #88]	; 0x58
 800490e:	415b      	adcs	r3, r3
 8004910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004912:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004916:	4621      	mov	r1, r4
 8004918:	eb12 0801 	adds.w	r8, r2, r1
 800491c:	4629      	mov	r1, r5
 800491e:	eb43 0901 	adc.w	r9, r3, r1
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800492e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004936:	4690      	mov	r8, r2
 8004938:	4699      	mov	r9, r3
 800493a:	4623      	mov	r3, r4
 800493c:	eb18 0303 	adds.w	r3, r8, r3
 8004940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004944:	462b      	mov	r3, r5
 8004946:	eb49 0303 	adc.w	r3, r9, r3
 800494a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800495a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800495e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004962:	460b      	mov	r3, r1
 8004964:	18db      	adds	r3, r3, r3
 8004966:	653b      	str	r3, [r7, #80]	; 0x50
 8004968:	4613      	mov	r3, r2
 800496a:	eb42 0303 	adc.w	r3, r2, r3
 800496e:	657b      	str	r3, [r7, #84]	; 0x54
 8004970:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004974:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004978:	f7fb fc9a 	bl	80002b0 <__aeabi_uldivmod>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4b61      	ldr	r3, [pc, #388]	; (8004b08 <UART_SetConfig+0x2d4>)
 8004982:	fba3 2302 	umull	r2, r3, r3, r2
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	011c      	lsls	r4, r3, #4
 800498a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800498e:	2200      	movs	r2, #0
 8004990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004994:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004998:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800499c:	4642      	mov	r2, r8
 800499e:	464b      	mov	r3, r9
 80049a0:	1891      	adds	r1, r2, r2
 80049a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80049a4:	415b      	adcs	r3, r3
 80049a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049ac:	4641      	mov	r1, r8
 80049ae:	eb12 0a01 	adds.w	sl, r2, r1
 80049b2:	4649      	mov	r1, r9
 80049b4:	eb43 0b01 	adc.w	fp, r3, r1
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049cc:	4692      	mov	sl, r2
 80049ce:	469b      	mov	fp, r3
 80049d0:	4643      	mov	r3, r8
 80049d2:	eb1a 0303 	adds.w	r3, sl, r3
 80049d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049da:	464b      	mov	r3, r9
 80049dc:	eb4b 0303 	adc.w	r3, fp, r3
 80049e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049f8:	460b      	mov	r3, r1
 80049fa:	18db      	adds	r3, r3, r3
 80049fc:	643b      	str	r3, [r7, #64]	; 0x40
 80049fe:	4613      	mov	r3, r2
 8004a00:	eb42 0303 	adc.w	r3, r2, r3
 8004a04:	647b      	str	r3, [r7, #68]	; 0x44
 8004a06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a0e:	f7fb fc4f 	bl	80002b0 <__aeabi_uldivmod>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	4b3b      	ldr	r3, [pc, #236]	; (8004b08 <UART_SetConfig+0x2d4>)
 8004a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2264      	movs	r2, #100	; 0x64
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	1acb      	subs	r3, r1, r3
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a2e:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <UART_SetConfig+0x2d4>)
 8004a30:	fba3 2302 	umull	r2, r3, r3, r2
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a3c:	441c      	add	r4, r3
 8004a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	1891      	adds	r1, r2, r2
 8004a56:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a58:	415b      	adcs	r3, r3
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a60:	4641      	mov	r1, r8
 8004a62:	1851      	adds	r1, r2, r1
 8004a64:	6339      	str	r1, [r7, #48]	; 0x30
 8004a66:	4649      	mov	r1, r9
 8004a68:	414b      	adcs	r3, r1
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a78:	4659      	mov	r1, fp
 8004a7a:	00cb      	lsls	r3, r1, #3
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a82:	4651      	mov	r1, sl
 8004a84:	00ca      	lsls	r2, r1, #3
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a94:	464b      	mov	r3, r9
 8004a96:	460a      	mov	r2, r1
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004aac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ab0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	18db      	adds	r3, r3, r3
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aba:	4613      	mov	r3, r2
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ac6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004aca:	f7fb fbf1 	bl	80002b0 <__aeabi_uldivmod>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <UART_SetConfig+0x2d4>)
 8004ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad8:	095b      	lsrs	r3, r3, #5
 8004ada:	2164      	movs	r1, #100	; 0x64
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	3332      	adds	r3, #50	; 0x32
 8004ae6:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <UART_SetConfig+0x2d4>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	f003 0207 	and.w	r2, r3, #7
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4422      	add	r2, r4
 8004afa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004afc:	e105      	b.n	8004d0a <UART_SetConfig+0x4d6>
 8004afe:	bf00      	nop
 8004b00:	40011000 	.word	0x40011000
 8004b04:	40011400 	.word	0x40011400
 8004b08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b1e:	4642      	mov	r2, r8
 8004b20:	464b      	mov	r3, r9
 8004b22:	1891      	adds	r1, r2, r2
 8004b24:	6239      	str	r1, [r7, #32]
 8004b26:	415b      	adcs	r3, r3
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b2e:	4641      	mov	r1, r8
 8004b30:	1854      	adds	r4, r2, r1
 8004b32:	4649      	mov	r1, r9
 8004b34:	eb43 0501 	adc.w	r5, r3, r1
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	00eb      	lsls	r3, r5, #3
 8004b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b46:	00e2      	lsls	r2, r4, #3
 8004b48:	4614      	mov	r4, r2
 8004b4a:	461d      	mov	r5, r3
 8004b4c:	4643      	mov	r3, r8
 8004b4e:	18e3      	adds	r3, r4, r3
 8004b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b54:	464b      	mov	r3, r9
 8004b56:	eb45 0303 	adc.w	r3, r5, r3
 8004b5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	008b      	lsls	r3, r1, #2
 8004b7e:	4621      	mov	r1, r4
 8004b80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b84:	4621      	mov	r1, r4
 8004b86:	008a      	lsls	r2, r1, #2
 8004b88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b8c:	f7fb fb90 	bl	80002b0 <__aeabi_uldivmod>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4b60      	ldr	r3, [pc, #384]	; (8004d18 <UART_SetConfig+0x4e4>)
 8004b96:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	011c      	lsls	r4, r3, #4
 8004b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ba8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	1891      	adds	r1, r2, r2
 8004bb6:	61b9      	str	r1, [r7, #24]
 8004bb8:	415b      	adcs	r3, r3
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	1851      	adds	r1, r2, r1
 8004bc4:	6139      	str	r1, [r7, #16]
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	414b      	adcs	r3, r1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bd8:	4659      	mov	r1, fp
 8004bda:	00cb      	lsls	r3, r1, #3
 8004bdc:	4651      	mov	r1, sl
 8004bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004be2:	4651      	mov	r1, sl
 8004be4:	00ca      	lsls	r2, r1, #3
 8004be6:	4610      	mov	r0, r2
 8004be8:	4619      	mov	r1, r3
 8004bea:	4603      	mov	r3, r0
 8004bec:	4642      	mov	r2, r8
 8004bee:	189b      	adds	r3, r3, r2
 8004bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	460a      	mov	r2, r1
 8004bf8:	eb42 0303 	adc.w	r3, r2, r3
 8004bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c18:	4649      	mov	r1, r9
 8004c1a:	008b      	lsls	r3, r1, #2
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c22:	4641      	mov	r1, r8
 8004c24:	008a      	lsls	r2, r1, #2
 8004c26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c2a:	f7fb fb41 	bl	80002b0 <__aeabi_uldivmod>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <UART_SetConfig+0x4e4>)
 8004c34:	fba3 1302 	umull	r1, r3, r3, r2
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	2164      	movs	r1, #100	; 0x64
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	3332      	adds	r3, #50	; 0x32
 8004c46:	4a34      	ldr	r2, [pc, #208]	; (8004d18 <UART_SetConfig+0x4e4>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c52:	441c      	add	r4, r3
 8004c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c58:	2200      	movs	r2, #0
 8004c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c5c:	677a      	str	r2, [r7, #116]	; 0x74
 8004c5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c62:	4642      	mov	r2, r8
 8004c64:	464b      	mov	r3, r9
 8004c66:	1891      	adds	r1, r2, r2
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	415b      	adcs	r3, r3
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c72:	4641      	mov	r1, r8
 8004c74:	1851      	adds	r1, r2, r1
 8004c76:	6039      	str	r1, [r7, #0]
 8004c78:	4649      	mov	r1, r9
 8004c7a:	414b      	adcs	r3, r1
 8004c7c:	607b      	str	r3, [r7, #4]
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c8a:	4659      	mov	r1, fp
 8004c8c:	00cb      	lsls	r3, r1, #3
 8004c8e:	4651      	mov	r1, sl
 8004c90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c94:	4651      	mov	r1, sl
 8004c96:	00ca      	lsls	r2, r1, #3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	189b      	adds	r3, r3, r2
 8004ca2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	460a      	mov	r2, r1
 8004ca8:	eb42 0303 	adc.w	r3, r2, r3
 8004cac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb8:	667a      	str	r2, [r7, #100]	; 0x64
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	008b      	lsls	r3, r1, #2
 8004cca:	4641      	mov	r1, r8
 8004ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	008a      	lsls	r2, r1, #2
 8004cd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cd8:	f7fb faea 	bl	80002b0 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <UART_SetConfig+0x4e4>)
 8004ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	2164      	movs	r1, #100	; 0x64
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	3332      	adds	r3, #50	; 0x32
 8004cf4:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <UART_SetConfig+0x4e4>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	f003 020f 	and.w	r2, r3, #15
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4422      	add	r2, r4
 8004d08:	609a      	str	r2, [r3, #8]
}
 8004d0a:	bf00      	nop
 8004d0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d16:	bf00      	nop
 8004d18:	51eb851f 	.word	0x51eb851f

08004d1c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	f107 001c 	add.w	r0, r7, #28
 8004d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004d32:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004d34:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004d36:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004d3a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004d3e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004d42:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004d46:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004d56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	b004      	add	sp, #16
 8004d70:	4770      	bx	lr

08004d72 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2203      	movs	r2, #3
 8004dba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e04:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004e0a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004e10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e20:	f023 030f 	bic.w	r3, r3, #15
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	b2db      	uxtb	r3, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3314      	adds	r3, #20
 8004e62:	461a      	mov	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	4413      	add	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
}  
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ea0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004ea6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004eac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0

}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b088      	sub	sp, #32
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ee4:	2340      	movs	r3, #64	; 0x40
 8004ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ef2:	f107 0308 	add.w	r3, r7, #8
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ff74 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f02:	2110      	movs	r1, #16
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fa19 	bl	800533c <SDMMC_GetCmdResp1>
 8004f0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b088      	sub	sp, #32
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004f24:	2311      	movs	r3, #17
 8004f26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f28:	2340      	movs	r3, #64	; 0x40
 8004f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f36:	f107 0308 	add.w	r3, r7, #8
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ff52 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f46:	2111      	movs	r1, #17
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f9f7 	bl	800533c <SDMMC_GetCmdResp1>
 8004f4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f50:	69fb      	ldr	r3, [r7, #28]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b088      	sub	sp, #32
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004f68:	2312      	movs	r3, #18
 8004f6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f6c:	2340      	movs	r3, #64	; 0x40
 8004f6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f7a:	f107 0308 	add.w	r3, r7, #8
 8004f7e:	4619      	mov	r1, r3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff ff30 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	2112      	movs	r1, #18
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f9d5 	bl	800533c <SDMMC_GetCmdResp1>
 8004f92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f94:	69fb      	ldr	r3, [r7, #28]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b088      	sub	sp, #32
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004fac:	2318      	movs	r3, #24
 8004fae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fb0:	2340      	movs	r3, #64	; 0x40
 8004fb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fbe:	f107 0308 	add.w	r3, r7, #8
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ff0e 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	2118      	movs	r1, #24
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f9b3 	bl	800533c <SDMMC_GetCmdResp1>
 8004fd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b088      	sub	sp, #32
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004ff0:	2319      	movs	r3, #25
 8004ff2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ff4:	2340      	movs	r3, #64	; 0x40
 8004ff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005000:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005002:	f107 0308 	add.w	r3, r7, #8
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff feec 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800500e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005012:	2119      	movs	r1, #25
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f991 	bl	800533c <SDMMC_GetCmdResp1>
 800501a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800501c:	69fb      	ldr	r3, [r7, #28]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005034:	230c      	movs	r3, #12
 8005036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005038:	2340      	movs	r3, #64	; 0x40
 800503a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005044:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff feca 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005052:	4a05      	ldr	r2, [pc, #20]	; (8005068 <SDMMC_CmdStopTransfer+0x40>)
 8005054:	210c      	movs	r1, #12
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f970 	bl	800533c <SDMMC_GetCmdResp1>
 800505c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800505e:	69fb      	ldr	r3, [r7, #28]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3720      	adds	r7, #32
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	05f5e100 	.word	0x05f5e100

0800506c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	; 0x28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800507c:	2307      	movs	r3, #7
 800507e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005080:	2340      	movs	r3, #64	; 0x40
 8005082:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005084:	2300      	movs	r3, #0
 8005086:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800508c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800508e:	f107 0310 	add.w	r3, r7, #16
 8005092:	4619      	mov	r1, r3
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7ff fea6 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	2107      	movs	r1, #7
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f94b 	bl	800533c <SDMMC_GetCmdResp1>
 80050a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3728      	adds	r7, #40	; 0x28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b088      	sub	sp, #32
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050d0:	f107 0308 	add.w	r3, r7, #8
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fe85 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fb65 	bl	80057ac <SDMMC_GetCmdError>
 80050e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050e4:	69fb      	ldr	r3, [r7, #28]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3720      	adds	r7, #32
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b088      	sub	sp, #32
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80050f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80050fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80050fc:	2308      	movs	r3, #8
 80050fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005100:	2340      	movs	r3, #64	; 0x40
 8005102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800510c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800510e:	f107 0308 	add.w	r3, r7, #8
 8005112:	4619      	mov	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fe66 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 faf8 	bl	8005710 <SDMMC_GetCmdResp7>
 8005120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005122:	69fb      	ldr	r3, [r7, #28]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800513a:	2337      	movs	r3, #55	; 0x37
 800513c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800513e:	2340      	movs	r3, #64	; 0x40
 8005140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800514c:	f107 0308 	add.w	r3, r7, #8
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fe47 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005158:	f241 3288 	movw	r2, #5000	; 0x1388
 800515c:	2137      	movs	r1, #55	; 0x37
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f8ec 	bl	800533c <SDMMC_GetCmdResp1>
 8005164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005166:	69fb      	ldr	r3, [r7, #28]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005186:	2329      	movs	r3, #41	; 0x29
 8005188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800518a:	2340      	movs	r3, #64	; 0x40
 800518c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005196:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005198:	f107 0308 	add.w	r3, r7, #8
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fe21 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f9ff 	bl	80055a8 <SDMMC_GetCmdResp3>
 80051aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ac:	69fb      	ldr	r3, [r7, #28]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b088      	sub	sp, #32
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80051c4:	2306      	movs	r3, #6
 80051c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051c8:	2340      	movs	r3, #64	; 0x40
 80051ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051d6:	f107 0308 	add.w	r3, r7, #8
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fe02 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	2106      	movs	r1, #6
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f8a7 	bl	800533c <SDMMC_GetCmdResp1>
 80051ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051f0:	69fb      	ldr	r3, [r7, #28]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b088      	sub	sp, #32
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005206:	2333      	movs	r3, #51	; 0x33
 8005208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800520a:	2340      	movs	r3, #64	; 0x40
 800520c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005216:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005218:	f107 0308 	add.w	r3, r7, #8
 800521c:	4619      	mov	r1, r3
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff fde1 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005224:	f241 3288 	movw	r2, #5000	; 0x1388
 8005228:	2133      	movs	r1, #51	; 0x33
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f886 	bl	800533c <SDMMC_GetCmdResp1>
 8005230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005232:	69fb      	ldr	r3, [r7, #28]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005248:	2302      	movs	r3, #2
 800524a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800524c:	23c0      	movs	r3, #192	; 0xc0
 800524e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005258:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800525a:	f107 0308 	add.w	r3, r7, #8
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff fdc0 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f956 	bl	8005518 <SDMMC_GetCmdResp2>
 800526c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800526e:	69fb      	ldr	r3, [r7, #28]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005286:	2309      	movs	r3, #9
 8005288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800528a:	23c0      	movs	r3, #192	; 0xc0
 800528c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005296:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff fda1 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f937 	bl	8005518 <SDMMC_GetCmdResp2>
 80052aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ac:	69fb      	ldr	r3, [r7, #28]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b088      	sub	sp, #32
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80052c4:	2303      	movs	r3, #3
 80052c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052c8:	2340      	movs	r3, #64	; 0x40
 80052ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052d6:	f107 0308 	add.w	r3, r7, #8
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff fd82 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	2103      	movs	r1, #3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f99c 	bl	8005624 <SDMMC_GetCmdResp6>
 80052ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ee:	69fb      	ldr	r3, [r7, #28]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005306:	230d      	movs	r3, #13
 8005308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800530a:	2340      	movs	r3, #64	; 0x40
 800530c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005316:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005318:	f107 0308 	add.w	r3, r7, #8
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fd61 	bl	8004de6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005324:	f241 3288 	movw	r2, #5000	; 0x1388
 8005328:	210d      	movs	r1, #13
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f806 	bl	800533c <SDMMC_GetCmdResp1>
 8005330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005332:	69fb      	ldr	r3, [r7, #28]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	460b      	mov	r3, r1
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800534a:	4b70      	ldr	r3, [pc, #448]	; (800550c <SDMMC_GetCmdResp1+0x1d0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a70      	ldr	r2, [pc, #448]	; (8005510 <SDMMC_GetCmdResp1+0x1d4>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	0a5a      	lsrs	r2, r3, #9
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	61fa      	str	r2, [r7, #28]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800536c:	e0c9      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005372:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0ef      	beq.n	800535e <SDMMC_GetCmdResp1+0x22>
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1ea      	bne.n	800535e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2204      	movs	r2, #4
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800539a:	2304      	movs	r3, #4
 800539c:	e0b1      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0a6      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	22c5      	movs	r2, #197	; 0xc5
 80053b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff fd3d 	bl	8004e3a <SDIO_GetCommandResponse>
 80053c0:	4603      	mov	r3, r0
 80053c2:	461a      	mov	r2, r3
 80053c4:	7afb      	ldrb	r3, [r7, #11]
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d001      	beq.n	80053ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e099      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80053ce:	2100      	movs	r1, #0
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff fd3f 	bl	8004e54 <SDIO_GetResponse>
 80053d6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4b4e      	ldr	r3, [pc, #312]	; (8005514 <SDMMC_GetCmdResp1+0x1d8>)
 80053dc:	4013      	ands	r3, r2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e08d      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da02      	bge.n	80053f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80053ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053f0:	e087      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80053fc:	2340      	movs	r3, #64	; 0x40
 80053fe:	e080      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800540a:	2380      	movs	r3, #128	; 0x80
 800540c:	e079      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800541c:	e071      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800542c:	e069      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800543c:	e061      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800544c:	e059      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800545c:	e051      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800546c:	e049      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005478:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800547c:	e041      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548c:	e039      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800549c:	e031      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80054a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054ac:	e029      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80054b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80054bc:	e021      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80054c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80054cc:	e019      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80054d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054dc:	e011      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80054e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054ec:	e009      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80054f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80054fc:	e001      	b.n	8005502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80054fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000000 	.word	0x20000000
 8005510:	10624dd3 	.word	0x10624dd3
 8005514:	fdffe008 	.word	0xfdffe008

08005518 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005520:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <SDMMC_GetCmdResp2+0x88>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <SDMMC_GetCmdResp2+0x8c>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	0a5b      	lsrs	r3, r3, #9
 800552c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005530:	fb02 f303 	mul.w	r3, r2, r3
 8005534:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	1e5a      	subs	r2, r3, #1
 800553a:	60fa      	str	r2, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005540:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005544:	e026      	b.n	8005594 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0ef      	beq.n	8005536 <SDMMC_GetCmdResp2+0x1e>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1ea      	bne.n	8005536 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d004      	beq.n	8005576 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2204      	movs	r2, #4
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005572:	2304      	movs	r3, #4
 8005574:	e00e      	b.n	8005594 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d004      	beq.n	800558c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005588:	2301      	movs	r3, #1
 800558a:	e003      	b.n	8005594 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	22c5      	movs	r2, #197	; 0xc5
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	20000000 	.word	0x20000000
 80055a4:	10624dd3 	.word	0x10624dd3

080055a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <SDMMC_GetCmdResp3+0x74>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1a      	ldr	r2, [pc, #104]	; (8005620 <SDMMC_GetCmdResp3+0x78>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	0a5b      	lsrs	r3, r3, #9
 80055bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1e5a      	subs	r2, r3, #1
 80055ca:	60fa      	str	r2, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055d4:	e01b      	b.n	800560e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ef      	beq.n	80055c6 <SDMMC_GetCmdResp3+0x1e>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ea      	bne.n	80055c6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2204      	movs	r2, #4
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005602:	2304      	movs	r3, #4
 8005604:	e003      	b.n	800560e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	22c5      	movs	r2, #197	; 0xc5
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000000 	.word	0x20000000
 8005620:	10624dd3 	.word	0x10624dd3

08005624 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	460b      	mov	r3, r1
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005632:	4b35      	ldr	r3, [pc, #212]	; (8005708 <SDMMC_GetCmdResp6+0xe4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a35      	ldr	r2, [pc, #212]	; (800570c <SDMMC_GetCmdResp6+0xe8>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	0a5b      	lsrs	r3, r3, #9
 800563e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	1e5a      	subs	r2, r3, #1
 800564c:	61fa      	str	r2, [r7, #28]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005652:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005656:	e052      	b.n	80056fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0ef      	beq.n	8005648 <SDMMC_GetCmdResp6+0x24>
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1ea      	bne.n	8005648 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2204      	movs	r2, #4
 8005682:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005684:	2304      	movs	r3, #4
 8005686:	e03a      	b.n	80056fe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800569a:	2301      	movs	r3, #1
 800569c:	e02f      	b.n	80056fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff fbcb 	bl	8004e3a <SDIO_GetCommandResponse>
 80056a4:	4603      	mov	r3, r0
 80056a6:	461a      	mov	r2, r3
 80056a8:	7afb      	ldrb	r3, [r7, #11]
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d001      	beq.n	80056b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e025      	b.n	80056fe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	22c5      	movs	r2, #197	; 0xc5
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80056b8:	2100      	movs	r1, #0
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff fbca 	bl	8004e54 <SDIO_GetResponse>
 80056c0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	e011      	b.n	80056fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056e8:	e009      	b.n	80056fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056f8:	e001      	b.n	80056fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000000 	.word	0x20000000
 800570c:	10624dd3 	.word	0x10624dd3

08005710 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005718:	4b22      	ldr	r3, [pc, #136]	; (80057a4 <SDMMC_GetCmdResp7+0x94>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a22      	ldr	r2, [pc, #136]	; (80057a8 <SDMMC_GetCmdResp7+0x98>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	0a5b      	lsrs	r3, r3, #9
 8005724:	f241 3288 	movw	r2, #5000	; 0x1388
 8005728:	fb02 f303 	mul.w	r3, r2, r3
 800572c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1e5a      	subs	r2, r3, #1
 8005732:	60fa      	str	r2, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800573c:	e02c      	b.n	8005798 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0ef      	beq.n	800572e <SDMMC_GetCmdResp7+0x1e>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1ea      	bne.n	800572e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2204      	movs	r2, #4
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800576a:	2304      	movs	r3, #4
 800576c:	e014      	b.n	8005798 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005780:	2301      	movs	r3, #1
 8005782:	e009      	b.n	8005798 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2240      	movs	r2, #64	; 0x40
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005796:	2300      	movs	r3, #0
  
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	20000000 	.word	0x20000000
 80057a8:	10624dd3 	.word	0x10624dd3

080057ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057b4:	4b11      	ldr	r3, [pc, #68]	; (80057fc <SDMMC_GetCmdError+0x50>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a11      	ldr	r2, [pc, #68]	; (8005800 <SDMMC_GetCmdError+0x54>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0a5b      	lsrs	r3, r3, #9
 80057c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	60fa      	str	r2, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057d8:	e009      	b.n	80057ee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f1      	beq.n	80057ca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	22c5      	movs	r2, #197	; 0xc5
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000000 	.word	0x20000000
 8005800:	10624dd3 	.word	0x10624dd3

08005804 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005808:	4904      	ldr	r1, [pc, #16]	; (800581c <MX_FATFS_Init+0x18>)
 800580a:	4805      	ldr	r0, [pc, #20]	; (8005820 <MX_FATFS_Init+0x1c>)
 800580c:	f002 f9da 	bl	8007bc4 <FATFS_LinkDriver>
 8005810:	4603      	mov	r3, r0
 8005812:	461a      	mov	r2, r3
 8005814:	4b03      	ldr	r3, [pc, #12]	; (8005824 <MX_FATFS_Init+0x20>)
 8005816:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005818:	bf00      	nop
 800581a:	bd80      	pop	{r7, pc}
 800581c:	2000021c 	.word	0x2000021c
 8005820:	080085b8 	.word	0x080085b8
 8005824:	20000218 	.word	0x20000218

08005828 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800582c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800582e:	4618      	mov	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005842:	f000 f879 	bl	8005938 <BSP_SD_IsDetected>
 8005846:	4603      	mov	r3, r0
 8005848:	2b01      	cmp	r3, #1
 800584a:	d001      	beq.n	8005850 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e012      	b.n	8005876 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005850:	480b      	ldr	r0, [pc, #44]	; (8005880 <BSP_SD_Init+0x48>)
 8005852:	f7fd fe17 	bl	8003484 <HAL_SD_Init>
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d109      	bne.n	8005874 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005860:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005864:	4806      	ldr	r0, [pc, #24]	; (8005880 <BSP_SD_Init+0x48>)
 8005866:	f7fe fbf1 	bl	800404c <HAL_SD_ConfigWideBusOperation>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005874:	79fb      	ldrb	r3, [r7, #7]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000148 	.word	0x20000148

08005884 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	4806      	ldr	r0, [pc, #24]	; (80058bc <BSP_SD_ReadBlocks+0x38>)
 80058a2:	f7fd fe9f 	bl	80035e4 <HAL_SD_ReadBlocks>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000148 	.word	0x20000148

080058c0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	4806      	ldr	r0, [pc, #24]	; (80058f8 <BSP_SD_WriteBlocks+0x38>)
 80058de:	f7fe f85f 	bl	80039a0 <HAL_SD_WriteBlocks>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000148 	.word	0x20000148

080058fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005900:	4805      	ldr	r0, [pc, #20]	; (8005918 <BSP_SD_GetCardState+0x1c>)
 8005902:	f7fe fc3d 	bl	8004180 <HAL_SD_GetCardState>
 8005906:	4603      	mov	r3, r0
 8005908:	2b04      	cmp	r3, #4
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
}
 8005912:	4618      	mov	r0, r3
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000148 	.word	0x20000148

0800591c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4803      	ldr	r0, [pc, #12]	; (8005934 <BSP_SD_GetCardInfo+0x18>)
 8005928:	f7fe fb64 	bl	8003ff4 <HAL_SD_GetCardInfo>
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000148 	.word	0x20000148

08005938 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800593e:	2301      	movs	r3, #1
 8005940:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005942:	f000 f80b 	bl	800595c <BSP_PlatformIsDetected>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800594c:	2300      	movs	r3, #0
 800594e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	b2db      	uxtb	r3, r3
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005962:	2301      	movs	r3, #1
 8005964:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800596a:	4806      	ldr	r0, [pc, #24]	; (8005984 <BSP_PlatformIsDetected+0x28>)
 800596c:	f7fb fe48 	bl	8001600 <HAL_GPIO_ReadPin>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005976:	2300      	movs	r3, #0
 8005978:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800597a:	79fb      	ldrb	r3, [r7, #7]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40020000 	.word	0x40020000

08005988 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <SD_CheckStatus+0x38>)
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005998:	f7ff ffb0 	bl	80058fc <BSP_SD_GetCardState>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d107      	bne.n	80059b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <SD_CheckStatus+0x38>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <SD_CheckStatus+0x38>)
 80059b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80059b2:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <SD_CheckStatus+0x38>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	b2db      	uxtb	r3, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000009 	.word	0x20000009

080059c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80059ce:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <SD_initialize+0x38>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80059d4:	f7ff ff30 	bl	8005838 <BSP_SD_Init>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff ffd1 	bl	8005988 <SD_CheckStatus>
 80059e6:	4603      	mov	r3, r0
 80059e8:	461a      	mov	r2, r3
 80059ea:	4b04      	ldr	r3, [pc, #16]	; (80059fc <SD_initialize+0x38>)
 80059ec:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80059ee:	4b03      	ldr	r3, [pc, #12]	; (80059fc <SD_initialize+0x38>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b2db      	uxtb	r3, r3
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	20000009 	.word	0x20000009

08005a00 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff ffbb 	bl	8005988 <SD_CheckStatus>
 8005a12:	4603      	mov	r3, r0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	68b8      	ldr	r0, [r7, #8]
 8005a3a:	f7ff ff23 	bl	8005884 <BSP_SD_ReadBlocks>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005a44:	bf00      	nop
 8005a46:	f7ff ff59 	bl	80058fc <BSP_SD_GetCardState>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1fa      	bne.n	8005a46 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	68b8      	ldr	r0, [r7, #8]
 8005a7c:	f7ff ff20 	bl	80058c0 <BSP_SD_WriteBlocks>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d107      	bne.n	8005a96 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005a86:	bf00      	nop
 8005a88:	f7ff ff38 	bl	80058fc <BSP_SD_GetCardState>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1fa      	bne.n	8005a88 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08c      	sub	sp, #48	; 0x30
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	603a      	str	r2, [r7, #0]
 8005aaa:	71fb      	strb	r3, [r7, #7]
 8005aac:	460b      	mov	r3, r1
 8005aae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005ab6:	4b25      	ldr	r3, [pc, #148]	; (8005b4c <SD_ioctl+0xac>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <SD_ioctl+0x28>
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e03c      	b.n	8005b42 <SD_ioctl+0xa2>

  switch (cmd)
 8005ac8:	79bb      	ldrb	r3, [r7, #6]
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d834      	bhi.n	8005b38 <SD_ioctl+0x98>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <SD_ioctl+0x34>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005ae5 	.word	0x08005ae5
 8005ad8:	08005aed 	.word	0x08005aed
 8005adc:	08005b05 	.word	0x08005b05
 8005ae0:	08005b1f 	.word	0x08005b1f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005aea:	e028      	b.n	8005b3e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005aec:	f107 030c 	add.w	r3, r7, #12
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff ff13 	bl	800591c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b02:	e01c      	b.n	8005b3e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b04:	f107 030c 	add.w	r3, r7, #12
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff ff07 	bl	800591c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b1c:	e00f      	b.n	8005b3e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b1e:	f107 030c 	add.w	r3, r7, #12
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fefa 	bl	800591c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	0a5a      	lsrs	r2, r3, #9
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b36:	e002      	b.n	8005b3e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005b38:	2304      	movs	r3, #4
 8005b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3730      	adds	r7, #48	; 0x30
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000009 	.word	0x20000009

08005b50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	4a08      	ldr	r2, [pc, #32]	; (8005b80 <disk_status+0x30>)
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	79fa      	ldrb	r2, [r7, #7]
 8005b68:	4905      	ldr	r1, [pc, #20]	; (8005b80 <disk_status+0x30>)
 8005b6a:	440a      	add	r2, r1
 8005b6c:	7a12      	ldrb	r2, [r2, #8]
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4798      	blx	r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000248 	.word	0x20000248

08005b84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b92:	79fb      	ldrb	r3, [r7, #7]
 8005b94:	4a0d      	ldr	r2, [pc, #52]	; (8005bcc <disk_initialize+0x48>)
 8005b96:	5cd3      	ldrb	r3, [r2, r3]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d111      	bne.n	8005bc0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	4a0b      	ldr	r2, [pc, #44]	; (8005bcc <disk_initialize+0x48>)
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <disk_initialize+0x48>)
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	79fa      	ldrb	r2, [r7, #7]
 8005bb2:	4906      	ldr	r1, [pc, #24]	; (8005bcc <disk_initialize+0x48>)
 8005bb4:	440a      	add	r2, r1
 8005bb6:	7a12      	ldrb	r2, [r2, #8]
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4798      	blx	r3
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000248 	.word	0x20000248

08005bd0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	4603      	mov	r3, r0
 8005bde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	4a0a      	ldr	r2, [pc, #40]	; (8005c0c <disk_read+0x3c>)
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	689c      	ldr	r4, [r3, #8]
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	4a07      	ldr	r2, [pc, #28]	; (8005c0c <disk_read+0x3c>)
 8005bf0:	4413      	add	r3, r2
 8005bf2:	7a18      	ldrb	r0, [r3, #8]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	47a0      	blx	r4
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd90      	pop	{r4, r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000248 	.word	0x20000248

08005c10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <disk_write+0x3c>)
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68dc      	ldr	r4, [r3, #12]
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	4a07      	ldr	r2, [pc, #28]	; (8005c4c <disk_write+0x3c>)
 8005c30:	4413      	add	r3, r2
 8005c32:	7a18      	ldrb	r0, [r3, #8]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	47a0      	blx	r4
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd90      	pop	{r4, r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000248 	.word	0x20000248

08005c50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c60:	89fb      	ldrh	r3, [r7, #14]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	b21a      	sxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	b21b      	sxth	r3, r3
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	b21b      	sxth	r3, r3
 8005c70:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c72:	89fb      	ldrh	r3, [r7, #14]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3303      	adds	r3, #3
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	3202      	adds	r2, #2
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	3201      	adds	r2, #1
 8005ca6:	7812      	ldrb	r2, [r2, #0]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	7812      	ldrb	r2, [r2, #0]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
	return rv;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	887a      	ldrh	r2, [r7, #2]
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	887b      	ldrh	r3, [r7, #2]
 8005ce0:	0a1b      	lsrs	r3, r3, #8
 8005ce2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	887a      	ldrh	r2, [r7, #2]
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	0a1b      	lsrs	r3, r3, #8
 8005d16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	0a1b      	lsrs	r3, r3, #8
 8005d3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00d      	beq.n	8005d8a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	1c53      	adds	r3, r2, #1
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	1c59      	adds	r1, r3, #1
 8005d78:	6179      	str	r1, [r7, #20]
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	607b      	str	r3, [r7, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f1      	bne.n	8005d6e <mem_cpy+0x1a>
	}
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	617a      	str	r2, [r7, #20]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f3      	bne.n	8005da6 <mem_set+0x10>
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005dcc:	b480      	push	{r7}
 8005dce:	b089      	sub	sp, #36	; 0x24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	61fa      	str	r2, [r7, #28]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	4619      	mov	r1, r3
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	61ba      	str	r2, [r7, #24]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	1acb      	subs	r3, r1, r3
 8005df8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <mem_cmp+0x40>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0eb      	beq.n	8005de4 <mem_cmp+0x18>

	return r;
 8005e0c:	697b      	ldr	r3, [r7, #20]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3724      	adds	r7, #36	; 0x24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e24:	e002      	b.n	8005e2c <chk_chr+0x12>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <chk_chr+0x26>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d1f2      	bne.n	8005e26 <chk_chr+0xc>
	return *str;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	781b      	ldrb	r3, [r3, #0]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e029      	b.n	8005eb8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e64:	4a27      	ldr	r2, [pc, #156]	; (8005f04 <chk_lock+0xb4>)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	4413      	add	r3, r2
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01d      	beq.n	8005eae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e72:	4a24      	ldr	r2, [pc, #144]	; (8005f04 <chk_lock+0xb4>)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	4413      	add	r3, r2
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d116      	bne.n	8005eb2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005e84:	4a1f      	ldr	r2, [pc, #124]	; (8005f04 <chk_lock+0xb4>)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d10c      	bne.n	8005eb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e98:	4a1a      	ldr	r2, [pc, #104]	; (8005f04 <chk_lock+0xb4>)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d102      	bne.n	8005eb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005eac:	e007      	b.n	8005ebe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d9d2      	bls.n	8005e64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d109      	bne.n	8005ed8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <chk_lock+0x80>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d101      	bne.n	8005ed4 <chk_lock+0x84>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e010      	b.n	8005ef6 <chk_lock+0xa6>
 8005ed4:	2312      	movs	r3, #18
 8005ed6:	e00e      	b.n	8005ef6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d108      	bne.n	8005ef0 <chk_lock+0xa0>
 8005ede:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <chk_lock+0xb4>)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	4413      	add	r3, r2
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eee:	d101      	bne.n	8005ef4 <chk_lock+0xa4>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	e000      	b.n	8005ef6 <chk_lock+0xa6>
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000228 	.word	0x20000228

08005f08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	e002      	b.n	8005f1a <enq_lock+0x12>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3301      	adds	r3, #1
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d806      	bhi.n	8005f2e <enq_lock+0x26>
 8005f20:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <enq_lock+0x40>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	4413      	add	r3, r2
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f2      	bne.n	8005f14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	bf14      	ite	ne
 8005f34:	2301      	movne	r3, #1
 8005f36:	2300      	moveq	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000228 	.word	0x20000228

08005f4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e01f      	b.n	8005f9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f5c:	4a41      	ldr	r2, [pc, #260]	; (8006064 <inc_lock+0x118>)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	4413      	add	r3, r2
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d113      	bne.n	8005f96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f6e:	4a3d      	ldr	r2, [pc, #244]	; (8006064 <inc_lock+0x118>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	4413      	add	r3, r2
 8005f76:	3304      	adds	r3, #4
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d109      	bne.n	8005f96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005f82:	4a38      	ldr	r2, [pc, #224]	; (8006064 <inc_lock+0x118>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	4413      	add	r3, r2
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d006      	beq.n	8005fa4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d9dc      	bls.n	8005f5c <inc_lock+0x10>
 8005fa2:	e000      	b.n	8005fa6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005fa4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d132      	bne.n	8006012 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e002      	b.n	8005fb8 <inc_lock+0x6c>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d806      	bhi.n	8005fcc <inc_lock+0x80>
 8005fbe:	4a29      	ldr	r2, [pc, #164]	; (8006064 <inc_lock+0x118>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	4413      	add	r3, r2
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f2      	bne.n	8005fb2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d101      	bne.n	8005fd6 <inc_lock+0x8a>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e040      	b.n	8006058 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4922      	ldr	r1, [pc, #136]	; (8006064 <inc_lock+0x118>)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	440b      	add	r3, r1
 8005fe2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	491e      	ldr	r1, [pc, #120]	; (8006064 <inc_lock+0x118>)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	440b      	add	r3, r1
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695a      	ldr	r2, [r3, #20]
 8005ff8:	491a      	ldr	r1, [pc, #104]	; (8006064 <inc_lock+0x118>)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	440b      	add	r3, r1
 8006000:	3308      	adds	r3, #8
 8006002:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006004:	4a17      	ldr	r2, [pc, #92]	; (8006064 <inc_lock+0x118>)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	4413      	add	r3, r2
 800600c:	330c      	adds	r3, #12
 800600e:	2200      	movs	r2, #0
 8006010:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d009      	beq.n	800602c <inc_lock+0xe0>
 8006018:	4a12      	ldr	r2, [pc, #72]	; (8006064 <inc_lock+0x118>)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	4413      	add	r3, r2
 8006020:	330c      	adds	r3, #12
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <inc_lock+0xe0>
 8006028:	2300      	movs	r3, #0
 800602a:	e015      	b.n	8006058 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d108      	bne.n	8006044 <inc_lock+0xf8>
 8006032:	4a0c      	ldr	r2, [pc, #48]	; (8006064 <inc_lock+0x118>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	4413      	add	r3, r2
 800603a:	330c      	adds	r3, #12
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	3301      	adds	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	e001      	b.n	8006048 <inc_lock+0xfc>
 8006044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006048:	4906      	ldr	r1, [pc, #24]	; (8006064 <inc_lock+0x118>)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	440b      	add	r3, r1
 8006050:	330c      	adds	r3, #12
 8006052:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20000228 	.word	0x20000228

08006068 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e010      	b.n	8006098 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006076:	4a0d      	ldr	r2, [pc, #52]	; (80060ac <clear_lock+0x44>)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	4413      	add	r3, r2
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	429a      	cmp	r2, r3
 8006084:	d105      	bne.n	8006092 <clear_lock+0x2a>
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <clear_lock+0x44>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	4413      	add	r3, r2
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3301      	adds	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d9eb      	bls.n	8006076 <clear_lock+0xe>
	}
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	20000228 	.word	0x20000228

080060b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	78db      	ldrb	r3, [r3, #3]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d034      	beq.n	800612e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7858      	ldrb	r0, [r3, #1]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060d4:	2301      	movs	r3, #1
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	f7ff fd9a 	bl	8005c10 <disk_write>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
 80060e6:	e022      	b.n	800612e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	1ad2      	subs	r2, r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d217      	bcs.n	800612e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	789b      	ldrb	r3, [r3, #2]
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	e010      	b.n	8006128 <sync_window+0x78>
					wsect += fs->fsize;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4413      	add	r3, r2
 800610e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	7858      	ldrb	r0, [r3, #1]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800611a:	2301      	movs	r3, #1
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	f7ff fd77 	bl	8005c10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3b01      	subs	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d8eb      	bhi.n	8006106 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d01b      	beq.n	8006188 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ffad 	bl	80060b0 <sync_window>
 8006156:	4603      	mov	r3, r0
 8006158:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d113      	bne.n	8006188 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	7858      	ldrb	r0, [r3, #1]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800616a:	2301      	movs	r3, #1
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	f7ff fd2f 	bl	8005bd0 <disk_read>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800617c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800617e:	2301      	movs	r3, #1
 8006180:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	3b02      	subs	r3, #2
 80061a0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	3b02      	subs	r3, #2
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d301      	bcc.n	80061b2 <clust2sect+0x20>
 80061ae:	2300      	movs	r3, #0
 80061b0:	e008      	b.n	80061c4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	895b      	ldrh	r3, [r3, #10]
 80061b6:	461a      	mov	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	fb03 f202 	mul.w	r2, r3, r2
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	4413      	add	r3, r2
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d904      	bls.n	80061f0 <get_fat+0x20>
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80061f0:	2301      	movs	r3, #1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e08f      	b.n	8006316 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061fa:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b03      	cmp	r3, #3
 8006202:	d062      	beq.n	80062ca <get_fat+0xfa>
 8006204:	2b03      	cmp	r3, #3
 8006206:	dc7c      	bgt.n	8006302 <get_fat+0x132>
 8006208:	2b01      	cmp	r3, #1
 800620a:	d002      	beq.n	8006212 <get_fat+0x42>
 800620c:	2b02      	cmp	r3, #2
 800620e:	d042      	beq.n	8006296 <get_fat+0xc6>
 8006210:	e077      	b.n	8006302 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	085b      	lsrs	r3, r3, #1
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6a1a      	ldr	r2, [r3, #32]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	0a5b      	lsrs	r3, r3, #9
 8006228:	4413      	add	r3, r2
 800622a:	4619      	mov	r1, r3
 800622c:	6938      	ldr	r0, [r7, #16]
 800622e:	f7ff ff83 	bl	8006138 <move_window>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d167      	bne.n	8006308 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	60fa      	str	r2, [r7, #12]
 800623e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4413      	add	r3, r2
 8006246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800624a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	6a1a      	ldr	r2, [r3, #32]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	0a5b      	lsrs	r3, r3, #9
 8006254:	4413      	add	r3, r2
 8006256:	4619      	mov	r1, r3
 8006258:	6938      	ldr	r0, [r7, #16]
 800625a:	f7ff ff6d 	bl	8006138 <move_window>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d153      	bne.n	800630c <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4413      	add	r3, r2
 800626e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	461a      	mov	r2, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4313      	orrs	r3, r2
 800627a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <get_fat+0xbc>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	091b      	lsrs	r3, r3, #4
 800628a:	e002      	b.n	8006292 <get_fat+0xc2>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006292:	617b      	str	r3, [r7, #20]
			break;
 8006294:	e03f      	b.n	8006316 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	0a1b      	lsrs	r3, r3, #8
 800629e:	4413      	add	r3, r2
 80062a0:	4619      	mov	r1, r3
 80062a2:	6938      	ldr	r0, [r7, #16]
 80062a4:	f7ff ff48 	bl	8006138 <move_window>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d130      	bne.n	8006310 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80062bc:	4413      	add	r3, r2
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff fcc6 	bl	8005c50 <ld_word>
 80062c4:	4603      	mov	r3, r0
 80062c6:	617b      	str	r3, [r7, #20]
			break;
 80062c8:	e025      	b.n	8006316 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6a1a      	ldr	r2, [r3, #32]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	09db      	lsrs	r3, r3, #7
 80062d2:	4413      	add	r3, r2
 80062d4:	4619      	mov	r1, r3
 80062d6:	6938      	ldr	r0, [r7, #16]
 80062d8:	f7ff ff2e 	bl	8006138 <move_window>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d118      	bne.n	8006314 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80062f0:	4413      	add	r3, r2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fcc4 	bl	8005c80 <ld_dword>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062fe:	617b      	str	r3, [r7, #20]
			break;
 8006300:	e009      	b.n	8006316 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006302:	2301      	movs	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e006      	b.n	8006316 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006308:	bf00      	nop
 800630a:	e004      	b.n	8006316 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800630c:	bf00      	nop
 800630e:	e002      	b.n	8006316 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006314:	bf00      	nop
		}
	}

	return val;
 8006316:	697b      	ldr	r3, [r7, #20]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006320:	b590      	push	{r4, r7, lr}
 8006322:	b089      	sub	sp, #36	; 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800632c:	2302      	movs	r3, #2
 800632e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b01      	cmp	r3, #1
 8006334:	f240 80d2 	bls.w	80064dc <put_fat+0x1bc>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	429a      	cmp	r2, r3
 8006340:	f080 80cc 	bcs.w	80064dc <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b03      	cmp	r3, #3
 800634a:	f000 8096 	beq.w	800647a <put_fat+0x15a>
 800634e:	2b03      	cmp	r3, #3
 8006350:	f300 80cd 	bgt.w	80064ee <put_fat+0x1ce>
 8006354:	2b01      	cmp	r3, #1
 8006356:	d002      	beq.n	800635e <put_fat+0x3e>
 8006358:	2b02      	cmp	r3, #2
 800635a:	d06e      	beq.n	800643a <put_fat+0x11a>
 800635c:	e0c7      	b.n	80064ee <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	4413      	add	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a1a      	ldr	r2, [r3, #32]
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	0a5b      	lsrs	r3, r3, #9
 8006374:	4413      	add	r3, r2
 8006376:	4619      	mov	r1, r3
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff fedd 	bl	8006138 <move_window>
 800637e:	4603      	mov	r3, r0
 8006380:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006382:	7ffb      	ldrb	r3, [r7, #31]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f040 80ab 	bne.w	80064e0 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	1c59      	adds	r1, r3, #1
 8006394:	61b9      	str	r1, [r7, #24]
 8006396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639a:	4413      	add	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00d      	beq.n	80063c4 <put_fat+0xa4>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	b25a      	sxtb	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	b25b      	sxtb	r3, r3
 80063bc:	4313      	orrs	r3, r2
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	e001      	b.n	80063c8 <put_fat+0xa8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1a      	ldr	r2, [r3, #32]
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	0a5b      	lsrs	r3, r3, #9
 80063da:	4413      	add	r3, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff feaa 	bl	8006138 <move_window>
 80063e4:	4603      	mov	r3, r0
 80063e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063e8:	7ffb      	ldrb	r3, [r7, #31]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d17a      	bne.n	80064e4 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fa:	4413      	add	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <put_fat+0xf0>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	091b      	lsrs	r3, r3, #4
 800640c:	b2db      	uxtb	r3, r3
 800640e:	e00e      	b.n	800642e <put_fat+0x10e>
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	b25b      	sxtb	r3, r3
 8006416:	f023 030f 	bic.w	r3, r3, #15
 800641a:	b25a      	sxtb	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	b25b      	sxtb	r3, r3
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	b25b      	sxtb	r3, r3
 8006428:	4313      	orrs	r3, r2
 800642a:	b25b      	sxtb	r3, r3
 800642c:	b2db      	uxtb	r3, r3
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	70da      	strb	r2, [r3, #3]
			break;
 8006438:	e059      	b.n	80064ee <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1a      	ldr	r2, [r3, #32]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	0a1b      	lsrs	r3, r3, #8
 8006442:	4413      	add	r3, r2
 8006444:	4619      	mov	r1, r3
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fe76 	bl	8006138 <move_window>
 800644c:	4603      	mov	r3, r0
 800644e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006450:	7ffb      	ldrb	r3, [r7, #31]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d148      	bne.n	80064e8 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006464:	4413      	add	r3, r2
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	b292      	uxth	r2, r2
 800646a:	4611      	mov	r1, r2
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fc2a 	bl	8005cc6 <st_word>
			fs->wflag = 1;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	70da      	strb	r2, [r3, #3]
			break;
 8006478:	e039      	b.n	80064ee <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1a      	ldr	r2, [r3, #32]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	09db      	lsrs	r3, r3, #7
 8006482:	4413      	add	r3, r2
 8006484:	4619      	mov	r1, r3
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff fe56 	bl	8006138 <move_window>
 800648c:	4603      	mov	r3, r0
 800648e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006490:	7ffb      	ldrb	r3, [r7, #31]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d12a      	bne.n	80064ec <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80064aa:	4413      	add	r3, r2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fbe7 	bl	8005c80 <ld_dword>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80064b8:	4323      	orrs	r3, r4
 80064ba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80064ca:	4413      	add	r3, r2
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff fc14 	bl	8005cfc <st_dword>
			fs->wflag = 1;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2201      	movs	r2, #1
 80064d8:	70da      	strb	r2, [r3, #3]
			break;
 80064da:	e008      	b.n	80064ee <put_fat+0x1ce>
		}
	}
 80064dc:	bf00      	nop
 80064de:	e006      	b.n	80064ee <put_fat+0x1ce>
			if (res != FR_OK) break;
 80064e0:	bf00      	nop
 80064e2:	e004      	b.n	80064ee <put_fat+0x1ce>
			if (res != FR_OK) break;
 80064e4:	bf00      	nop
 80064e6:	e002      	b.n	80064ee <put_fat+0x1ce>
			if (res != FR_OK) break;
 80064e8:	bf00      	nop
 80064ea:	e000      	b.n	80064ee <put_fat+0x1ce>
			if (res != FR_OK) break;
 80064ec:	bf00      	nop
	return res;
 80064ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3724      	adds	r7, #36	; 0x24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd90      	pop	{r4, r7, pc}

080064f8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d904      	bls.n	800651e <remove_chain+0x26>
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	429a      	cmp	r2, r3
 800651c:	d301      	bcc.n	8006522 <remove_chain+0x2a>
 800651e:	2302      	movs	r3, #2
 8006520:	e04b      	b.n	80065ba <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00c      	beq.n	8006542 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	69b8      	ldr	r0, [r7, #24]
 8006530:	f7ff fef6 	bl	8006320 <put_fat>
 8006534:	4603      	mov	r3, r0
 8006536:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006538:	7ffb      	ldrb	r3, [r7, #31]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <remove_chain+0x4a>
 800653e:	7ffb      	ldrb	r3, [r7, #31]
 8006540:	e03b      	b.n	80065ba <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7ff fe43 	bl	80061d0 <get_fat>
 800654a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d031      	beq.n	80065b6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <remove_chain+0x64>
 8006558:	2302      	movs	r3, #2
 800655a:	e02e      	b.n	80065ba <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006562:	d101      	bne.n	8006568 <remove_chain+0x70>
 8006564:	2301      	movs	r3, #1
 8006566:	e028      	b.n	80065ba <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006568:	2200      	movs	r2, #0
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	69b8      	ldr	r0, [r7, #24]
 800656e:	f7ff fed7 	bl	8006320 <put_fat>
 8006572:	4603      	mov	r3, r0
 8006574:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006576:	7ffb      	ldrb	r3, [r7, #31]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <remove_chain+0x88>
 800657c:	7ffb      	ldrb	r3, [r7, #31]
 800657e:	e01c      	b.n	80065ba <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	3b02      	subs	r3, #2
 800658a:	429a      	cmp	r2, r3
 800658c:	d20b      	bcs.n	80065a6 <remove_chain+0xae>
			fs->free_clst++;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	791b      	ldrb	r3, [r3, #4]
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d3c6      	bcc.n	8006542 <remove_chain+0x4a>
 80065b4:	e000      	b.n	80065b8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80065b6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3720      	adds	r7, #32
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b088      	sub	sp, #32
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10d      	bne.n	80065f4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d004      	beq.n	80065ee <create_chain+0x2c>
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d31b      	bcc.n	8006626 <create_chain+0x64>
 80065ee:	2301      	movs	r3, #1
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	e018      	b.n	8006626 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff fdea 	bl	80061d0 <get_fat>
 80065fc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d801      	bhi.n	8006608 <create_chain+0x46>
 8006604:	2301      	movs	r3, #1
 8006606:	e070      	b.n	80066ea <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800660e:	d101      	bne.n	8006614 <create_chain+0x52>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	e06a      	b.n	80066ea <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	429a      	cmp	r2, r3
 800661c:	d201      	bcs.n	8006622 <create_chain+0x60>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	e063      	b.n	80066ea <create_chain+0x128>
		scl = clst;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	3301      	adds	r3, #1
 800662e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	429a      	cmp	r2, r3
 8006638:	d307      	bcc.n	800664a <create_chain+0x88>
				ncl = 2;
 800663a:	2302      	movs	r3, #2
 800663c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	429a      	cmp	r2, r3
 8006644:	d901      	bls.n	800664a <create_chain+0x88>
 8006646:	2300      	movs	r3, #0
 8006648:	e04f      	b.n	80066ea <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800664a:	69f9      	ldr	r1, [r7, #28]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fdbf 	bl	80061d0 <get_fat>
 8006652:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00e      	beq.n	8006678 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d003      	beq.n	8006668 <create_chain+0xa6>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006666:	d101      	bne.n	800666c <create_chain+0xaa>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	e03e      	b.n	80066ea <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	429a      	cmp	r2, r3
 8006672:	d1da      	bne.n	800662a <create_chain+0x68>
 8006674:	2300      	movs	r3, #0
 8006676:	e038      	b.n	80066ea <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006678:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800667a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800667e:	69f9      	ldr	r1, [r7, #28]
 8006680:	6938      	ldr	r0, [r7, #16]
 8006682:	f7ff fe4d 	bl	8006320 <put_fat>
 8006686:	4603      	mov	r3, r0
 8006688:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <create_chain+0xe2>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d006      	beq.n	80066a4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6938      	ldr	r0, [r7, #16]
 800669c:	f7ff fe40 	bl	8006320 <put_fat>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d116      	bne.n	80066d8 <create_chain+0x116>
		fs->last_clst = ncl;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	3b02      	subs	r3, #2
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d804      	bhi.n	80066c8 <create_chain+0x106>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	1e5a      	subs	r2, r3, #1
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	791b      	ldrb	r3, [r3, #4]
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	711a      	strb	r2, [r3, #4]
 80066d6:	e007      	b.n	80066e8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d102      	bne.n	80066e4 <create_chain+0x122>
 80066de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066e2:	e000      	b.n	80066e6 <create_chain+0x124>
 80066e4:	2301      	movs	r3, #1
 80066e6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80066e8:	69fb      	ldr	r3, [r7, #28]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3720      	adds	r7, #32
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b087      	sub	sp, #28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	3304      	adds	r3, #4
 8006708:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	0a5b      	lsrs	r3, r3, #9
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	8952      	ldrh	r2, [r2, #10]
 8006712:	fbb3 f3f2 	udiv	r3, r3, r2
 8006716:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1d1a      	adds	r2, r3, #4
 800671c:	613a      	str	r2, [r7, #16]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <clmt_clust+0x3a>
 8006728:	2300      	movs	r3, #0
 800672a:	e010      	b.n	800674e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	429a      	cmp	r2, r3
 8006732:	d307      	bcc.n	8006744 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	3304      	adds	r3, #4
 8006740:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006742:	e7e9      	b.n	8006718 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006744:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4413      	add	r3, r2
}
 800674e:	4618      	mov	r0, r3
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b086      	sub	sp, #24
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006770:	d204      	bcs.n	800677c <dir_sdi+0x22>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <dir_sdi+0x26>
		return FR_INT_ERR;
 800677c:	2302      	movs	r3, #2
 800677e:	e063      	b.n	8006848 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <dir_sdi+0x46>
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d902      	bls.n	80067a0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	8912      	ldrh	r2, [r2, #8]
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d301      	bcc.n	80067b6 <dir_sdi+0x5c>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e048      	b.n	8006848 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	61da      	str	r2, [r3, #28]
 80067be:	e029      	b.n	8006814 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	895b      	ldrh	r3, [r3, #10]
 80067c4:	025b      	lsls	r3, r3, #9
 80067c6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80067c8:	e019      	b.n	80067fe <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6979      	ldr	r1, [r7, #20]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff fcfe 	bl	80061d0 <get_fat>
 80067d4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067dc:	d101      	bne.n	80067e2 <dir_sdi+0x88>
 80067de:	2301      	movs	r3, #1
 80067e0:	e032      	b.n	8006848 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d904      	bls.n	80067f2 <dir_sdi+0x98>
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d301      	bcc.n	80067f6 <dir_sdi+0x9c>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e028      	b.n	8006848 <dir_sdi+0xee>
			ofs -= csz;
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	429a      	cmp	r2, r3
 8006804:	d2e1      	bcs.n	80067ca <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006806:	6979      	ldr	r1, [r7, #20]
 8006808:	6938      	ldr	r0, [r7, #16]
 800680a:	f7ff fcc2 	bl	8006192 <clust2sect>
 800680e:	4602      	mov	r2, r0
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <dir_sdi+0xcc>
 8006822:	2302      	movs	r3, #2
 8006824:	e010      	b.n	8006848 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69da      	ldr	r2, [r3, #28]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	0a5b      	lsrs	r3, r3, #9
 800682e:	441a      	add	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006840:	441a      	add	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	3320      	adds	r3, #32
 8006866:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <dir_next+0x28>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006876:	d301      	bcc.n	800687c <dir_next+0x2c>
 8006878:	2304      	movs	r3, #4
 800687a:	e0aa      	b.n	80069d2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006882:	2b00      	cmp	r3, #0
 8006884:	f040 8098 	bne.w	80069b8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	8912      	ldrh	r2, [r2, #8]
 80068a2:	4293      	cmp	r3, r2
 80068a4:	f0c0 8088 	bcc.w	80069b8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	61da      	str	r2, [r3, #28]
 80068ae:	2304      	movs	r3, #4
 80068b0:	e08f      	b.n	80069d2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	0a5b      	lsrs	r3, r3, #9
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	8952      	ldrh	r2, [r2, #10]
 80068ba:	3a01      	subs	r2, #1
 80068bc:	4013      	ands	r3, r2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d17a      	bne.n	80069b8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f7ff fc80 	bl	80061d0 <get_fat>
 80068d0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d801      	bhi.n	80068dc <dir_next+0x8c>
 80068d8:	2302      	movs	r3, #2
 80068da:	e07a      	b.n	80069d2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e2:	d101      	bne.n	80068e8 <dir_next+0x98>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e074      	b.n	80069d2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d358      	bcc.n	80069a4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	61da      	str	r2, [r3, #28]
 80068fe:	2304      	movs	r3, #4
 8006900:	e067      	b.n	80069d2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	4619      	mov	r1, r3
 800690a:	4610      	mov	r0, r2
 800690c:	f7ff fe59 	bl	80065c2 <create_chain>
 8006910:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <dir_next+0xcc>
 8006918:	2307      	movs	r3, #7
 800691a:	e05a      	b.n	80069d2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <dir_next+0xd6>
 8006922:	2302      	movs	r3, #2
 8006924:	e055      	b.n	80069d2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800692c:	d101      	bne.n	8006932 <dir_next+0xe2>
 800692e:	2301      	movs	r3, #1
 8006930:	e04f      	b.n	80069d2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7ff fbbc 	bl	80060b0 <sync_window>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <dir_next+0xf2>
 800693e:	2301      	movs	r3, #1
 8006940:	e047      	b.n	80069d2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3330      	adds	r3, #48	; 0x30
 8006946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800694a:	2100      	movs	r1, #0
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fa22 	bl	8005d96 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006952:	2300      	movs	r3, #0
 8006954:	613b      	str	r3, [r7, #16]
 8006956:	6979      	ldr	r1, [r7, #20]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff fc1a 	bl	8006192 <clust2sect>
 800695e:	4602      	mov	r2, r0
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	62da      	str	r2, [r3, #44]	; 0x2c
 8006964:	e012      	b.n	800698c <dir_next+0x13c>
						fs->wflag = 1;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7ff fb9f 	bl	80060b0 <sync_window>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <dir_next+0x12c>
 8006978:	2301      	movs	r3, #1
 800697a:	e02a      	b.n	80069d2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	3301      	adds	r3, #1
 8006980:	613b      	str	r3, [r7, #16]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	62da      	str	r2, [r3, #44]	; 0x2c
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	895b      	ldrh	r3, [r3, #10]
 8006990:	461a      	mov	r2, r3
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	4293      	cmp	r3, r2
 8006996:	d3e6      	bcc.n	8006966 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80069aa:	6979      	ldr	r1, [r7, #20]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7ff fbf0 	bl	8006192 <clust2sect>
 80069b2:	4602      	mov	r2, r0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ca:	441a      	add	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b086      	sub	sp, #24
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80069ea:	2100      	movs	r1, #0
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff feb4 	bl	800675a <dir_sdi>
 80069f2:	4603      	mov	r3, r0
 80069f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d12b      	bne.n	8006a54 <dir_alloc+0x7a>
		n = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	4619      	mov	r1, r3
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fb96 	bl	8006138 <move_window>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d11d      	bne.n	8006a52 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2be5      	cmp	r3, #229	; 0xe5
 8006a1e:	d004      	beq.n	8006a2a <dir_alloc+0x50>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d107      	bne.n	8006a3a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d102      	bne.n	8006a3e <dir_alloc+0x64>
 8006a38:	e00c      	b.n	8006a54 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006a3e:	2101      	movs	r1, #1
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff ff05 	bl	8006850 <dir_next>
 8006a46:	4603      	mov	r3, r0
 8006a48:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0d7      	beq.n	8006a00 <dir_alloc+0x26>
 8006a50:	e000      	b.n	8006a54 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006a52:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d101      	bne.n	8006a5e <dir_alloc+0x84>
 8006a5a:	2307      	movs	r3, #7
 8006a5c:	75fb      	strb	r3, [r7, #23]
	return res;
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	331a      	adds	r3, #26
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff f8ea 	bl	8005c50 <ld_word>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d109      	bne.n	8006a9c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	3314      	adds	r3, #20
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff f8df 	bl	8005c50 <ld_word>
 8006a92:	4603      	mov	r3, r0
 8006a94:	041b      	lsls	r3, r3, #16
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	331a      	adds	r3, #26
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	b292      	uxth	r2, r2
 8006aba:	4611      	mov	r1, r2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff f902 	bl	8005cc6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d109      	bne.n	8006ade <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f103 0214 	add.w	r2, r3, #20
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	0c1b      	lsrs	r3, r3, #16
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f7ff f8f4 	bl	8005cc6 <st_word>
	}
}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006af4:	2100      	movs	r1, #0
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff fe2f 	bl	800675a <dir_sdi>
 8006afc:	4603      	mov	r3, r0
 8006afe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <dir_find+0x24>
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	e03e      	b.n	8006b88 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6938      	ldr	r0, [r7, #16]
 8006b12:	f7ff fb11 	bl	8006138 <move_window>
 8006b16:	4603      	mov	r3, r0
 8006b18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d12f      	bne.n	8006b80 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d102      	bne.n	8006b34 <dir_find+0x4e>
 8006b2e:	2304      	movs	r3, #4
 8006b30:	75fb      	strb	r3, [r7, #23]
 8006b32:	e028      	b.n	8006b86 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	330b      	adds	r3, #11
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	330b      	adds	r3, #11
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10a      	bne.n	8006b6c <dir_find+0x86>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a18      	ldr	r0, [r3, #32]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3324      	adds	r3, #36	; 0x24
 8006b5e:	220b      	movs	r2, #11
 8006b60:	4619      	mov	r1, r3
 8006b62:	f7ff f933 	bl	8005dcc <mem_cmp>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00b      	beq.n	8006b84 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff fe6e 	bl	8006850 <dir_next>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0c5      	beq.n	8006b0a <dir_find+0x24>
 8006b7e:	e002      	b.n	8006b86 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006b80:	bf00      	nop
 8006b82:	e000      	b.n	8006b86 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b84:	bf00      	nop

	return res;
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff ff1a 	bl	80069da <dir_alloc>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11c      	bne.n	8006bea <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	68b8      	ldr	r0, [r7, #8]
 8006bb8:	f7ff fabe 	bl	8006138 <move_window>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d111      	bne.n	8006bea <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff f8e1 	bl	8005d96 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a18      	ldr	r0, [r3, #32]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3324      	adds	r3, #36	; 0x24
 8006bdc:	220b      	movs	r2, #11
 8006bde:	4619      	mov	r1, r3
 8006be0:	f7ff f8b8 	bl	8005d54 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2201      	movs	r2, #1
 8006be8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b088      	sub	sp, #32
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3324      	adds	r3, #36	; 0x24
 8006c08:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c0a:	220b      	movs	r2, #11
 8006c0c:	2120      	movs	r1, #32
 8006c0e:	68b8      	ldr	r0, [r7, #8]
 8006c10:	f7ff f8c1 	bl	8005d96 <mem_set>
	si = i = 0; ni = 8;
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	61fb      	str	r3, [r7, #28]
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	61fa      	str	r2, [r7, #28]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c2e:	7efb      	ldrb	r3, [r7, #27]
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	d94e      	bls.n	8006cd2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006c34:	7efb      	ldrb	r3, [r7, #27]
 8006c36:	2b2f      	cmp	r3, #47	; 0x2f
 8006c38:	d006      	beq.n	8006c48 <create_name+0x54>
 8006c3a:	7efb      	ldrb	r3, [r7, #27]
 8006c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8006c3e:	d110      	bne.n	8006c62 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006c40:	e002      	b.n	8006c48 <create_name+0x54>
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	3301      	adds	r3, #1
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b2f      	cmp	r3, #47	; 0x2f
 8006c52:	d0f6      	beq.n	8006c42 <create_name+0x4e>
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	4413      	add	r3, r2
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006c5e:	d0f0      	beq.n	8006c42 <create_name+0x4e>
			break;
 8006c60:	e038      	b.n	8006cd4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006c62:	7efb      	ldrb	r3, [r7, #27]
 8006c64:	2b2e      	cmp	r3, #46	; 0x2e
 8006c66:	d003      	beq.n	8006c70 <create_name+0x7c>
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d30c      	bcc.n	8006c8a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b0b      	cmp	r3, #11
 8006c74:	d002      	beq.n	8006c7c <create_name+0x88>
 8006c76:	7efb      	ldrb	r3, [r7, #27]
 8006c78:	2b2e      	cmp	r3, #46	; 0x2e
 8006c7a:	d001      	beq.n	8006c80 <create_name+0x8c>
 8006c7c:	2306      	movs	r3, #6
 8006c7e:	e044      	b.n	8006d0a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006c80:	2308      	movs	r3, #8
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	230b      	movs	r3, #11
 8006c86:	617b      	str	r3, [r7, #20]
			continue;
 8006c88:	e022      	b.n	8006cd0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006c8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	da04      	bge.n	8006c9c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006c92:	7efb      	ldrb	r3, [r7, #27]
 8006c94:	3b80      	subs	r3, #128	; 0x80
 8006c96:	4a1f      	ldr	r2, [pc, #124]	; (8006d14 <create_name+0x120>)
 8006c98:	5cd3      	ldrb	r3, [r2, r3]
 8006c9a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006c9c:	7efb      	ldrb	r3, [r7, #27]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	481d      	ldr	r0, [pc, #116]	; (8006d18 <create_name+0x124>)
 8006ca2:	f7ff f8ba 	bl	8005e1a <chk_chr>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <create_name+0xbc>
 8006cac:	2306      	movs	r3, #6
 8006cae:	e02c      	b.n	8006d0a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006cb0:	7efb      	ldrb	r3, [r7, #27]
 8006cb2:	2b60      	cmp	r3, #96	; 0x60
 8006cb4:	d905      	bls.n	8006cc2 <create_name+0xce>
 8006cb6:	7efb      	ldrb	r3, [r7, #27]
 8006cb8:	2b7a      	cmp	r3, #122	; 0x7a
 8006cba:	d802      	bhi.n	8006cc2 <create_name+0xce>
 8006cbc:	7efb      	ldrb	r3, [r7, #27]
 8006cbe:	3b20      	subs	r3, #32
 8006cc0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	613a      	str	r2, [r7, #16]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	4413      	add	r3, r2
 8006ccc:	7efa      	ldrb	r2, [r7, #27]
 8006cce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006cd0:	e7a6      	b.n	8006c20 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006cd2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	441a      	add	r2, r3
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <create_name+0xf4>
 8006ce4:	2306      	movs	r3, #6
 8006ce6:	e010      	b.n	8006d0a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2be5      	cmp	r3, #229	; 0xe5
 8006cee:	d102      	bne.n	8006cf6 <create_name+0x102>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2205      	movs	r2, #5
 8006cf4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006cf6:	7efb      	ldrb	r3, [r7, #27]
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d801      	bhi.n	8006d00 <create_name+0x10c>
 8006cfc:	2204      	movs	r2, #4
 8006cfe:	e000      	b.n	8006d02 <create_name+0x10e>
 8006d00:	2200      	movs	r2, #0
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	330b      	adds	r3, #11
 8006d06:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d08:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	080085cc 	.word	0x080085cc
 8006d18:	0800855c 	.word	0x0800855c

08006d1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d30:	e002      	b.n	8006d38 <follow_path+0x1c>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b2f      	cmp	r3, #47	; 0x2f
 8006d3e:	d0f8      	beq.n	8006d32 <follow_path+0x16>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b5c      	cmp	r3, #92	; 0x5c
 8006d46:	d0f4      	beq.n	8006d32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b1f      	cmp	r3, #31
 8006d54:	d80a      	bhi.n	8006d6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2280      	movs	r2, #128	; 0x80
 8006d5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006d5e:	2100      	movs	r1, #0
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff fcfa 	bl	800675a <dir_sdi>
 8006d66:	4603      	mov	r3, r0
 8006d68:	75fb      	strb	r3, [r7, #23]
 8006d6a:	e043      	b.n	8006df4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff ff3f 	bl	8006bf4 <create_name>
 8006d76:	4603      	mov	r3, r0
 8006d78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d134      	bne.n	8006dea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff feb0 	bl	8006ae6 <dir_find>
 8006d86:	4603      	mov	r3, r0
 8006d88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00a      	beq.n	8006dae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d127      	bne.n	8006dee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d122      	bne.n	8006dee <follow_path+0xd2>
 8006da8:	2305      	movs	r3, #5
 8006daa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006dac:	e01f      	b.n	8006dee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d11c      	bne.n	8006df2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	799b      	ldrb	r3, [r3, #6]
 8006dbc:	f003 0310 	and.w	r3, r3, #16
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006dc4:	2305      	movs	r3, #5
 8006dc6:	75fb      	strb	r3, [r7, #23]
 8006dc8:	e014      	b.n	8006df4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd8:	4413      	add	r3, r2
 8006dda:	4619      	mov	r1, r3
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff fe43 	bl	8006a68 <ld_clust>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006de8:	e7c0      	b.n	8006d6c <follow_path+0x50>
			if (res != FR_OK) break;
 8006dea:	bf00      	nop
 8006dec:	e002      	b.n	8006df4 <follow_path+0xd8>
				break;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006df2:	bf00      	nop
			}
		}
	}

	return res;
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b087      	sub	sp, #28
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d031      	beq.n	8006e78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e002      	b.n	8006e22 <get_ldnumber+0x24>
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d903      	bls.n	8006e32 <get_ldnumber+0x34>
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b3a      	cmp	r3, #58	; 0x3a
 8006e30:	d1f4      	bne.n	8006e1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b3a      	cmp	r3, #58	; 0x3a
 8006e38:	d11c      	bne.n	8006e74 <get_ldnumber+0x76>
			tp = *path;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	60fa      	str	r2, [r7, #12]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	3b30      	subs	r3, #48	; 0x30
 8006e4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b09      	cmp	r3, #9
 8006e50:	d80e      	bhi.n	8006e70 <get_ldnumber+0x72>
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d10a      	bne.n	8006e70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d107      	bne.n	8006e70 <get_ldnumber+0x72>
					vol = (int)i;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	3301      	adds	r3, #1
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	e002      	b.n	8006e7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006e74:	2300      	movs	r3, #0
 8006e76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006e78:	693b      	ldr	r3, [r7, #16]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	70da      	strb	r2, [r3, #3]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e9e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff f948 	bl	8006138 <move_window>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <check_fs+0x2a>
 8006eae:	2304      	movs	r3, #4
 8006eb0:	e038      	b.n	8006f24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3330      	adds	r3, #48	; 0x30
 8006eb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fec8 	bl	8005c50 <ld_word>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d001      	beq.n	8006ed0 <check_fs+0x48>
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e029      	b.n	8006f24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ed6:	2be9      	cmp	r3, #233	; 0xe9
 8006ed8:	d009      	beq.n	8006eee <check_fs+0x66>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ee0:	2beb      	cmp	r3, #235	; 0xeb
 8006ee2:	d11e      	bne.n	8006f22 <check_fs+0x9a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006eea:	2b90      	cmp	r3, #144	; 0x90
 8006eec:	d119      	bne.n	8006f22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3330      	adds	r3, #48	; 0x30
 8006ef2:	3336      	adds	r3, #54	; 0x36
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe fec3 	bl	8005c80 <ld_dword>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <check_fs+0xa4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d101      	bne.n	8006f0a <check_fs+0x82>
 8006f06:	2300      	movs	r3, #0
 8006f08:	e00c      	b.n	8006f24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3330      	adds	r3, #48	; 0x30
 8006f0e:	3352      	adds	r3, #82	; 0x52
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe feb5 	bl	8005c80 <ld_dword>
 8006f16:	4603      	mov	r3, r0
 8006f18:	4a05      	ldr	r2, [pc, #20]	; (8006f30 <check_fs+0xa8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d101      	bne.n	8006f22 <check_fs+0x9a>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e000      	b.n	8006f24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f22:	2302      	movs	r3, #2
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	00544146 	.word	0x00544146
 8006f30:	33544146 	.word	0x33544146

08006f34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b096      	sub	sp, #88	; 0x58
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff ff58 	bl	8006dfe <get_ldnumber>
 8006f4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	da01      	bge.n	8006f5a <find_volume+0x26>
 8006f56:	230b      	movs	r3, #11
 8006f58:	e22d      	b.n	80073b6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f5a:	4aa1      	ldr	r2, [pc, #644]	; (80071e0 <find_volume+0x2ac>)
 8006f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <find_volume+0x3a>
 8006f6a:	230c      	movs	r3, #12
 8006f6c:	e223      	b.n	80073b6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01a      	beq.n	8006fba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fde1 	bl	8005b50 <disk_status>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10c      	bne.n	8006fba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <find_volume+0x82>
 8006fa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006fb2:	230a      	movs	r3, #10
 8006fb4:	e1ff      	b.n	80073b6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e1fd      	b.n	80073b6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fca:	785b      	ldrb	r3, [r3, #1]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe fdd9 	bl	8005b84 <disk_initialize>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e1e6      	b.n	80073b6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <find_volume+0xca>
 8006fee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006ffa:	230a      	movs	r3, #10
 8006ffc:	e1db      	b.n	80073b6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007002:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007006:	f7ff ff3f 	bl	8006e88 <check_fs>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007014:	2b02      	cmp	r3, #2
 8007016:	d149      	bne.n	80070ac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007018:	2300      	movs	r3, #0
 800701a:	643b      	str	r3, [r7, #64]	; 0x40
 800701c:	e01e      	b.n	800705c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800702c:	4413      	add	r3, r2
 800702e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	3304      	adds	r3, #4
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d006      	beq.n	8007048 <find_volume+0x114>
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	3308      	adds	r3, #8
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fe1e 	bl	8005c80 <ld_dword>
 8007044:	4602      	mov	r2, r0
 8007046:	e000      	b.n	800704a <find_volume+0x116>
 8007048:	2200      	movs	r2, #0
 800704a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	3358      	adds	r3, #88	; 0x58
 8007050:	443b      	add	r3, r7
 8007052:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007058:	3301      	adds	r3, #1
 800705a:	643b      	str	r3, [r7, #64]	; 0x40
 800705c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705e:	2b03      	cmp	r3, #3
 8007060:	d9dd      	bls.n	800701e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007062:	2300      	movs	r3, #0
 8007064:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <find_volume+0x13e>
 800706c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706e:	3b01      	subs	r3, #1
 8007070:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	3358      	adds	r3, #88	; 0x58
 8007078:	443b      	add	r3, r7
 800707a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800707e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007082:	2b00      	cmp	r3, #0
 8007084:	d005      	beq.n	8007092 <find_volume+0x15e>
 8007086:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007088:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800708a:	f7ff fefd 	bl	8006e88 <check_fs>
 800708e:	4603      	mov	r3, r0
 8007090:	e000      	b.n	8007094 <find_volume+0x160>
 8007092:	2303      	movs	r3, #3
 8007094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800709c:	2b01      	cmp	r3, #1
 800709e:	d905      	bls.n	80070ac <find_volume+0x178>
 80070a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a2:	3301      	adds	r3, #1
 80070a4:	643b      	str	r3, [r7, #64]	; 0x40
 80070a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d9e2      	bls.n	8007072 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80070ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d101      	bne.n	80070b8 <find_volume+0x184>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e17e      	b.n	80073b6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80070b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d901      	bls.n	80070c4 <find_volume+0x190>
 80070c0:	230d      	movs	r3, #13
 80070c2:	e178      	b.n	80073b6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	3330      	adds	r3, #48	; 0x30
 80070c8:	330b      	adds	r3, #11
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fdc0 	bl	8005c50 <ld_word>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d6:	d001      	beq.n	80070dc <find_volume+0x1a8>
 80070d8:	230d      	movs	r3, #13
 80070da:	e16c      	b.n	80073b6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	3330      	adds	r3, #48	; 0x30
 80070e0:	3316      	adds	r3, #22
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe fdb4 	bl	8005c50 <ld_word>
 80070e8:	4603      	mov	r3, r0
 80070ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80070ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <find_volume+0x1cc>
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	3330      	adds	r3, #48	; 0x30
 80070f6:	3324      	adds	r3, #36	; 0x24
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe fdc1 	bl	8005c80 <ld_dword>
 80070fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007104:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	789b      	ldrb	r3, [r3, #2]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d005      	beq.n	8007124 <find_volume+0x1f0>
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	789b      	ldrb	r3, [r3, #2]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d001      	beq.n	8007124 <find_volume+0x1f0>
 8007120:	230d      	movs	r3, #13
 8007122:	e148      	b.n	80073b6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	789b      	ldrb	r3, [r3, #2]
 8007128:	461a      	mov	r2, r3
 800712a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712c:	fb02 f303 	mul.w	r3, r2, r3
 8007130:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007138:	b29a      	uxth	r2, r3
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	895b      	ldrh	r3, [r3, #10]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d008      	beq.n	8007158 <find_volume+0x224>
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	895b      	ldrh	r3, [r3, #10]
 800714a:	461a      	mov	r2, r3
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	895b      	ldrh	r3, [r3, #10]
 8007150:	3b01      	subs	r3, #1
 8007152:	4013      	ands	r3, r2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <find_volume+0x228>
 8007158:	230d      	movs	r3, #13
 800715a:	e12c      	b.n	80073b6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	3330      	adds	r3, #48	; 0x30
 8007160:	3311      	adds	r3, #17
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fd74 	bl	8005c50 <ld_word>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	891b      	ldrh	r3, [r3, #8]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <find_volume+0x24e>
 800717e:	230d      	movs	r3, #13
 8007180:	e119      	b.n	80073b6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	3330      	adds	r3, #48	; 0x30
 8007186:	3313      	adds	r3, #19
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fd61 	bl	8005c50 <ld_word>
 800718e:	4603      	mov	r3, r0
 8007190:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007194:	2b00      	cmp	r3, #0
 8007196:	d106      	bne.n	80071a6 <find_volume+0x272>
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	3330      	adds	r3, #48	; 0x30
 800719c:	3320      	adds	r3, #32
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fd6e 	bl	8005c80 <ld_dword>
 80071a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	3330      	adds	r3, #48	; 0x30
 80071aa:	330e      	adds	r3, #14
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe fd4f 	bl	8005c50 <ld_word>
 80071b2:	4603      	mov	r3, r0
 80071b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80071b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <find_volume+0x28c>
 80071bc:	230d      	movs	r3, #13
 80071be:	e0fa      	b.n	80073b6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80071c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c4:	4413      	add	r3, r2
 80071c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c8:	8912      	ldrh	r2, [r2, #8]
 80071ca:	0912      	lsrs	r2, r2, #4
 80071cc:	b292      	uxth	r2, r2
 80071ce:	4413      	add	r3, r2
 80071d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80071d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d204      	bcs.n	80071e4 <find_volume+0x2b0>
 80071da:	230d      	movs	r3, #13
 80071dc:	e0eb      	b.n	80073b6 <find_volume+0x482>
 80071de:	bf00      	nop
 80071e0:	20000220 	.word	0x20000220
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80071e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ec:	8952      	ldrh	r2, [r2, #10]
 80071ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <find_volume+0x2ca>
 80071fa:	230d      	movs	r3, #13
 80071fc:	e0db      	b.n	80073b6 <find_volume+0x482>
		fmt = FS_FAT32;
 80071fe:	2303      	movs	r3, #3
 8007200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800720a:	4293      	cmp	r3, r2
 800720c:	d802      	bhi.n	8007214 <find_volume+0x2e0>
 800720e:	2302      	movs	r3, #2
 8007210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	f640 72f5 	movw	r2, #4085	; 0xff5
 800721a:	4293      	cmp	r3, r2
 800721c:	d802      	bhi.n	8007224 <find_volume+0x2f0>
 800721e:	2301      	movs	r3, #1
 8007220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	1c9a      	adds	r2, r3, #2
 8007228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007230:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007232:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007236:	441a      	add	r2, r3
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800723c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	441a      	add	r2, r3
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007246:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800724a:	2b03      	cmp	r3, #3
 800724c:	d11e      	bne.n	800728c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	3330      	adds	r3, #48	; 0x30
 8007252:	332a      	adds	r3, #42	; 0x2a
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fcfb 	bl	8005c50 <ld_word>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <find_volume+0x330>
 8007260:	230d      	movs	r3, #13
 8007262:	e0a8      	b.n	80073b6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007266:	891b      	ldrh	r3, [r3, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <find_volume+0x33c>
 800726c:	230d      	movs	r3, #13
 800726e:	e0a2      	b.n	80073b6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	3330      	adds	r3, #48	; 0x30
 8007274:	332c      	adds	r3, #44	; 0x2c
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fd02 	bl	8005c80 <ld_dword>
 800727c:	4602      	mov	r2, r0
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	647b      	str	r3, [r7, #68]	; 0x44
 800728a:	e01f      	b.n	80072cc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	891b      	ldrh	r3, [r3, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <find_volume+0x364>
 8007294:	230d      	movs	r3, #13
 8007296:	e08e      	b.n	80073b6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	6a1a      	ldr	r2, [r3, #32]
 800729c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800729e:	441a      	add	r2, r3
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d103      	bne.n	80072b4 <find_volume+0x380>
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	e00a      	b.n	80072ca <find_volume+0x396>
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	4613      	mov	r3, r2
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	4413      	add	r3, r2
 80072be:	085a      	lsrs	r2, r3, #1
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80072ca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	699a      	ldr	r2, [r3, #24]
 80072d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80072d6:	0a5b      	lsrs	r3, r3, #9
 80072d8:	429a      	cmp	r2, r3
 80072da:	d201      	bcs.n	80072e0 <find_volume+0x3ac>
 80072dc:	230d      	movs	r3, #13
 80072de:	e06a      	b.n	80073b6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072e6:	611a      	str	r2, [r3, #16]
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	691a      	ldr	r2, [r3, #16]
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	2280      	movs	r2, #128	; 0x80
 80072f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80072f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d149      	bne.n	8007392 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	3330      	adds	r3, #48	; 0x30
 8007302:	3330      	adds	r3, #48	; 0x30
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe fca3 	bl	8005c50 <ld_word>
 800730a:	4603      	mov	r3, r0
 800730c:	2b01      	cmp	r3, #1
 800730e:	d140      	bne.n	8007392 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007312:	3301      	adds	r3, #1
 8007314:	4619      	mov	r1, r3
 8007316:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007318:	f7fe ff0e 	bl	8006138 <move_window>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d137      	bne.n	8007392 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	2200      	movs	r2, #0
 8007326:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	3330      	adds	r3, #48	; 0x30
 800732c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe fc8d 	bl	8005c50 <ld_word>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800733e:	429a      	cmp	r2, r3
 8007340:	d127      	bne.n	8007392 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	3330      	adds	r3, #48	; 0x30
 8007346:	4618      	mov	r0, r3
 8007348:	f7fe fc9a 	bl	8005c80 <ld_dword>
 800734c:	4603      	mov	r3, r0
 800734e:	4a1c      	ldr	r2, [pc, #112]	; (80073c0 <find_volume+0x48c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d11e      	bne.n	8007392 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	3330      	adds	r3, #48	; 0x30
 8007358:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800735c:	4618      	mov	r0, r3
 800735e:	f7fe fc8f 	bl	8005c80 <ld_dword>
 8007362:	4603      	mov	r3, r0
 8007364:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <find_volume+0x490>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d113      	bne.n	8007392 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	3330      	adds	r3, #48	; 0x30
 800736e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fc84 	bl	8005c80 <ld_dword>
 8007378:	4602      	mov	r2, r0
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	3330      	adds	r3, #48	; 0x30
 8007382:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fc7a 	bl	8005c80 <ld_dword>
 800738c:	4602      	mov	r2, r0
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007398:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800739a:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <find_volume+0x494>)
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	3301      	adds	r3, #1
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <find_volume+0x494>)
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <find_volume+0x494>)
 80073a8:	881a      	ldrh	r2, [r3, #0]
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80073ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073b0:	f7fe fe5a 	bl	8006068 <clear_lock>
#endif
	return FR_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3758      	adds	r7, #88	; 0x58
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	41615252 	.word	0x41615252
 80073c4:	61417272 	.word	0x61417272
 80073c8:	20000224 	.word	0x20000224

080073cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80073d6:	2309      	movs	r3, #9
 80073d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01c      	beq.n	800741a <validate+0x4e>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d018      	beq.n	800741a <validate+0x4e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d013      	beq.n	800741a <validate+0x4e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	889a      	ldrh	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	88db      	ldrh	r3, [r3, #6]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d10c      	bne.n	800741a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe fba2 	bl	8005b50 <disk_status>
 800740c:	4603      	mov	r3, r0
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <validate+0x4e>
			res = FR_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d102      	bne.n	8007426 <validate+0x5a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	e000      	b.n	8007428 <validate+0x5c>
 8007426:	2300      	movs	r3, #0
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	6013      	str	r3, [r2, #0]
	return res;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800744a:	f107 0310 	add.w	r3, r7, #16
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fcd5 	bl	8006dfe <get_ldnumber>
 8007454:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	2b00      	cmp	r3, #0
 800745a:	da01      	bge.n	8007460 <f_mount+0x28>
 800745c:	230b      	movs	r3, #11
 800745e:	e02b      	b.n	80074b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007460:	4a17      	ldr	r2, [pc, #92]	; (80074c0 <f_mount+0x88>)
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007468:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007470:	69b8      	ldr	r0, [r7, #24]
 8007472:	f7fe fdf9 	bl	8006068 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	490d      	ldr	r1, [pc, #52]	; (80074c0 <f_mount+0x88>)
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <f_mount+0x66>
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d001      	beq.n	80074a2 <f_mount+0x6a>
 800749e:	2300      	movs	r3, #0
 80074a0:	e00a      	b.n	80074b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80074a2:	f107 010c 	add.w	r1, r7, #12
 80074a6:	f107 0308 	add.w	r3, r7, #8
 80074aa:	2200      	movs	r2, #0
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff fd41 	bl	8006f34 <find_volume>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3720      	adds	r7, #32
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000220 	.word	0x20000220

080074c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b098      	sub	sp, #96	; 0x60
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <f_open+0x18>
 80074d8:	2309      	movs	r3, #9
 80074da:	e1ad      	b.n	8007838 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80074e4:	79fa      	ldrb	r2, [r7, #7]
 80074e6:	f107 0110 	add.w	r1, r7, #16
 80074ea:	f107 0308 	add.w	r3, r7, #8
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff fd20 	bl	8006f34 <find_volume>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80074fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f040 8191 	bne.w	8007826 <f_open+0x362>
		dj.obj.fs = fs;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	f107 0314 	add.w	r3, r7, #20
 800750e:	4611      	mov	r1, r2
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff fc03 	bl	8006d1c <follow_path>
 8007516:	4603      	mov	r3, r0
 8007518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800751c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007520:	2b00      	cmp	r3, #0
 8007522:	d11a      	bne.n	800755a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007524:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007528:	b25b      	sxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	da03      	bge.n	8007536 <f_open+0x72>
				res = FR_INVALID_NAME;
 800752e:	2306      	movs	r3, #6
 8007530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007534:	e011      	b.n	800755a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	f023 0301 	bic.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	461a      	mov	r2, r3
 8007548:	f107 0314 	add.w	r3, r7, #20
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe fc7e 	bl	8005e50 <chk_lock>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	f003 031c 	and.w	r3, r3, #28
 8007560:	2b00      	cmp	r3, #0
 8007562:	d07f      	beq.n	8007664 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007568:	2b00      	cmp	r3, #0
 800756a:	d017      	beq.n	800759c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800756c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007570:	2b04      	cmp	r3, #4
 8007572:	d10e      	bne.n	8007592 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007574:	f7fe fcc8 	bl	8005f08 <enq_lock>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d006      	beq.n	800758c <f_open+0xc8>
 800757e:	f107 0314 	add.w	r3, r7, #20
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff fb04 	bl	8006b90 <dir_register>
 8007588:	4603      	mov	r3, r0
 800758a:	e000      	b.n	800758e <f_open+0xca>
 800758c:	2312      	movs	r3, #18
 800758e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	f043 0308 	orr.w	r3, r3, #8
 8007598:	71fb      	strb	r3, [r7, #7]
 800759a:	e010      	b.n	80075be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800759c:	7ebb      	ldrb	r3, [r7, #26]
 800759e:	f003 0311 	and.w	r3, r3, #17
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <f_open+0xea>
					res = FR_DENIED;
 80075a6:	2307      	movs	r3, #7
 80075a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80075ac:	e007      	b.n	80075be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <f_open+0xfa>
 80075b8:	2308      	movs	r3, #8
 80075ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80075be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d168      	bne.n	8007698 <f_open+0x1d4>
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	f003 0308 	and.w	r3, r3, #8
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d063      	beq.n	8007698 <f_open+0x1d4>
				dw = GET_FATTIME();
 80075d0:	f7fe f92a 	bl	8005828 <get_fattime>
 80075d4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80075d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d8:	330e      	adds	r3, #14
 80075da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe fb8d 	bl	8005cfc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80075e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e4:	3316      	adds	r3, #22
 80075e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe fb87 	bl	8005cfc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80075ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f0:	330b      	adds	r3, #11
 80075f2:	2220      	movs	r2, #32
 80075f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075fa:	4611      	mov	r1, r2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff fa33 	bl	8006a68 <ld_clust>
 8007602:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007608:	2200      	movs	r2, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff fa4b 	bl	8006aa6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007612:	331c      	adds	r3, #28
 8007614:	2100      	movs	r1, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe fb70 	bl	8005cfc <st_dword>
					fs->wflag = 1;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2201      	movs	r2, #1
 8007620:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d037      	beq.n	8007698 <f_open+0x1d4>
						dw = fs->winsect;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800762e:	f107 0314 	add.w	r3, r7, #20
 8007632:	2200      	movs	r2, #0
 8007634:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe ff5e 	bl	80064f8 <remove_chain>
 800763c:	4603      	mov	r3, r0
 800763e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007646:	2b00      	cmp	r3, #0
 8007648:	d126      	bne.n	8007698 <f_open+0x1d4>
							res = move_window(fs, dw);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fd72 	bl	8006138 <move_window>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800765e:	3a01      	subs	r2, #1
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	e019      	b.n	8007698 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007668:	2b00      	cmp	r3, #0
 800766a:	d115      	bne.n	8007698 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800766c:	7ebb      	ldrb	r3, [r7, #26]
 800766e:	f003 0310 	and.w	r3, r3, #16
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <f_open+0x1ba>
					res = FR_NO_FILE;
 8007676:	2304      	movs	r3, #4
 8007678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800767c:	e00c      	b.n	8007698 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d007      	beq.n	8007698 <f_open+0x1d4>
 8007688:	7ebb      	ldrb	r3, [r7, #26]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <f_open+0x1d4>
						res = FR_DENIED;
 8007692:	2307      	movs	r3, #7
 8007694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800769c:	2b00      	cmp	r3, #0
 800769e:	d128      	bne.n	80076f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80076a0:	79fb      	ldrb	r3, [r7, #7]
 80076a2:	f003 0308 	and.w	r3, r3, #8
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80076ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	f023 0301 	bic.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bf14      	ite	ne
 80076ca:	2301      	movne	r3, #1
 80076cc:	2300      	moveq	r3, #0
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	f107 0314 	add.w	r3, r7, #20
 80076d6:	4611      	mov	r1, r2
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fe fc37 	bl	8005f4c <inc_lock>
 80076de:	4602      	mov	r2, r0
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <f_open+0x22e>
 80076ec:	2302      	movs	r3, #2
 80076ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80076f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f040 8095 	bne.w	8007826 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff f9b0 	bl	8006a68 <ld_clust>
 8007708:	4602      	mov	r2, r0
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800770e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007710:	331c      	adds	r3, #28
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fab4 	bl	8005c80 <ld_dword>
 8007718:	4602      	mov	r2, r0
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	88da      	ldrh	r2, [r3, #6]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	79fa      	ldrb	r2, [r7, #7]
 8007736:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3330      	adds	r3, #48	; 0x30
 800774e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007752:	2100      	movs	r1, #0
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe fb1e 	bl	8005d96 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	f003 0320 	and.w	r3, r3, #32
 8007760:	2b00      	cmp	r3, #0
 8007762:	d060      	beq.n	8007826 <f_open+0x362>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d05c      	beq.n	8007826 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	895b      	ldrh	r3, [r3, #10]
 8007778:	025b      	lsls	r3, r3, #9
 800777a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	657b      	str	r3, [r7, #84]	; 0x54
 8007788:	e016      	b.n	80077b8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fd1e 	bl	80061d0 <get_fat>
 8007794:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007798:	2b01      	cmp	r3, #1
 800779a:	d802      	bhi.n	80077a2 <f_open+0x2de>
 800779c:	2302      	movs	r3, #2
 800779e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80077a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077a8:	d102      	bne.n	80077b0 <f_open+0x2ec>
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	657b      	str	r3, [r7, #84]	; 0x54
 80077b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <f_open+0x304>
 80077c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d8e0      	bhi.n	800778a <f_open+0x2c6>
				}
				fp->clust = clst;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80077ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d127      	bne.n	8007826 <f_open+0x362>
 80077d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d022      	beq.n	8007826 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fe fcd4 	bl	8006192 <clust2sect>
 80077ea:	6478      	str	r0, [r7, #68]	; 0x44
 80077ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d103      	bne.n	80077fa <f_open+0x336>
						res = FR_INT_ERR;
 80077f2:	2302      	movs	r3, #2
 80077f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80077f8:	e015      	b.n	8007826 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80077fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077fc:	0a5a      	lsrs	r2, r3, #9
 80077fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007800:	441a      	add	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	7858      	ldrb	r0, [r3, #1]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a1a      	ldr	r2, [r3, #32]
 8007814:	2301      	movs	r3, #1
 8007816:	f7fe f9db 	bl	8005bd0 <disk_read>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <f_open+0x362>
 8007820:	2301      	movs	r3, #1
 8007822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <f_open+0x370>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007838:	4618      	mov	r0, r3
 800783a:	3760      	adds	r7, #96	; 0x60
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08c      	sub	sp, #48	; 0x30
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f107 0210 	add.w	r2, r7, #16
 800785e:	4611      	mov	r1, r2
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff fdb3 	bl	80073cc <validate>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800786c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007870:	2b00      	cmp	r3, #0
 8007872:	d107      	bne.n	8007884 <f_write+0x44>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	7d5b      	ldrb	r3, [r3, #21]
 8007878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800787c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <f_write+0x4a>
 8007884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007888:	e14b      	b.n	8007b22 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	7d1b      	ldrb	r3, [r3, #20]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <f_write+0x5a>
 8007896:	2307      	movs	r3, #7
 8007898:	e143      	b.n	8007b22 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	441a      	add	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	f080 812d 	bcs.w	8007b06 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	43db      	mvns	r3, r3
 80078b2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80078b4:	e127      	b.n	8007b06 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f040 80e3 	bne.w	8007a8a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	0a5b      	lsrs	r3, r3, #9
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	8952      	ldrh	r2, [r2, #10]
 80078ce:	3a01      	subs	r2, #1
 80078d0:	4013      	ands	r3, r2
 80078d2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d143      	bne.n	8007962 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10c      	bne.n	80078fc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d11a      	bne.n	8007924 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2100      	movs	r1, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fe65 	bl	80065c2 <create_chain>
 80078f8:	62b8      	str	r0, [r7, #40]	; 0x28
 80078fa:	e013      	b.n	8007924 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	4619      	mov	r1, r3
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f7fe fef1 	bl	80066f2 <clmt_clust>
 8007910:	62b8      	str	r0, [r7, #40]	; 0x28
 8007912:	e007      	b.n	8007924 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	4619      	mov	r1, r3
 800791c:	4610      	mov	r0, r2
 800791e:	f7fe fe50 	bl	80065c2 <create_chain>
 8007922:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 80f2 	beq.w	8007b10 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	2b01      	cmp	r3, #1
 8007930:	d104      	bne.n	800793c <f_write+0xfc>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2202      	movs	r2, #2
 8007936:	755a      	strb	r2, [r3, #21]
 8007938:	2302      	movs	r3, #2
 800793a:	e0f2      	b.n	8007b22 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007942:	d104      	bne.n	800794e <f_write+0x10e>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	755a      	strb	r2, [r3, #21]
 800794a:	2301      	movs	r3, #1
 800794c:	e0e9      	b.n	8007b22 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007952:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <f_write+0x122>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007960:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	7d1b      	ldrb	r3, [r3, #20]
 8007966:	b25b      	sxtb	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	da18      	bge.n	800799e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	7858      	ldrb	r0, [r3, #1]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a1a      	ldr	r2, [r3, #32]
 800797a:	2301      	movs	r3, #1
 800797c:	f7fe f948 	bl	8005c10 <disk_write>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <f_write+0x150>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2201      	movs	r2, #1
 800798a:	755a      	strb	r2, [r3, #21]
 800798c:	2301      	movs	r3, #1
 800798e:	e0c8      	b.n	8007b22 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	7d1b      	ldrb	r3, [r3, #20]
 8007994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007998:	b2da      	uxtb	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f7fe fbf3 	bl	8006192 <clust2sect>
 80079ac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d104      	bne.n	80079be <f_write+0x17e>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2202      	movs	r2, #2
 80079b8:	755a      	strb	r2, [r3, #21]
 80079ba:	2302      	movs	r3, #2
 80079bc:	e0b1      	b.n	8007b22 <f_write+0x2e2>
			sect += csect;
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	4413      	add	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	0a5b      	lsrs	r3, r3, #9
 80079ca:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d03c      	beq.n	8007a4c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	4413      	add	r3, r2
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	8952      	ldrh	r2, [r2, #10]
 80079dc:	4293      	cmp	r3, r2
 80079de:	d905      	bls.n	80079ec <f_write+0x1ac>
					cc = fs->csize - csect;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	895b      	ldrh	r3, [r3, #10]
 80079e4:	461a      	mov	r2, r3
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	7858      	ldrb	r0, [r3, #1]
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	69f9      	ldr	r1, [r7, #28]
 80079f6:	f7fe f90b 	bl	8005c10 <disk_write>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <f_write+0x1ca>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	755a      	strb	r2, [r3, #21]
 8007a06:	2301      	movs	r3, #1
 8007a08:	e08b      	b.n	8007b22 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a1a      	ldr	r2, [r3, #32]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	6a3a      	ldr	r2, [r7, #32]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d915      	bls.n	8007a44 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a1a      	ldr	r2, [r3, #32]
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	025b      	lsls	r3, r3, #9
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a30:	4619      	mov	r1, r3
 8007a32:	f7fe f98f 	bl	8005d54 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	7d1b      	ldrb	r3, [r3, #20]
 8007a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	025b      	lsls	r3, r3, #9
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007a4a:	e03f      	b.n	8007acc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d016      	beq.n	8007a84 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	699a      	ldr	r2, [r3, #24]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d210      	bcs.n	8007a84 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	7858      	ldrb	r0, [r3, #1]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	f7fe f8ae 	bl	8005bd0 <disk_read>
 8007a74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	755a      	strb	r2, [r3, #21]
 8007a80:	2301      	movs	r3, #1
 8007a82:	e04e      	b.n	8007b22 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a92:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d901      	bls.n	8007aa4 <f_write+0x264>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab2:	4413      	add	r3, r2
 8007ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab6:	69f9      	ldr	r1, [r7, #28]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fe f94b 	bl	8005d54 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	7d1b      	ldrb	r3, [r3, #20]
 8007ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	4413      	add	r3, r2
 8007ad2:	61fb      	str	r3, [r7, #28]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	441a      	add	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	619a      	str	r2, [r3, #24]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	bf38      	it	cc
 8007aec:	461a      	movcc	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	60da      	str	r2, [r3, #12]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	441a      	add	r2, r3
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f47f aed4 	bne.w	80078b6 <f_write+0x76>
 8007b0e:	e000      	b.n	8007b12 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b10:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	7d1b      	ldrb	r3, [r3, #20]
 8007b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3730      	adds	r7, #48	; 0x30
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007b42:	4b1f      	ldr	r3, [pc, #124]	; (8007bc0 <FATFS_LinkDriverEx+0x94>)
 8007b44:	7a5b      	ldrb	r3, [r3, #9]
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d131      	bne.n	8007bb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007b4c:	4b1c      	ldr	r3, [pc, #112]	; (8007bc0 <FATFS_LinkDriverEx+0x94>)
 8007b4e:	7a5b      	ldrb	r3, [r3, #9]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	4b1a      	ldr	r3, [pc, #104]	; (8007bc0 <FATFS_LinkDriverEx+0x94>)
 8007b56:	2100      	movs	r1, #0
 8007b58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007b5a:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <FATFS_LinkDriverEx+0x94>)
 8007b5c:	7a5b      	ldrb	r3, [r3, #9]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	4a17      	ldr	r2, [pc, #92]	; (8007bc0 <FATFS_LinkDriverEx+0x94>)
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007b6a:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <FATFS_LinkDriverEx+0x94>)
 8007b6c:	7a5b      	ldrb	r3, [r3, #9]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	461a      	mov	r2, r3
 8007b72:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <FATFS_LinkDriverEx+0x94>)
 8007b74:	4413      	add	r3, r2
 8007b76:	79fa      	ldrb	r2, [r7, #7]
 8007b78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007b7a:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <FATFS_LinkDriverEx+0x94>)
 8007b7c:	7a5b      	ldrb	r3, [r3, #9]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	b2d1      	uxtb	r1, r2
 8007b84:	4a0e      	ldr	r2, [pc, #56]	; (8007bc0 <FATFS_LinkDriverEx+0x94>)
 8007b86:	7251      	strb	r1, [r2, #9]
 8007b88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007b8a:	7dbb      	ldrb	r3, [r7, #22]
 8007b8c:	3330      	adds	r3, #48	; 0x30
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	3301      	adds	r3, #1
 8007b98:	223a      	movs	r2, #58	; 0x3a
 8007b9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	3302      	adds	r3, #2
 8007ba0:	222f      	movs	r2, #47	; 0x2f
 8007ba2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	3303      	adds	r3, #3
 8007ba8:	2200      	movs	r2, #0
 8007baa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	20000248 	.word	0x20000248

08007bc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007bce:	2200      	movs	r2, #0
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff ffaa 	bl	8007b2c <FATFS_LinkDriverEx>
 8007bd8:	4603      	mov	r3, r0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <__errno>:
 8007be4:	4b01      	ldr	r3, [pc, #4]	; (8007bec <__errno+0x8>)
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	2000000c 	.word	0x2000000c

08007bf0 <__libc_init_array>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	4d0d      	ldr	r5, [pc, #52]	; (8007c28 <__libc_init_array+0x38>)
 8007bf4:	4c0d      	ldr	r4, [pc, #52]	; (8007c2c <__libc_init_array+0x3c>)
 8007bf6:	1b64      	subs	r4, r4, r5
 8007bf8:	10a4      	asrs	r4, r4, #2
 8007bfa:	2600      	movs	r6, #0
 8007bfc:	42a6      	cmp	r6, r4
 8007bfe:	d109      	bne.n	8007c14 <__libc_init_array+0x24>
 8007c00:	4d0b      	ldr	r5, [pc, #44]	; (8007c30 <__libc_init_array+0x40>)
 8007c02:	4c0c      	ldr	r4, [pc, #48]	; (8007c34 <__libc_init_array+0x44>)
 8007c04:	f000 fc8e 	bl	8008524 <_init>
 8007c08:	1b64      	subs	r4, r4, r5
 8007c0a:	10a4      	asrs	r4, r4, #2
 8007c0c:	2600      	movs	r6, #0
 8007c0e:	42a6      	cmp	r6, r4
 8007c10:	d105      	bne.n	8007c1e <__libc_init_array+0x2e>
 8007c12:	bd70      	pop	{r4, r5, r6, pc}
 8007c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c18:	4798      	blx	r3
 8007c1a:	3601      	adds	r6, #1
 8007c1c:	e7ee      	b.n	8007bfc <__libc_init_array+0xc>
 8007c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c22:	4798      	blx	r3
 8007c24:	3601      	adds	r6, #1
 8007c26:	e7f2      	b.n	8007c0e <__libc_init_array+0x1e>
 8007c28:	08008688 	.word	0x08008688
 8007c2c:	08008688 	.word	0x08008688
 8007c30:	08008688 	.word	0x08008688
 8007c34:	0800868c 	.word	0x0800868c

08007c38 <memset>:
 8007c38:	4402      	add	r2, r0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d100      	bne.n	8007c42 <memset+0xa>
 8007c40:	4770      	bx	lr
 8007c42:	f803 1b01 	strb.w	r1, [r3], #1
 8007c46:	e7f9      	b.n	8007c3c <memset+0x4>

08007c48 <siprintf>:
 8007c48:	b40e      	push	{r1, r2, r3}
 8007c4a:	b500      	push	{lr}
 8007c4c:	b09c      	sub	sp, #112	; 0x70
 8007c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8007c50:	9002      	str	r0, [sp, #8]
 8007c52:	9006      	str	r0, [sp, #24]
 8007c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c58:	4809      	ldr	r0, [pc, #36]	; (8007c80 <siprintf+0x38>)
 8007c5a:	9107      	str	r1, [sp, #28]
 8007c5c:	9104      	str	r1, [sp, #16]
 8007c5e:	4909      	ldr	r1, [pc, #36]	; (8007c84 <siprintf+0x3c>)
 8007c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c64:	9105      	str	r1, [sp, #20]
 8007c66:	6800      	ldr	r0, [r0, #0]
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	a902      	add	r1, sp, #8
 8007c6c:	f000 f868 	bl	8007d40 <_svfiprintf_r>
 8007c70:	9b02      	ldr	r3, [sp, #8]
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	b01c      	add	sp, #112	; 0x70
 8007c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c7c:	b003      	add	sp, #12
 8007c7e:	4770      	bx	lr
 8007c80:	2000000c 	.word	0x2000000c
 8007c84:	ffff0208 	.word	0xffff0208

08007c88 <__ssputs_r>:
 8007c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	688e      	ldr	r6, [r1, #8]
 8007c8e:	429e      	cmp	r6, r3
 8007c90:	4682      	mov	sl, r0
 8007c92:	460c      	mov	r4, r1
 8007c94:	4690      	mov	r8, r2
 8007c96:	461f      	mov	r7, r3
 8007c98:	d838      	bhi.n	8007d0c <__ssputs_r+0x84>
 8007c9a:	898a      	ldrh	r2, [r1, #12]
 8007c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ca0:	d032      	beq.n	8007d08 <__ssputs_r+0x80>
 8007ca2:	6825      	ldr	r5, [r4, #0]
 8007ca4:	6909      	ldr	r1, [r1, #16]
 8007ca6:	eba5 0901 	sub.w	r9, r5, r1
 8007caa:	6965      	ldr	r5, [r4, #20]
 8007cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	444b      	add	r3, r9
 8007cb8:	106d      	asrs	r5, r5, #1
 8007cba:	429d      	cmp	r5, r3
 8007cbc:	bf38      	it	cc
 8007cbe:	461d      	movcc	r5, r3
 8007cc0:	0553      	lsls	r3, r2, #21
 8007cc2:	d531      	bpl.n	8007d28 <__ssputs_r+0xa0>
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f000 fb63 	bl	8008390 <_malloc_r>
 8007cca:	4606      	mov	r6, r0
 8007ccc:	b950      	cbnz	r0, 8007ce4 <__ssputs_r+0x5c>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	f8ca 3000 	str.w	r3, [sl]
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce4:	6921      	ldr	r1, [r4, #16]
 8007ce6:	464a      	mov	r2, r9
 8007ce8:	f000 fabe 	bl	8008268 <memcpy>
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf6:	81a3      	strh	r3, [r4, #12]
 8007cf8:	6126      	str	r6, [r4, #16]
 8007cfa:	6165      	str	r5, [r4, #20]
 8007cfc:	444e      	add	r6, r9
 8007cfe:	eba5 0509 	sub.w	r5, r5, r9
 8007d02:	6026      	str	r6, [r4, #0]
 8007d04:	60a5      	str	r5, [r4, #8]
 8007d06:	463e      	mov	r6, r7
 8007d08:	42be      	cmp	r6, r7
 8007d0a:	d900      	bls.n	8007d0e <__ssputs_r+0x86>
 8007d0c:	463e      	mov	r6, r7
 8007d0e:	6820      	ldr	r0, [r4, #0]
 8007d10:	4632      	mov	r2, r6
 8007d12:	4641      	mov	r1, r8
 8007d14:	f000 fab6 	bl	8008284 <memmove>
 8007d18:	68a3      	ldr	r3, [r4, #8]
 8007d1a:	1b9b      	subs	r3, r3, r6
 8007d1c:	60a3      	str	r3, [r4, #8]
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	4433      	add	r3, r6
 8007d22:	6023      	str	r3, [r4, #0]
 8007d24:	2000      	movs	r0, #0
 8007d26:	e7db      	b.n	8007ce0 <__ssputs_r+0x58>
 8007d28:	462a      	mov	r2, r5
 8007d2a:	f000 fba5 	bl	8008478 <_realloc_r>
 8007d2e:	4606      	mov	r6, r0
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d1e1      	bne.n	8007cf8 <__ssputs_r+0x70>
 8007d34:	6921      	ldr	r1, [r4, #16]
 8007d36:	4650      	mov	r0, sl
 8007d38:	f000 fabe 	bl	80082b8 <_free_r>
 8007d3c:	e7c7      	b.n	8007cce <__ssputs_r+0x46>
	...

08007d40 <_svfiprintf_r>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	4698      	mov	r8, r3
 8007d46:	898b      	ldrh	r3, [r1, #12]
 8007d48:	061b      	lsls	r3, r3, #24
 8007d4a:	b09d      	sub	sp, #116	; 0x74
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	460d      	mov	r5, r1
 8007d50:	4614      	mov	r4, r2
 8007d52:	d50e      	bpl.n	8007d72 <_svfiprintf_r+0x32>
 8007d54:	690b      	ldr	r3, [r1, #16]
 8007d56:	b963      	cbnz	r3, 8007d72 <_svfiprintf_r+0x32>
 8007d58:	2140      	movs	r1, #64	; 0x40
 8007d5a:	f000 fb19 	bl	8008390 <_malloc_r>
 8007d5e:	6028      	str	r0, [r5, #0]
 8007d60:	6128      	str	r0, [r5, #16]
 8007d62:	b920      	cbnz	r0, 8007d6e <_svfiprintf_r+0x2e>
 8007d64:	230c      	movs	r3, #12
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d6c:	e0d1      	b.n	8007f12 <_svfiprintf_r+0x1d2>
 8007d6e:	2340      	movs	r3, #64	; 0x40
 8007d70:	616b      	str	r3, [r5, #20]
 8007d72:	2300      	movs	r3, #0
 8007d74:	9309      	str	r3, [sp, #36]	; 0x24
 8007d76:	2320      	movs	r3, #32
 8007d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d80:	2330      	movs	r3, #48	; 0x30
 8007d82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f2c <_svfiprintf_r+0x1ec>
 8007d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d8a:	f04f 0901 	mov.w	r9, #1
 8007d8e:	4623      	mov	r3, r4
 8007d90:	469a      	mov	sl, r3
 8007d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d96:	b10a      	cbz	r2, 8007d9c <_svfiprintf_r+0x5c>
 8007d98:	2a25      	cmp	r2, #37	; 0x25
 8007d9a:	d1f9      	bne.n	8007d90 <_svfiprintf_r+0x50>
 8007d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007da0:	d00b      	beq.n	8007dba <_svfiprintf_r+0x7a>
 8007da2:	465b      	mov	r3, fp
 8007da4:	4622      	mov	r2, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	4638      	mov	r0, r7
 8007daa:	f7ff ff6d 	bl	8007c88 <__ssputs_r>
 8007dae:	3001      	adds	r0, #1
 8007db0:	f000 80aa 	beq.w	8007f08 <_svfiprintf_r+0x1c8>
 8007db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db6:	445a      	add	r2, fp
 8007db8:	9209      	str	r2, [sp, #36]	; 0x24
 8007dba:	f89a 3000 	ldrb.w	r3, [sl]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 80a2 	beq.w	8007f08 <_svfiprintf_r+0x1c8>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dce:	f10a 0a01 	add.w	sl, sl, #1
 8007dd2:	9304      	str	r3, [sp, #16]
 8007dd4:	9307      	str	r3, [sp, #28]
 8007dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dda:	931a      	str	r3, [sp, #104]	; 0x68
 8007ddc:	4654      	mov	r4, sl
 8007dde:	2205      	movs	r2, #5
 8007de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de4:	4851      	ldr	r0, [pc, #324]	; (8007f2c <_svfiprintf_r+0x1ec>)
 8007de6:	f7f8 fa13 	bl	8000210 <memchr>
 8007dea:	9a04      	ldr	r2, [sp, #16]
 8007dec:	b9d8      	cbnz	r0, 8007e26 <_svfiprintf_r+0xe6>
 8007dee:	06d0      	lsls	r0, r2, #27
 8007df0:	bf44      	itt	mi
 8007df2:	2320      	movmi	r3, #32
 8007df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df8:	0711      	lsls	r1, r2, #28
 8007dfa:	bf44      	itt	mi
 8007dfc:	232b      	movmi	r3, #43	; 0x2b
 8007dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e02:	f89a 3000 	ldrb.w	r3, [sl]
 8007e06:	2b2a      	cmp	r3, #42	; 0x2a
 8007e08:	d015      	beq.n	8007e36 <_svfiprintf_r+0xf6>
 8007e0a:	9a07      	ldr	r2, [sp, #28]
 8007e0c:	4654      	mov	r4, sl
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f04f 0c0a 	mov.w	ip, #10
 8007e14:	4621      	mov	r1, r4
 8007e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e1a:	3b30      	subs	r3, #48	; 0x30
 8007e1c:	2b09      	cmp	r3, #9
 8007e1e:	d94e      	bls.n	8007ebe <_svfiprintf_r+0x17e>
 8007e20:	b1b0      	cbz	r0, 8007e50 <_svfiprintf_r+0x110>
 8007e22:	9207      	str	r2, [sp, #28]
 8007e24:	e014      	b.n	8007e50 <_svfiprintf_r+0x110>
 8007e26:	eba0 0308 	sub.w	r3, r0, r8
 8007e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	9304      	str	r3, [sp, #16]
 8007e32:	46a2      	mov	sl, r4
 8007e34:	e7d2      	b.n	8007ddc <_svfiprintf_r+0x9c>
 8007e36:	9b03      	ldr	r3, [sp, #12]
 8007e38:	1d19      	adds	r1, r3, #4
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	9103      	str	r1, [sp, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bfbb      	ittet	lt
 8007e42:	425b      	neglt	r3, r3
 8007e44:	f042 0202 	orrlt.w	r2, r2, #2
 8007e48:	9307      	strge	r3, [sp, #28]
 8007e4a:	9307      	strlt	r3, [sp, #28]
 8007e4c:	bfb8      	it	lt
 8007e4e:	9204      	strlt	r2, [sp, #16]
 8007e50:	7823      	ldrb	r3, [r4, #0]
 8007e52:	2b2e      	cmp	r3, #46	; 0x2e
 8007e54:	d10c      	bne.n	8007e70 <_svfiprintf_r+0x130>
 8007e56:	7863      	ldrb	r3, [r4, #1]
 8007e58:	2b2a      	cmp	r3, #42	; 0x2a
 8007e5a:	d135      	bne.n	8007ec8 <_svfiprintf_r+0x188>
 8007e5c:	9b03      	ldr	r3, [sp, #12]
 8007e5e:	1d1a      	adds	r2, r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	9203      	str	r2, [sp, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	bfb8      	it	lt
 8007e68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e6c:	3402      	adds	r4, #2
 8007e6e:	9305      	str	r3, [sp, #20]
 8007e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f3c <_svfiprintf_r+0x1fc>
 8007e74:	7821      	ldrb	r1, [r4, #0]
 8007e76:	2203      	movs	r2, #3
 8007e78:	4650      	mov	r0, sl
 8007e7a:	f7f8 f9c9 	bl	8000210 <memchr>
 8007e7e:	b140      	cbz	r0, 8007e92 <_svfiprintf_r+0x152>
 8007e80:	2340      	movs	r3, #64	; 0x40
 8007e82:	eba0 000a 	sub.w	r0, r0, sl
 8007e86:	fa03 f000 	lsl.w	r0, r3, r0
 8007e8a:	9b04      	ldr	r3, [sp, #16]
 8007e8c:	4303      	orrs	r3, r0
 8007e8e:	3401      	adds	r4, #1
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e96:	4826      	ldr	r0, [pc, #152]	; (8007f30 <_svfiprintf_r+0x1f0>)
 8007e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e9c:	2206      	movs	r2, #6
 8007e9e:	f7f8 f9b7 	bl	8000210 <memchr>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d038      	beq.n	8007f18 <_svfiprintf_r+0x1d8>
 8007ea6:	4b23      	ldr	r3, [pc, #140]	; (8007f34 <_svfiprintf_r+0x1f4>)
 8007ea8:	bb1b      	cbnz	r3, 8007ef2 <_svfiprintf_r+0x1b2>
 8007eaa:	9b03      	ldr	r3, [sp, #12]
 8007eac:	3307      	adds	r3, #7
 8007eae:	f023 0307 	bic.w	r3, r3, #7
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	9303      	str	r3, [sp, #12]
 8007eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb8:	4433      	add	r3, r6
 8007eba:	9309      	str	r3, [sp, #36]	; 0x24
 8007ebc:	e767      	b.n	8007d8e <_svfiprintf_r+0x4e>
 8007ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	2001      	movs	r0, #1
 8007ec6:	e7a5      	b.n	8007e14 <_svfiprintf_r+0xd4>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	3401      	adds	r4, #1
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	f04f 0c0a 	mov.w	ip, #10
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eda:	3a30      	subs	r2, #48	; 0x30
 8007edc:	2a09      	cmp	r2, #9
 8007ede:	d903      	bls.n	8007ee8 <_svfiprintf_r+0x1a8>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d0c5      	beq.n	8007e70 <_svfiprintf_r+0x130>
 8007ee4:	9105      	str	r1, [sp, #20]
 8007ee6:	e7c3      	b.n	8007e70 <_svfiprintf_r+0x130>
 8007ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eec:	4604      	mov	r4, r0
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e7f0      	b.n	8007ed4 <_svfiprintf_r+0x194>
 8007ef2:	ab03      	add	r3, sp, #12
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <_svfiprintf_r+0x1f8>)
 8007efa:	a904      	add	r1, sp, #16
 8007efc:	4638      	mov	r0, r7
 8007efe:	f3af 8000 	nop.w
 8007f02:	1c42      	adds	r2, r0, #1
 8007f04:	4606      	mov	r6, r0
 8007f06:	d1d6      	bne.n	8007eb6 <_svfiprintf_r+0x176>
 8007f08:	89ab      	ldrh	r3, [r5, #12]
 8007f0a:	065b      	lsls	r3, r3, #25
 8007f0c:	f53f af2c 	bmi.w	8007d68 <_svfiprintf_r+0x28>
 8007f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f12:	b01d      	add	sp, #116	; 0x74
 8007f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f18:	ab03      	add	r3, sp, #12
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	462a      	mov	r2, r5
 8007f1e:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <_svfiprintf_r+0x1f8>)
 8007f20:	a904      	add	r1, sp, #16
 8007f22:	4638      	mov	r0, r7
 8007f24:	f000 f87a 	bl	800801c <_printf_i>
 8007f28:	e7eb      	b.n	8007f02 <_svfiprintf_r+0x1c2>
 8007f2a:	bf00      	nop
 8007f2c:	0800864c 	.word	0x0800864c
 8007f30:	08008656 	.word	0x08008656
 8007f34:	00000000 	.word	0x00000000
 8007f38:	08007c89 	.word	0x08007c89
 8007f3c:	08008652 	.word	0x08008652

08007f40 <_printf_common>:
 8007f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f44:	4616      	mov	r6, r2
 8007f46:	4699      	mov	r9, r3
 8007f48:	688a      	ldr	r2, [r1, #8]
 8007f4a:	690b      	ldr	r3, [r1, #16]
 8007f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f50:	4293      	cmp	r3, r2
 8007f52:	bfb8      	it	lt
 8007f54:	4613      	movlt	r3, r2
 8007f56:	6033      	str	r3, [r6, #0]
 8007f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	b10a      	cbz	r2, 8007f66 <_printf_common+0x26>
 8007f62:	3301      	adds	r3, #1
 8007f64:	6033      	str	r3, [r6, #0]
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	0699      	lsls	r1, r3, #26
 8007f6a:	bf42      	ittt	mi
 8007f6c:	6833      	ldrmi	r3, [r6, #0]
 8007f6e:	3302      	addmi	r3, #2
 8007f70:	6033      	strmi	r3, [r6, #0]
 8007f72:	6825      	ldr	r5, [r4, #0]
 8007f74:	f015 0506 	ands.w	r5, r5, #6
 8007f78:	d106      	bne.n	8007f88 <_printf_common+0x48>
 8007f7a:	f104 0a19 	add.w	sl, r4, #25
 8007f7e:	68e3      	ldr	r3, [r4, #12]
 8007f80:	6832      	ldr	r2, [r6, #0]
 8007f82:	1a9b      	subs	r3, r3, r2
 8007f84:	42ab      	cmp	r3, r5
 8007f86:	dc26      	bgt.n	8007fd6 <_printf_common+0x96>
 8007f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f8c:	1e13      	subs	r3, r2, #0
 8007f8e:	6822      	ldr	r2, [r4, #0]
 8007f90:	bf18      	it	ne
 8007f92:	2301      	movne	r3, #1
 8007f94:	0692      	lsls	r2, r2, #26
 8007f96:	d42b      	bmi.n	8007ff0 <_printf_common+0xb0>
 8007f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	47c0      	blx	r8
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d01e      	beq.n	8007fe4 <_printf_common+0xa4>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	68e5      	ldr	r5, [r4, #12]
 8007faa:	6832      	ldr	r2, [r6, #0]
 8007fac:	f003 0306 	and.w	r3, r3, #6
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	bf08      	it	eq
 8007fb4:	1aad      	subeq	r5, r5, r2
 8007fb6:	68a3      	ldr	r3, [r4, #8]
 8007fb8:	6922      	ldr	r2, [r4, #16]
 8007fba:	bf0c      	ite	eq
 8007fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fc0:	2500      	movne	r5, #0
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	bfc4      	itt	gt
 8007fc6:	1a9b      	subgt	r3, r3, r2
 8007fc8:	18ed      	addgt	r5, r5, r3
 8007fca:	2600      	movs	r6, #0
 8007fcc:	341a      	adds	r4, #26
 8007fce:	42b5      	cmp	r5, r6
 8007fd0:	d11a      	bne.n	8008008 <_printf_common+0xc8>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e008      	b.n	8007fe8 <_printf_common+0xa8>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4652      	mov	r2, sl
 8007fda:	4649      	mov	r1, r9
 8007fdc:	4638      	mov	r0, r7
 8007fde:	47c0      	blx	r8
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	d103      	bne.n	8007fec <_printf_common+0xac>
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fec:	3501      	adds	r5, #1
 8007fee:	e7c6      	b.n	8007f7e <_printf_common+0x3e>
 8007ff0:	18e1      	adds	r1, r4, r3
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	2030      	movs	r0, #48	; 0x30
 8007ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ffa:	4422      	add	r2, r4
 8007ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008004:	3302      	adds	r3, #2
 8008006:	e7c7      	b.n	8007f98 <_printf_common+0x58>
 8008008:	2301      	movs	r3, #1
 800800a:	4622      	mov	r2, r4
 800800c:	4649      	mov	r1, r9
 800800e:	4638      	mov	r0, r7
 8008010:	47c0      	blx	r8
 8008012:	3001      	adds	r0, #1
 8008014:	d0e6      	beq.n	8007fe4 <_printf_common+0xa4>
 8008016:	3601      	adds	r6, #1
 8008018:	e7d9      	b.n	8007fce <_printf_common+0x8e>
	...

0800801c <_printf_i>:
 800801c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	7e0f      	ldrb	r7, [r1, #24]
 8008022:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008024:	2f78      	cmp	r7, #120	; 0x78
 8008026:	4691      	mov	r9, r2
 8008028:	4680      	mov	r8, r0
 800802a:	460c      	mov	r4, r1
 800802c:	469a      	mov	sl, r3
 800802e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008032:	d807      	bhi.n	8008044 <_printf_i+0x28>
 8008034:	2f62      	cmp	r7, #98	; 0x62
 8008036:	d80a      	bhi.n	800804e <_printf_i+0x32>
 8008038:	2f00      	cmp	r7, #0
 800803a:	f000 80d8 	beq.w	80081ee <_printf_i+0x1d2>
 800803e:	2f58      	cmp	r7, #88	; 0x58
 8008040:	f000 80a3 	beq.w	800818a <_printf_i+0x16e>
 8008044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800804c:	e03a      	b.n	80080c4 <_printf_i+0xa8>
 800804e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008052:	2b15      	cmp	r3, #21
 8008054:	d8f6      	bhi.n	8008044 <_printf_i+0x28>
 8008056:	a101      	add	r1, pc, #4	; (adr r1, 800805c <_printf_i+0x40>)
 8008058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800805c:	080080b5 	.word	0x080080b5
 8008060:	080080c9 	.word	0x080080c9
 8008064:	08008045 	.word	0x08008045
 8008068:	08008045 	.word	0x08008045
 800806c:	08008045 	.word	0x08008045
 8008070:	08008045 	.word	0x08008045
 8008074:	080080c9 	.word	0x080080c9
 8008078:	08008045 	.word	0x08008045
 800807c:	08008045 	.word	0x08008045
 8008080:	08008045 	.word	0x08008045
 8008084:	08008045 	.word	0x08008045
 8008088:	080081d5 	.word	0x080081d5
 800808c:	080080f9 	.word	0x080080f9
 8008090:	080081b7 	.word	0x080081b7
 8008094:	08008045 	.word	0x08008045
 8008098:	08008045 	.word	0x08008045
 800809c:	080081f7 	.word	0x080081f7
 80080a0:	08008045 	.word	0x08008045
 80080a4:	080080f9 	.word	0x080080f9
 80080a8:	08008045 	.word	0x08008045
 80080ac:	08008045 	.word	0x08008045
 80080b0:	080081bf 	.word	0x080081bf
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	1d1a      	adds	r2, r3, #4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	602a      	str	r2, [r5, #0]
 80080bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080c4:	2301      	movs	r3, #1
 80080c6:	e0a3      	b.n	8008210 <_printf_i+0x1f4>
 80080c8:	6820      	ldr	r0, [r4, #0]
 80080ca:	6829      	ldr	r1, [r5, #0]
 80080cc:	0606      	lsls	r6, r0, #24
 80080ce:	f101 0304 	add.w	r3, r1, #4
 80080d2:	d50a      	bpl.n	80080ea <_printf_i+0xce>
 80080d4:	680e      	ldr	r6, [r1, #0]
 80080d6:	602b      	str	r3, [r5, #0]
 80080d8:	2e00      	cmp	r6, #0
 80080da:	da03      	bge.n	80080e4 <_printf_i+0xc8>
 80080dc:	232d      	movs	r3, #45	; 0x2d
 80080de:	4276      	negs	r6, r6
 80080e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e4:	485e      	ldr	r0, [pc, #376]	; (8008260 <_printf_i+0x244>)
 80080e6:	230a      	movs	r3, #10
 80080e8:	e019      	b.n	800811e <_printf_i+0x102>
 80080ea:	680e      	ldr	r6, [r1, #0]
 80080ec:	602b      	str	r3, [r5, #0]
 80080ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080f2:	bf18      	it	ne
 80080f4:	b236      	sxthne	r6, r6
 80080f6:	e7ef      	b.n	80080d8 <_printf_i+0xbc>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	6820      	ldr	r0, [r4, #0]
 80080fc:	1d19      	adds	r1, r3, #4
 80080fe:	6029      	str	r1, [r5, #0]
 8008100:	0601      	lsls	r1, r0, #24
 8008102:	d501      	bpl.n	8008108 <_printf_i+0xec>
 8008104:	681e      	ldr	r6, [r3, #0]
 8008106:	e002      	b.n	800810e <_printf_i+0xf2>
 8008108:	0646      	lsls	r6, r0, #25
 800810a:	d5fb      	bpl.n	8008104 <_printf_i+0xe8>
 800810c:	881e      	ldrh	r6, [r3, #0]
 800810e:	4854      	ldr	r0, [pc, #336]	; (8008260 <_printf_i+0x244>)
 8008110:	2f6f      	cmp	r7, #111	; 0x6f
 8008112:	bf0c      	ite	eq
 8008114:	2308      	moveq	r3, #8
 8008116:	230a      	movne	r3, #10
 8008118:	2100      	movs	r1, #0
 800811a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800811e:	6865      	ldr	r5, [r4, #4]
 8008120:	60a5      	str	r5, [r4, #8]
 8008122:	2d00      	cmp	r5, #0
 8008124:	bfa2      	ittt	ge
 8008126:	6821      	ldrge	r1, [r4, #0]
 8008128:	f021 0104 	bicge.w	r1, r1, #4
 800812c:	6021      	strge	r1, [r4, #0]
 800812e:	b90e      	cbnz	r6, 8008134 <_printf_i+0x118>
 8008130:	2d00      	cmp	r5, #0
 8008132:	d04d      	beq.n	80081d0 <_printf_i+0x1b4>
 8008134:	4615      	mov	r5, r2
 8008136:	fbb6 f1f3 	udiv	r1, r6, r3
 800813a:	fb03 6711 	mls	r7, r3, r1, r6
 800813e:	5dc7      	ldrb	r7, [r0, r7]
 8008140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008144:	4637      	mov	r7, r6
 8008146:	42bb      	cmp	r3, r7
 8008148:	460e      	mov	r6, r1
 800814a:	d9f4      	bls.n	8008136 <_printf_i+0x11a>
 800814c:	2b08      	cmp	r3, #8
 800814e:	d10b      	bne.n	8008168 <_printf_i+0x14c>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	07de      	lsls	r6, r3, #31
 8008154:	d508      	bpl.n	8008168 <_printf_i+0x14c>
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	6861      	ldr	r1, [r4, #4]
 800815a:	4299      	cmp	r1, r3
 800815c:	bfde      	ittt	le
 800815e:	2330      	movle	r3, #48	; 0x30
 8008160:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008164:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008168:	1b52      	subs	r2, r2, r5
 800816a:	6122      	str	r2, [r4, #16]
 800816c:	f8cd a000 	str.w	sl, [sp]
 8008170:	464b      	mov	r3, r9
 8008172:	aa03      	add	r2, sp, #12
 8008174:	4621      	mov	r1, r4
 8008176:	4640      	mov	r0, r8
 8008178:	f7ff fee2 	bl	8007f40 <_printf_common>
 800817c:	3001      	adds	r0, #1
 800817e:	d14c      	bne.n	800821a <_printf_i+0x1fe>
 8008180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008184:	b004      	add	sp, #16
 8008186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818a:	4835      	ldr	r0, [pc, #212]	; (8008260 <_printf_i+0x244>)
 800818c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008190:	6829      	ldr	r1, [r5, #0]
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	f851 6b04 	ldr.w	r6, [r1], #4
 8008198:	6029      	str	r1, [r5, #0]
 800819a:	061d      	lsls	r5, r3, #24
 800819c:	d514      	bpl.n	80081c8 <_printf_i+0x1ac>
 800819e:	07df      	lsls	r7, r3, #31
 80081a0:	bf44      	itt	mi
 80081a2:	f043 0320 	orrmi.w	r3, r3, #32
 80081a6:	6023      	strmi	r3, [r4, #0]
 80081a8:	b91e      	cbnz	r6, 80081b2 <_printf_i+0x196>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	f023 0320 	bic.w	r3, r3, #32
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	2310      	movs	r3, #16
 80081b4:	e7b0      	b.n	8008118 <_printf_i+0xfc>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	f043 0320 	orr.w	r3, r3, #32
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	2378      	movs	r3, #120	; 0x78
 80081c0:	4828      	ldr	r0, [pc, #160]	; (8008264 <_printf_i+0x248>)
 80081c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081c6:	e7e3      	b.n	8008190 <_printf_i+0x174>
 80081c8:	0659      	lsls	r1, r3, #25
 80081ca:	bf48      	it	mi
 80081cc:	b2b6      	uxthmi	r6, r6
 80081ce:	e7e6      	b.n	800819e <_printf_i+0x182>
 80081d0:	4615      	mov	r5, r2
 80081d2:	e7bb      	b.n	800814c <_printf_i+0x130>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	6826      	ldr	r6, [r4, #0]
 80081d8:	6961      	ldr	r1, [r4, #20]
 80081da:	1d18      	adds	r0, r3, #4
 80081dc:	6028      	str	r0, [r5, #0]
 80081de:	0635      	lsls	r5, r6, #24
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	d501      	bpl.n	80081e8 <_printf_i+0x1cc>
 80081e4:	6019      	str	r1, [r3, #0]
 80081e6:	e002      	b.n	80081ee <_printf_i+0x1d2>
 80081e8:	0670      	lsls	r0, r6, #25
 80081ea:	d5fb      	bpl.n	80081e4 <_printf_i+0x1c8>
 80081ec:	8019      	strh	r1, [r3, #0]
 80081ee:	2300      	movs	r3, #0
 80081f0:	6123      	str	r3, [r4, #16]
 80081f2:	4615      	mov	r5, r2
 80081f4:	e7ba      	b.n	800816c <_printf_i+0x150>
 80081f6:	682b      	ldr	r3, [r5, #0]
 80081f8:	1d1a      	adds	r2, r3, #4
 80081fa:	602a      	str	r2, [r5, #0]
 80081fc:	681d      	ldr	r5, [r3, #0]
 80081fe:	6862      	ldr	r2, [r4, #4]
 8008200:	2100      	movs	r1, #0
 8008202:	4628      	mov	r0, r5
 8008204:	f7f8 f804 	bl	8000210 <memchr>
 8008208:	b108      	cbz	r0, 800820e <_printf_i+0x1f2>
 800820a:	1b40      	subs	r0, r0, r5
 800820c:	6060      	str	r0, [r4, #4]
 800820e:	6863      	ldr	r3, [r4, #4]
 8008210:	6123      	str	r3, [r4, #16]
 8008212:	2300      	movs	r3, #0
 8008214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008218:	e7a8      	b.n	800816c <_printf_i+0x150>
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	462a      	mov	r2, r5
 800821e:	4649      	mov	r1, r9
 8008220:	4640      	mov	r0, r8
 8008222:	47d0      	blx	sl
 8008224:	3001      	adds	r0, #1
 8008226:	d0ab      	beq.n	8008180 <_printf_i+0x164>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	079b      	lsls	r3, r3, #30
 800822c:	d413      	bmi.n	8008256 <_printf_i+0x23a>
 800822e:	68e0      	ldr	r0, [r4, #12]
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	4298      	cmp	r0, r3
 8008234:	bfb8      	it	lt
 8008236:	4618      	movlt	r0, r3
 8008238:	e7a4      	b.n	8008184 <_printf_i+0x168>
 800823a:	2301      	movs	r3, #1
 800823c:	4632      	mov	r2, r6
 800823e:	4649      	mov	r1, r9
 8008240:	4640      	mov	r0, r8
 8008242:	47d0      	blx	sl
 8008244:	3001      	adds	r0, #1
 8008246:	d09b      	beq.n	8008180 <_printf_i+0x164>
 8008248:	3501      	adds	r5, #1
 800824a:	68e3      	ldr	r3, [r4, #12]
 800824c:	9903      	ldr	r1, [sp, #12]
 800824e:	1a5b      	subs	r3, r3, r1
 8008250:	42ab      	cmp	r3, r5
 8008252:	dcf2      	bgt.n	800823a <_printf_i+0x21e>
 8008254:	e7eb      	b.n	800822e <_printf_i+0x212>
 8008256:	2500      	movs	r5, #0
 8008258:	f104 0619 	add.w	r6, r4, #25
 800825c:	e7f5      	b.n	800824a <_printf_i+0x22e>
 800825e:	bf00      	nop
 8008260:	0800865d 	.word	0x0800865d
 8008264:	0800866e 	.word	0x0800866e

08008268 <memcpy>:
 8008268:	440a      	add	r2, r1
 800826a:	4291      	cmp	r1, r2
 800826c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008270:	d100      	bne.n	8008274 <memcpy+0xc>
 8008272:	4770      	bx	lr
 8008274:	b510      	push	{r4, lr}
 8008276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800827a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800827e:	4291      	cmp	r1, r2
 8008280:	d1f9      	bne.n	8008276 <memcpy+0xe>
 8008282:	bd10      	pop	{r4, pc}

08008284 <memmove>:
 8008284:	4288      	cmp	r0, r1
 8008286:	b510      	push	{r4, lr}
 8008288:	eb01 0402 	add.w	r4, r1, r2
 800828c:	d902      	bls.n	8008294 <memmove+0x10>
 800828e:	4284      	cmp	r4, r0
 8008290:	4623      	mov	r3, r4
 8008292:	d807      	bhi.n	80082a4 <memmove+0x20>
 8008294:	1e43      	subs	r3, r0, #1
 8008296:	42a1      	cmp	r1, r4
 8008298:	d008      	beq.n	80082ac <memmove+0x28>
 800829a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800829e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082a2:	e7f8      	b.n	8008296 <memmove+0x12>
 80082a4:	4402      	add	r2, r0
 80082a6:	4601      	mov	r1, r0
 80082a8:	428a      	cmp	r2, r1
 80082aa:	d100      	bne.n	80082ae <memmove+0x2a>
 80082ac:	bd10      	pop	{r4, pc}
 80082ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082b6:	e7f7      	b.n	80082a8 <memmove+0x24>

080082b8 <_free_r>:
 80082b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ba:	2900      	cmp	r1, #0
 80082bc:	d044      	beq.n	8008348 <_free_r+0x90>
 80082be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082c2:	9001      	str	r0, [sp, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f1a1 0404 	sub.w	r4, r1, #4
 80082ca:	bfb8      	it	lt
 80082cc:	18e4      	addlt	r4, r4, r3
 80082ce:	f000 f913 	bl	80084f8 <__malloc_lock>
 80082d2:	4a1e      	ldr	r2, [pc, #120]	; (800834c <_free_r+0x94>)
 80082d4:	9801      	ldr	r0, [sp, #4]
 80082d6:	6813      	ldr	r3, [r2, #0]
 80082d8:	b933      	cbnz	r3, 80082e8 <_free_r+0x30>
 80082da:	6063      	str	r3, [r4, #4]
 80082dc:	6014      	str	r4, [r2, #0]
 80082de:	b003      	add	sp, #12
 80082e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082e4:	f000 b90e 	b.w	8008504 <__malloc_unlock>
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	d908      	bls.n	80082fe <_free_r+0x46>
 80082ec:	6825      	ldr	r5, [r4, #0]
 80082ee:	1961      	adds	r1, r4, r5
 80082f0:	428b      	cmp	r3, r1
 80082f2:	bf01      	itttt	eq
 80082f4:	6819      	ldreq	r1, [r3, #0]
 80082f6:	685b      	ldreq	r3, [r3, #4]
 80082f8:	1949      	addeq	r1, r1, r5
 80082fa:	6021      	streq	r1, [r4, #0]
 80082fc:	e7ed      	b.n	80082da <_free_r+0x22>
 80082fe:	461a      	mov	r2, r3
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	b10b      	cbz	r3, 8008308 <_free_r+0x50>
 8008304:	42a3      	cmp	r3, r4
 8008306:	d9fa      	bls.n	80082fe <_free_r+0x46>
 8008308:	6811      	ldr	r1, [r2, #0]
 800830a:	1855      	adds	r5, r2, r1
 800830c:	42a5      	cmp	r5, r4
 800830e:	d10b      	bne.n	8008328 <_free_r+0x70>
 8008310:	6824      	ldr	r4, [r4, #0]
 8008312:	4421      	add	r1, r4
 8008314:	1854      	adds	r4, r2, r1
 8008316:	42a3      	cmp	r3, r4
 8008318:	6011      	str	r1, [r2, #0]
 800831a:	d1e0      	bne.n	80082de <_free_r+0x26>
 800831c:	681c      	ldr	r4, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	6053      	str	r3, [r2, #4]
 8008322:	4421      	add	r1, r4
 8008324:	6011      	str	r1, [r2, #0]
 8008326:	e7da      	b.n	80082de <_free_r+0x26>
 8008328:	d902      	bls.n	8008330 <_free_r+0x78>
 800832a:	230c      	movs	r3, #12
 800832c:	6003      	str	r3, [r0, #0]
 800832e:	e7d6      	b.n	80082de <_free_r+0x26>
 8008330:	6825      	ldr	r5, [r4, #0]
 8008332:	1961      	adds	r1, r4, r5
 8008334:	428b      	cmp	r3, r1
 8008336:	bf04      	itt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	6063      	str	r3, [r4, #4]
 800833e:	bf04      	itt	eq
 8008340:	1949      	addeq	r1, r1, r5
 8008342:	6021      	streq	r1, [r4, #0]
 8008344:	6054      	str	r4, [r2, #4]
 8008346:	e7ca      	b.n	80082de <_free_r+0x26>
 8008348:	b003      	add	sp, #12
 800834a:	bd30      	pop	{r4, r5, pc}
 800834c:	20000254 	.word	0x20000254

08008350 <sbrk_aligned>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	4e0e      	ldr	r6, [pc, #56]	; (800838c <sbrk_aligned+0x3c>)
 8008354:	460c      	mov	r4, r1
 8008356:	6831      	ldr	r1, [r6, #0]
 8008358:	4605      	mov	r5, r0
 800835a:	b911      	cbnz	r1, 8008362 <sbrk_aligned+0x12>
 800835c:	f000 f8bc 	bl	80084d8 <_sbrk_r>
 8008360:	6030      	str	r0, [r6, #0]
 8008362:	4621      	mov	r1, r4
 8008364:	4628      	mov	r0, r5
 8008366:	f000 f8b7 	bl	80084d8 <_sbrk_r>
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	d00a      	beq.n	8008384 <sbrk_aligned+0x34>
 800836e:	1cc4      	adds	r4, r0, #3
 8008370:	f024 0403 	bic.w	r4, r4, #3
 8008374:	42a0      	cmp	r0, r4
 8008376:	d007      	beq.n	8008388 <sbrk_aligned+0x38>
 8008378:	1a21      	subs	r1, r4, r0
 800837a:	4628      	mov	r0, r5
 800837c:	f000 f8ac 	bl	80084d8 <_sbrk_r>
 8008380:	3001      	adds	r0, #1
 8008382:	d101      	bne.n	8008388 <sbrk_aligned+0x38>
 8008384:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008388:	4620      	mov	r0, r4
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	20000258 	.word	0x20000258

08008390 <_malloc_r>:
 8008390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008394:	1ccd      	adds	r5, r1, #3
 8008396:	f025 0503 	bic.w	r5, r5, #3
 800839a:	3508      	adds	r5, #8
 800839c:	2d0c      	cmp	r5, #12
 800839e:	bf38      	it	cc
 80083a0:	250c      	movcc	r5, #12
 80083a2:	2d00      	cmp	r5, #0
 80083a4:	4607      	mov	r7, r0
 80083a6:	db01      	blt.n	80083ac <_malloc_r+0x1c>
 80083a8:	42a9      	cmp	r1, r5
 80083aa:	d905      	bls.n	80083b8 <_malloc_r+0x28>
 80083ac:	230c      	movs	r3, #12
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	2600      	movs	r6, #0
 80083b2:	4630      	mov	r0, r6
 80083b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b8:	4e2e      	ldr	r6, [pc, #184]	; (8008474 <_malloc_r+0xe4>)
 80083ba:	f000 f89d 	bl	80084f8 <__malloc_lock>
 80083be:	6833      	ldr	r3, [r6, #0]
 80083c0:	461c      	mov	r4, r3
 80083c2:	bb34      	cbnz	r4, 8008412 <_malloc_r+0x82>
 80083c4:	4629      	mov	r1, r5
 80083c6:	4638      	mov	r0, r7
 80083c8:	f7ff ffc2 	bl	8008350 <sbrk_aligned>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	4604      	mov	r4, r0
 80083d0:	d14d      	bne.n	800846e <_malloc_r+0xde>
 80083d2:	6834      	ldr	r4, [r6, #0]
 80083d4:	4626      	mov	r6, r4
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	d140      	bne.n	800845c <_malloc_r+0xcc>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	4631      	mov	r1, r6
 80083de:	4638      	mov	r0, r7
 80083e0:	eb04 0803 	add.w	r8, r4, r3
 80083e4:	f000 f878 	bl	80084d8 <_sbrk_r>
 80083e8:	4580      	cmp	r8, r0
 80083ea:	d13a      	bne.n	8008462 <_malloc_r+0xd2>
 80083ec:	6821      	ldr	r1, [r4, #0]
 80083ee:	3503      	adds	r5, #3
 80083f0:	1a6d      	subs	r5, r5, r1
 80083f2:	f025 0503 	bic.w	r5, r5, #3
 80083f6:	3508      	adds	r5, #8
 80083f8:	2d0c      	cmp	r5, #12
 80083fa:	bf38      	it	cc
 80083fc:	250c      	movcc	r5, #12
 80083fe:	4629      	mov	r1, r5
 8008400:	4638      	mov	r0, r7
 8008402:	f7ff ffa5 	bl	8008350 <sbrk_aligned>
 8008406:	3001      	adds	r0, #1
 8008408:	d02b      	beq.n	8008462 <_malloc_r+0xd2>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	442b      	add	r3, r5
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	e00e      	b.n	8008430 <_malloc_r+0xa0>
 8008412:	6822      	ldr	r2, [r4, #0]
 8008414:	1b52      	subs	r2, r2, r5
 8008416:	d41e      	bmi.n	8008456 <_malloc_r+0xc6>
 8008418:	2a0b      	cmp	r2, #11
 800841a:	d916      	bls.n	800844a <_malloc_r+0xba>
 800841c:	1961      	adds	r1, r4, r5
 800841e:	42a3      	cmp	r3, r4
 8008420:	6025      	str	r5, [r4, #0]
 8008422:	bf18      	it	ne
 8008424:	6059      	strne	r1, [r3, #4]
 8008426:	6863      	ldr	r3, [r4, #4]
 8008428:	bf08      	it	eq
 800842a:	6031      	streq	r1, [r6, #0]
 800842c:	5162      	str	r2, [r4, r5]
 800842e:	604b      	str	r3, [r1, #4]
 8008430:	4638      	mov	r0, r7
 8008432:	f104 060b 	add.w	r6, r4, #11
 8008436:	f000 f865 	bl	8008504 <__malloc_unlock>
 800843a:	f026 0607 	bic.w	r6, r6, #7
 800843e:	1d23      	adds	r3, r4, #4
 8008440:	1af2      	subs	r2, r6, r3
 8008442:	d0b6      	beq.n	80083b2 <_malloc_r+0x22>
 8008444:	1b9b      	subs	r3, r3, r6
 8008446:	50a3      	str	r3, [r4, r2]
 8008448:	e7b3      	b.n	80083b2 <_malloc_r+0x22>
 800844a:	6862      	ldr	r2, [r4, #4]
 800844c:	42a3      	cmp	r3, r4
 800844e:	bf0c      	ite	eq
 8008450:	6032      	streq	r2, [r6, #0]
 8008452:	605a      	strne	r2, [r3, #4]
 8008454:	e7ec      	b.n	8008430 <_malloc_r+0xa0>
 8008456:	4623      	mov	r3, r4
 8008458:	6864      	ldr	r4, [r4, #4]
 800845a:	e7b2      	b.n	80083c2 <_malloc_r+0x32>
 800845c:	4634      	mov	r4, r6
 800845e:	6876      	ldr	r6, [r6, #4]
 8008460:	e7b9      	b.n	80083d6 <_malloc_r+0x46>
 8008462:	230c      	movs	r3, #12
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	4638      	mov	r0, r7
 8008468:	f000 f84c 	bl	8008504 <__malloc_unlock>
 800846c:	e7a1      	b.n	80083b2 <_malloc_r+0x22>
 800846e:	6025      	str	r5, [r4, #0]
 8008470:	e7de      	b.n	8008430 <_malloc_r+0xa0>
 8008472:	bf00      	nop
 8008474:	20000254 	.word	0x20000254

08008478 <_realloc_r>:
 8008478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800847c:	4680      	mov	r8, r0
 800847e:	4614      	mov	r4, r2
 8008480:	460e      	mov	r6, r1
 8008482:	b921      	cbnz	r1, 800848e <_realloc_r+0x16>
 8008484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008488:	4611      	mov	r1, r2
 800848a:	f7ff bf81 	b.w	8008390 <_malloc_r>
 800848e:	b92a      	cbnz	r2, 800849c <_realloc_r+0x24>
 8008490:	f7ff ff12 	bl	80082b8 <_free_r>
 8008494:	4625      	mov	r5, r4
 8008496:	4628      	mov	r0, r5
 8008498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800849c:	f000 f838 	bl	8008510 <_malloc_usable_size_r>
 80084a0:	4284      	cmp	r4, r0
 80084a2:	4607      	mov	r7, r0
 80084a4:	d802      	bhi.n	80084ac <_realloc_r+0x34>
 80084a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084aa:	d812      	bhi.n	80084d2 <_realloc_r+0x5a>
 80084ac:	4621      	mov	r1, r4
 80084ae:	4640      	mov	r0, r8
 80084b0:	f7ff ff6e 	bl	8008390 <_malloc_r>
 80084b4:	4605      	mov	r5, r0
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d0ed      	beq.n	8008496 <_realloc_r+0x1e>
 80084ba:	42bc      	cmp	r4, r7
 80084bc:	4622      	mov	r2, r4
 80084be:	4631      	mov	r1, r6
 80084c0:	bf28      	it	cs
 80084c2:	463a      	movcs	r2, r7
 80084c4:	f7ff fed0 	bl	8008268 <memcpy>
 80084c8:	4631      	mov	r1, r6
 80084ca:	4640      	mov	r0, r8
 80084cc:	f7ff fef4 	bl	80082b8 <_free_r>
 80084d0:	e7e1      	b.n	8008496 <_realloc_r+0x1e>
 80084d2:	4635      	mov	r5, r6
 80084d4:	e7df      	b.n	8008496 <_realloc_r+0x1e>
	...

080084d8 <_sbrk_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d06      	ldr	r5, [pc, #24]	; (80084f4 <_sbrk_r+0x1c>)
 80084dc:	2300      	movs	r3, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	f7f8 fd0a 	bl	8000efc <_sbrk>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d102      	bne.n	80084f2 <_sbrk_r+0x1a>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	b103      	cbz	r3, 80084f2 <_sbrk_r+0x1a>
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	2000025c 	.word	0x2000025c

080084f8 <__malloc_lock>:
 80084f8:	4801      	ldr	r0, [pc, #4]	; (8008500 <__malloc_lock+0x8>)
 80084fa:	f000 b811 	b.w	8008520 <__retarget_lock_acquire_recursive>
 80084fe:	bf00      	nop
 8008500:	20000260 	.word	0x20000260

08008504 <__malloc_unlock>:
 8008504:	4801      	ldr	r0, [pc, #4]	; (800850c <__malloc_unlock+0x8>)
 8008506:	f000 b80c 	b.w	8008522 <__retarget_lock_release_recursive>
 800850a:	bf00      	nop
 800850c:	20000260 	.word	0x20000260

08008510 <_malloc_usable_size_r>:
 8008510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008514:	1f18      	subs	r0, r3, #4
 8008516:	2b00      	cmp	r3, #0
 8008518:	bfbc      	itt	lt
 800851a:	580b      	ldrlt	r3, [r1, r0]
 800851c:	18c0      	addlt	r0, r0, r3
 800851e:	4770      	bx	lr

08008520 <__retarget_lock_acquire_recursive>:
 8008520:	4770      	bx	lr

08008522 <__retarget_lock_release_recursive>:
 8008522:	4770      	bx	lr

08008524 <_init>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr

08008530 <_fini>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr
